
build/CCLFirmWire.elf:     file format elf32-littlearm


Disassembly of section .text:

08000160 <Reset_Handler>:
 8000160:	b672      	cpsid	i
 8000162:	4822      	ldr	r0, [pc, #136]	; (80001ec <endfiniloop+0x4>)
 8000164:	f380 8809 	msr	PSP, r0
 8000168:	2002      	movs	r0, #2
 800016a:	f380 8814 	msr	CONTROL, r0
 800016e:	f3bf 8f6f 	isb	sy
 8000172:	f001 fa0d 	bl	8001590 <__core_init>
 8000176:	f002 ff03 	bl	8002f80 <__early_init>
 800017a:	481d      	ldr	r0, [pc, #116]	; (80001f0 <endfiniloop+0x8>)
 800017c:	491d      	ldr	r1, [pc, #116]	; (80001f4 <endfiniloop+0xc>)
 800017e:	4a1e      	ldr	r2, [pc, #120]	; (80001f8 <endfiniloop+0x10>)

08000180 <msloop>:
 8000180:	4291      	cmp	r1, r2
 8000182:	bf3c      	itt	cc
 8000184:	f841 0b04 	strcc.w	r0, [r1], #4
 8000188:	e7fa      	bcc.n	8000180 <msloop>
 800018a:	491c      	ldr	r1, [pc, #112]	; (80001fc <endfiniloop+0x14>)
 800018c:	4a17      	ldr	r2, [pc, #92]	; (80001ec <endfiniloop+0x4>)

0800018e <psloop>:
 800018e:	4291      	cmp	r1, r2
 8000190:	bf3c      	itt	cc
 8000192:	f841 0b04 	strcc.w	r0, [r1], #4
 8000196:	e7fa      	bcc.n	800018e <psloop>
 8000198:	4919      	ldr	r1, [pc, #100]	; (8000200 <endfiniloop+0x18>)
 800019a:	4a1a      	ldr	r2, [pc, #104]	; (8000204 <endfiniloop+0x1c>)
 800019c:	4b1a      	ldr	r3, [pc, #104]	; (8000208 <endfiniloop+0x20>)

0800019e <dloop>:
 800019e:	429a      	cmp	r2, r3
 80001a0:	bf3e      	ittt	cc
 80001a2:	f851 0b04 	ldrcc.w	r0, [r1], #4
 80001a6:	f842 0b04 	strcc.w	r0, [r2], #4
 80001aa:	e7f8      	bcc.n	800019e <dloop>
 80001ac:	2000      	movs	r0, #0
 80001ae:	4917      	ldr	r1, [pc, #92]	; (800020c <endfiniloop+0x24>)
 80001b0:	4a17      	ldr	r2, [pc, #92]	; (8000210 <endfiniloop+0x28>)

080001b2 <bloop>:
 80001b2:	4291      	cmp	r1, r2
 80001b4:	bf3c      	itt	cc
 80001b6:	f841 0b04 	strcc.w	r0, [r1], #4
 80001ba:	e7fa      	bcc.n	80001b2 <bloop>
 80001bc:	f001 f9b0 	bl	8001520 <__init_ram_areas>
 80001c0:	f001 f9de 	bl	8001580 <__late_init>
 80001c4:	4c13      	ldr	r4, [pc, #76]	; (8000214 <endfiniloop+0x2c>)
 80001c6:	4d14      	ldr	r5, [pc, #80]	; (8000218 <endfiniloop+0x30>)

080001c8 <initloop>:
 80001c8:	42ac      	cmp	r4, r5
 80001ca:	da03      	bge.n	80001d4 <endinitloop>
 80001cc:	f854 1b04 	ldr.w	r1, [r4], #4
 80001d0:	4788      	blx	r1
 80001d2:	e7f9      	b.n	80001c8 <initloop>

080001d4 <endinitloop>:
 80001d4:	f004 fdc4 	bl	8004d60 <main>
 80001d8:	4c10      	ldr	r4, [pc, #64]	; (800021c <endfiniloop+0x34>)
 80001da:	4d11      	ldr	r5, [pc, #68]	; (8000220 <endfiniloop+0x38>)

080001dc <finiloop>:
 80001dc:	42ac      	cmp	r4, r5
 80001de:	da03      	bge.n	80001e8 <endfiniloop>
 80001e0:	f854 1b04 	ldr.w	r1, [r4], #4
 80001e4:	4788      	blx	r1
 80001e6:	e7f9      	b.n	80001dc <finiloop>

080001e8 <endfiniloop>:
 80001e8:	f001 b9c2 	b.w	8001570 <__default_exit>
 80001ec:	20000800 	.word	0x20000800
 80001f0:	55555555 	.word	0x55555555
 80001f4:	20000000 	.word	0x20000000
 80001f8:	20000400 	.word	0x20000400
 80001fc:	20000400 	.word	0x20000400
 8000200:	080081c0 	.word	0x080081c0
 8000204:	20000800 	.word	0x20000800
 8000208:	200008dc 	.word	0x200008dc
 800020c:	200008e0 	.word	0x200008e0
 8000210:	2000187c 	.word	0x2000187c
 8000214:	08000160 	.word	0x08000160
 8000218:	08000160 	.word	0x08000160
 800021c:	08000160 	.word	0x08000160
 8000220:	08000160 	.word	0x08000160
	...

08000230 <_port_switch>:
 8000230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000234:	f8c1 d00c 	str.w	sp, [r1, #12]
 8000238:	68c3      	ldr	r3, [r0, #12]
 800023a:	469d      	mov	sp, r3
 800023c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000240 <_port_thread_start>:
 8000240:	2300      	movs	r3, #0
 8000242:	f383 8811 	msr	BASEPRI, r3
 8000246:	4628      	mov	r0, r5
 8000248:	47a0      	blx	r4
 800024a:	2000      	movs	r0, #0
 800024c:	f000 fef8 	bl	8001040 <chThdExit>

08000250 <_port_switch_from_isr>:
 8000250:	f000 fa2e 	bl	80006b0 <chSchDoReschedule>

08000254 <_port_exit_from_isr>:
 8000254:	df00      	svc	0
 8000256:	e7fe      	b.n	8000256 <_port_exit_from_isr+0x2>
	...

08000260 <strcmp>:
 8000260:	ea80 0c01 	eor.w	ip, r0, r1
 8000264:	f01c 0f03 	tst.w	ip, #3
 8000268:	d137      	bne.n	80002da <strcmp+0x7a>
 800026a:	f010 0c03 	ands.w	ip, r0, #3
 800026e:	f020 0003 	bic.w	r0, r0, #3
 8000272:	f021 0103 	bic.w	r1, r1, #3
 8000276:	f850 2b04 	ldr.w	r2, [r0], #4
 800027a:	bf08      	it	eq
 800027c:	f851 3b04 	ldreq.w	r3, [r1], #4
 8000280:	d00e      	beq.n	80002a0 <strcmp+0x40>
 8000282:	f08c 0c03 	eor.w	ip, ip, #3
 8000286:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800028a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800028e:	fa23 fc0c 	lsr.w	ip, r3, ip
 8000292:	f851 3b04 	ldr.w	r3, [r1], #4
 8000296:	ea42 020c 	orr.w	r2, r2, ip
 800029a:	ea43 030c 	orr.w	r3, r3, ip
 800029e:	bf00      	nop
 80002a0:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 80002a4:	429a      	cmp	r2, r3
 80002a6:	bf01      	itttt	eq
 80002a8:	ea2c 0c02 	biceq.w	ip, ip, r2
 80002ac:	f01c 3f80 	tsteq.w	ip, #2155905152	; 0x80808080
 80002b0:	f850 2b04 	ldreq.w	r2, [r0], #4
 80002b4:	f851 3b04 	ldreq.w	r3, [r1], #4
 80002b8:	d0f2      	beq.n	80002a0 <strcmp+0x40>
 80002ba:	ea4f 6002 	mov.w	r0, r2, lsl #24
 80002be:	ea4f 2212 	mov.w	r2, r2, lsr #8
 80002c2:	2801      	cmp	r0, #1
 80002c4:	bf28      	it	cs
 80002c6:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
 80002ca:	bf08      	it	eq
 80002cc:	0a1b      	lsreq	r3, r3, #8
 80002ce:	d0f4      	beq.n	80002ba <strcmp+0x5a>
 80002d0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 80002d4:	0e00      	lsrs	r0, r0, #24
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4770      	bx	lr
 80002da:	f010 0f03 	tst.w	r0, #3
 80002de:	d00a      	beq.n	80002f6 <strcmp+0x96>
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f4      	beq.n	80002da <strcmp+0x7a>
 80002f0:	eba2 0003 	sub.w	r0, r2, r3
 80002f4:	4770      	bx	lr
 80002f6:	f84d 5d04 	str.w	r5, [sp, #-4]!
 80002fa:	f850 2b04 	ldr.w	r2, [r0], #4
 80002fe:	f001 0503 	and.w	r5, r1, #3
 8000302:	f021 0103 	bic.w	r1, r1, #3
 8000306:	f851 3b04 	ldr.w	r3, [r1], #4
 800030a:	2d02      	cmp	r5, #2
 800030c:	d026      	beq.n	800035c <strcmp+0xfc>
 800030e:	d84d      	bhi.n	80003ac <strcmp+0x14c>
 8000310:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
 8000314:	ebb5 2f13 	cmp.w	r5, r3, lsr #8
 8000318:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 800031c:	ea2c 0c02 	bic.w	ip, ip, r2
 8000320:	d10d      	bne.n	800033e <strcmp+0xde>
 8000322:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
 8000326:	bf08      	it	eq
 8000328:	f851 3b04 	ldreq.w	r3, [r1], #4
 800032c:	d10a      	bne.n	8000344 <strcmp+0xe4>
 800032e:	ea85 0502 	eor.w	r5, r5, r2
 8000332:	ebb5 6f03 	cmp.w	r5, r3, lsl #24
 8000336:	d10c      	bne.n	8000352 <strcmp+0xf2>
 8000338:	f850 2b04 	ldr.w	r2, [r0], #4
 800033c:	e7e8      	b.n	8000310 <strcmp+0xb0>
 800033e:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8000342:	e05b      	b.n	80003fc <strcmp+0x19c>
 8000344:	f03c 4c7f 	bics.w	ip, ip, #4278190080	; 0xff000000
 8000348:	d154      	bne.n	80003f4 <strcmp+0x194>
 800034a:	780b      	ldrb	r3, [r1, #0]
 800034c:	ea4f 6512 	mov.w	r5, r2, lsr #24
 8000350:	e054      	b.n	80003fc <strcmp+0x19c>
 8000352:	ea4f 6512 	mov.w	r5, r2, lsr #24
 8000356:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 800035a:	e04f      	b.n	80003fc <strcmp+0x19c>
 800035c:	ea4f 4502 	mov.w	r5, r2, lsl #16
 8000360:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 8000364:	ea4f 4515 	mov.w	r5, r5, lsr #16
 8000368:	ea2c 0c02 	bic.w	ip, ip, r2
 800036c:	ebb5 4f13 	cmp.w	r5, r3, lsr #16
 8000370:	d118      	bne.n	80003a4 <strcmp+0x144>
 8000372:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
 8000376:	bf08      	it	eq
 8000378:	f851 3b04 	ldreq.w	r3, [r1], #4
 800037c:	d107      	bne.n	800038e <strcmp+0x12e>
 800037e:	ea85 0502 	eor.w	r5, r5, r2
 8000382:	ebb5 4f03 	cmp.w	r5, r3, lsl #16
 8000386:	d109      	bne.n	800039c <strcmp+0x13c>
 8000388:	f850 2b04 	ldr.w	r2, [r0], #4
 800038c:	e7e6      	b.n	800035c <strcmp+0xfc>
 800038e:	ea5f 4c0c 	movs.w	ip, ip, lsl #16
 8000392:	d12f      	bne.n	80003f4 <strcmp+0x194>
 8000394:	880b      	ldrh	r3, [r1, #0]
 8000396:	ea4f 4512 	mov.w	r5, r2, lsr #16
 800039a:	e02f      	b.n	80003fc <strcmp+0x19c>
 800039c:	ea4f 4303 	mov.w	r3, r3, lsl #16
 80003a0:	ea4f 4512 	mov.w	r5, r2, lsr #16
 80003a4:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80003a8:	e028      	b.n	80003fc <strcmp+0x19c>
 80003aa:	bf00      	nop
 80003ac:	f002 05ff 	and.w	r5, r2, #255	; 0xff
 80003b0:	ebb5 6f13 	cmp.w	r5, r3, lsr #24
 80003b4:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 80003b8:	ea2c 0c02 	bic.w	ip, ip, r2
 80003bc:	d10d      	bne.n	80003da <strcmp+0x17a>
 80003be:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
 80003c2:	bf08      	it	eq
 80003c4:	f851 3b04 	ldreq.w	r3, [r1], #4
 80003c8:	d10a      	bne.n	80003e0 <strcmp+0x180>
 80003ca:	ea85 0502 	eor.w	r5, r5, r2
 80003ce:	ebb5 2f03 	cmp.w	r5, r3, lsl #8
 80003d2:	d10a      	bne.n	80003ea <strcmp+0x18a>
 80003d4:	f850 2b04 	ldr.w	r2, [r0], #4
 80003d8:	e7e8      	b.n	80003ac <strcmp+0x14c>
 80003da:	ea4f 6313 	mov.w	r3, r3, lsr #24
 80003de:	e00d      	b.n	80003fc <strcmp+0x19c>
 80003e0:	f012 0fff 	tst.w	r2, #255	; 0xff
 80003e4:	d006      	beq.n	80003f4 <strcmp+0x194>
 80003e6:	f851 3b04 	ldr.w	r3, [r1], #4
 80003ea:	ea4f 2512 	mov.w	r5, r2, lsr #8
 80003ee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80003f2:	e003      	b.n	80003fc <strcmp+0x19c>
 80003f4:	f04f 0000 	mov.w	r0, #0
 80003f8:	bc20      	pop	{r5}
 80003fa:	4770      	bx	lr
 80003fc:	f005 02ff 	and.w	r2, r5, #255	; 0xff
 8000400:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8000404:	2801      	cmp	r0, #1
 8000406:	bf28      	it	cs
 8000408:	4290      	cmpcs	r0, r2
 800040a:	bf04      	itt	eq
 800040c:	0a2d      	lsreq	r5, r5, #8
 800040e:	0a1b      	lsreq	r3, r3, #8
 8000410:	d0f4      	beq.n	80003fc <strcmp+0x19c>
 8000412:	eba2 0000 	sub.w	r0, r2, r0
 8000416:	bc20      	pop	{r5}
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	0000      	movs	r0, r0
	...

08000420 <SVC_Handler>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8000420:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 8000424:	3320      	adds	r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8000426:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800042a:	2300      	movs	r3, #0
 800042c:	f383 8811 	msr	BASEPRI, r3
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop
	...

08000440 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 8000440:	b410      	push	{r4}
 8000442:	2320      	movs	r3, #32
 8000444:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8000448:	4c09      	ldr	r4, [pc, #36]	; (8000470 <chCoreAlloc+0x30>)
 800044a:	4b0a      	ldr	r3, [pc, #40]	; (8000474 <chCoreAlloc+0x34>)
 800044c:	6822      	ldr	r2, [r4, #0]
 800044e:	6819      	ldr	r1, [r3, #0]
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
 8000450:	1dc3      	adds	r3, r0, #7
 8000452:	f023 0307 	bic.w	r3, r3, #7
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8000456:	1a89      	subs	r1, r1, r2
 8000458:	428b      	cmp	r3, r1
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 800045a:	bf9d      	ittte	ls
 800045c:	189b      	addls	r3, r3, r2
 800045e:	6023      	strls	r3, [r4, #0]

  return p;
 8000460:	4610      	movls	r0, r2

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
  /*lint -restore*/
    return NULL;
 8000462:	2000      	movhi	r0, #0
 8000464:	2300      	movs	r3, #0
 8000466:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocI(size);
  chSysUnlock();

  return p;
}
 800046a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800046e:	4770      	bx	lr
 8000470:	200013b8 	.word	0x200013b8
 8000474:	200013bc 	.word	0x200013bc
	...

08000480 <wakeup.lto_priv.106>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 8000480:	b410      	push	{r4}
 8000482:	2320      	movs	r3, #32
 8000484:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 8000488:	7f03      	ldrb	r3, [r0, #28]
 800048a:	2b07      	cmp	r3, #7
 800048c:	d80e      	bhi.n	80004ac <wakeup.lto_priv.106+0x2c>
 800048e:	e8df f003 	tbb	[pc, r3]
 8000492:	0d27      	.short	0x0d27
 8000494:	0408230d 	.word	0x0408230d
 8000498:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 800049a:	6a02      	ldr	r2, [r0, #32]
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 800049c:	6893      	ldr	r3, [r2, #8]
 800049e:	3301      	adds	r3, #1
 80004a0:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 80004a2:	e890 000c 	ldmia.w	r0, {r2, r3}
 80004a6:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 80004a8:	6802      	ldr	r2, [r0, #0]
 80004aa:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 80004ac:	f04f 34ff 	mov.w	r4, #4294967295
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80004b0:	2200      	movs	r2, #0
 80004b2:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 80004b4:	4b0d      	ldr	r3, [pc, #52]	; (80004ec <wakeup.lto_priv.106+0x6c>)
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 80004b6:	6204      	str	r4, [r0, #32]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80004b8:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 80004ba:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 80004bc:	689a      	ldr	r2, [r3, #8]
 80004be:	428a      	cmp	r2, r1
 80004c0:	d2fb      	bcs.n	80004ba <wakeup.lto_priv.106+0x3a>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80004c2:	685a      	ldr	r2, [r3, #4]
 80004c4:	2100      	movs	r1, #0
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80004c6:	6003      	str	r3, [r0, #0]
  tp->p_prev = cp->p_prev;
 80004c8:	6042      	str	r2, [r0, #4]
  tp->p_prev->p_next = tp;
 80004ca:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 80004cc:	6058      	str	r0, [r3, #4]
 80004ce:	f381 8811 	msr	BASEPRI, r1
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 80004d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80004d6:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
 80004d8:	6a03      	ldr	r3, [r0, #32]
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	e7e5      	b.n	80004ac <wakeup.lto_priv.106+0x2c>
 80004e0:	2300      	movs	r3, #0
 80004e2:	f383 8811 	msr	BASEPRI, r3
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 80004e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80004ea:	4770      	bx	lr
 80004ec:	200013f8 	.word	0x200013f8

080004f0 <_idle_thread.lto_priv.93>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 80004f0:	e7fe      	b.n	80004f0 <_idle_thread.lto_priv.93>
 80004f2:	bf00      	nop
	...

08000500 <chSchDoRescheduleAhead>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 8000500:	4a0d      	ldr	r2, [pc, #52]	; (8000538 <chSchDoRescheduleAhead+0x38>)
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 8000502:	b4f0      	push	{r4, r5, r6, r7}
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8000504:	6810      	ldr	r0, [r2, #0]
  thread_t *otp, *cp;

  otp = currp;
 8000506:	6994      	ldr	r4, [r2, #24]

  tqp->p_next = tp->p_next;
 8000508:	6805      	ldr	r5, [r0, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800050a:	2701      	movs	r7, #1

  otp->p_state = CH_STATE_READY;
 800050c:	2600      	movs	r6, #0
 800050e:	68a1      	ldr	r1, [r4, #8]
 8000510:	462b      	mov	r3, r5
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000512:	606a      	str	r2, [r5, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8000514:	6015      	str	r5, [r2, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8000516:	7707      	strb	r7, [r0, #28]
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8000518:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 800051a:	7726      	strb	r6, [r4, #28]
 800051c:	e000      	b.n	8000520 <chSchDoRescheduleAhead+0x20>
 800051e:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 8000520:	689a      	ldr	r2, [r3, #8]
 8000522:	428a      	cmp	r2, r1
 8000524:	d8fb      	bhi.n	800051e <chSchDoRescheduleAhead+0x1e>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 8000526:	685a      	ldr	r2, [r3, #4]
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 8000528:	4621      	mov	r1, r4
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 800052a:	6023      	str	r3, [r4, #0]
  otp->p_prev = cp->p_prev;
 800052c:	6062      	str	r2, [r4, #4]
  otp->p_prev->p_next = otp;
 800052e:	6014      	str	r4, [r2, #0]
  cp->p_prev = otp;
 8000530:	605c      	str	r4, [r3, #4]

  chSysSwitch(currp, otp);
}
 8000532:	bcf0      	pop	{r4, r5, r6, r7}
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 8000534:	f7ff be7c 	b.w	8000230 <_port_switch>
 8000538:	200013f8 	.word	0x200013f8
 800053c:	00000000 	.word	0x00000000

08000540 <_port_irq_epilogue>:
 8000540:	2320      	movs	r3, #32
 8000542:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8000546:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <_port_irq_epilogue+0x44>)
 8000548:	685b      	ldr	r3, [r3, #4]
 800054a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800054e:	d102      	bne.n	8000556 <_port_irq_epilogue+0x16>
 8000550:	f383 8811 	msr	BASEPRI, r3
 8000554:	4770      	bx	lr
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8000556:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 800055a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800055e:	f843 2c04 	str.w	r2, [r3, #-4]
    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 8000562:	f1a3 0220 	sub.w	r2, r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8000566:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 800056a:	4a07      	ldr	r2, [pc, #28]	; (8000588 <_port_irq_epilogue+0x48>)
 800056c:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->p_prio;
 800056e:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8000570:	6889      	ldr	r1, [r1, #8]
 8000572:	6892      	ldr	r2, [r2, #8]
 8000574:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8000576:	bf8c      	ite	hi
 8000578:	4a04      	ldrhi	r2, [pc, #16]	; (800058c <_port_irq_epilogue+0x4c>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 800057a:	4a05      	ldrls	r2, [pc, #20]	; (8000590 <_port_irq_epilogue+0x50>)
 800057c:	f843 2c08 	str.w	r2, [r3, #-8]
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	e000ed00 	.word	0xe000ed00
 8000588:	200013f8 	.word	0x200013f8
 800058c:	08000251 	.word	0x08000251
 8000590:	08000254 	.word	0x08000254
	...

080005a0 <chPoolAlloc>:
 * @return              The pointer to the allocated object.
 * @retval NULL         if pool is empty.
 *
 * @api
 */
void *chPoolAlloc(memory_pool_t *mp) {
 80005a0:	b508      	push	{r3, lr}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80005a2:	2220      	movs	r2, #32
 80005a4:	4603      	mov	r3, r0
 80005a6:	f382 8811 	msr	BASEPRI, r2
  void *objp;

  chDbgCheckClassI();
  chDbgCheck(mp != NULL);

  objp = mp->mp_next;
 80005aa:	6800      	ldr	r0, [r0, #0]
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (objp != NULL) {
 80005ac:	b128      	cbz	r0, 80005ba <chPoolAlloc+0x1a>
    mp->mp_next = mp->mp_next->ph_next;
 80005ae:	6802      	ldr	r2, [r0, #0]
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	2300      	movs	r3, #0
 80005b4:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  objp = chPoolAllocI(mp);
  chSysUnlock();

  return objp;
}
 80005b8:	bd08      	pop	{r3, pc}
  objp = mp->mp_next;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (objp != NULL) {
    mp->mp_next = mp->mp_next->ph_next;
  }
  else if (mp->mp_provider != NULL) {
 80005ba:	689a      	ldr	r2, [r3, #8]
 80005bc:	2a00      	cmp	r2, #0
 80005be:	d0f8      	beq.n	80005b2 <chPoolAlloc+0x12>
    objp = mp->mp_provider(mp->mp_object_size);
 80005c0:	6858      	ldr	r0, [r3, #4]
 80005c2:	4790      	blx	r2
 80005c4:	2300      	movs	r3, #0
 80005c6:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  objp = chPoolAllocI(mp);
  chSysUnlock();

  return objp;
}
 80005ca:	bd08      	pop	{r3, pc}
 80005cc:	0000      	movs	r0, r0
	...

080005d0 <chEvtUnregister>:
 80005d0:	2320      	movs	r3, #32
 80005d2:	f383 8811 	msr	BASEPRI, r3
  event_listener_t *p;

  chDbgCheck((esp != NULL) && (elp != NULL));

  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  p = (event_listener_t *)esp;
 80005d6:	4602      	mov	r2, r0
 80005d8:	e002      	b.n	80005e0 <chEvtUnregister+0x10>
  /*lint -restore*/
  chSysLock();
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (p->el_next != (event_listener_t *)esp) {
  /*lint -restore*/
    if (p->el_next == elp) {
 80005da:	428b      	cmp	r3, r1
 80005dc:	d007      	beq.n	80005ee <chEvtUnregister+0x1e>
 80005de:	461a      	mov	r2, r3
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  p = (event_listener_t *)esp;
  /*lint -restore*/
  chSysLock();
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (p->el_next != (event_listener_t *)esp) {
 80005e0:	6813      	ldr	r3, [r2, #0]
 80005e2:	4283      	cmp	r3, r0
 80005e4:	d1f9      	bne.n	80005da <chEvtUnregister+0xa>
 80005e6:	2300      	movs	r3, #0
 80005e8:	f383 8811 	msr	BASEPRI, r3
 80005ec:	4770      	bx	lr
  /*lint -restore*/
    if (p->el_next == elp) {
      p->el_next = elp->el_next;
 80005ee:	680b      	ldr	r3, [r1, #0]
 80005f0:	6013      	str	r3, [r2, #0]
 80005f2:	2300      	movs	r3, #0
 80005f4:	f383 8811 	msr	BASEPRI, r3
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	0000      	movs	r0, r0
	...

08000600 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8000600:	4b0e      	ldr	r3, [pc, #56]	; (800063c <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000602:	490f      	ldr	r1, [pc, #60]	; (8000640 <chTMStopMeasurementX+0x40>)
 8000604:	685a      	ldr	r2, [r3, #4]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8000606:	6883      	ldr	r3, [r0, #8]
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000608:	6f09      	ldr	r1, [r1, #112]	; 0x70
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 800060a:	1ad3      	subs	r3, r2, r3

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800060c:	68c2      	ldr	r2, [r0, #12]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 800060e:	b430      	push	{r4, r5}
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8000610:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8000614:	1a5b      	subs	r3, r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8000616:	3201      	adds	r2, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
 8000618:	6841      	ldr	r1, [r0, #4]
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 800061a:	18e4      	adds	r4, r4, r3

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800061c:	60c2      	str	r2, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
 800061e:	6802      	ldr	r2, [r0, #0]
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8000620:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 8000624:	428b      	cmp	r3, r1
    tmp->worst = tmp->last;
 8000626:	bf88      	it	hi
 8000628:	6043      	strhi	r3, [r0, #4]
  }
  if (tmp->last < tmp->best) {
 800062a:	4293      	cmp	r3, r2
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 800062c:	e9c0 4504 	strd	r4, r5, [r0, #16]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 8000630:	bc30      	pop	{r4, r5}
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8000632:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
    tmp->best = tmp->last;
 8000634:	bf38      	it	cc
 8000636:	6003      	strcc	r3, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	e0001000 	.word	0xe0001000
 8000640:	200013f8 	.word	0x200013f8
	...

08000650 <chThdYield>:
 * @details Yields the CPU control to the next thread in the ready list with
 *          equal priority, if any.
 *
 * @api
 */
void chThdYield(void) {
 8000650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000652:	2320      	movs	r3, #32
 8000654:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.r_queue) >= currp->p_prio;
 8000658:	4a12      	ldr	r2, [pc, #72]	; (80006a4 <chThdYield+0x54>)
 800065a:	6810      	ldr	r0, [r2, #0]
 800065c:	6994      	ldr	r4, [r2, #24]
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();

  if (chSchCanYieldS()) {
 800065e:	6883      	ldr	r3, [r0, #8]
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.r_queue) >= currp->p_prio;
 8000660:	68a1      	ldr	r1, [r4, #8]
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();

  if (chSchCanYieldS()) {
 8000662:	428b      	cmp	r3, r1
 8000664:	d203      	bcs.n	800066e <chThdYield+0x1e>
 8000666:	2300      	movs	r3, #0
 8000668:	f383 8811 	msr	BASEPRI, r3
 800066c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 800066e:	6805      	ldr	r5, [r0, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8000670:	2701      	movs	r7, #1
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000672:	2600      	movs	r6, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000674:	606a      	str	r2, [r5, #4]
 8000676:	462b      	mov	r3, r5
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8000678:	7707      	strb	r7, [r0, #28]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 800067a:	6015      	str	r5, [r2, #0]
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 800067c:	6190      	str	r0, [r2, #24]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800067e:	7726      	strb	r6, [r4, #28]
 8000680:	e000      	b.n	8000684 <chThdYield+0x34>
 8000682:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
 8000684:	689a      	ldr	r2, [r3, #8]
 8000686:	4291      	cmp	r1, r2
 8000688:	d9fb      	bls.n	8000682 <chThdYield+0x32>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800068a:	685a      	ldr	r2, [r3, #4]
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
 800068c:	4621      	mov	r1, r4
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 800068e:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 8000690:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 8000692:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8000694:	605c      	str	r4, [r3, #4]
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
 8000696:	f7ff fdcb 	bl	8000230 <_port_switch>
 800069a:	2300      	movs	r3, #0
 800069c:	f383 8811 	msr	BASEPRI, r3
 80006a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006a2:	bf00      	nop
 80006a4:	200013f8 	.word	0x200013f8
	...

080006b0 <chSchDoReschedule>:
    chSchDoRescheduleAhead();
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
 80006b0:	f7ff bf26 	b.w	8000500 <chSchDoRescheduleAhead>
	...

080006c0 <chSchRescheduleS>:
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.r_queue) > currp->p_prio;
 80006c0:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <chSchRescheduleS+0x14>)
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	699b      	ldr	r3, [r3, #24]
 */
void chSchRescheduleS(void) {

  chDbgCheckClassS();

  if (chSchIsRescRequiredI()) {
 80006c6:	6892      	ldr	r2, [r2, #8]
 80006c8:	689b      	ldr	r3, [r3, #8]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d800      	bhi.n	80006d0 <chSchRescheduleS+0x10>
 80006ce:	4770      	bx	lr
    chSchDoRescheduleAhead();
 80006d0:	f7ff bf16 	b.w	8000500 <chSchDoRescheduleAhead>
 80006d4:	200013f8 	.word	0x200013f8
	...

080006e0 <chThdSetPriority>:
 * @param[in] newprio   the new priority level of the running thread
 * @return              The old priority level.
 *
 * @api
 */
tprio_t chThdSetPriority(tprio_t newprio) {
 80006e0:	b510      	push	{r4, lr}
 80006e2:	2320      	movs	r3, #32
 80006e4:	f383 8811 	msr	BASEPRI, r3

  chDbgCheck(newprio <= HIGHPRIO);

  chSysLock();
#if CH_CFG_USE_MUTEXES == TRUE
  oldprio = currp->p_realprio;
 80006e8:	4b08      	ldr	r3, [pc, #32]	; (800070c <chThdSetPriority+0x2c>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if ((currp->p_prio == currp->p_realprio) || (newprio > currp->p_prio)) {
 80006ee:	6899      	ldr	r1, [r3, #8]
 80006f0:	428c      	cmp	r4, r1
 80006f2:	d001      	beq.n	80006f8 <chThdSetPriority+0x18>
 80006f4:	4281      	cmp	r1, r0
 80006f6:	d200      	bcs.n	80006fa <chThdSetPriority+0x1a>
    currp->p_prio = newprio;
 80006f8:	6098      	str	r0, [r3, #8]
  }
  currp->p_realprio = newprio;
 80006fa:	63d8      	str	r0, [r3, #60]	; 0x3c
#else
  oldprio = currp->p_prio;
  currp->p_prio = newprio;
#endif
  chSchRescheduleS();
 80006fc:	f7ff ffe0 	bl	80006c0 <chSchRescheduleS>
 8000700:	2300      	movs	r3, #0
 8000702:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return oldprio;
}
 8000706:	4620      	mov	r0, r4
 8000708:	bd10      	pop	{r4, pc}
 800070a:	bf00      	nop
 800070c:	200013f8 	.word	0x200013f8

08000710 <chSchWakeupS>:

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8000710:	4b14      	ldr	r3, [pc, #80]	; (8000764 <chSchWakeupS+0x54>)
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8000712:	b470      	push	{r4, r5, r6}

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8000714:	699e      	ldr	r6, [r3, #24]
 8000716:	6884      	ldr	r4, [r0, #8]
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8000718:	4605      	mov	r5, r0
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 800071a:	6201      	str	r1, [r0, #32]

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 800071c:	68b0      	ldr	r0, [r6, #8]
 800071e:	4284      	cmp	r4, r0
 8000720:	d80c      	bhi.n	800073c <chSchWakeupS+0x2c>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000722:	2200      	movs	r2, #0
 8000724:	772a      	strb	r2, [r5, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8000726:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8000728:	689a      	ldr	r2, [r3, #8]
 800072a:	4294      	cmp	r4, r2
 800072c:	d9fb      	bls.n	8000726 <chSchWakeupS+0x16>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800072e:	685a      	ldr	r2, [r3, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8000730:	602b      	str	r3, [r5, #0]
  tp->p_prev = cp->p_prev;
 8000732:	606a      	str	r2, [r5, #4]
  tp->p_prev->p_next = tp;
 8000734:	6015      	str	r5, [r2, #0]
  cp->p_prev = tp;
 8000736:	605d      	str	r5, [r3, #4]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 8000738:	bc70      	pop	{r4, r5, r6}
 800073a:	4770      	bx	lr
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
  cp = (thread_t *)&ch.rlist.r_queue;
 800073c:	461a      	mov	r2, r3
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800073e:	2100      	movs	r1, #0
 8000740:	7731      	strb	r1, [r6, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8000742:	6812      	ldr	r2, [r2, #0]
  } while (cp->p_prio >= tp->p_prio);
 8000744:	6891      	ldr	r1, [r2, #8]
 8000746:	4288      	cmp	r0, r1
 8000748:	d9fb      	bls.n	8000742 <chSchWakeupS+0x32>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800074a:	6850      	ldr	r0, [r2, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 800074c:	2401      	movs	r4, #1
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800074e:	6070      	str	r0, [r6, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8000750:	6032      	str	r2, [r6, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8000752:	6006      	str	r6, [r0, #0]
  cp->p_prev = tp;
 8000754:	6056      	str	r6, [r2, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 8000756:	772c      	strb	r4, [r5, #28]
    chSysSwitch(ntp, otp);
 8000758:	4631      	mov	r1, r6
 800075a:	4628      	mov	r0, r5
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
    setcurrp(ntp);
 800075c:	619d      	str	r5, [r3, #24]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 800075e:	bc70      	pop	{r4, r5, r6}
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 8000760:	f7ff bd66 	b.w	8000230 <_port_switch>
 8000764:	200013f8 	.word	0x200013f8
	...

08000770 <chSemSignal>:
 *
 * @param[in] sp        pointer to a @p semaphore_t structure
 *
 * @api
 */
void chSemSignal(semaphore_t *sp) {
 8000770:	b508      	push	{r3, lr}
 8000772:	2320      	movs	r3, #32
 8000774:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sp->s_cnt <= (cnt_t)0) {
 8000778:	6883      	ldr	r3, [r0, #8]
 800077a:	3301      	adds	r3, #1
 800077c:	2b00      	cmp	r3, #0
 800077e:	6083      	str	r3, [r0, #8]
 8000780:	dd03      	ble.n	800078a <chSemSignal+0x1a>
 8000782:	2300      	movs	r3, #0
 8000784:	f383 8811 	msr	BASEPRI, r3
 8000788:	bd08      	pop	{r3, pc}
 800078a:	4603      	mov	r3, r0
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 800078c:	6800      	ldr	r0, [r0, #0]
    chSchWakeupS(queue_fifo_remove(&sp->s_queue), MSG_OK);
 800078e:	2100      	movs	r1, #0

  tqp->p_next = tp->p_next;
 8000790:	6802      	ldr	r2, [r0, #0]
 8000792:	601a      	str	r2, [r3, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000794:	6053      	str	r3, [r2, #4]
 8000796:	f7ff ffbb 	bl	8000710 <chSchWakeupS>
 800079a:	2300      	movs	r3, #0
 800079c:	f383 8811 	msr	BASEPRI, r3
 80007a0:	bd08      	pop	{r3, pc}
 80007a2:	bf00      	nop
	...

080007b0 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 80007b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007b4:	4699      	mov	r9, r3
 80007b6:	4604      	mov	r4, r0
 80007b8:	2320      	movs	r3, #32
 80007ba:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80007be:	4e19      	ldr	r6, [pc, #100]	; (8000824 <chThdCreateStatic+0x74>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80007c0:	3924      	subs	r1, #36	; 0x24
 80007c2:	1847      	adds	r7, r0, r1
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80007c4:	6973      	ldr	r3, [r6, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80007c6:	f8df a060 	ldr.w	sl, [pc, #96]	; 8000828 <chThdCreateStatic+0x78>
 80007ca:	60c7      	str	r7, [r0, #12]
 80007cc:	f840 9001 	str.w	r9, [r0, r1]
 80007d0:	9908      	ldr	r1, [sp, #32]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 80007d2:	2500      	movs	r5, #0
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 80007d4:	f100 0928 	add.w	r9, r0, #40	; 0x28
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80007d8:	f04f 0c01 	mov.w	ip, #1
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 80007dc:	f100 0e24 	add.w	lr, r0, #36	; 0x24
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80007e0:	f04f 0802 	mov.w	r8, #2

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80007e4:	6079      	str	r1, [r7, #4]
 80007e6:	f8c7 a020 	str.w	sl, [r7, #32]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 80007ea:	4629      	mov	r1, r5
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 80007ec:	6082      	str	r2, [r0, #8]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80007ee:	6106      	str	r6, [r0, #16]
 80007f0:	6143      	str	r3, [r0, #20]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 80007f2:	63c2      	str	r2, [r0, #60]	; 0x3c
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80007f4:	f880 801c 	strb.w	r8, [r0, #28]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80007f8:	f880 c01e 	strb.w	ip, [r0, #30]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 80007fc:	7745      	strb	r5, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 80007fe:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8000800:	6345      	str	r5, [r0, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8000802:	6185      	str	r5, [r0, #24]
  REG_INSERT(tp);
 8000804:	6118      	str	r0, [r3, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8000806:	f8c0 e024 	str.w	lr, [r0, #36]	; 0x24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800080a:	f8c0 9028 	str.w	r9, [r0, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 800080e:	f8c0 902c 	str.w	r9, [r0, #44]	; 0x2c
 8000812:	6170      	str	r0, [r6, #20]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 8000814:	f7ff ff7c 	bl	8000710 <chSchWakeupS>
 8000818:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  return tp;
}
 800081c:	4620      	mov	r0, r4
 800081e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000822:	bf00      	nop
 8000824:	200013f8 	.word	0x200013f8
 8000828:	08000241 	.word	0x08000241
 800082c:	00000000 	.word	0x00000000

08000830 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 8000830:	4b07      	ldr	r3, [pc, #28]	; (8000850 <chSchGoSleepS+0x20>)
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8000832:	b430      	push	{r4, r5}
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8000834:	681a      	ldr	r2, [r3, #0]
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 8000836:	6999      	ldr	r1, [r3, #24]

  tqp->p_next = tp->p_next;
 8000838:	6814      	ldr	r4, [r2, #0]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800083a:	2501      	movs	r5, #1
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
  otp->p_state = newstate;
 800083c:	7708      	strb	r0, [r1, #28]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800083e:	6063      	str	r3, [r4, #4]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8000840:	7715      	strb	r5, [r2, #28]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8000842:	601c      	str	r4, [r3, #0]
  chSysSwitch(currp, otp);
 8000844:	4610      	mov	r0, r2
}
 8000846:	bc30      	pop	{r4, r5}
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8000848:	619a      	str	r2, [r3, #24]
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 800084a:	f7ff bcf1 	b.w	8000230 <_port_switch>
 800084e:	bf00      	nop
 8000850:	200013f8 	.word	0x200013f8
	...

08000860 <chMsgWait>:
 *
 * @return              A reference to the thread carrying the message.
 *
 * @api
 */
thread_t *chMsgWait(void) {
 8000860:	b510      	push	{r4, lr}
 8000862:	2320      	movs	r3, #32
 8000864:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp)) {
 8000868:	4c0b      	ldr	r4, [pc, #44]	; (8000898 <chMsgWait+0x38>)
 800086a:	69a2      	ldr	r2, [r4, #24]
 */
static inline bool chMsgIsPendingI(thread_t *tp) {

  chDbgCheckClassI();

  return (bool)(tp->p_msgqueue.p_next != (thread_t *)&tp->p_msgqueue);
 800086c:	4613      	mov	r3, r2
 800086e:	f853 0f28 	ldr.w	r0, [r3, #40]!
 8000872:	4298      	cmp	r0, r3
 8000874:	d008      	beq.n	8000888 <chMsgWait+0x28>
 8000876:	6801      	ldr	r1, [r0, #0]
    chSchGoSleepS(CH_STATE_WTMSG);
  }
  tp = queue_fifo_remove(&currp->p_msgqueue);
  tp->p_state = CH_STATE_SNDMSG;
 8000878:	240d      	movs	r4, #13
 800087a:	6291      	str	r1, [r2, #40]	; 0x28
  tqp->p_next->p_prev = (thread_t *)tqp;
 800087c:	604b      	str	r3, [r1, #4]
 800087e:	2200      	movs	r2, #0
 8000880:	7704      	strb	r4, [r0, #28]
 8000882:	f382 8811 	msr	BASEPRI, r2
  chSysUnlock();

  return tp;
}
 8000886:	bd10      	pop	{r4, pc}
thread_t *chMsgWait(void) {
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp)) {
    chSchGoSleepS(CH_STATE_WTMSG);
 8000888:	200e      	movs	r0, #14
 800088a:	f7ff ffd1 	bl	8000830 <chSchGoSleepS>
 800088e:	69a2      	ldr	r2, [r4, #24]
 8000890:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8000892:	f102 0328 	add.w	r3, r2, #40	; 0x28
 8000896:	e7ee      	b.n	8000876 <chMsgWait+0x16>
 8000898:	200013f8 	.word	0x200013f8
 800089c:	00000000 	.word	0x00000000

080008a0 <chSemWait>:
 80008a0:	2320      	movs	r3, #32
 80008a2:	f383 8811 	msr	BASEPRI, r3
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
 80008a6:	6883      	ldr	r3, [r0, #8]
 80008a8:	3b01      	subs	r3, #1
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	6083      	str	r3, [r0, #8]
 80008ae:	db04      	blt.n	80008ba <chSemWait+0x1a>
    chSchGoSleepS(CH_STATE_WTSEM);

    return currp->p_u.rdymsg;
  }

  return MSG_OK;
 80008b0:	2000      	movs	r0, #0
 80008b2:	2300      	movs	r3, #0
 80008b4:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  msg = chSemWaitS(sp);
  chSysUnlock();

  return msg;
}
 80008b8:	4770      	bx	lr
 80008ba:	4603      	mov	r3, r0
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemWait(semaphore_t *sp) {
 80008bc:	b510      	push	{r4, lr}
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
    currp->p_u.wtsemp = sp;
 80008be:	4c08      	ldr	r4, [pc, #32]	; (80008e0 <chSemWait+0x40>)
    sem_insert(currp, &sp->s_queue);
    chSchGoSleepS(CH_STATE_WTSEM);
 80008c0:	2005      	movs	r0, #5
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
    currp->p_u.wtsemp = sp;
 80008c2:	69a2      	ldr	r2, [r4, #24]
 80008c4:	6213      	str	r3, [r2, #32]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 80008c6:	6859      	ldr	r1, [r3, #4]
  cp->p_prev = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
 80008c8:	6013      	str	r3, [r2, #0]
  tp->p_prev = tqp->p_prev;
 80008ca:	6051      	str	r1, [r2, #4]
  tp->p_prev->p_next = tp;
 80008cc:	600a      	str	r2, [r1, #0]
  tqp->p_prev = tp;
 80008ce:	605a      	str	r2, [r3, #4]
    sem_insert(currp, &sp->s_queue);
    chSchGoSleepS(CH_STATE_WTSEM);
 80008d0:	f7ff ffae 	bl	8000830 <chSchGoSleepS>

    return currp->p_u.rdymsg;
 80008d4:	69a3      	ldr	r3, [r4, #24]
 80008d6:	6a18      	ldr	r0, [r3, #32]
 80008d8:	2300      	movs	r3, #0
 80008da:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  msg = chSemWaitS(sp);
  chSysUnlock();

  return msg;
}
 80008de:	bd10      	pop	{r4, pc}
 80008e0:	200013f8 	.word	0x200013f8
	...

080008f0 <chSchReadyI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 80008f0:	b410      	push	{r4}
 80008f2:	4604      	mov	r4, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80008f4:	2200      	movs	r2, #0
 80008f6:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 80008f8:	4b07      	ldr	r3, [pc, #28]	; (8000918 <chSchReadyI+0x28>)
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80008fa:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 80008fc:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 80008fe:	689a      	ldr	r2, [r3, #8]
 8000900:	428a      	cmp	r2, r1
 8000902:	d2fb      	bcs.n	80008fc <chSchReadyI+0xc>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8000904:	685a      	ldr	r2, [r3, #4]
  tp->p_prev->p_next = tp;
  cp->p_prev = tp;

  return tp;
}
 8000906:	4620      	mov	r0, r4
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8000908:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 800090a:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 800090c:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800090e:	605c      	str	r4, [r3, #4]

  return tp;
}
 8000910:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	200013f8 	.word	0x200013f8
 800091c:	00000000 	.word	0x00000000

08000920 <chIQPutI>:
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 8000920:	6942      	ldr	r2, [r0, #20]
 * @retval Q_FULL       if the queue is full and the operation cannot be
 *                      completed.
 *
 * @iclass
 */
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {
 8000922:	4603      	mov	r3, r0
 8000924:	6980      	ldr	r0, [r0, #24]
 8000926:	b510      	push	{r4, lr}
 8000928:	4282      	cmp	r2, r0
 800092a:	d01d      	beq.n	8000968 <chIQPutI+0x48>

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 800092c:	6898      	ldr	r0, [r3, #8]
  *iqp->q_wrptr++ = b;
 800092e:	1c54      	adds	r4, r2, #1

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 8000930:	3001      	adds	r0, #1
  *iqp->q_wrptr++ = b;
 8000932:	615c      	str	r4, [r3, #20]

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 8000934:	6098      	str	r0, [r3, #8]
  *iqp->q_wrptr++ = b;
 8000936:	7011      	strb	r1, [r2, #0]
  if (iqp->q_wrptr >= iqp->q_top) {
 8000938:	6959      	ldr	r1, [r3, #20]
 800093a:	691a      	ldr	r2, [r3, #16]
 800093c:	4291      	cmp	r1, r2
 800093e:	d20c      	bcs.n	800095a <chIQPutI+0x3a>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8000940:	681a      	ldr	r2, [r3, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8000942:	4293      	cmp	r3, r2
 8000944:	d00e      	beq.n	8000964 <chIQPutI+0x44>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8000946:	6811      	ldr	r1, [r2, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8000948:	2400      	movs	r4, #0
 800094a:	6019      	str	r1, [r3, #0]
  (void) chSchReadyI(tp);
 800094c:	4610      	mov	r0, r2
  tqp->p_next->p_prev = (thread_t *)tqp;
 800094e:	604b      	str	r3, [r1, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8000950:	6214      	str	r4, [r2, #32]
  (void) chSchReadyI(tp);
 8000952:	f7ff ffcd 	bl	80008f0 <chSchReadyI>
    iqp->q_wrptr = iqp->q_buffer;
  }

  chThdDequeueNextI(&iqp->q_waiting, Q_OK);

  return Q_OK;
 8000956:	4620      	mov	r0, r4
 8000958:	bd10      	pop	{r4, pc}
  }

  iqp->q_counter++;
  *iqp->q_wrptr++ = b;
  if (iqp->q_wrptr >= iqp->q_top) {
    iqp->q_wrptr = iqp->q_buffer;
 800095a:	68da      	ldr	r2, [r3, #12]
 800095c:	615a      	str	r2, [r3, #20]
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	4293      	cmp	r3, r2
 8000962:	d1f0      	bne.n	8000946 <chIQPutI+0x26>
  }

  chThdDequeueNextI(&iqp->q_waiting, Q_OK);

  return Q_OK;
 8000964:	2000      	movs	r0, #0
 8000966:	bd10      	pop	{r4, pc}
 8000968:	6898      	ldr	r0, [r3, #8]
 800096a:	2800      	cmp	r0, #0
 800096c:	d0de      	beq.n	800092c <chIQPutI+0xc>
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {

  chDbgCheckClassI();

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
 800096e:	f06f 0003 	mvn.w	r0, #3
 8000972:	bd10      	pop	{r4, pc}
	...

08000980 <chOQGetI>:
 * @return              The byte value from the queue.
 * @retval Q_EMPTY      if the queue is empty.
 *
 * @iclass
 */
msg_t chOQGetI(output_queue_t *oqp) {
 8000980:	b538      	push	{r3, r4, r5, lr}
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 8000982:	6942      	ldr	r2, [r0, #20]
 8000984:	6983      	ldr	r3, [r0, #24]
 8000986:	429a      	cmp	r2, r3
 8000988:	d019      	beq.n	80009be <chOQGetI+0x3e>

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 800098a:	6882      	ldr	r2, [r0, #8]
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
 800098c:	6905      	ldr	r5, [r0, #16]
  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 800098e:	1c59      	adds	r1, r3, #1

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 8000990:	3201      	adds	r2, #1
 8000992:	6082      	str	r2, [r0, #8]
  b = *oqp->q_rdptr++;
 8000994:	6181      	str	r1, [r0, #24]
  if (oqp->q_rdptr >= oqp->q_top) {
 8000996:	42a9      	cmp	r1, r5
  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 8000998:	781c      	ldrb	r4, [r3, #0]
  if (oqp->q_rdptr >= oqp->q_top) {
 800099a:	d20d      	bcs.n	80009b8 <chOQGetI+0x38>
 800099c:	6802      	ldr	r2, [r0, #0]
 800099e:	4290      	cmp	r0, r2
 80009a0:	d008      	beq.n	80009b4 <chOQGetI+0x34>
 80009a2:	4603      	mov	r3, r0
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80009a4:	6811      	ldr	r1, [r2, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 80009a6:	2500      	movs	r5, #0
 80009a8:	6001      	str	r1, [r0, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 80009aa:	604b      	str	r3, [r1, #4]
  (void) chSchReadyI(tp);
 80009ac:	4610      	mov	r0, r2

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 80009ae:	6215      	str	r5, [r2, #32]
  (void) chSchReadyI(tp);
 80009b0:	f7ff ff9e 	bl	80008f0 <chSchReadyI>
    oqp->q_rdptr = oqp->q_buffer;
  }

  chThdDequeueNextI(&oqp->q_waiting, Q_OK);

  return (msg_t)b;
 80009b4:	4620      	mov	r0, r4
 80009b6:	bd38      	pop	{r3, r4, r5, pc}
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
    oqp->q_rdptr = oqp->q_buffer;
 80009b8:	68c3      	ldr	r3, [r0, #12]
 80009ba:	6183      	str	r3, [r0, #24]
 80009bc:	e7ee      	b.n	800099c <chOQGetI+0x1c>
 80009be:	6882      	ldr	r2, [r0, #8]
 80009c0:	2a00      	cmp	r2, #0
 80009c2:	d0e2      	beq.n	800098a <chOQGetI+0xa>
  uint8_t b;

  chDbgCheckClassI();

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
 80009c4:	f06f 0002 	mvn.w	r0, #2
 80009c8:	bd38      	pop	{r3, r4, r5, pc}
 80009ca:	bf00      	nop
 80009cc:	0000      	movs	r0, r0
	...

080009d0 <chMsgSend>:
 * @return              The answer message from @p chMsgRelease().
 *
 * @api
 */
msg_t chMsgSend(thread_t *tp, msg_t msg) {
  thread_t *ctp = currp;
 80009d0:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <chMsgSend+0x3c>)
 * @param[in] msg       the message
 * @return              The answer message from @p chMsgRelease().
 *
 * @api
 */
msg_t chMsgSend(thread_t *tp, msg_t msg) {
 80009d2:	b570      	push	{r4, r5, r6, lr}
 80009d4:	2220      	movs	r2, #32
  thread_t *ctp = currp;
 80009d6:	699c      	ldr	r4, [r3, #24]
 80009d8:	f382 8811 	msr	BASEPRI, r2

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->p_msg = msg;
  ctp->p_u.wtobjp = &tp->p_msgqueue;
 80009dc:	f100 0528 	add.w	r5, r0, #40	; 0x28
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG) {
 80009e0:	7f06      	ldrb	r6, [r0, #28]

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->p_msg = msg;
  ctp->p_u.wtobjp = &tp->p_msgqueue;
 80009e2:	6225      	str	r5, [r4, #32]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 80009e4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG) {
 80009e6:	2e0e      	cmp	r6, #14
  thread_t *ctp = currp;

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->p_msg = msg;
 80009e8:	6321      	str	r1, [r4, #48]	; 0x30
  cp->p_prev = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
 80009ea:	6025      	str	r5, [r4, #0]
  tp->p_prev = tqp->p_prev;
 80009ec:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 80009ee:	6014      	str	r4, [r2, #0]
  tqp->p_prev = tp;
 80009f0:	62c4      	str	r4, [r0, #44]	; 0x2c
  ctp->p_u.wtobjp = &tp->p_msgqueue;
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG) {
 80009f2:	d007      	beq.n	8000a04 <chMsgSend+0x34>
    (void) chSchReadyI(tp);
  }
  chSchGoSleepS(CH_STATE_SNDMSGQ);
 80009f4:	200c      	movs	r0, #12
 80009f6:	f7ff ff1b 	bl	8000830 <chSchGoSleepS>
  msg = ctp->p_u.rdymsg;
 80009fa:	6a20      	ldr	r0, [r4, #32]
 80009fc:	2300      	movs	r3, #0
 80009fe:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return msg;
}
 8000a02:	bd70      	pop	{r4, r5, r6, pc}
  chSysLock();
  ctp->p_msg = msg;
  ctp->p_u.wtobjp = &tp->p_msgqueue;
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG) {
    (void) chSchReadyI(tp);
 8000a04:	f7ff ff74 	bl	80008f0 <chSchReadyI>
 8000a08:	e7f4      	b.n	80009f4 <chMsgSend+0x24>
 8000a0a:	bf00      	nop
 8000a0c:	200013f8 	.word	0x200013f8

08000a10 <chEvtSignalI>:
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8000a10:	6b43      	ldr	r3, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8000a12:	7f02      	ldrb	r2, [r0, #28]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8000a14:	4319      	orrs	r1, r3
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8000a16:	2a0a      	cmp	r2, #10
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8000a18:	6341      	str	r1, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8000a1a:	d00a      	beq.n	8000a32 <chEvtSignalI+0x22>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 8000a1c:	2a0b      	cmp	r2, #11
 8000a1e:	d000      	beq.n	8000a22 <chEvtSignalI+0x12>
 8000a20:	4770      	bx	lr
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 8000a22:	6a03      	ldr	r3, [r0, #32]
 8000a24:	4019      	ands	r1, r3

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 8000a26:	428b      	cmp	r3, r1
 8000a28:	d1fa      	bne.n	8000a20 <chEvtSignalI+0x10>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	6203      	str	r3, [r0, #32]
    (void) chSchReadyI(tp);
 8000a2e:	f7ff bf5f 	b.w	80008f0 <chSchReadyI>
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 8000a32:	6a03      	ldr	r3, [r0, #32]
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8000a34:	4219      	tst	r1, r3
 8000a36:	d1f8      	bne.n	8000a2a <chEvtSignalI+0x1a>
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	0000      	movs	r0, r0
	...

08000a40 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8000a40:	b570      	push	{r4, r5, r6, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
 8000a42:	6804      	ldr	r4, [r0, #0]
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8000a44:	4606      	mov	r6, r0
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000a46:	42a0      	cmp	r0, r4
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8000a48:	460d      	mov	r5, r1
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000a4a:	d00d      	beq.n	8000a68 <chEvtBroadcastFlagsI+0x28>
  /*lint -restore*/
    elp->el_flags |= flags;
 8000a4c:	68e3      	ldr	r3, [r4, #12]
 8000a4e:	432b      	orrs	r3, r5
 8000a50:	60e3      	str	r3, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8000a52:	b115      	cbz	r5, 8000a5a <chEvtBroadcastFlagsI+0x1a>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
 8000a54:	6922      	ldr	r2, [r4, #16]
  while (elp != (event_listener_t *)esp) {
  /*lint -restore*/
    elp->el_flags |= flags;
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8000a56:	4213      	tst	r3, r2
 8000a58:	d003      	beq.n	8000a62 <chEvtBroadcastFlagsI+0x22>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
 8000a5a:	6860      	ldr	r0, [r4, #4]
 8000a5c:	68a1      	ldr	r1, [r4, #8]
 8000a5e:	f7ff ffd7 	bl	8000a10 <chEvtSignalI>
    }
    elp = elp->el_next;
 8000a62:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000a64:	42a6      	cmp	r6, r4
 8000a66:	d1f1      	bne.n	8000a4c <chEvtBroadcastFlagsI+0xc>
 8000a68:	bd70      	pop	{r4, r5, r6, pc}
 8000a6a:	bf00      	nop
 8000a6c:	0000      	movs	r0, r0
	...

08000a70 <chMtxUnlockAll>:
 *          inheritance mechanism.
 *
 * @api
 */
void chMtxUnlockAll(void) {
  thread_t *ctp = currp;
 8000a70:	4a13      	ldr	r2, [pc, #76]	; (8000ac0 <chMtxUnlockAll+0x50>)
 *          this function does not have any overhead related to the priority
 *          inheritance mechanism.
 *
 * @api
 */
void chMtxUnlockAll(void) {
 8000a72:	b570      	push	{r4, r5, r6, lr}
 8000a74:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8000a76:	6994      	ldr	r4, [r2, #24]
 8000a78:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if (ctp->p_mtxlist != NULL) {
 8000a7c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000a7e:	b1d3      	cbz	r3, 8000ab6 <chMtxUnlockAll+0x46>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->m_cnt = (cnt_t)0;
#endif
        mp->m_owner = NULL;
 8000a80:	2600      	movs	r6, #0
 8000a82:	e00b      	b.n	8000a9c <chMtxUnlockAll+0x2c>
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->m_cnt = (cnt_t)1;
#endif
        thread_t *tp = queue_fifo_remove(&mp->m_queue);
        mp->m_owner = tp;
        mp->m_next = tp->p_mtxlist;
 8000a84:	6b95      	ldr	r5, [r2, #56]	; 0x38
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8000a86:	6811      	ldr	r1, [r2, #0]
        tp->p_mtxlist = mp;
        (void) chSchReadyI(tp);
 8000a88:	4610      	mov	r0, r2
 8000a8a:	6019      	str	r1, [r3, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000a8c:	604b      	str	r3, [r1, #4]
      if (chMtxQueueNotEmptyS(mp)) {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->m_cnt = (cnt_t)1;
#endif
        thread_t *tp = queue_fifo_remove(&mp->m_queue);
        mp->m_owner = tp;
 8000a8e:	609a      	str	r2, [r3, #8]
        mp->m_next = tp->p_mtxlist;
 8000a90:	60dd      	str	r5, [r3, #12]
        tp->p_mtxlist = mp;
 8000a92:	6393      	str	r3, [r2, #56]	; 0x38
        (void) chSchReadyI(tp);
 8000a94:	f7ff ff2c 	bl	80008f0 <chSchReadyI>
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->m_cnt = (cnt_t)0;
#endif
        mp->m_owner = NULL;
      }
    } while (ctp->p_mtxlist != NULL);
 8000a98:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000a9a:	b143      	cbz	r3, 8000aae <chMtxUnlockAll+0x3e>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8000a9c:	681a      	ldr	r2, [r3, #0]

  chSysLock();
  if (ctp->p_mtxlist != NULL) {
    do {
      mutex_t *mp = ctp->p_mtxlist;
      ctp->p_mtxlist = mp->m_next;
 8000a9e:	68d9      	ldr	r1, [r3, #12]
      if (chMtxQueueNotEmptyS(mp)) {
 8000aa0:	4293      	cmp	r3, r2

  chSysLock();
  if (ctp->p_mtxlist != NULL) {
    do {
      mutex_t *mp = ctp->p_mtxlist;
      ctp->p_mtxlist = mp->m_next;
 8000aa2:	63a1      	str	r1, [r4, #56]	; 0x38
      if (chMtxQueueNotEmptyS(mp)) {
 8000aa4:	d1ee      	bne.n	8000a84 <chMtxUnlockAll+0x14>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->m_cnt = (cnt_t)0;
#endif
        mp->m_owner = NULL;
 8000aa6:	609e      	str	r6, [r3, #8]
      }
    } while (ctp->p_mtxlist != NULL);
 8000aa8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d1f6      	bne.n	8000a9c <chMtxUnlockAll+0x2c>
    ctp->p_prio = ctp->p_realprio;
 8000aae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000ab0:	60a3      	str	r3, [r4, #8]
    chSchRescheduleS();
 8000ab2:	f7ff fe05 	bl	80006c0 <chSchRescheduleS>
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	f383 8811 	msr	BASEPRI, r3
 8000abc:	bd70      	pop	{r4, r5, r6, pc}
 8000abe:	bf00      	nop
 8000ac0:	200013f8 	.word	0x200013f8
	...

08000ad0 <chMtxUnlockS>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
 8000ad0:	b430      	push	{r4, r5}
 8000ad2:	4604      	mov	r4, r0
  thread_t *ctp = currp;
 8000ad4:	4a11      	ldr	r2, [pc, #68]	; (8000b1c <chMtxUnlockS+0x4c>)
 8000ad6:	6825      	ldr	r5, [r4, #0]
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 8000ad8:	68c3      	ldr	r3, [r0, #12]
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
  thread_t *ctp = currp;
 8000ada:	6990      	ldr	r0, [r2, #24]
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8000adc:	42ac      	cmp	r4, r5
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 8000ade:	6383      	str	r3, [r0, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8000ae0:	d017      	beq.n	8000b12 <chMtxUnlockS+0x42>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
 8000ae2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8000ae4:	b14b      	cbz	r3, 8000afa <chMtxUnlockS+0x2a>
 8000ae6:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d003      	beq.n	8000af4 <chMtxUnlockS+0x24>
            (lmp->m_queue.p_next->p_prio > newprio)) {
 8000aec:	6892      	ldr	r2, [r2, #8]
 8000aee:	4291      	cmp	r1, r2
 8000af0:	bf38      	it	cc
 8000af2:	4611      	movcc	r1, r2
          newprio = lmp->m_queue.p_next->p_prio;
        }
        lmp = lmp->m_next;
 8000af4:	68db      	ldr	r3, [r3, #12]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d1f5      	bne.n	8000ae6 <chMtxUnlockS+0x16>
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 8000afa:	6baa      	ldr	r2, [r5, #56]	; 0x38
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8000afc:	682b      	ldr	r3, [r5, #0]
        lmp = lmp->m_next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->p_prio = newprio;
 8000afe:	6081      	str	r1, [r0, #8]
 8000b00:	6023      	str	r3, [r4, #0]
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
      tp->p_mtxlist = mp;
      (void) chSchReadyI(tp);
 8000b02:	4628      	mov	r0, r5
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000b04:	605c      	str	r4, [r3, #4]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
 8000b06:	60a5      	str	r5, [r4, #8]
      mp->m_next = tp->p_mtxlist;
 8000b08:	60e2      	str	r2, [r4, #12]
      tp->p_mtxlist = mp;
 8000b0a:	63ac      	str	r4, [r5, #56]	; 0x38
      mp->m_owner = NULL;
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif
}
 8000b0c:	bc30      	pop	{r4, r5}
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
      tp->p_mtxlist = mp;
      (void) chSchReadyI(tp);
 8000b0e:	f7ff beef 	b.w	80008f0 <chSchReadyI>
    }
    else {
      mp->m_owner = NULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	60a3      	str	r3, [r4, #8]
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif
}
 8000b16:	bc30      	pop	{r4, r5}
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	200013f8 	.word	0x200013f8

08000b20 <chMtxUnlock>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
  thread_t *ctp = currp;
 8000b20:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <chMtxUnlock+0x60>)
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 8000b22:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8000b24:	699d      	ldr	r5, [r3, #24]
 8000b26:	2320      	movs	r3, #32
 8000b28:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8000b2c:	6804      	ldr	r4, [r0, #0]
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 8000b2e:	68c3      	ldr	r3, [r0, #12]

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8000b30:	42a0      	cmp	r0, r4
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 8000b32:	63ab      	str	r3, [r5, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8000b34:	d01d      	beq.n	8000b72 <chMtxUnlock+0x52>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
 8000b36:	6be9      	ldr	r1, [r5, #60]	; 0x3c
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8000b38:	b14b      	cbz	r3, 8000b4e <chMtxUnlock+0x2e>
 8000b3a:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d003      	beq.n	8000b48 <chMtxUnlock+0x28>
            (lmp->m_queue.p_next->p_prio > newprio)) {
 8000b40:	6892      	ldr	r2, [r2, #8]
 8000b42:	4291      	cmp	r1, r2
 8000b44:	bf38      	it	cc
 8000b46:	4611      	movcc	r1, r2
          newprio = lmp->m_queue.p_next->p_prio;
        }
        lmp = lmp->m_next;
 8000b48:	68db      	ldr	r3, [r3, #12]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d1f5      	bne.n	8000b3a <chMtxUnlock+0x1a>
 8000b4e:	4603      	mov	r3, r0
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8000b50:	6822      	ldr	r2, [r4, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 8000b52:	6ba6      	ldr	r6, [r4, #56]	; 0x38

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 8000b54:	4620      	mov	r0, r4
        lmp = lmp->m_next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->p_prio = newprio;
 8000b56:	60a9      	str	r1, [r5, #8]
 8000b58:	601a      	str	r2, [r3, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000b5a:	6053      	str	r3, [r2, #4]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
 8000b5c:	609c      	str	r4, [r3, #8]
      mp->m_next = tp->p_mtxlist;
 8000b5e:	60de      	str	r6, [r3, #12]
      tp->p_mtxlist = mp;
 8000b60:	63a3      	str	r3, [r4, #56]	; 0x38

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 8000b62:	f7ff fec5 	bl	80008f0 <chSchReadyI>
      chSchRescheduleS();
 8000b66:	f7ff fdab 	bl	80006c0 <chSchRescheduleS>
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	f383 8811 	msr	BASEPRI, r3
 8000b70:	bd70      	pop	{r4, r5, r6, pc}
    }
    else {
      mp->m_owner = NULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	6083      	str	r3, [r0, #8]
 8000b76:	2300      	movs	r3, #0
 8000b78:	f383 8811 	msr	BASEPRI, r3
 8000b7c:	bd70      	pop	{r4, r5, r6, pc}
 8000b7e:	bf00      	nop
 8000b80:	200013f8 	.word	0x200013f8
	...

08000b90 <chMtxLockS>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
 8000b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 8000b92:	6882      	ldr	r2, [r0, #8]
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
  thread_t *ctp = currp;
 8000b94:	4b2f      	ldr	r3, [pc, #188]	; (8000c54 <chMtxLockS+0xc4>)
 8000b96:	699c      	ldr	r4, [r3, #24]

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 8000b98:	2a00      	cmp	r2, #0
 8000b9a:	d055      	beq.n	8000c48 <chMtxLockS+0xb8>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 8000b9c:	68a1      	ldr	r1, [r4, #8]
 8000b9e:	6893      	ldr	r3, [r2, #8]
 8000ba0:	4605      	mov	r5, r0
 8000ba2:	4299      	cmp	r1, r3
 8000ba4:	d906      	bls.n	8000bb4 <chMtxLockS+0x24>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 8000ba6:	7f13      	ldrb	r3, [r2, #28]

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;
 8000ba8:	6091      	str	r1, [r2, #8]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 8000baa:	2b06      	cmp	r3, #6
 8000bac:	d033      	beq.n	8000c16 <chMtxLockS+0x86>
 8000bae:	2b07      	cmp	r3, #7
 8000bb0:	d01d      	beq.n	8000bee <chMtxLockS+0x5e>
 8000bb2:	b19b      	cbz	r3, 8000bdc <chMtxLockS+0x4c>
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8000bb4:	462b      	mov	r3, r5
 8000bb6:	e003      	b.n	8000bc0 <chMtxLockS+0x30>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8000bb8:	6899      	ldr	r1, [r3, #8]
 8000bba:	68a2      	ldr	r2, [r4, #8]
 8000bbc:	4291      	cmp	r1, r2
 8000bbe:	d302      	bcc.n	8000bc6 <chMtxLockS+0x36>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8000bc0:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8000bc2:	429d      	cmp	r5, r3
 8000bc4:	d1f8      	bne.n	8000bb8 <chMtxLockS+0x28>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8000bc6:	685a      	ldr	r2, [r3, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8000bc8:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 8000bca:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 8000bcc:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8000bce:	605c      	str	r4, [r3, #4]
        break;
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtmtxp = mp;
 8000bd0:	6225      	str	r5, [r4, #32]
      chSchGoSleepS(CH_STATE_WTMTX);
 8000bd2:	2006      	movs	r0, #6
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
    ctp->p_mtxlist = mp;
  }
}
 8000bd4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtmtxp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 8000bd8:	f7ff be2a 	b.w	8000830 <chSchGoSleepS>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8000bdc:	e892 000a 	ldmia.w	r2, {r1, r3}
 8000be0:	6019      	str	r1, [r3, #0]
#if CH_DBG_ENABLE_ASSERTS == TRUE
          /* Prevents an assertion in chSchReadyI().*/
          tp->p_state = CH_STATE_CURRENT;
#endif
          /* Re-enqueues tp with its new priority on the ready list.*/
          (void) chSchReadyI(queue_dequeue(tp));
 8000be2:	4610      	mov	r0, r2
  tp->p_next->p_prev = tp->p_prev;
 8000be4:	6812      	ldr	r2, [r2, #0]
 8000be6:	6053      	str	r3, [r2, #4]
 8000be8:	f7ff fe82 	bl	80008f0 <chSchReadyI>
 8000bec:	e7e2      	b.n	8000bb4 <chMtxLockS+0x24>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8000bee:	6817      	ldr	r7, [r2, #0]
 8000bf0:	6850      	ldr	r0, [r2, #4]
#endif
#if (CH_CFG_USE_MESSAGES == TRUE) && (CH_CFG_USE_MESSAGES_PRIORITY == TRUE)
        case CH_STATE_SNDMSGQ:
#endif
          /* Re-enqueues tp with its new priority on the queue.*/
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 8000bf2:	6a16      	ldr	r6, [r2, #32]
 8000bf4:	6007      	str	r7, [r0, #0]
  tp->p_next->p_prev = tp->p_prev;
 8000bf6:	6817      	ldr	r7, [r2, #0]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8000bf8:	4633      	mov	r3, r6
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
  tp->p_next->p_prev = tp->p_prev;
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	e002      	b.n	8000c04 <chMtxLockS+0x74>
static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8000bfe:	6898      	ldr	r0, [r3, #8]
 8000c00:	4288      	cmp	r0, r1
 8000c02:	d302      	bcc.n	8000c0a <chMtxLockS+0x7a>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8000c04:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8000c06:	429e      	cmp	r6, r3
 8000c08:	d1f9      	bne.n	8000bfe <chMtxLockS+0x6e>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8000c0a:	6859      	ldr	r1, [r3, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8000c0c:	6013      	str	r3, [r2, #0]
  tp->p_prev = cp->p_prev;
 8000c0e:	6051      	str	r1, [r2, #4]
  tp->p_prev->p_next = tp;
 8000c10:	600a      	str	r2, [r1, #0]
  cp->p_prev = tp;
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	e7ce      	b.n	8000bb4 <chMtxLockS+0x24>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8000c16:	6817      	ldr	r7, [r2, #0]
 8000c18:	6850      	ldr	r0, [r2, #4]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
        case CH_STATE_WTMTX:
          /* Re-enqueues the mutex owner with its new priority.*/
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 8000c1a:	6a16      	ldr	r6, [r2, #32]
 8000c1c:	6007      	str	r7, [r0, #0]
  tp->p_next->p_prev = tp->p_prev;
 8000c1e:	6817      	ldr	r7, [r2, #0]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8000c20:	4633      	mov	r3, r6
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
  tp->p_next->p_prev = tp->p_prev;
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	e002      	b.n	8000c2c <chMtxLockS+0x9c>
static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8000c26:	6898      	ldr	r0, [r3, #8]
 8000c28:	4288      	cmp	r0, r1
 8000c2a:	d302      	bcc.n	8000c32 <chMtxLockS+0xa2>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8000c2c:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8000c2e:	429e      	cmp	r6, r3
 8000c30:	d1f9      	bne.n	8000c26 <chMtxLockS+0x96>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8000c32:	6859      	ldr	r1, [r3, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8000c34:	6013      	str	r3, [r2, #0]
  tp->p_prev = cp->p_prev;
 8000c36:	6051      	str	r1, [r2, #4]
  tp->p_prev->p_next = tp;
 8000c38:	600a      	str	r2, [r1, #0]
  cp->p_prev = tp;
 8000c3a:	605a      	str	r2, [r3, #4]
          tp = tp->p_u.wtmtxp->m_owner;
 8000c3c:	68b2      	ldr	r2, [r6, #8]
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 8000c3e:	68a1      	ldr	r1, [r4, #8]
 8000c40:	6893      	ldr	r3, [r2, #8]
 8000c42:	428b      	cmp	r3, r1
 8000c44:	d3af      	bcc.n	8000ba6 <chMtxLockS+0x16>
 8000c46:	e7b5      	b.n	8000bb4 <chMtxLockS+0x24>

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
 8000c48:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
 8000c4a:	6084      	str	r4, [r0, #8]
    mp->m_next = ctp->p_mtxlist;
 8000c4c:	60c3      	str	r3, [r0, #12]
    ctp->p_mtxlist = mp;
 8000c4e:	63a0      	str	r0, [r4, #56]	; 0x38
 8000c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200013f8 	.word	0x200013f8
	...

08000c60 <chMtxLock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxLock(mutex_t *mp) {
 8000c60:	b508      	push	{r3, lr}
 8000c62:	2320      	movs	r3, #32
 8000c64:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chMtxLockS(mp);
 8000c68:	f7ff ff92 	bl	8000b90 <chMtxLockS>
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	f383 8811 	msr	BASEPRI, r3
 8000c72:	bd08      	pop	{r3, pc}
	...

08000c80 <chHeapStatus>:
 *                      fragmented free space
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *sizep) {
 8000c80:	b570      	push	{r4, r5, r6, lr}
  union heap_header *qp;
  size_t n, sz;

  if (heapp == NULL) {
    heapp = &default_heap;
 8000c82:	4c0f      	ldr	r4, [pc, #60]	; (8000cc0 <chHeapStatus+0x40>)
 *                      fragmented free space
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *sizep) {
 8000c84:	460e      	mov	r6, r1
  union heap_header *qp;
  size_t n, sz;

  if (heapp == NULL) {
    heapp = &default_heap;
 8000c86:	2800      	cmp	r0, #0
 8000c88:	bf18      	it	ne
 8000c8a:	4604      	movne	r4, r0
  }

  H_LOCK(heapp);
 8000c8c:	f104 0510 	add.w	r5, r4, #16
 8000c90:	4628      	mov	r0, r5
 8000c92:	f7ff ffe5 	bl	8000c60 <chMtxLock>
  sz = 0;
  n = 0;
  qp = &heapp->h_free;
  while (qp->h.u.next != NULL) {
 8000c96:	68a3      	ldr	r3, [r4, #8]
 8000c98:	b173      	cbz	r3, 8000cb8 <chHeapStatus+0x38>
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	4614      	mov	r4, r2
    sz += qp->h.u.next->h.size;
 8000c9e:	6858      	ldr	r0, [r3, #4]

  H_LOCK(heapp);
  sz = 0;
  n = 0;
  qp = &heapp->h_free;
  while (qp->h.u.next != NULL) {
 8000ca0:	681b      	ldr	r3, [r3, #0]
    sz += qp->h.u.next->h.size;
    n++;
 8000ca2:	3401      	adds	r4, #1
  H_LOCK(heapp);
  sz = 0;
  n = 0;
  qp = &heapp->h_free;
  while (qp->h.u.next != NULL) {
    sz += qp->h.u.next->h.size;
 8000ca4:	4402      	add	r2, r0

  H_LOCK(heapp);
  sz = 0;
  n = 0;
  qp = &heapp->h_free;
  while (qp->h.u.next != NULL) {
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d1f9      	bne.n	8000c9e <chHeapStatus+0x1e>
    sz += qp->h.u.next->h.size;
    n++;
    qp = qp->h.u.next;
  }
  if (sizep != NULL) {
 8000caa:	b106      	cbz	r6, 8000cae <chHeapStatus+0x2e>
    *sizep = sz;
 8000cac:	6032      	str	r2, [r6, #0]
  }
  H_UNLOCK(heapp);
 8000cae:	4628      	mov	r0, r5
 8000cb0:	f7ff ff36 	bl	8000b20 <chMtxUnlock>

  return n;
}
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	bd70      	pop	{r4, r5, r6, pc}
  if (heapp == NULL) {
    heapp = &default_heap;
  }

  H_LOCK(heapp);
  sz = 0;
 8000cb8:	461a      	mov	r2, r3
  n = 0;
 8000cba:	461c      	mov	r4, r3
 8000cbc:	e7f5      	b.n	8000caa <chHeapStatus+0x2a>
 8000cbe:	bf00      	nop
 8000cc0:	200009f8 	.word	0x200009f8
	...

08000cd0 <chHeapFree>:
 *
 * @param[in] p         pointer to the memory block to be freed
 *
 * @api
 */
void chHeapFree(void *p) {
 8000cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  chDbgCheck(p != NULL);

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (union heap_header *)p - 1;
  /*lint -restore*/
  heapp = hp->h.u.heap;
 8000cd2:	f850 5c08 	ldr.w	r5, [r0, #-8]
 *
 * @param[in] p         pointer to the memory block to be freed
 *
 * @api
 */
void chHeapFree(void *p) {
 8000cd6:	4606      	mov	r6, r0
  hp = (union heap_header *)p - 1;
  /*lint -restore*/
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;

  H_LOCK(heapp);
 8000cd8:	f105 0710 	add.w	r7, r5, #16
  memory_heap_t *heapp;

  chDbgCheck(p != NULL);

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (union heap_header *)p - 1;
 8000cdc:	f1a0 0408 	sub.w	r4, r0, #8
  /*lint -restore*/
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;
 8000ce0:	3508      	adds	r5, #8

  H_LOCK(heapp);
 8000ce2:	4638      	mov	r0, r7
 8000ce4:	f7ff ffbc 	bl	8000c60 <chMtxLock>

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (union heap_header *)p - 1;
  /*lint -restore*/
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;
 8000ce8:	462b      	mov	r3, r5

  H_LOCK(heapp);
  while (true) {
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
 8000cea:	42ab      	cmp	r3, r5
 8000cec:	d004      	beq.n	8000cf8 <chHeapFree+0x28>
 8000cee:	42a3      	cmp	r3, r4
 8000cf0:	d302      	bcc.n	8000cf8 <chHeapFree+0x28>
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	42ab      	cmp	r3, r5
 8000cf6:	d1fa      	bne.n	8000cee <chHeapFree+0x1e>
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
 8000cf8:	681a      	ldr	r2, [r3, #0]

  H_LOCK(heapp);
  while (true) {
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
 8000cfa:	b11a      	cbz	r2, 8000d04 <chHeapFree+0x34>
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
 8000cfc:	4294      	cmp	r4, r2
 8000cfe:	d301      	bcc.n	8000d04 <chHeapFree+0x34>
 8000d00:	4613      	mov	r3, r2
 8000d02:	e7f2      	b.n	8000cea <chHeapFree+0x1a>
      /* Insertion after qp.*/
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
 8000d04:	f856 1c04 	ldr.w	r1, [r6, #-4]
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
      /* Insertion after qp.*/
      hp->h.u.next = qp->h.u.next;
 8000d08:	f846 2c08 	str.w	r2, [r6, #-8]
      qp->h.u.next = hp;
 8000d0c:	601c      	str	r4, [r3, #0]
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
 8000d0e:	f101 0208 	add.w	r2, r1, #8
 8000d12:	f856 5c08 	ldr.w	r5, [r6, #-8]
 8000d16:	18a0      	adds	r0, r4, r2
 8000d18:	42a8      	cmp	r0, r5
 8000d1a:	d00a      	beq.n	8000d32 <chHeapFree+0x62>
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
 8000d1c:	6859      	ldr	r1, [r3, #4]
 8000d1e:	f101 0208 	add.w	r2, r1, #8
 8000d22:	441a      	add	r2, r3
 8000d24:	4294      	cmp	r4, r2
 8000d26:	d010      	beq.n	8000d4a <chHeapFree+0x7a>
      }
      break;
    }
    qp = qp->h.u.next;
  }
  H_UNLOCK(heapp);
 8000d28:	4638      	mov	r0, r7

  return;
}
 8000d2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      }
      break;
    }
    qp = qp->h.u.next;
  }
  H_UNLOCK(heapp);
 8000d2e:	f7ff bef7 	b.w	8000b20 <chMtxUnlock>
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
 8000d32:	6845      	ldr	r5, [r0, #4]
        hp->h.u.next = hp->h.u.next->h.u.next;
 8000d34:	58a0      	ldr	r0, [r4, r2]
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
 8000d36:	194a      	adds	r2, r1, r5
 8000d38:	3208      	adds	r2, #8
        hp->h.u.next = hp->h.u.next->h.u.next;
 8000d3a:	e906 0005 	stmdb	r6, {r0, r2}
      }
      if ((LIMIT(qp) == hp)) {
 8000d3e:	6859      	ldr	r1, [r3, #4]
 8000d40:	f101 0208 	add.w	r2, r1, #8
 8000d44:	441a      	add	r2, r3
 8000d46:	4294      	cmp	r4, r2
 8000d48:	d1ee      	bne.n	8000d28 <chHeapFree+0x58>
        /* Merge with the previous block.*/
        qp->h.size += hp->h.size + sizeof(union heap_header);
        qp->h.u.next = hp->h.u.next;
 8000d4a:	e916 0005 	ldmdb	r6, {r0, r2}
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
        /* Merge with the previous block.*/
        qp->h.size += hp->h.size + sizeof(union heap_header);
 8000d4e:	440a      	add	r2, r1
 8000d50:	3208      	adds	r2, #8
        qp->h.u.next = hp->h.u.next;
 8000d52:	e883 0005 	stmia.w	r3, {r0, r2}
      }
      break;
    }
    qp = qp->h.u.next;
  }
  H_UNLOCK(heapp);
 8000d56:	4638      	mov	r0, r7

  return;
}
 8000d58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      }
      break;
    }
    qp = qp->h.u.next;
  }
  H_UNLOCK(heapp);
 8000d5c:	f7ff bee0 	b.w	8000b20 <chMtxUnlock>

08000d60 <chThdRelease>:
 *
 * @param[in] tp        pointer to the thread
 *
 * @api
 */
void chThdRelease(thread_t *tp) {
 8000d60:	4602      	mov	r2, r0
 8000d62:	2120      	movs	r1, #32
 8000d64:	f381 8811 	msr	BASEPRI, r1
  trefs_t refs;

  chSysLock();
  chDbgAssert(tp->p_refs > (trefs_t)0, "not referenced");
  tp->p_refs--;
 8000d68:	7f83      	ldrb	r3, [r0, #30]
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	7783      	strb	r3, [r0, #30]
  refs = tp->p_refs;

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator. Of course static threads are not affected.*/
  if ((refs == (trefs_t)0) && (tp->p_state == CH_STATE_FINAL)) {
 8000d70:	b94b      	cbnz	r3, 8000d86 <chThdRelease+0x26>
 *
 * @param[in] tp        pointer to the thread
 *
 * @api
 */
void chThdRelease(thread_t *tp) {
 8000d72:	b410      	push	{r4}
  refs = tp->p_refs;

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator. Of course static threads are not affected.*/
  if ((refs == (trefs_t)0) && (tp->p_state == CH_STATE_FINAL)) {
 8000d74:	7f04      	ldrb	r4, [r0, #28]
 8000d76:	2c0f      	cmp	r4, #15
 8000d78:	d009      	beq.n	8000d8e <chThdRelease+0x2e>
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	f383 8811 	msr	BASEPRI, r3
         registry on exit.*/
      break;
    }
  }
  chSysUnlock();
}
 8000d80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	2300      	movs	r3, #0
 8000d88:	f383 8811 	msr	BASEPRI, r3
 8000d8c:	4770      	bx	lr

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator. Of course static threads are not affected.*/
  if ((refs == (trefs_t)0) && (tp->p_state == CH_STATE_FINAL)) {
    switch (tp->p_flags & CH_FLAG_MODE_MASK) {
 8000d8e:	7f44      	ldrb	r4, [r0, #29]
 8000d90:	f004 0403 	and.w	r4, r4, #3
 8000d94:	2c01      	cmp	r4, #1
 8000d96:	d011      	beq.n	8000dbc <chThdRelease+0x5c>
 8000d98:	2c02      	cmp	r4, #2
 8000d9a:	d1ee      	bne.n	8000d7a <chThdRelease+0x1a>
      return;
#endif
#if CH_CFG_USE_MEMPOOLS == TRUE
    case CH_FLAG_MODE_MPOOL:
#if CH_CFG_USE_REGISTRY == TRUE
      REG_REMOVE(tp);
 8000d9c:	6914      	ldr	r4, [r2, #16]
 8000d9e:	6940      	ldr	r0, [r0, #20]
 8000da0:	6104      	str	r4, [r0, #16]
 8000da2:	6914      	ldr	r4, [r2, #16]
 8000da4:	6160      	str	r0, [r4, #20]
 8000da6:	f383 8811 	msr	BASEPRI, r3
#endif
      chSysUnlock();
      chPoolFree(tp->p_mpool, tp);
 8000daa:	6c10      	ldr	r0, [r2, #64]	; 0x40
 8000dac:	f381 8811 	msr	BASEPRI, r1
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8000db0:	6801      	ldr	r1, [r0, #0]
 8000db2:	6011      	str	r1, [r2, #0]
  mp->mp_next = php;
 8000db4:	6002      	str	r2, [r0, #0]
 8000db6:	f383 8811 	msr	BASEPRI, r3
 8000dba:	e7e1      	b.n	8000d80 <chThdRelease+0x20>
  if ((refs == (trefs_t)0) && (tp->p_state == CH_STATE_FINAL)) {
    switch (tp->p_flags & CH_FLAG_MODE_MASK) {
#if CH_CFG_USE_HEAP == TRUE
    case CH_FLAG_MODE_HEAP:
#if CH_CFG_USE_REGISTRY == TRUE
      REG_REMOVE(tp);
 8000dbc:	6941      	ldr	r1, [r0, #20]
 8000dbe:	6904      	ldr	r4, [r0, #16]
 8000dc0:	610c      	str	r4, [r1, #16]
 8000dc2:	6902      	ldr	r2, [r0, #16]
 8000dc4:	6151      	str	r1, [r2, #20]
 8000dc6:	f383 8811 	msr	BASEPRI, r3
         registry on exit.*/
      break;
    }
  }
  chSysUnlock();
}
 8000dca:	f85d 4b04 	ldr.w	r4, [sp], #4
    case CH_FLAG_MODE_HEAP:
#if CH_CFG_USE_REGISTRY == TRUE
      REG_REMOVE(tp);
#endif
      chSysUnlock();
      chHeapFree(tp);
 8000dce:	f7ff bf7f 	b.w	8000cd0 <chHeapFree>
 8000dd2:	bf00      	nop
	...

08000de0 <chRegNextThread>:
 * @return              A reference to the next thread.
 * @retval NULL         if there is no next thread.
 *
 * @api
 */
thread_t *chRegNextThread(thread_t *tp) {
 8000de0:	b510      	push	{r4, lr}
 8000de2:	2320      	movs	r3, #32
 8000de4:	f383 8811 	msr	BASEPRI, r3
  thread_t *ntp;

  chSysLock();
  ntp = tp->p_newer;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  if (ntp == (thread_t *)&ch.rlist) {
 8000de8:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <chRegNextThread+0x28>)
 */
thread_t *chRegNextThread(thread_t *tp) {
  thread_t *ntp;

  chSysLock();
  ntp = tp->p_newer;
 8000dea:	6904      	ldr	r4, [r0, #16]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  if (ntp == (thread_t *)&ch.rlist) {
 8000dec:	429c      	cmp	r4, r3
    ntp = NULL;
  }
#if CH_CFG_USE_DYNAMIC == TRUE
  else {
    chDbgAssert(ntp->p_refs < (trefs_t)255, "too many references");
    ntp->p_refs++;
 8000dee:	bf17      	itett	ne
 8000df0:	7fa3      	ldrbne	r3, [r4, #30]
  chSysLock();
  ntp = tp->p_newer;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  if (ntp == (thread_t *)&ch.rlist) {
  /*lint -restore*/
    ntp = NULL;
 8000df2:	2400      	moveq	r4, #0
  }
#if CH_CFG_USE_DYNAMIC == TRUE
  else {
    chDbgAssert(ntp->p_refs < (trefs_t)255, "too many references");
    ntp->p_refs++;
 8000df4:	3301      	addne	r3, #1
 8000df6:	77a3      	strbne	r3, [r4, #30]
 8000df8:	2300      	movs	r3, #0
 8000dfa:	f383 8811 	msr	BASEPRI, r3
  }
#endif
  chSysUnlock();
#if CH_CFG_USE_DYNAMIC == TRUE
  chThdRelease(tp);
 8000dfe:	f7ff ffaf 	bl	8000d60 <chThdRelease>
#endif

  return ntp;
}
 8000e02:	4620      	mov	r0, r4
 8000e04:	bd10      	pop	{r4, pc}
 8000e06:	bf00      	nop
 8000e08:	200013f8 	.word	0x200013f8
 8000e0c:	00000000 	.word	0x00000000

08000e10 <chThdWait>:
 * @param[in] tp        pointer to the thread
 * @return              The exit code from the terminated thread.
 *
 * @api
 */
msg_t chThdWait(thread_t *tp) {
 8000e10:	b538      	push	{r3, r4, r5, lr}
 8000e12:	4604      	mov	r4, r0
 8000e14:	2320      	movs	r3, #32
 8000e16:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chDbgAssert(tp != currp, "waiting self");
#if CH_CFG_USE_DYNAMIC == TRUE
  chDbgAssert(tp->p_refs > (trefs_t)0, "not referenced");
#endif
  if (tp->p_state != CH_STATE_FINAL) {
 8000e1a:	7f03      	ldrb	r3, [r0, #28]
 8000e1c:	2b0f      	cmp	r3, #15
 8000e1e:	d007      	beq.n	8000e30 <chThdWait+0x20>
    list_insert(currp, &tp->p_waiting);
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <chThdWait+0x34>)
/* If the performance code path has been chosen then all the following
   functions are inlined into the various kernel modules.*/
#if CH_CFG_OPTIMIZE_SPEED == TRUE
static inline void list_insert(thread_t *tp, threads_list_t *tlp) {

  tp->p_next = tlp->p_next;
 8000e22:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8000e24:	699b      	ldr	r3, [r3, #24]
    chSchGoSleepS(CH_STATE_WTEXIT);
 8000e26:	2009      	movs	r0, #9
 8000e28:	601a      	str	r2, [r3, #0]
  tlp->p_next = tp;
 8000e2a:	6263      	str	r3, [r4, #36]	; 0x24
 8000e2c:	f7ff fd00 	bl	8000830 <chSchGoSleepS>
  }
  msg = tp->p_u.exitcode;
 8000e30:	6a25      	ldr	r5, [r4, #32]
 8000e32:	2300      	movs	r3, #0
 8000e34:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

#if CH_CFG_USE_DYNAMIC == TRUE
  /* Releasing a lock if it is a dynamic thread.*/
  chThdRelease(tp);
 8000e38:	4620      	mov	r0, r4
 8000e3a:	f7ff ff91 	bl	8000d60 <chThdRelease>
#endif

  return msg;
}
 8000e3e:	4628      	mov	r0, r5
 8000e40:	bd38      	pop	{r3, r4, r5, pc}
 8000e42:	bf00      	nop
 8000e44:	200013f8 	.word	0x200013f8
	...

08000e50 <chHeapAlloc>:
 * @return              A pointer to the allocated block.
 * @retval NULL         if the block cannot be allocated.
 *
 * @api
 */
void *chHeapAlloc(memory_heap_t *heapp, size_t size) {
 8000e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  union heap_header *qp, *hp, *fp;

  if (heapp == NULL) {
    heapp = &default_heap;
 8000e52:	4e21      	ldr	r6, [pc, #132]	; (8000ed8 <chHeapAlloc+0x88>)
  }

  size = MEM_ALIGN_NEXT(size);
 8000e54:	3107      	adds	r1, #7
 */
void *chHeapAlloc(memory_heap_t *heapp, size_t size) {
  union heap_header *qp, *hp, *fp;

  if (heapp == NULL) {
    heapp = &default_heap;
 8000e56:	2800      	cmp	r0, #0
 8000e58:	bf18      	it	ne
 8000e5a:	4606      	movne	r6, r0
  }

  size = MEM_ALIGN_NEXT(size);
  qp = &heapp->h_free;

  H_LOCK(heapp);
 8000e5c:	f106 0710 	add.w	r7, r6, #16
 8000e60:	4638      	mov	r0, r7

  if (heapp == NULL) {
    heapp = &default_heap;
  }

  size = MEM_ALIGN_NEXT(size);
 8000e62:	f021 0507 	bic.w	r5, r1, #7
  qp = &heapp->h_free;
 8000e66:	f106 0408 	add.w	r4, r6, #8

  H_LOCK(heapp);
 8000e6a:	f7ff fef9 	bl	8000c60 <chMtxLock>
 8000e6e:	e003      	b.n	8000e78 <chHeapAlloc+0x28>
  while (qp->h.u.next != NULL) {
    hp = qp->h.u.next;
    if (hp->h.size >= size) {
 8000e70:	6843      	ldr	r3, [r0, #4]
 8000e72:	429d      	cmp	r5, r3
 8000e74:	d912      	bls.n	8000e9c <chHeapAlloc+0x4c>
 8000e76:	4604      	mov	r4, r0

  size = MEM_ALIGN_NEXT(size);
  qp = &heapp->h_free;

  H_LOCK(heapp);
  while (qp->h.u.next != NULL) {
 8000e78:	6820      	ldr	r0, [r4, #0]
 8000e7a:	2800      	cmp	r0, #0
 8000e7c:	d1f8      	bne.n	8000e70 <chHeapAlloc+0x20>
      return (void *)(hp + 1);
      /*lint -restore*/
    }
    qp = hp;
  }
  H_UNLOCK(heapp);
 8000e7e:	4638      	mov	r0, r7
 8000e80:	f7ff fe4e 	bl	8000b20 <chMtxUnlock>

  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->h_provider != NULL) {
 8000e84:	6833      	ldr	r3, [r6, #0]
 8000e86:	b323      	cbz	r3, 8000ed2 <chHeapAlloc+0x82>
    hp = heapp->h_provider(size + sizeof(union heap_header));
 8000e88:	f105 0008 	add.w	r0, r5, #8
 8000e8c:	4798      	blx	r3
    if (hp != NULL) {
 8000e8e:	b300      	cbz	r0, 8000ed2 <chHeapAlloc+0x82>
      hp->h.u.heap = heapp;
 8000e90:	6006      	str	r6, [r0, #0]
      hp->h.size = size;
 8000e92:	6045      	str	r5, [r0, #4]
      hp++;
 8000e94:	f100 0408 	add.w	r4, r0, #8
      /*lint -restore*/
    }
  }

  return NULL;
}
 8000e98:	4620      	mov	r0, r4
 8000e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  H_LOCK(heapp);
  while (qp->h.u.next != NULL) {
    hp = qp->h.u.next;
    if (hp->h.size >= size) {
      if (hp->h.size < (size + sizeof(union heap_header))) {
 8000e9c:	f105 0108 	add.w	r1, r5, #8
 8000ea0:	4299      	cmp	r1, r3
 8000ea2:	d909      	bls.n	8000eb8 <chHeapAlloc+0x68>
        /* Gets the whole block even if it is slightly bigger than the
           requested size because the fragment would be too small to be
           useful.*/
        qp->h.u.next = hp->h.u.next;
 8000ea4:	6803      	ldr	r3, [r0, #0]
 8000ea6:	6023      	str	r3, [r4, #0]
        fp->h.u.next = hp->h.u.next;
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
        qp->h.u.next = fp;
        hp->h.size = size;
      }
      hp->h.u.heap = heapp;
 8000ea8:	4604      	mov	r4, r0
      H_UNLOCK(heapp);
 8000eaa:	4638      	mov	r0, r7
        fp->h.u.next = hp->h.u.next;
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
        qp->h.u.next = fp;
        hp->h.size = size;
      }
      hp->h.u.heap = heapp;
 8000eac:	f844 6b08 	str.w	r6, [r4], #8
      H_UNLOCK(heapp);
 8000eb0:	f7ff fe36 	bl	8000b20 <chMtxUnlock>
      /*lint -restore*/
    }
  }

  return NULL;
}
 8000eb4:	4620      	mov	r0, r4
 8000eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000eb8:	f06f 0e07 	mvn.w	lr, #7
 8000ebc:	ebc5 0e0e 	rsb	lr, r5, lr
        /* Block bigger enough, must split it.*/
        /*lint -save -e9087 [11.3] Safe cast.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
        /*lint -restore*/
        fp->h.u.next = hp->h.u.next;
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
 8000ec0:	449e      	add	lr, r3
      else {
        /* Block bigger enough, must split it.*/
        /*lint -save -e9087 [11.3] Safe cast.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
        /*lint -restore*/
        fp->h.u.next = hp->h.u.next;
 8000ec2:	6803      	ldr	r3, [r0, #0]
        qp->h.u.next = hp->h.u.next;
      }
      else {
        /* Block bigger enough, must split it.*/
        /*lint -save -e9087 [11.3] Safe cast.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
 8000ec4:	1842      	adds	r2, r0, r1
        /*lint -restore*/
        fp->h.u.next = hp->h.u.next;
 8000ec6:	5043      	str	r3, [r0, r1]
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
 8000ec8:	f8c2 e004 	str.w	lr, [r2, #4]
        qp->h.u.next = fp;
 8000ecc:	6022      	str	r2, [r4, #0]
        hp->h.size = size;
 8000ece:	6045      	str	r5, [r0, #4]
 8000ed0:	e7ea      	b.n	8000ea8 <chHeapAlloc+0x58>
      return (void *)hp;
      /*lint -restore*/
    }
  }

  return NULL;
 8000ed2:	2400      	movs	r4, #0
 8000ed4:	e7e0      	b.n	8000e98 <chHeapAlloc+0x48>
 8000ed6:	bf00      	nop
 8000ed8:	200009f8 	.word	0x200009f8
 8000edc:	00000000 	.word	0x00000000

08000ee0 <chThdCreateFromHeap>:
 * @retval NULL         if the memory cannot be allocated.
 *
 * @api
 */
thread_t *chThdCreateFromHeap(memory_heap_t *heapp, size_t size,
                              tprio_t prio, tfunc_t pf, void *arg) {
 8000ee0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ee4:	4690      	mov	r8, r2
 8000ee6:	4699      	mov	r9, r3
 8000ee8:	460d      	mov	r5, r1
  void *wsp;
  thread_t *tp;

  wsp = chHeapAlloc(heapp, size);
 8000eea:	f7ff ffb1 	bl	8000e50 <chHeapAlloc>
  if (wsp == NULL) {
 8000eee:	4604      	mov	r4, r0
 8000ef0:	2800      	cmp	r0, #0
 8000ef2:	d034      	beq.n	8000f5e <chThdCreateFromHeap+0x7e>
 8000ef4:	2320      	movs	r3, #32
 8000ef6:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000efa:	4f1a      	ldr	r7, [pc, #104]	; (8000f64 <chThdCreateFromHeap+0x84>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8000efc:	f1a5 0124 	sub.w	r1, r5, #36	; 0x24
 8000f00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000f02:	eb00 0c01 	add.w	ip, r0, r1
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000f06:	697b      	ldr	r3, [r7, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8000f08:	f8c0 c00c 	str.w	ip, [r0, #12]
 8000f0c:	f840 9001 	str.w	r9, [r0, r1]
 8000f10:	f8cc 2004 	str.w	r2, [ip, #4]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8000f14:	f04f 0201 	mov.w	r2, #1

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8000f18:	f8df b04c 	ldr.w	fp, [pc, #76]	; 8000f68 <chThdCreateFromHeap+0x88>
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8000f1c:	2500      	movs	r5, #0
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 8000f1e:	f100 0628 	add.w	r6, r0, #40	; 0x28
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 8000f22:	f100 0e24 	add.w	lr, r0, #36	; 0x24
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8000f26:	f04f 0a02 	mov.w	sl, #2

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8000f2a:	f8cc b020 	str.w	fp, [ip, #32]
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_HEAP;
  chSchWakeupS(tp, MSG_OK);
 8000f2e:	4629      	mov	r1, r5
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8000f30:	f8c0 8008 	str.w	r8, [r0, #8]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000f34:	6107      	str	r7, [r0, #16]
 8000f36:	6143      	str	r3, [r0, #20]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8000f38:	f8c0 803c 	str.w	r8, [r0, #60]	; 0x3c
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8000f3c:	f880 a01c 	strb.w	sl, [r0, #28]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8000f40:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8000f42:	6345      	str	r5, [r0, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8000f44:	6185      	str	r5, [r0, #24]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8000f46:	7782      	strb	r2, [r0, #30]
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000f48:	6118      	str	r0, [r3, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8000f4a:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_HEAP;
 8000f4e:	7762      	strb	r2, [r4, #29]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000f50:	6286      	str	r6, [r0, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 8000f52:	62c6      	str	r6, [r0, #44]	; 0x2c
 8000f54:	6178      	str	r0, [r7, #20]
  chSchWakeupS(tp, MSG_OK);
 8000f56:	f7ff fbdb 	bl	8000710 <chSchWakeupS>
 8000f5a:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  return tp;
}
 8000f5e:	4620      	mov	r0, r4
 8000f60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f64:	200013f8 	.word	0x200013f8
 8000f68:	08000241 	.word	0x08000241
 8000f6c:	00000000 	.word	0x00000000

08000f70 <chSemSignalI>:
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (++sp->s_cnt <= (cnt_t)0) {
 8000f70:	6883      	ldr	r3, [r0, #8]
 *
 * @param[in] sp    pointer to a @p semaphore_t structure
 *
 * @iclass
 */
void chSemSignalI(semaphore_t *sp) {
 8000f72:	4602      	mov	r2, r0
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (++sp->s_cnt <= (cnt_t)0) {
 8000f74:	3301      	adds	r3, #1
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	6083      	str	r3, [r0, #8]
 8000f7a:	dd00      	ble.n	8000f7e <chSemSignalI+0xe>
 8000f7c:	4770      	bx	lr
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8000f7e:	6803      	ldr	r3, [r0, #0]
 *
 * @param[in] sp    pointer to a @p semaphore_t structure
 *
 * @iclass
 */
void chSemSignalI(semaphore_t *sp) {
 8000f80:	b410      	push	{r4}

  tqp->p_next = tp->p_next;
 8000f82:	6819      	ldr	r1, [r3, #0]

  if (++sp->s_cnt <= (cnt_t)0) {
    /* Note, it is done this way in order to allow a tail call on
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->s_queue);
    tp->p_u.rdymsg = MSG_OK;
 8000f84:	2400      	movs	r4, #0
 8000f86:	6011      	str	r1, [r2, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000f88:	604a      	str	r2, [r1, #4]
 8000f8a:	621c      	str	r4, [r3, #32]
    (void) chSchReadyI(tp);
 8000f8c:	4618      	mov	r0, r3
  }
}
 8000f8e:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (++sp->s_cnt <= (cnt_t)0) {
    /* Note, it is done this way in order to allow a tail call on
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->s_queue);
    tp->p_u.rdymsg = MSG_OK;
    (void) chSchReadyI(tp);
 8000f92:	f7ff bcad 	b.w	80008f0 <chSchReadyI>
 8000f96:	bf00      	nop
	...

08000fa0 <chSemResetI>:
 * @param[in] n         the new value of the semaphore counter. The value must
 *                      be non-negative.
 *
 * @iclass
 */
void chSemResetI(semaphore_t *sp, cnt_t n) {
 8000fa0:	b570      	push	{r4, r5, r6, lr}
  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
 8000fa2:	6885      	ldr	r5, [r0, #8]
  sp->s_cnt = n;
 8000fa4:	6081      	str	r1, [r0, #8]
  while (++cnt <= (cnt_t)0) {
 8000fa6:	3501      	adds	r5, #1
 8000fa8:	2d00      	cmp	r5, #0
 8000faa:	dc0c      	bgt.n	8000fc6 <chSemResetI+0x26>
 8000fac:	4604      	mov	r4, r0
    chSchReadyI(queue_lifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_RESET;
 8000fae:	f06f 0601 	mvn.w	r6, #1

  return tp;
}

static inline thread_t *queue_lifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_prev;
 8000fb2:	6860      	ldr	r0, [r4, #4]
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= (cnt_t)0) {
 8000fb4:	3501      	adds	r5, #1

  tqp->p_prev = tp->p_prev;
 8000fb6:	6843      	ldr	r3, [r0, #4]
 8000fb8:	6063      	str	r3, [r4, #4]
  tqp->p_prev->p_next = (thread_t *)tqp;
 8000fba:	601c      	str	r4, [r3, #0]
    chSchReadyI(queue_lifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_RESET;
 8000fbc:	f7ff fc98 	bl	80008f0 <chSchReadyI>
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= (cnt_t)0) {
 8000fc0:	2d01      	cmp	r5, #1
    chSchReadyI(queue_lifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_RESET;
 8000fc2:	6206      	str	r6, [r0, #32]
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= (cnt_t)0) {
 8000fc4:	d1f5      	bne.n	8000fb2 <chSemResetI+0x12>
 8000fc6:	bd70      	pop	{r4, r5, r6, pc}
	...

08000fd0 <chThdDequeueAllI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8000fd0:	b538      	push	{r3, r4, r5, lr}
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8000fd2:	6803      	ldr	r3, [r0, #0]
 8000fd4:	4604      	mov	r4, r0

  while (queue_notempty(tqp)) {
 8000fd6:	4298      	cmp	r0, r3
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8000fd8:	460d      	mov	r5, r1

  while (queue_notempty(tqp)) {
 8000fda:	d009      	beq.n	8000ff0 <chThdDequeueAllI+0x20>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	6022      	str	r2, [r4, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000fe2:	6054      	str	r4, [r2, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8000fe4:	621d      	str	r5, [r3, #32]
  (void) chSchReadyI(tp);
 8000fe6:	f7ff fc83 	bl	80008f0 <chSchReadyI>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8000fea:	6823      	ldr	r3, [r4, #0]
 8000fec:	429c      	cmp	r4, r3
 8000fee:	d1f5      	bne.n	8000fdc <chThdDequeueAllI+0xc>
 8000ff0:	bd38      	pop	{r3, r4, r5, pc}
 8000ff2:	bf00      	nop
	...

08001000 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 8001000:	b538      	push	{r3, r4, r5, lr}
  thread_t *tp = currp;
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <chThdExitS+0x3c>)
 8001004:	699c      	ldr	r4, [r3, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 8001006:	6a63      	ldr	r3, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 8001008:	f104 0524 	add.w	r5, r4, #36	; 0x24
 800100c:	429d      	cmp	r5, r3
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;

  tp->p_u.exitcode = msg;
 800100e:	6220      	str	r0, [r4, #32]
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 8001010:	d007      	beq.n	8001022 <chThdExitS+0x22>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->p_next;
  tlp->p_next = tp->p_next;
 8001012:	681a      	ldr	r2, [r3, #0]
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 8001014:	4618      	mov	r0, r3
 8001016:	6262      	str	r2, [r4, #36]	; 0x24
 8001018:	f7ff fc6a 	bl	80008f0 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 800101c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 800101e:	42ab      	cmp	r3, r5
 8001020:	d1f7      	bne.n	8001012 <chThdExitS+0x12>
  }
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 8001022:	7f63      	ldrb	r3, [r4, #29]
 8001024:	079b      	lsls	r3, r3, #30
 8001026:	d104      	bne.n	8001032 <chThdExitS+0x32>
    REG_REMOVE(tp);
 8001028:	6922      	ldr	r2, [r4, #16]
 800102a:	6963      	ldr	r3, [r4, #20]
 800102c:	611a      	str	r2, [r3, #16]
 800102e:	6922      	ldr	r2, [r4, #16]
 8001030:	6153      	str	r3, [r2, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8001032:	200f      	movs	r0, #15

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
}
 8001034:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
    REG_REMOVE(tp);
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8001038:	f7ff bbfa 	b.w	8000830 <chSchGoSleepS>
 800103c:	200013f8 	.word	0x200013f8

08001040 <chThdExit>:
 8001040:	2320      	movs	r3, #32
 8001042:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
 8001046:	f7ff bfdb 	b.w	8001000 <chThdExitS>
 800104a:	bf00      	nop
 800104c:	0000      	movs	r0, r0
	...

08001050 <chVTDoResetI>:
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 8001050:	4b1c      	ldr	r3, [pc, #112]	; (80010c4 <chVTDoResetI+0x74>)
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 8001052:	b470      	push	{r4, r5, r6}
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 8001054:	69da      	ldr	r2, [r3, #28]
 8001056:	4282      	cmp	r2, r0
 8001058:	d00f      	beq.n	800107a <chVTDoResetI+0x2a>
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 800105a:	6802      	ldr	r2, [r0, #0]
 800105c:	6841      	ldr	r1, [r0, #4]
    vtp->vt_next->vt_prev = vtp->vt_prev;
    vtp->vt_func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 800105e:	331c      	adds	r3, #28

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 8001060:	600a      	str	r2, [r1, #0]
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8001062:	6802      	ldr	r2, [r0, #0]
    vtp->vt_func = NULL;
 8001064:	2400      	movs	r4, #0

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8001066:	429a      	cmp	r2, r3
  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8001068:	6051      	str	r1, [r2, #4]
    vtp->vt_func = NULL;
 800106a:	60c4      	str	r4, [r0, #12]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 800106c:	d003      	beq.n	8001076 <chVTDoResetI+0x26>
      vtp->vt_next->vt_delta += vtp->vt_delta;
 800106e:	8901      	ldrh	r1, [r0, #8]
 8001070:	8913      	ldrh	r3, [r2, #8]
 8001072:	440b      	add	r3, r1
 8001074:	8113      	strh	r3, [r2, #8]
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8001076:	bc70      	pop	{r4, r5, r6}
 8001078:	4770      	bx	lr

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 800107a:	4619      	mov	r1, r3
 800107c:	6815      	ldr	r5, [r2, #0]
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
  vtp->vt_func = NULL;
 800107e:	2000      	movs	r0, #0

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 8001080:	f841 5f1c 	str.w	r5, [r1, #28]!
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
  vtp->vt_func = NULL;

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8001084:	428d      	cmp	r5, r1
    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8001086:	6069      	str	r1, [r5, #4]
  vtp->vt_func = NULL;
 8001088:	60d0      	str	r0, [r2, #12]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800108a:	d016      	beq.n	80010ba <chVTDoResetI+0x6a>
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 800108c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001090:	6a41      	ldr	r1, [r0, #36]	; 0x24

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8001092:	8916      	ldrh	r6, [r2, #8]
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8001094:	8cdc      	ldrh	r4, [r3, #38]	; 0x26

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8001096:	892a      	ldrh	r2, [r5, #8]
 8001098:	b289      	uxth	r1, r1
 800109a:	18b3      	adds	r3, r6, r2
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 800109c:	1b0a      	subs	r2, r1, r4

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 800109e:	b29b      	uxth	r3, r3
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 80010a0:	b292      	uxth	r2, r2

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 80010a2:	4293      	cmp	r3, r2

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 80010a4:	812b      	strh	r3, [r5, #8]
  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 80010a6:	d9e6      	bls.n	8001076 <chVTDoResetI+0x26>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.vt_next->vt_delta - nowdelta;
 80010a8:	1a9b      	subs	r3, r3, r2
 80010aa:	b29b      	uxth	r3, r3

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
 80010ac:	2b01      	cmp	r3, #1
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 80010ae:	bf98      	it	ls
 80010b0:	2302      	movls	r3, #2
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
 80010b2:	440b      	add	r3, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	6343      	str	r3, [r0, #52]	; 0x34
 80010b8:	e7dd      	b.n	8001076 <chVTDoResetI+0x26>
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 80010ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010be:	60d8      	str	r0, [r3, #12]
 80010c0:	e7d9      	b.n	8001076 <chVTDoResetI+0x26>
 80010c2:	bf00      	nop
 80010c4:	200013f8 	.word	0x200013f8
	...

080010d0 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
 80010d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80010d2:	4e1e      	ldr	r6, [pc, #120]	; (800114c <chVTDoSetI+0x7c>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80010d4:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 80010d8:	46b6      	mov	lr, r6
 80010da:	f85e 4f1c 	ldr.w	r4, [lr, #28]!
 80010de:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 80010e0:	2901      	cmp	r1, #1
 80010e2:	bf98      	it	ls
 80010e4:	2102      	movls	r1, #2
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80010e6:	4574      	cmp	r4, lr
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 80010e8:	6103      	str	r3, [r0, #16]
  vtp->vt_func = vtfunc;
 80010ea:	60c2      	str	r2, [r0, #12]
 80010ec:	b2ab      	uxth	r3, r5
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80010ee:	d01d      	beq.n	800112c <chVTDoSetI+0x5c>
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 80010f0:	4419      	add	r1, r3
 80010f2:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 80010f4:	b289      	uxth	r1, r1
    if (delta < ch.vtlist.vt_next->vt_delta) {
 80010f6:	8922      	ldrh	r2, [r4, #8]
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 80010f8:	1acb      	subs	r3, r1, r3
 80010fa:	b29b      	uxth	r3, r3
    if (delta < ch.vtlist.vt_next->vt_delta) {
 80010fc:	4293      	cmp	r3, r2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80010fe:	bf38      	it	cc
 8001100:	6379      	strcc	r1, [r7, #52]	; 0x34
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 8001102:	4293      	cmp	r3, r2
 8001104:	d905      	bls.n	8001112 <chVTDoSetI+0x42>
    delta -= p->vt_delta;
    p = p->vt_next;
 8001106:	6824      	ldr	r4, [r4, #0]

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
    delta -= p->vt_delta;
 8001108:	1a9b      	subs	r3, r3, r2
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 800110a:	8922      	ldrh	r2, [r4, #8]
    delta -= p->vt_delta;
 800110c:	b29b      	uxth	r3, r3
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 800110e:	429a      	cmp	r2, r3
 8001110:	d3f9      	bcc.n	8001106 <chVTDoSetI+0x36>
  vtp->vt_delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
  ch.vtlist.vt_delta = (systime_t)-1;
 8001112:	f64f 71ff 	movw	r1, #65535	; 0xffff
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 8001116:	6862      	ldr	r2, [r4, #4]
    delta -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
 8001118:	6004      	str	r4, [r0, #0]
  vtp->vt_prev = vtp->vt_next->vt_prev;
 800111a:	6042      	str	r2, [r0, #4]
  vtp->vt_prev->vt_next = vtp;
 800111c:	6010      	str	r0, [r2, #0]
  p->vt_prev = vtp;
 800111e:	6060      	str	r0, [r4, #4]
  vtp->vt_delta = delta
 8001120:	8103      	strh	r3, [r0, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 8001122:	8922      	ldrh	r2, [r4, #8]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	8123      	strh	r3, [r4, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8001128:	84b1      	strh	r1, [r6, #36]	; 0x24
 800112a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_delta = delay;

      /* Being the first element in the list the alarm timer is started.*/
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
 800112c:	18ca      	adds	r2, r1, r3
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800112e:	b292      	uxth	r2, r2
  STM32_ST_TIM->SR     = 0;
 8001130:	f04f 0e00 	mov.w	lr, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001134:	2502      	movs	r5, #2
    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
 8001136:	84f3      	strh	r3, [r6, #38]	; 0x26
      ch.vtlist.vt_next = vtp;
 8001138:	61f0      	str	r0, [r6, #28]
      ch.vtlist.vt_prev = vtp;
 800113a:	6230      	str	r0, [r6, #32]
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
 800113c:	6004      	str	r4, [r0, #0]
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800113e:	6044      	str	r4, [r0, #4]
      vtp->vt_delta = delay;
 8001140:	8101      	strh	r1, [r0, #8]
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001142:	637a      	str	r2, [r7, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8001144:	f8c7 e010 	str.w	lr, [r7, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001148:	60fd      	str	r5, [r7, #12]
 800114a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800114c:	200013f8 	.word	0x200013f8

08001150 <chSchGoSleepTimeoutS>:
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8001150:	f64f 73ff 	movw	r3, #65535	; 0xffff
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8001154:	b530      	push	{r4, r5, lr}

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8001156:	4299      	cmp	r1, r3
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8001158:	b087      	sub	sp, #28

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 800115a:	d012      	beq.n	8001182 <chSchGoSleepTimeoutS+0x32>
 800115c:	4605      	mov	r5, r0
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 800115e:	4c0c      	ldr	r4, [pc, #48]	; (8001190 <chSchGoSleepTimeoutS+0x40>)
 8001160:	a801      	add	r0, sp, #4
 8001162:	69a3      	ldr	r3, [r4, #24]
 8001164:	4a0b      	ldr	r2, [pc, #44]	; (8001194 <chSchGoSleepTimeoutS+0x44>)
 8001166:	f7ff ffb3 	bl	80010d0 <chVTDoSetI>
    chSchGoSleepS(newstate);
 800116a:	4628      	mov	r0, r5
 800116c:	f7ff fb60 	bl	8000830 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8001170:	9b04      	ldr	r3, [sp, #16]
 8001172:	b113      	cbz	r3, 800117a <chSchGoSleepTimeoutS+0x2a>
      chVTDoResetI(&vt);
 8001174:	a801      	add	r0, sp, #4
 8001176:	f7ff ff6b 	bl	8001050 <chVTDoResetI>
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->p_u.rdymsg;
 800117a:	69a3      	ldr	r3, [r4, #24]
}
 800117c:	6a18      	ldr	r0, [r3, #32]
 800117e:	b007      	add	sp, #28
 8001180:	bd30      	pop	{r4, r5, pc}
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 8001182:	f7ff fb55 	bl	8000830 <chSchGoSleepS>
 8001186:	4c02      	ldr	r4, [pc, #8]	; (8001190 <chSchGoSleepTimeoutS+0x40>)
  }

  return currp->p_u.rdymsg;
 8001188:	69a3      	ldr	r3, [r4, #24]
}
 800118a:	6a18      	ldr	r0, [r3, #32]
 800118c:	b007      	add	sp, #28
 800118e:	bd30      	pop	{r4, r5, pc}
 8001190:	200013f8 	.word	0x200013f8
 8001194:	08000481 	.word	0x08000481
	...

080011a0 <chSemWaitTimeoutS>:
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chSemWaitTimeoutS(semaphore_t *sp, systime_t time) {
 80011a0:	4603      	mov	r3, r0
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
 80011a2:	6880      	ldr	r0, [r0, #8]
 80011a4:	1e42      	subs	r2, r0, #1
 80011a6:	2a00      	cmp	r2, #0
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	db01      	blt.n	80011b0 <chSemWaitTimeoutS+0x10>
    sem_insert(currp, &sp->s_queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }

  return MSG_OK;
 80011ac:	2000      	movs	r0, #0
 80011ae:	4770      	bx	lr
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chSemWaitTimeoutS(semaphore_t *sp, systime_t time) {
 80011b0:	b410      	push	{r4}
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
    if (TIME_IMMEDIATE == time) {
 80011b2:	b161      	cbz	r1, 80011ce <chSemWaitTimeoutS+0x2e>
      sp->s_cnt++;

      return MSG_TIMEOUT;
    }
    currp->p_u.wtsemp = sp;
 80011b4:	4a09      	ldr	r2, [pc, #36]	; (80011dc <chSemWaitTimeoutS+0x3c>)
    sem_insert(currp, &sp->s_queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
 80011b6:	2005      	movs	r0, #5
    if (TIME_IMMEDIATE == time) {
      sp->s_cnt++;

      return MSG_TIMEOUT;
    }
    currp->p_u.wtsemp = sp;
 80011b8:	6992      	ldr	r2, [r2, #24]
 80011ba:	6213      	str	r3, [r2, #32]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 80011bc:	685c      	ldr	r4, [r3, #4]
 80011be:	e882 0018 	stmia.w	r2, {r3, r4}
  tp->p_prev->p_next = tp;
 80011c2:	6022      	str	r2, [r4, #0]
  tqp->p_prev = tp;
 80011c4:	605a      	str	r2, [r3, #4]

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }

  return MSG_OK;
}
 80011c6:	f85d 4b04 	ldr.w	r4, [sp], #4
      return MSG_TIMEOUT;
    }
    currp->p_u.wtsemp = sp;
    sem_insert(currp, &sp->s_queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
 80011ca:	f7ff bfc1 	b.w	8001150 <chSchGoSleepTimeoutS>
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
    if (TIME_IMMEDIATE == time) {
      sp->s_cnt++;
 80011ce:	6098      	str	r0, [r3, #8]

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }

  return MSG_OK;
}
 80011d0:	f85d 4b04 	ldr.w	r4, [sp], #4

  if (--sp->s_cnt < (cnt_t)0) {
    if (TIME_IMMEDIATE == time) {
      sp->s_cnt++;

      return MSG_TIMEOUT;
 80011d4:	f04f 30ff 	mov.w	r0, #4294967295

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }

  return MSG_OK;
}
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	200013f8 	.word	0x200013f8

080011e0 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 80011e0:	b169      	cbz	r1, 80011fe <chThdEnqueueTimeoutS+0x1e>
 80011e2:	4602      	mov	r2, r0
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 80011e4:	4b07      	ldr	r3, [pc, #28]	; (8001204 <chThdEnqueueTimeoutS+0x24>)
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 80011e6:	b410      	push	{r4}

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 80011e8:	699b      	ldr	r3, [r3, #24]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 80011ea:	6844      	ldr	r4, [r0, #4]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80011ec:	2004      	movs	r0, #4
 80011ee:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->p_prev->p_next = tp;
 80011f2:	6023      	str	r3, [r4, #0]
  tqp->p_prev = tp;
 80011f4:	6053      	str	r3, [r2, #4]
}
 80011f6:	f85d 4b04 	ldr.w	r4, [sp], #4
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80011fa:	f7ff bfa9 	b.w	8001150 <chSchGoSleepTimeoutS>
}
 80011fe:	f04f 30ff 	mov.w	r0, #4294967295
 8001202:	4770      	bx	lr
 8001204:	200013f8 	.word	0x200013f8
	...

08001210 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
 8001210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001214:	b083      	sub	sp, #12
 8001216:	4604      	mov	r4, r0
 8001218:	468b      	mov	fp, r1
 800121a:	4615      	mov	r5, r2
 800121c:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 800121e:	69c7      	ldr	r7, [r0, #28]
 8001220:	f04f 0820 	mov.w	r8, #32
 8001224:	f388 8811 	msr	BASEPRI, r8
  size_t w = 0;
 8001228:	2600      	movs	r6, #0
 800122a:	46b1      	mov	r9, r6
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 800122c:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 800122e:	f10b 0a01 	add.w	sl, fp, #1

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 8001232:	b1fb      	cbz	r3, 8001274 <chOQWriteTimeout+0x64>
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8001234:	6962      	ldr	r2, [r4, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 8001236:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8001238:	1c50      	adds	r0, r2, #1
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 800123a:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
 800123c:	6160      	str	r0, [r4, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 800123e:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8001240:	f89b 3000 	ldrb.w	r3, [fp]
 8001244:	7013      	strb	r3, [r2, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 8001246:	6923      	ldr	r3, [r4, #16]
 8001248:	6962      	ldr	r2, [r4, #20]
 800124a:	429a      	cmp	r2, r3
      oqp->q_wrptr = oqp->q_buffer;
 800124c:	bf24      	itt	cs
 800124e:	68e3      	ldrcs	r3, [r4, #12]
 8001250:	6163      	strcs	r3, [r4, #20]
    }

    if (nfy != NULL) {
 8001252:	b10f      	cbz	r7, 8001258 <chOQWriteTimeout+0x48>
      nfy(oqp);
 8001254:	4620      	mov	r0, r4
 8001256:	47b8      	blx	r7
 8001258:	f389 8811 	msr	BASEPRI, r9
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
    if (--n == 0U) {
 800125c:	3d01      	subs	r5, #1
    if (nfy != NULL) {
      nfy(oqp);
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
 800125e:	f106 0601 	add.w	r6, r6, #1
    if (--n == 0U) {
 8001262:	d011      	beq.n	8001288 <chOQWriteTimeout+0x78>
 8001264:	f388 8811 	msr	BASEPRI, r8
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8001268:	46d3      	mov	fp, sl
 800126a:	68a3      	ldr	r3, [r4, #8]
 800126c:	f10b 0a01 	add.w	sl, fp, #1

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1df      	bne.n	8001234 <chOQWriteTimeout+0x24>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
 8001274:	4620      	mov	r0, r4
 8001276:	9901      	ldr	r1, [sp, #4]
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	f7ff ffb1 	bl	80011e0 <chThdEnqueueTimeoutS>
 800127e:	9b00      	ldr	r3, [sp, #0]
 8001280:	2800      	cmp	r0, #0
 8001282:	d0d3      	beq.n	800122c <chOQWriteTimeout+0x1c>
 8001284:	f383 8811 	msr	BASEPRI, r3
    if (--n == 0U) {
      return w;
    }
    chSysLock();
  }
}
 8001288:	4630      	mov	r0, r6
 800128a:	b003      	add	sp, #12
 800128c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001290 <chOQPutTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 8001290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001292:	4604      	mov	r4, r0
 8001294:	460f      	mov	r7, r1
 8001296:	4616      	mov	r6, r2
 8001298:	2320      	movs	r3, #32
 800129a:	f383 8811 	msr	BASEPRI, r3
 800129e:	e005      	b.n	80012ac <chOQPutTimeout+0x1c>

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 80012a0:	4620      	mov	r0, r4
 80012a2:	4631      	mov	r1, r6
 80012a4:	f7ff ff9c 	bl	80011e0 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 80012a8:	2800      	cmp	r0, #0
 80012aa:	db17      	blt.n	80012dc <chOQPutTimeout+0x4c>
 80012ac:	68a5      	ldr	r5, [r4, #8]
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
 80012ae:	2d00      	cmp	r5, #0
 80012b0:	d0f6      	beq.n	80012a0 <chOQPutTimeout+0x10>
      return msg;
    }
  }

  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 80012b2:	6962      	ldr	r2, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 80012b4:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 80012b6:	1c51      	adds	r1, r2, #1
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 80012b8:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 80012ba:	6161      	str	r1, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 80012bc:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 80012be:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 80012c0:	6923      	ldr	r3, [r4, #16]
 80012c2:	6962      	ldr	r2, [r4, #20]
 80012c4:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 80012c6:	bf24      	itt	cs
 80012c8:	68e3      	ldrcs	r3, [r4, #12]
 80012ca:	6163      	strcs	r3, [r4, #20]
  }

  if (oqp->q_notify != NULL) {
 80012cc:	69e3      	ldr	r3, [r4, #28]
 80012ce:	b10b      	cbz	r3, 80012d4 <chOQPutTimeout+0x44>
    oqp->q_notify(oqp);
 80012d0:	4620      	mov	r0, r4
 80012d2:	4798      	blx	r3
 80012d4:	2000      	movs	r0, #0
 80012d6:	f380 8811 	msr	BASEPRI, r0
  }
  chSysUnlock();

  return Q_OK;
}
 80012da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012dc:	f385 8811 	msr	BASEPRI, r5
 80012e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012e2:	bf00      	nop
	...

080012f0 <chIQReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
                       size_t n, systime_t timeout) {
 80012f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012f4:	4604      	mov	r4, r0
 80012f6:	b083      	sub	sp, #12
 80012f8:	4689      	mov	r9, r1
 80012fa:	4693      	mov	fp, r2
 80012fc:	461d      	mov	r5, r3
  qnotify_t nfy = iqp->q_notify;
 80012fe:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8001302:	2720      	movs	r7, #32
 8001304:	f387 8811 	msr	BASEPRI, r7
  size_t r = 0;
 8001308:	2600      	movs	r6, #0
 800130a:	46b2      	mov	sl, r6
 800130c:	9701      	str	r7, [sp, #4]

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    if (nfy != NULL) {
 800130e:	f1b8 0f00 	cmp.w	r8, #0
 8001312:	d007      	beq.n	8001324 <chIQReadTimeout+0x34>
      nfy(iqp);
 8001314:	4620      	mov	r0, r4
 8001316:	47c0      	blx	r8
 8001318:	e004      	b.n	8001324 <chIQReadTimeout+0x34>
    }

    while (chIQIsEmptyI(iqp)) {
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
 800131a:	4620      	mov	r0, r4
 800131c:	4629      	mov	r1, r5
 800131e:	f7ff ff5f 	bl	80011e0 <chThdEnqueueTimeoutS>
 8001322:	b9d0      	cbnz	r0, 800135a <chIQReadTimeout+0x6a>
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 8001324:	68a7      	ldr	r7, [r4, #8]
  while (true) {
    if (nfy != NULL) {
      nfy(iqp);
    }

    while (chIQIsEmptyI(iqp)) {
 8001326:	2f00      	cmp	r7, #0
 8001328:	d0f7      	beq.n	800131a <chIQReadTimeout+0x2a>
        return r;
      }
    }

    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 800132a:	69a2      	ldr	r2, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 800132c:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 800132e:	1c51      	adds	r1, r2, #1
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8001330:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
 8001332:	61a1      	str	r1, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8001334:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8001336:	7813      	ldrb	r3, [r2, #0]
 8001338:	f809 3b01 	strb.w	r3, [r9], #1
    if (iqp->q_rdptr >= iqp->q_top) {
 800133c:	6923      	ldr	r3, [r4, #16]
 800133e:	69a2      	ldr	r2, [r4, #24]
 8001340:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 8001342:	bf24      	itt	cs
 8001344:	68e3      	ldrcs	r3, [r4, #12]
 8001346:	61a3      	strcs	r3, [r4, #24]
 8001348:	f38a 8811 	msr	BASEPRI, sl
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    r++;
 800134c:	3601      	adds	r6, #1
    if (--n == 0U) {
 800134e:	45b3      	cmp	fp, r6
 8001350:	d005      	beq.n	800135e <chIQReadTimeout+0x6e>
 8001352:	9b01      	ldr	r3, [sp, #4]
 8001354:	f383 8811 	msr	BASEPRI, r3
 8001358:	e7d9      	b.n	800130e <chIQReadTimeout+0x1e>
 800135a:	f387 8811 	msr	BASEPRI, r7
      return r;
    }

    chSysLock();
  }
}
 800135e:	4630      	mov	r0, r6
 8001360:	b003      	add	sp, #12
 8001362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001366:	bf00      	nop
	...

08001370 <chIQGetTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t timeout) {
 8001370:	b570      	push	{r4, r5, r6, lr}
 8001372:	2320      	movs	r3, #32
 8001374:	460e      	mov	r6, r1
 8001376:	4604      	mov	r4, r0
 8001378:	f383 8811 	msr	BASEPRI, r3
  uint8_t b;

  chSysLock();
  if (iqp->q_notify != NULL) {
 800137c:	69c3      	ldr	r3, [r0, #28]
 800137e:	b13b      	cbz	r3, 8001390 <chIQGetTimeout+0x20>
    iqp->q_notify(iqp);
 8001380:	4798      	blx	r3
 8001382:	e005      	b.n	8001390 <chIQGetTimeout+0x20>
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 8001384:	4620      	mov	r0, r4
 8001386:	4631      	mov	r1, r6
 8001388:	f7ff ff2a 	bl	80011e0 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 800138c:	2800      	cmp	r0, #0
 800138e:	db13      	blt.n	80013b8 <chIQGetTimeout+0x48>
 8001390:	68a5      	ldr	r5, [r4, #8]
  chSysLock();
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
 8001392:	2d00      	cmp	r5, #0
 8001394:	d0f6      	beq.n	8001384 <chIQGetTimeout+0x14>
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8001396:	69a1      	ldr	r1, [r4, #24]
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8001398:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 800139a:	6925      	ldr	r5, [r4, #16]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 800139c:	1c4a      	adds	r2, r1, #1
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 800139e:	3b01      	subs	r3, #1
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 80013a0:	42aa      	cmp	r2, r5
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 80013a2:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 80013a4:	bf28      	it	cs
 80013a6:	68e3      	ldrcs	r3, [r4, #12]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 80013a8:	61a2      	str	r2, [r4, #24]
 80013aa:	7808      	ldrb	r0, [r1, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 80013ac:	bf28      	it	cs
 80013ae:	61a3      	strcs	r3, [r4, #24]
 80013b0:	2300      	movs	r3, #0
 80013b2:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return (msg_t)b;
}
 80013b6:	bd70      	pop	{r4, r5, r6, pc}
 80013b8:	f385 8811 	msr	BASEPRI, r5
 80013bc:	bd70      	pop	{r4, r5, r6, pc}
 80013be:	bf00      	nop

080013c0 <chThdSleepUntil>:
 *
 * @param[in] time      absolute system time
 *
 * @api
 */
void chThdSleepUntil(systime_t time) {
 80013c0:	b508      	push	{r3, lr}
 80013c2:	2320      	movs	r3, #32
 80013c4:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80013c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013cc:	6a59      	ldr	r1, [r3, #36]	; 0x24

  chSysLock();
  time -= chVTGetSystemTimeX();
 80013ce:	1a41      	subs	r1, r0, r1
 80013d0:	b289      	uxth	r1, r1
  if (time > (systime_t)0) {
 80013d2:	b111      	cbz	r1, 80013da <chThdSleepUntil+0x1a>
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 80013d4:	2008      	movs	r0, #8
 80013d6:	f7ff febb 	bl	8001150 <chSchGoSleepTimeoutS>
 80013da:	2300      	movs	r3, #0
 80013dc:	f383 8811 	msr	BASEPRI, r3
 80013e0:	bd08      	pop	{r3, pc}
 80013e2:	bf00      	nop
	...

080013f0 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 80013f0:	b508      	push	{r3, lr}
 80013f2:	4601      	mov	r1, r0
 80013f4:	2320      	movs	r3, #32
 80013f6:	f383 8811 	msr	BASEPRI, r3
 80013fa:	2008      	movs	r0, #8
 80013fc:	f7ff fea8 	bl	8001150 <chSchGoSleepTimeoutS>
 8001400:	2300      	movs	r3, #0
 8001402:	f383 8811 	msr	BASEPRI, r3
 8001406:	bd08      	pop	{r3, pc}
	...

08001410 <chSysRestoreStatusX.part.3.lto_priv.99>:
 *
 * @param[in] sts       the system status to be restored.
 *
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {
 8001410:	b510      	push	{r4, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001412:	f3ef 8405 	mrs	r4, IPSR
 * @retval false        not running in ISR mode.
 * @retval true         running in ISR mode.
 */
static inline bool port_is_isr_context(void) {

  return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 8001416:	f3c4 0408 	ubfx	r4, r4, #0, #9

  if (port_irq_enabled(sts)) {
    if (port_is_isr_context()) {
 800141a:	b11c      	cbz	r4, 8001424 <chSysRestoreStatusX.part.3.lto_priv.99+0x14>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800141c:	2300      	movs	r3, #0
 800141e:	f383 8811 	msr	BASEPRI, r3
 8001422:	bd10      	pop	{r4, pc}
      chSysUnlockFromISR();
    }
    else {
      chSchRescheduleS();
 8001424:	f7ff f94c 	bl	80006c0 <chSchRescheduleS>
 8001428:	f384 8811 	msr	BASEPRI, r4
 800142c:	bd10      	pop	{r4, pc}
 800142e:	bf00      	nop

08001430 <chSysGetStatusAndLockX.part.2.lto_priv.100>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001430:	f3ef 8305 	mrs	r3, IPSR
 8001434:	f3c3 0308 	ubfx	r3, r3, #0, #9
 */
syssts_t chSysGetStatusAndLockX(void) {

  syssts_t sts = port_get_irq_status();
  if (port_irq_enabled(sts)) {
    if (port_is_isr_context()) {
 8001438:	b91b      	cbnz	r3, 8001442 <chSysGetStatusAndLockX.part.2.lto_priv.100+0x12>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800143a:	2320      	movs	r3, #32
 800143c:	f383 8811 	msr	BASEPRI, r3
    else {
      chSysLock();
    }
  }
  return sts;
}
 8001440:	4770      	bx	lr
 8001442:	2320      	movs	r3, #32
 8001444:	f383 8811 	msr	BASEPRI, r3
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	0000      	movs	r0, r0
	...

08001450 <chSysIntegrityCheckI>:
  cnt_t n;

  chDbgCheckClassI();

  /* Ready List integrity check.*/
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 8001450:	07c2      	lsls	r2, r0, #31
 * @retval false        The test succeeded.
 * @retval true         Test failed.
 *
 * @iclass
 */
bool chSysIntegrityCheckI(unsigned testmask) {
 8001452:	b410      	push	{r4}
  cnt_t n;

  chDbgCheckClassI();

  /* Ready List integrity check.*/
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 8001454:	d510      	bpl.n	8001478 <chSysIntegrityCheckI+0x28>
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_queue.p_next;
 8001456:	4a2a      	ldr	r2, [pc, #168]	; (8001500 <chSysIntegrityCheckI+0xb0>)
 8001458:	6811      	ldr	r1, [r2, #0]
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 800145a:	4291      	cmp	r1, r2
 800145c:	d03e      	beq.n	80014dc <chSysIntegrityCheckI+0x8c>
 800145e:	2300      	movs	r3, #0
      n++;
      tp = tp->p_next;
 8001460:	6809      	ldr	r1, [r1, #0]

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_queue.p_next;
    while (tp != (thread_t *)&ch.rlist.r_queue) {
      n++;
 8001462:	3301      	adds	r3, #1
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_queue.p_next;
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 8001464:	4291      	cmp	r1, r2
 8001466:	d1fb      	bne.n	8001460 <chSysIntegrityCheckI+0x10>
      n++;
      tp = tp->p_next;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_queue.p_prev;
 8001468:	684c      	ldr	r4, [r1, #4]
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 800146a:	428c      	cmp	r4, r1
 800146c:	d032      	beq.n	80014d4 <chSysIntegrityCheckI+0x84>
      n--;
      tp = tp->p_prev;
 800146e:	6864      	ldr	r4, [r4, #4]
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_queue.p_prev;
    while (tp != (thread_t *)&ch.rlist.r_queue) {
      n--;
 8001470:	3b01      	subs	r3, #1
      tp = tp->p_next;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_queue.p_prev;
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 8001472:	4294      	cmp	r4, r2
 8001474:	d1fb      	bne.n	800146e <chSysIntegrityCheckI+0x1e>
      n--;
      tp = tp->p_prev;
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 8001476:	bb6b      	cbnz	r3, 80014d4 <chSysIntegrityCheckI+0x84>
      return true;
    }
  }

  /* Timers list integrity check.*/
  if ((testmask & CH_INTEGRITY_VTLIST) != 0U) {
 8001478:	0783      	lsls	r3, r0, #30
 800147a:	d512      	bpl.n	80014a2 <chSysIntegrityCheckI+0x52>
    virtual_timer_t * vtp;

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
    vtp = ch.vtlist.vt_next;
 800147c:	4a20      	ldr	r2, [pc, #128]	; (8001500 <chSysIntegrityCheckI+0xb0>)
 800147e:	4614      	mov	r4, r2
 8001480:	f854 1f1c 	ldr.w	r1, [r4, #28]!
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001484:	42a1      	cmp	r1, r4
 8001486:	d02f      	beq.n	80014e8 <chSysIntegrityCheckI+0x98>
 8001488:	2300      	movs	r3, #0
      n++;
      vtp = vtp->vt_next;
 800148a:	6809      	ldr	r1, [r1, #0]

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
    vtp = ch.vtlist.vt_next;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
      n++;
 800148c:	3301      	adds	r3, #1
    virtual_timer_t * vtp;

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
    vtp = ch.vtlist.vt_next;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 800148e:	42a1      	cmp	r1, r4
 8001490:	d1fb      	bne.n	800148a <chSysIntegrityCheckI+0x3a>
      n++;
      vtp = vtp->vt_next;
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.vt_prev;
 8001492:	6a12      	ldr	r2, [r2, #32]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001494:	428a      	cmp	r2, r1
 8001496:	d01d      	beq.n	80014d4 <chSysIntegrityCheckI+0x84>
      n--;
      vtp = vtp->vt_prev;
 8001498:	6852      	ldr	r2, [r2, #4]
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.vt_prev;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
      n--;
 800149a:	3b01      	subs	r3, #1
      vtp = vtp->vt_next;
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.vt_prev;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 800149c:	42a2      	cmp	r2, r4
 800149e:	d1fb      	bne.n	8001498 <chSysIntegrityCheckI+0x48>
      n--;
      vtp = vtp->vt_prev;
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 80014a0:	b9c3      	cbnz	r3, 80014d4 <chSysIntegrityCheckI+0x84>
      return true;
    }
  }

#if CH_CFG_USE_REGISTRY == TRUE
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
 80014a2:	f010 0004 	ands.w	r0, r0, #4
 80014a6:	d012      	beq.n	80014ce <chSysIntegrityCheckI+0x7e>
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_newer;
 80014a8:	4a15      	ldr	r2, [pc, #84]	; (8001500 <chSysIntegrityCheckI+0xb0>)
 80014aa:	6913      	ldr	r3, [r2, #16]
    while (tp != (thread_t *)&ch.rlist) {
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d021      	beq.n	80014f4 <chSysIntegrityCheckI+0xa4>
 80014b0:	2000      	movs	r0, #0
      n++;
      tp = tp->p_newer;
 80014b2:	691b      	ldr	r3, [r3, #16]

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_newer;
    while (tp != (thread_t *)&ch.rlist) {
      n++;
 80014b4:	3001      	adds	r0, #1
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_newer;
    while (tp != (thread_t *)&ch.rlist) {
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d1fb      	bne.n	80014b2 <chSysIntegrityCheckI+0x62>
      n++;
      tp = tp->p_newer;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_older;
 80014ba:	6959      	ldr	r1, [r3, #20]
    while (tp != (thread_t *)&ch.rlist) {
 80014bc:	4299      	cmp	r1, r3
 80014be:	d009      	beq.n	80014d4 <chSysIntegrityCheckI+0x84>
      n--;
      tp = tp->p_older;
 80014c0:	6949      	ldr	r1, [r1, #20]
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_older;
    while (tp != (thread_t *)&ch.rlist) {
      n--;
 80014c2:	3801      	subs	r0, #1
      tp = tp->p_newer;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_older;
    while (tp != (thread_t *)&ch.rlist) {
 80014c4:	4291      	cmp	r1, r2
 80014c6:	d1fb      	bne.n	80014c0 <chSysIntegrityCheckI+0x70>
      n--;
      tp = tp->p_older;
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 80014c8:	3000      	adds	r0, #0
 80014ca:	bf18      	it	ne
 80014cc:	2001      	movne	r0, #1
    PORT_INTEGRITY_CHECK();
  }
#endif

  return false;
}
 80014ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80014d2:	4770      	bx	lr
      tp = tp->p_prev;
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
      return true;
 80014d4:	2001      	movs	r0, #1
    PORT_INTEGRITY_CHECK();
  }
#endif

  return false;
}
 80014d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80014da:	4770      	bx	lr
      n++;
      tp = tp->p_next;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_queue.p_prev;
 80014dc:	6854      	ldr	r4, [r2, #4]
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 80014de:	4294      	cmp	r4, r2
  /* Ready List integrity check.*/
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
 80014e0:	bf18      	it	ne
 80014e2:	2300      	movne	r3, #0
      tp = tp->p_next;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_queue.p_prev;
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 80014e4:	d1c3      	bne.n	800146e <chSysIntegrityCheckI+0x1e>
 80014e6:	e7c7      	b.n	8001478 <chSysIntegrityCheckI+0x28>
      n++;
      vtp = vtp->vt_next;
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.vt_prev;
 80014e8:	6a12      	ldr	r2, [r2, #32]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 80014ea:	42a2      	cmp	r2, r4
  /* Timers list integrity check.*/
  if ((testmask & CH_INTEGRITY_VTLIST) != 0U) {
    virtual_timer_t * vtp;

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
 80014ec:	bf18      	it	ne
 80014ee:	2300      	movne	r3, #0
      vtp = vtp->vt_next;
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.vt_prev;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 80014f0:	d1d2      	bne.n	8001498 <chSysIntegrityCheckI+0x48>
 80014f2:	e7d6      	b.n	80014a2 <chSysIntegrityCheckI+0x52>
      n++;
      tp = tp->p_newer;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_older;
 80014f4:	6959      	ldr	r1, [r3, #20]
#if CH_CFG_USE_REGISTRY == TRUE
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
 80014f6:	2000      	movs	r0, #0
      tp = tp->p_newer;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_older;
    while (tp != (thread_t *)&ch.rlist) {
 80014f8:	4299      	cmp	r1, r3
 80014fa:	d1e1      	bne.n	80014c0 <chSysIntegrityCheckI+0x70>
 80014fc:	e7e7      	b.n	80014ce <chSysIntegrityCheckI+0x7e>
 80014fe:	bf00      	nop
 8001500:	200013f8 	.word	0x200013f8
	...

08001510 <BusFault_Handler>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 8001510:	e7fe      	b.n	8001510 <BusFault_Handler>
 8001512:	bf00      	nop
	...

08001520 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8001520:	b4f0      	push	{r4, r5, r6, r7}
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
 8001522:	4e11      	ldr	r6, [pc, #68]	; (8001568 <__init_ram_areas+0x48>)
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8001524:	2500      	movs	r5, #0
 8001526:	f106 0780 	add.w	r7, r6, #128	; 0x80
void __init_ram_areas(void) {
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;

  do {
    uint32_t *tp = rap->init_text_area;
 800152a:	e896 001a 	ldmia.w	r6, {r1, r3, r4}
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 800152e:	42a3      	cmp	r3, r4
 8001530:	d20d      	bcs.n	800154e <__init_ram_areas+0x2e>
 8001532:	461a      	mov	r2, r3
 8001534:	3904      	subs	r1, #4
      *p = *tp;
 8001536:	f851 0f04 	ldr.w	r0, [r1, #4]!
 800153a:	f842 0b04 	str.w	r0, [r2], #4
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 800153e:	42a2      	cmp	r2, r4
 8001540:	d3f9      	bcc.n	8001536 <__init_ram_areas+0x16>
 8001542:	43da      	mvns	r2, r3
 8001544:	4414      	add	r4, r2
 8001546:	f024 0403 	bic.w	r4, r4, #3
 800154a:	3404      	adds	r4, #4
 800154c:	4423      	add	r3, r4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 800154e:	68f2      	ldr	r2, [r6, #12]
 8001550:	4293      	cmp	r3, r2
 8001552:	d203      	bcs.n	800155c <__init_ram_areas+0x3c>
      *p = 0;
 8001554:	f843 5b04 	str.w	r5, [r3], #4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8001558:	4293      	cmp	r3, r2
 800155a:	d3fb      	bcc.n	8001554 <__init_ram_areas+0x34>
      *p = 0;
      p++;
    }
    rap++;
 800155c:	3610      	adds	r6, #16
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 800155e:	42be      	cmp	r6, r7
 8001560:	d3e3      	bcc.n	800152a <__init_ram_areas+0xa>
#endif
}
 8001562:	bcf0      	pop	{r4, r5, r6, r7}
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	08006f50 	.word	0x08006f50
 800156c:	00000000 	.word	0x00000000

08001570 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 8001570:	e7fe      	b.n	8001570 <__default_exit>
 8001572:	bf00      	nop
	...

08001580 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
	...

08001590 <__core_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __core_init(void) {
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
	...

080015a0 <mtx5_setup.lto_priv.130>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80015a0:	4b02      	ldr	r3, [pc, #8]	; (80015ac <mtx5_setup.lto_priv.130+0xc>)
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 80015a2:	2200      	movs	r2, #0
 80015a4:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80015a6:	605b      	str	r3, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	4770      	bx	lr
 80015ac:	20000800 	.word	0x20000800

080015b0 <mtx4_setup.lto_priv.128>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80015b0:	4a04      	ldr	r2, [pc, #16]	; (80015c4 <mtx4_setup.lto_priv.128+0x14>)
 80015b2:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <mtx4_setup.lto_priv.128+0x18>)
 80015b4:	2100      	movs	r1, #0
 80015b6:	6012      	str	r2, [r2, #0]
  tqp->p_prev = (thread_t *)tqp;
 80015b8:	6052      	str	r2, [r2, #4]
 80015ba:	6091      	str	r1, [r2, #8]
 80015bc:	6099      	str	r1, [r3, #8]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80015be:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80015c0:	605b      	str	r3, [r3, #4]
 80015c2:	4770      	bx	lr
 80015c4:	20000800 	.word	0x20000800
 80015c8:	20000810 	.word	0x20000810
 80015cc:	00000000 	.word	0x00000000

080015d0 <mtx1_setup.lto_priv.126>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80015d0:	4b02      	ldr	r3, [pc, #8]	; (80015dc <mtx1_setup.lto_priv.126+0xc>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80015d6:	605b      	str	r3, [r3, #4]
 80015d8:	609a      	str	r2, [r3, #8]
 80015da:	4770      	bx	lr
 80015dc:	20000800 	.word	0x20000800

080015e0 <sem3_setup.lto_priv.123>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80015e0:	4b02      	ldr	r3, [pc, #8]	; (80015ec <sem3_setup.lto_priv.123+0xc>)
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));

  queue_init(&sp->s_queue);
  sp->s_cnt = n;
 80015e2:	2200      	movs	r2, #0
 80015e4:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80015e6:	605b      	str	r3, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	4770      	bx	lr
 80015ec:	200008a0 	.word	0x200008a0

080015f0 <sem2_setup.lto_priv.121>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80015f0:	4b02      	ldr	r3, [pc, #8]	; (80015fc <sem2_setup.lto_priv.121+0xc>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80015f6:	605b      	str	r3, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	4770      	bx	lr
 80015fc:	200008a0 	.word	0x200008a0

08001600 <sem1_setup.lto_priv.119>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001600:	4b02      	ldr	r3, [pc, #8]	; (800160c <sem1_setup.lto_priv.119+0xc>)
 8001602:	2200      	movs	r2, #0
 8001604:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8001606:	605b      	str	r3, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	4770      	bx	lr
 800160c:	200008a0 	.word	0x200008a0

08001610 <mtx4_execute.lto_priv.129>:
  chThdSleepMilliseconds(150);
  chMtxLock(&m1);
  chMtxUnlock(&m1);
}

static void mtx4_execute(void) {
 8001610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8001614:	4d84      	ldr	r5, [pc, #528]	; (8001828 <mtx4_execute.lto_priv.129+0x218>)
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 8001616:	4b85      	ldr	r3, [pc, #532]	; (800182c <mtx4_execute.lto_priv.129+0x21c>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8001618:	69aa      	ldr	r2, [r5, #24]
  chThdSleepMilliseconds(150);
  chMtxLock(&m1);
  chMtxUnlock(&m1);
}

static void mtx4_execute(void) {
 800161a:	b082      	sub	sp, #8
 800161c:	6894      	ldr	r4, [r2, #8]
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 800161e:	f44f 71a4 	mov.w	r1, #328	; 0x148

static void mtx4_execute(void) {
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
 8001622:	1c67      	adds	r7, r4, #1
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 8001624:	463a      	mov	r2, r7
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	4881      	ldr	r0, [pc, #516]	; (8001830 <mtx4_execute.lto_priv.129+0x220>)
 800162a:	4b82      	ldr	r3, [pc, #520]	; (8001834 <mtx4_execute.lto_priv.129+0x224>)
 800162c:	f7ff f8c0 	bl	80007b0 <chThdCreateStatic>
 8001630:	4e81      	ldr	r6, [pc, #516]	; (8001838 <mtx4_execute.lto_priv.129+0x228>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "A");
 8001632:	4b82      	ldr	r3, [pc, #520]	; (800183c <mtx4_execute.lto_priv.129+0x22c>)
static void mtx4_execute(void) {
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
  p2 = p + 2;
 8001634:	f104 0802 	add.w	r8, r4, #2
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 8001638:	6030      	str	r0, [r6, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "A");
 800163a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800163e:	4642      	mov	r2, r8
 8001640:	9300      	str	r3, [sp, #0]
 8001642:	487f      	ldr	r0, [pc, #508]	; (8001840 <mtx4_execute.lto_priv.129+0x230>)
 8001644:	4b7f      	ldr	r3, [pc, #508]	; (8001844 <mtx4_execute.lto_priv.129+0x234>)
 8001646:	f7ff f8b3 	bl	80007b0 <chThdCreateStatic>
 800164a:	6070      	str	r0, [r6, #4]
  chMtxLock(&m2);
 800164c:	487e      	ldr	r0, [pc, #504]	; (8001848 <mtx4_execute.lto_priv.129+0x238>)
 800164e:	f7ff fb07 	bl	8000c60 <chMtxLock>
 8001652:	69ab      	ldr	r3, [r5, #24]
  test_assert(1, chThdGetPriorityX() == p, "wrong priority level");
 8001654:	2001      	movs	r0, #1
 8001656:	6899      	ldr	r1, [r3, #8]
 8001658:	1a61      	subs	r1, r4, r1
 800165a:	fab1 f181 	clz	r1, r1
 800165e:	0949      	lsrs	r1, r1, #5
 8001660:	f001 fa6e 	bl	8002b40 <_test_assert>
 8001664:	b110      	cbz	r0, 800166c <mtx4_execute.lto_priv.129+0x5c>
  chThdSleepMilliseconds(100);
  test_assert(13, chThdGetPriorityX() == p1, "wrong priority level");
  chMtxUnlockAll();
  test_assert(14, chThdGetPriorityX() == p, "wrong priority level");
  test_wait_threads();
}
 8001666:	b002      	add	sp, #8
 8001668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "A");
  chMtxLock(&m2);
  test_assert(1, chThdGetPriorityX() == p, "wrong priority level");
  chThdSleepMilliseconds(100);
 800166c:	20c8      	movs	r0, #200	; 0xc8
 800166e:	f7ff febf 	bl	80013f0 <chThdSleep>
 8001672:	69ab      	ldr	r3, [r5, #24]
  test_assert(2, chThdGetPriorityX() == p1, "wrong priority level");
 8001674:	2002      	movs	r0, #2
 8001676:	6899      	ldr	r1, [r3, #8]
 8001678:	1a79      	subs	r1, r7, r1
 800167a:	fab1 f181 	clz	r1, r1
 800167e:	0949      	lsrs	r1, r1, #5
 8001680:	f001 fa5e 	bl	8002b40 <_test_assert>
 8001684:	2800      	cmp	r0, #0
 8001686:	d1ee      	bne.n	8001666 <mtx4_execute.lto_priv.129+0x56>
  chMtxLock(&m1);
 8001688:	4870      	ldr	r0, [pc, #448]	; (800184c <mtx4_execute.lto_priv.129+0x23c>)
 800168a:	f7ff fae9 	bl	8000c60 <chMtxLock>
 800168e:	69ab      	ldr	r3, [r5, #24]
  test_assert(3, chThdGetPriorityX() == p1, "wrong priority level");
 8001690:	2003      	movs	r0, #3
 8001692:	6899      	ldr	r1, [r3, #8]
 8001694:	1a79      	subs	r1, r7, r1
 8001696:	fab1 f181 	clz	r1, r1
 800169a:	0949      	lsrs	r1, r1, #5
 800169c:	f001 fa50 	bl	8002b40 <_test_assert>
 80016a0:	2800      	cmp	r0, #0
 80016a2:	d1e0      	bne.n	8001666 <mtx4_execute.lto_priv.129+0x56>
  chThdSleepMilliseconds(100);
 80016a4:	20c8      	movs	r0, #200	; 0xc8
 80016a6:	f7ff fea3 	bl	80013f0 <chThdSleep>
 80016aa:	69ab      	ldr	r3, [r5, #24]
  test_assert(4, chThdGetPriorityX() == p2, "wrong priority level");
 80016ac:	2004      	movs	r0, #4
 80016ae:	6899      	ldr	r1, [r3, #8]
 80016b0:	ebc1 0108 	rsb	r1, r1, r8
 80016b4:	fab1 f181 	clz	r1, r1
 80016b8:	0949      	lsrs	r1, r1, #5
 80016ba:	f001 fa41 	bl	8002b40 <_test_assert>
 80016be:	2800      	cmp	r0, #0
 80016c0:	d1d1      	bne.n	8001666 <mtx4_execute.lto_priv.129+0x56>
  chMtxUnlock(&m1);
 80016c2:	4862      	ldr	r0, [pc, #392]	; (800184c <mtx4_execute.lto_priv.129+0x23c>)
 80016c4:	f7ff fa2c 	bl	8000b20 <chMtxUnlock>
 80016c8:	69ab      	ldr	r3, [r5, #24]
  test_assert(5, chThdGetPriorityX() == p1, "wrong priority level");
 80016ca:	2005      	movs	r0, #5
 80016cc:	6899      	ldr	r1, [r3, #8]
 80016ce:	1a79      	subs	r1, r7, r1
 80016d0:	fab1 f181 	clz	r1, r1
 80016d4:	0949      	lsrs	r1, r1, #5
 80016d6:	f001 fa33 	bl	8002b40 <_test_assert>
 80016da:	2800      	cmp	r0, #0
 80016dc:	d1c3      	bne.n	8001666 <mtx4_execute.lto_priv.129+0x56>
  chThdSleepMilliseconds(100);
 80016de:	20c8      	movs	r0, #200	; 0xc8
 80016e0:	f7ff fe86 	bl	80013f0 <chThdSleep>
 80016e4:	69ab      	ldr	r3, [r5, #24]
  test_assert(6, chThdGetPriorityX() == p1, "wrong priority level");
 80016e6:	2006      	movs	r0, #6
 80016e8:	6899      	ldr	r1, [r3, #8]
 80016ea:	1a79      	subs	r1, r7, r1
 80016ec:	fab1 f181 	clz	r1, r1
 80016f0:	0949      	lsrs	r1, r1, #5
 80016f2:	f001 fa25 	bl	8002b40 <_test_assert>
 80016f6:	2800      	cmp	r0, #0
 80016f8:	d1b5      	bne.n	8001666 <mtx4_execute.lto_priv.129+0x56>
  chMtxUnlockAll();
 80016fa:	f7ff f9b9 	bl	8000a70 <chMtxUnlockAll>
 80016fe:	69ab      	ldr	r3, [r5, #24]
  test_assert(7, chThdGetPriorityX() == p, "wrong priority level");
 8001700:	2007      	movs	r0, #7
 8001702:	6899      	ldr	r1, [r3, #8]
 8001704:	1a61      	subs	r1, r4, r1
 8001706:	fab1 f181 	clz	r1, r1
 800170a:	0949      	lsrs	r1, r1, #5
 800170c:	f001 fa18 	bl	8002b40 <_test_assert>
 8001710:	2800      	cmp	r0, #0
 8001712:	d1a8      	bne.n	8001666 <mtx4_execute.lto_priv.129+0x56>
  test_wait_threads();
 8001714:	f001 f994 	bl	8002a40 <test_wait_threads>

  /* Test repeated in order to cover chMtxUnlockS().*/
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "D");
 8001718:	4b4d      	ldr	r3, [pc, #308]	; (8001850 <mtx4_execute.lto_priv.129+0x240>)
 800171a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	463a      	mov	r2, r7
 8001722:	4b44      	ldr	r3, [pc, #272]	; (8001834 <mtx4_execute.lto_priv.129+0x224>)
 8001724:	4842      	ldr	r0, [pc, #264]	; (8001830 <mtx4_execute.lto_priv.129+0x220>)
 8001726:	f7ff f843 	bl	80007b0 <chThdCreateStatic>
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "C");
 800172a:	4b4a      	ldr	r3, [pc, #296]	; (8001854 <mtx4_execute.lto_priv.129+0x244>)
  chMtxUnlockAll();
  test_assert(7, chThdGetPriorityX() == p, "wrong priority level");
  test_wait_threads();

  /* Test repeated in order to cover chMtxUnlockS().*/
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "D");
 800172c:	6030      	str	r0, [r6, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "C");
 800172e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	4642      	mov	r2, r8
 8001736:	4b43      	ldr	r3, [pc, #268]	; (8001844 <mtx4_execute.lto_priv.129+0x234>)
 8001738:	4841      	ldr	r0, [pc, #260]	; (8001840 <mtx4_execute.lto_priv.129+0x230>)
 800173a:	f7ff f839 	bl	80007b0 <chThdCreateStatic>
 800173e:	6070      	str	r0, [r6, #4]
  chMtxLock(&m2);
 8001740:	4841      	ldr	r0, [pc, #260]	; (8001848 <mtx4_execute.lto_priv.129+0x238>)
 8001742:	f7ff fa8d 	bl	8000c60 <chMtxLock>
 8001746:	69ab      	ldr	r3, [r5, #24]
  test_assert(8, chThdGetPriorityX() == p, "wrong priority level");
 8001748:	2008      	movs	r0, #8
 800174a:	6899      	ldr	r1, [r3, #8]
 800174c:	1a61      	subs	r1, r4, r1
 800174e:	fab1 f181 	clz	r1, r1
 8001752:	0949      	lsrs	r1, r1, #5
 8001754:	f001 f9f4 	bl	8002b40 <_test_assert>
 8001758:	2800      	cmp	r0, #0
 800175a:	d184      	bne.n	8001666 <mtx4_execute.lto_priv.129+0x56>
  chThdSleepMilliseconds(100);
 800175c:	20c8      	movs	r0, #200	; 0xc8
 800175e:	f7ff fe47 	bl	80013f0 <chThdSleep>
 8001762:	69ab      	ldr	r3, [r5, #24]
  test_assert(9, chThdGetPriorityX() == p1, "wrong priority level");
 8001764:	2009      	movs	r0, #9
 8001766:	6899      	ldr	r1, [r3, #8]
 8001768:	1a7b      	subs	r3, r7, r1
 800176a:	4259      	negs	r1, r3
 800176c:	4159      	adcs	r1, r3
 800176e:	f001 f9e7 	bl	8002b40 <_test_assert>
 8001772:	2800      	cmp	r0, #0
 8001774:	f47f af77 	bne.w	8001666 <mtx4_execute.lto_priv.129+0x56>
  chMtxLock(&m1);
 8001778:	4834      	ldr	r0, [pc, #208]	; (800184c <mtx4_execute.lto_priv.129+0x23c>)
 800177a:	f7ff fa71 	bl	8000c60 <chMtxLock>
 800177e:	69ab      	ldr	r3, [r5, #24]
  test_assert(10, chThdGetPriorityX() == p1, "wrong priority level");
 8001780:	200a      	movs	r0, #10
 8001782:	6899      	ldr	r1, [r3, #8]
 8001784:	ebc1 0c07 	rsb	ip, r1, r7
 8001788:	f1dc 0100 	rsbs	r1, ip, #0
 800178c:	eb41 010c 	adc.w	r1, r1, ip
 8001790:	f001 f9d6 	bl	8002b40 <_test_assert>
 8001794:	2800      	cmp	r0, #0
 8001796:	f47f af66 	bne.w	8001666 <mtx4_execute.lto_priv.129+0x56>
  chThdSleepMilliseconds(100);
 800179a:	20c8      	movs	r0, #200	; 0xc8
 800179c:	f7ff fe28 	bl	80013f0 <chThdSleep>
 80017a0:	69ab      	ldr	r3, [r5, #24]
  test_assert(11, chThdGetPriorityX() == p2, "wrong priority level");
 80017a2:	200b      	movs	r0, #11
 80017a4:	6899      	ldr	r1, [r3, #8]
 80017a6:	ebc1 0e08 	rsb	lr, r1, r8
 80017aa:	f1de 0100 	rsbs	r1, lr, #0
 80017ae:	eb41 010e 	adc.w	r1, r1, lr
 80017b2:	f001 f9c5 	bl	8002b40 <_test_assert>
 80017b6:	4606      	mov	r6, r0
 80017b8:	2800      	cmp	r0, #0
 80017ba:	f47f af54 	bne.w	8001666 <mtx4_execute.lto_priv.129+0x56>
 80017be:	2320      	movs	r3, #32
 80017c0:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chMtxUnlockS(&m1);
 80017c4:	4821      	ldr	r0, [pc, #132]	; (800184c <mtx4_execute.lto_priv.129+0x23c>)
 80017c6:	f7ff f983 	bl	8000ad0 <chMtxUnlockS>
  chSchRescheduleS();
 80017ca:	f7fe ff79 	bl	80006c0 <chSchRescheduleS>
 80017ce:	f386 8811 	msr	BASEPRI, r6
 80017d2:	69ab      	ldr	r3, [r5, #24]
  chSysUnlock();
  test_assert(12, chThdGetPriorityX() == p1, "wrong priority level");
 80017d4:	200c      	movs	r0, #12
 80017d6:	6899      	ldr	r1, [r3, #8]
 80017d8:	1a7e      	subs	r6, r7, r1
 80017da:	4271      	negs	r1, r6
 80017dc:	4171      	adcs	r1, r6
 80017de:	f001 f9af 	bl	8002b40 <_test_assert>
 80017e2:	2800      	cmp	r0, #0
 80017e4:	f47f af3f 	bne.w	8001666 <mtx4_execute.lto_priv.129+0x56>
  chThdSleepMilliseconds(100);
 80017e8:	20c8      	movs	r0, #200	; 0xc8
 80017ea:	f7ff fe01 	bl	80013f0 <chThdSleep>
 80017ee:	69ab      	ldr	r3, [r5, #24]
  test_assert(13, chThdGetPriorityX() == p1, "wrong priority level");
 80017f0:	200d      	movs	r0, #13
 80017f2:	6899      	ldr	r1, [r3, #8]
 80017f4:	1a7a      	subs	r2, r7, r1
 80017f6:	4251      	negs	r1, r2
 80017f8:	4151      	adcs	r1, r2
 80017fa:	f001 f9a1 	bl	8002b40 <_test_assert>
 80017fe:	2800      	cmp	r0, #0
 8001800:	f47f af31 	bne.w	8001666 <mtx4_execute.lto_priv.129+0x56>
  chMtxUnlockAll();
 8001804:	f7ff f934 	bl	8000a70 <chMtxUnlockAll>
 8001808:	69ab      	ldr	r3, [r5, #24]
  test_assert(14, chThdGetPriorityX() == p, "wrong priority level");
 800180a:	200e      	movs	r0, #14
 800180c:	6899      	ldr	r1, [r3, #8]
 800180e:	1a63      	subs	r3, r4, r1
 8001810:	4259      	negs	r1, r3
 8001812:	4159      	adcs	r1, r3
 8001814:	f001 f994 	bl	8002b40 <_test_assert>
 8001818:	2800      	cmp	r0, #0
 800181a:	f47f af24 	bne.w	8001666 <mtx4_execute.lto_priv.129+0x56>
  test_wait_threads();
}
 800181e:	b002      	add	sp, #8
 8001820:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  test_assert(12, chThdGetPriorityX() == p1, "wrong priority level");
  chThdSleepMilliseconds(100);
  test_assert(13, chThdGetPriorityX() == p1, "wrong priority level");
  chMtxUnlockAll();
  test_assert(14, chThdGetPriorityX() == p, "wrong priority level");
  test_wait_threads();
 8001824:	f001 b90c 	b.w	8002a40 <test_wait_threads>
 8001828:	200013f8 	.word	0x200013f8
 800182c:	08006fd0 	.word	0x08006fd0
 8001830:	20000d50 	.word	0x20000d50
 8001834:	08001861 	.word	0x08001861
 8001838:	20000968 	.word	0x20000968
 800183c:	08006fd4 	.word	0x08006fd4
 8001840:	20000e98 	.word	0x20000e98
 8001844:	08001881 	.word	0x08001881
 8001848:	20000810 	.word	0x20000810
 800184c:	20000800 	.word	0x20000800
 8001850:	080080f8 	.word	0x080080f8
 8001854:	08006fd8 	.word	0x08006fd8
	...

08001860 <thread4a>:

  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}

static THD_FUNCTION(thread4a, p) {
 8001860:	b510      	push	{r4, lr}

  (void)p;
  chThdSleepMilliseconds(50);
  chMtxLock(&m2);
 8001862:	4c06      	ldr	r4, [pc, #24]	; (800187c <thread4a+0x1c>)
}

static THD_FUNCTION(thread4a, p) {

  (void)p;
  chThdSleepMilliseconds(50);
 8001864:	2064      	movs	r0, #100	; 0x64
 8001866:	f7ff fdc3 	bl	80013f0 <chThdSleep>
  chMtxLock(&m2);
 800186a:	4620      	mov	r0, r4
 800186c:	f7ff f9f8 	bl	8000c60 <chMtxLock>
  chMtxUnlock(&m2);
 8001870:	4620      	mov	r0, r4
}
 8001872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static THD_FUNCTION(thread4a, p) {

  (void)p;
  chThdSleepMilliseconds(50);
  chMtxLock(&m2);
  chMtxUnlock(&m2);
 8001876:	f7ff b953 	b.w	8000b20 <chMtxUnlock>
 800187a:	bf00      	nop
 800187c:	20000810 	.word	0x20000810

08001880 <thread4b>:
}

static THD_FUNCTION(thread4b, p) {
 8001880:	b510      	push	{r4, lr}

  (void)p;
  chThdSleepMilliseconds(150);
  chMtxLock(&m1);
 8001882:	4c06      	ldr	r4, [pc, #24]	; (800189c <thread4b+0x1c>)
}

static THD_FUNCTION(thread4b, p) {

  (void)p;
  chThdSleepMilliseconds(150);
 8001884:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001888:	f7ff fdb2 	bl	80013f0 <chThdSleep>
  chMtxLock(&m1);
 800188c:	4620      	mov	r0, r4
 800188e:	f7ff f9e7 	bl	8000c60 <chMtxLock>
  chMtxUnlock(&m1);
 8001892:	4620      	mov	r0, r4
}
 8001894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static THD_FUNCTION(thread4b, p) {

  (void)p;
  chThdSleepMilliseconds(150);
  chMtxLock(&m1);
  chMtxUnlock(&m1);
 8001898:	f7ff b942 	b.w	8000b20 <chMtxUnlock>
 800189c:	20000800 	.word	0x20000800

080018a0 <mtx1_execute.lto_priv.127>:
  chMtxLock(&m1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
}

static void mtx1_execute(void) {
 80018a0:	b570      	push	{r4, r5, r6, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80018a2:	4e29      	ldr	r6, [pc, #164]	; (8001948 <mtx1_execute.lto_priv.127+0xa8>)
 80018a4:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80018a6:	69b3      	ldr	r3, [r6, #24]

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
 80018a8:	4828      	ldr	r0, [pc, #160]	; (800194c <mtx1_execute.lto_priv.127+0xac>)
 80018aa:	689c      	ldr	r4, [r3, #8]
 80018ac:	f7ff f9d8 	bl	8000c60 <chMtxLock>
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 80018b0:	4b27      	ldr	r3, [pc, #156]	; (8001950 <mtx1_execute.lto_priv.127+0xb0>)
 80018b2:	1c62      	adds	r2, r4, #1
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80018ba:	4b26      	ldr	r3, [pc, #152]	; (8001954 <mtx1_execute.lto_priv.127+0xb4>)
 80018bc:	4826      	ldr	r0, [pc, #152]	; (8001958 <mtx1_execute.lto_priv.127+0xb8>)
 80018be:	f7fe ff77 	bl	80007b0 <chThdCreateStatic>
 80018c2:	4d26      	ldr	r5, [pc, #152]	; (800195c <mtx1_execute.lto_priv.127+0xbc>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 80018c4:	4b26      	ldr	r3, [pc, #152]	; (8001960 <mtx1_execute.lto_priv.127+0xc0>)

static void mtx1_execute(void) {

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 80018c6:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 80018c8:	1ca2      	adds	r2, r4, #2
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80018d0:	4b20      	ldr	r3, [pc, #128]	; (8001954 <mtx1_execute.lto_priv.127+0xb4>)
 80018d2:	4824      	ldr	r0, [pc, #144]	; (8001964 <mtx1_execute.lto_priv.127+0xc4>)
 80018d4:	f7fe ff6c 	bl	80007b0 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 80018d8:	4b23      	ldr	r3, [pc, #140]	; (8001968 <mtx1_execute.lto_priv.127+0xc8>)
static void mtx1_execute(void) {

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 80018da:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 80018dc:	1ce2      	adds	r2, r4, #3
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80018e4:	4b1b      	ldr	r3, [pc, #108]	; (8001954 <mtx1_execute.lto_priv.127+0xb4>)
 80018e6:	4821      	ldr	r0, [pc, #132]	; (800196c <mtx1_execute.lto_priv.127+0xcc>)
 80018e8:	f7fe ff62 	bl	80007b0 <chThdCreateStatic>
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 80018ec:	4b20      	ldr	r3, [pc, #128]	; (8001970 <mtx1_execute.lto_priv.127+0xd0>)

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 80018ee:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 80018f0:	1d22      	adds	r2, r4, #4
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80018f8:	4b16      	ldr	r3, [pc, #88]	; (8001954 <mtx1_execute.lto_priv.127+0xb4>)
 80018fa:	481e      	ldr	r0, [pc, #120]	; (8001974 <mtx1_execute.lto_priv.127+0xd4>)
 80018fc:	f7fe ff58 	bl	80007b0 <chThdCreateStatic>
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8001900:	4b1d      	ldr	r3, [pc, #116]	; (8001978 <mtx1_execute.lto_priv.127+0xd8>)
 8001902:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001906:	1d62      	adds	r2, r4, #5
  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8001908:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 800190a:	9300      	str	r3, [sp, #0]
 800190c:	481b      	ldr	r0, [pc, #108]	; (800197c <mtx1_execute.lto_priv.127+0xdc>)
 800190e:	4b11      	ldr	r3, [pc, #68]	; (8001954 <mtx1_execute.lto_priv.127+0xb4>)
 8001910:	f7fe ff4e 	bl	80007b0 <chThdCreateStatic>
 8001914:	6128      	str	r0, [r5, #16]
  chMtxUnlock(&m1);
 8001916:	480d      	ldr	r0, [pc, #52]	; (800194c <mtx1_execute.lto_priv.127+0xac>)
 8001918:	f7ff f902 	bl	8000b20 <chMtxUnlock>
  test_wait_threads();
 800191c:	f001 f890 	bl	8002a40 <test_wait_threads>
 8001920:	69b3      	ldr	r3, [r6, #24]
  test_assert(1, prio == chThdGetPriorityX(), "wrong priority level");
 8001922:	2001      	movs	r0, #1
 8001924:	6899      	ldr	r1, [r3, #8]
 8001926:	1a61      	subs	r1, r4, r1
 8001928:	fab1 f181 	clz	r1, r1
 800192c:	0949      	lsrs	r1, r1, #5
 800192e:	f001 f907 	bl	8002b40 <_test_assert>
 8001932:	b108      	cbz	r0, 8001938 <mtx1_execute.lto_priv.127+0x98>
  test_assert_sequence(2, "ABCDE");
}
 8001934:	b002      	add	sp, #8
 8001936:	bd70      	pop	{r4, r5, r6, pc}
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
  chMtxUnlock(&m1);
  test_wait_threads();
  test_assert(1, prio == chThdGetPriorityX(), "wrong priority level");
  test_assert_sequence(2, "ABCDE");
 8001938:	4911      	ldr	r1, [pc, #68]	; (8001980 <mtx1_execute.lto_priv.127+0xe0>)
 800193a:	2002      	movs	r0, #2
}
 800193c:	b002      	add	sp, #8
 800193e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
  chMtxUnlock(&m1);
  test_wait_threads();
  test_assert(1, prio == chThdGetPriorityX(), "wrong priority level");
  test_assert_sequence(2, "ABCDE");
 8001942:	f001 b8d5 	b.w	8002af0 <_test_assert_sequence>
 8001946:	bf00      	nop
 8001948:	200013f8 	.word	0x200013f8
 800194c:	20000800 	.word	0x20000800
 8001950:	08006fe0 	.word	0x08006fe0
 8001954:	08001a61 	.word	0x08001a61
 8001958:	20000d50 	.word	0x20000d50
 800195c:	20000968 	.word	0x20000968
 8001960:	080080f8 	.word	0x080080f8
 8001964:	20000e98 	.word	0x20000e98
 8001968:	08006fd8 	.word	0x08006fd8
 800196c:	20000fe0 	.word	0x20000fe0
 8001970:	08006fd0 	.word	0x08006fd0
 8001974:	20001128 	.word	0x20001128
 8001978:	08006fd4 	.word	0x08006fd4
 800197c:	20001270 	.word	0x20001270
 8001980:	08006fdc 	.word	0x08006fdc
	...

08001990 <thd1_execute.lto_priv.115>:
static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
}

static void thd1_execute(void) {
 8001990:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8001992:	4f27      	ldr	r7, [pc, #156]	; (8001a30 <thd1_execute.lto_priv.115+0xa0>)

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8001994:	4e27      	ldr	r6, [pc, #156]	; (8001a34 <thd1_execute.lto_priv.115+0xa4>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	4d27      	ldr	r5, [pc, #156]	; (8001a38 <thd1_execute.lto_priv.115+0xa8>)
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	4927      	ldr	r1, [pc, #156]	; (8001a3c <thd1_execute.lto_priv.115+0xac>)
static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
}

static void thd1_execute(void) {
 800199e:	b083      	sub	sp, #12

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 80019a0:	462b      	mov	r3, r5
 80019a2:	9100      	str	r1, [sp, #0]
 80019a4:	3a05      	subs	r2, #5
 80019a6:	4630      	mov	r0, r6
 80019a8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80019ac:	f7fe ff00 	bl	80007b0 <chThdCreateStatic>
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	4c23      	ldr	r4, [pc, #140]	; (8001a40 <thd1_execute.lto_priv.115+0xb0>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 80019b4:	689a      	ldr	r2, [r3, #8]
 80019b6:	4923      	ldr	r1, [pc, #140]	; (8001a44 <thd1_execute.lto_priv.115+0xb4>)
  test_emit_token(*(char *)p);
}

static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 80019b8:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 80019ba:	462b      	mov	r3, r5
 80019bc:	9100      	str	r1, [sp, #0]
 80019be:	3a04      	subs	r2, #4
 80019c0:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 80019c4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80019c8:	f7fe fef2 	bl	80007b0 <chThdCreateStatic>
 80019cc:	69bb      	ldr	r3, [r7, #24]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 80019ce:	491e      	ldr	r1, [pc, #120]	; (8001a48 <thd1_execute.lto_priv.115+0xb8>)
 80019d0:	689a      	ldr	r2, [r3, #8]
}

static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 80019d2:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 80019d4:	462b      	mov	r3, r5
 80019d6:	9100      	str	r1, [sp, #0]
 80019d8:	3a03      	subs	r2, #3
 80019da:	f506 7024 	add.w	r0, r6, #656	; 0x290
 80019de:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80019e2:	f7fe fee5 	bl	80007b0 <chThdCreateStatic>
 80019e6:	69bb      	ldr	r3, [r7, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80019e8:	4918      	ldr	r1, [pc, #96]	; (8001a4c <thd1_execute.lto_priv.115+0xbc>)
 80019ea:	689a      	ldr	r2, [r3, #8]

static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 80019ec:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80019ee:	462b      	mov	r3, r5
 80019f0:	9100      	str	r1, [sp, #0]
 80019f2:	3a02      	subs	r2, #2
 80019f4:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 80019f8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80019fc:	f7fe fed8 	bl	80007b0 <chThdCreateStatic>
 8001a00:	69bb      	ldr	r3, [r7, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8001a02:	4913      	ldr	r1, [pc, #76]	; (8001a50 <thd1_execute.lto_priv.115+0xc0>)
 8001a04:	689a      	ldr	r2, [r3, #8]
static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8001a06:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8001a08:	3a01      	subs	r2, #1
 8001a0a:	462b      	mov	r3, r5
 8001a0c:	9100      	str	r1, [sp, #0]
 8001a0e:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 8001a12:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001a16:	f7fe fecb 	bl	80007b0 <chThdCreateStatic>
 8001a1a:	6120      	str	r0, [r4, #16]
  test_wait_threads();
 8001a1c:	f001 f810 	bl	8002a40 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8001a20:	490c      	ldr	r1, [pc, #48]	; (8001a54 <thd1_execute.lto_priv.115+0xc4>)
 8001a22:	2001      	movs	r0, #1
}
 8001a24:	b003      	add	sp, #12
 8001a26:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 8001a2a:	f001 b861 	b.w	8002af0 <_test_assert_sequence>
 8001a2e:	bf00      	nop
 8001a30:	200013f8 	.word	0x200013f8
 8001a34:	20000d50 	.word	0x20000d50
 8001a38:	08001a81 	.word	0x08001a81
 8001a3c:	08006fe0 	.word	0x08006fe0
 8001a40:	20000968 	.word	0x20000968
 8001a44:	080080f8 	.word	0x080080f8
 8001a48:	08006fd8 	.word	0x08006fd8
 8001a4c:	08006fd0 	.word	0x08006fd0
 8001a50:	08006fd4 	.word	0x08006fd4
 8001a54:	08006fdc 	.word	0x08006fdc
	...

08001a60 <thread1.lto_priv.110>:
static void mtx1_setup(void) {

  chMtxObjectInit(&m1);
}

static THD_FUNCTION(thread1, p) {
 8001a60:	b538      	push	{r3, r4, r5, lr}
 8001a62:	4605      	mov	r5, r0

  chMtxLock(&m1);
 8001a64:	4c05      	ldr	r4, [pc, #20]	; (8001a7c <thread1.lto_priv.110+0x1c>)
 8001a66:	4620      	mov	r0, r4
 8001a68:	f7ff f8fa 	bl	8000c60 <chMtxLock>
  test_emit_token(*(char *)p);
 8001a6c:	7828      	ldrb	r0, [r5, #0]
 8001a6e:	f001 f87f 	bl	8002b70 <test_emit_token>
  chMtxUnlock(&m1);
 8001a72:	4620      	mov	r0, r4
}
 8001a74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

static THD_FUNCTION(thread1, p) {

  chMtxLock(&m1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
 8001a78:	f7ff b852 	b.w	8000b20 <chMtxUnlock>
 8001a7c:	20000800 	.word	0x20000800

08001a80 <thread>:
 * priority order regardless of the initial order.
 */

static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
 8001a80:	7800      	ldrb	r0, [r0, #0]
 8001a82:	f001 b875 	b.w	8002b70 <test_emit_token>
 8001a86:	bf00      	nop
	...

08001a90 <thread1.lto_priv.109>:
static void sem1_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static THD_FUNCTION(thread1, p) {
 8001a90:	b510      	push	{r4, lr}
 8001a92:	4604      	mov	r4, r0

  chSemWait(&sem1);
 8001a94:	4803      	ldr	r0, [pc, #12]	; (8001aa4 <thread1.lto_priv.109+0x14>)
 8001a96:	f7fe ff03 	bl	80008a0 <chSemWait>
  test_emit_token(*(char *)p);
 8001a9a:	7820      	ldrb	r0, [r4, #0]
}
 8001a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static THD_FUNCTION(thread1, p) {

  chSemWait(&sem1);
  test_emit_token(*(char *)p);
 8001aa0:	f001 b866 	b.w	8002b70 <test_emit_token>
 8001aa4:	200008a0 	.word	0x200008a0
	...

08001ab0 <thread4>:
 * <h2>Description</h2>
 * This test case tests the binary semaphores functionality. The test both
 * checks the binary semaphore status and the expected status of the underlying
 * counting semaphore.
 */
static THD_FUNCTION(thread4, p) {
 8001ab0:	b508      	push	{r3, lr}
 8001ab2:	2220      	movs	r2, #32
 8001ab4:	f382 8811 	msr	BASEPRI, r2
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
 8001ab8:	6883      	ldr	r3, [r0, #8]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	dd05      	ble.n	8001aca <thread4+0x1a>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 8001abe:	f7fe fdff 	bl	80006c0 <chSchRescheduleS>
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	f383 8811 	msr	BASEPRI, r3
 8001ac8:	bd08      	pop	{r3, pc}
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
    chSemSignalI(&bsp->bs_sem);
 8001aca:	f7ff fa51 	bl	8000f70 <chSemSignalI>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 8001ace:	f7fe fdf7 	bl	80006c0 <chSchRescheduleS>
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	f383 8811 	msr	BASEPRI, r3
 8001ad8:	bd08      	pop	{r3, pc}
 8001ada:	bf00      	nop
 8001adc:	0000      	movs	r0, r0
	...

08001ae0 <thread2>:
static void sem2_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static THD_FUNCTION(thread2, p) {
 8001ae0:	b508      	push	{r3, lr}

  (void)p;
  chThdSleepMilliseconds(50);
 8001ae2:	2064      	movs	r0, #100	; 0x64
 8001ae4:	f7ff fc84 	bl	80013f0 <chThdSleep>
 8001ae8:	2320      	movs	r3, #32
 8001aea:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chSemSignalI(&sem1); /* For coverage reasons */
 8001aee:	4804      	ldr	r0, [pc, #16]	; (8001b00 <thread2+0x20>)
 8001af0:	f7ff fa3e 	bl	8000f70 <chSemSignalI>
  chSchRescheduleS();
 8001af4:	f7fe fde4 	bl	80006c0 <chSchRescheduleS>
 8001af8:	2300      	movs	r3, #0
 8001afa:	f383 8811 	msr	BASEPRI, r3
 8001afe:	bd08      	pop	{r3, pc}
 8001b00:	200008a0 	.word	0x200008a0
	...

08001b10 <sem4_execute.lto_priv.125>:
static THD_FUNCTION(thread4, p) {

  chBSemSignal((binary_semaphore_t *)p);
}

static void sem4_execute(void) {
 8001b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b12:	b087      	sub	sp, #28
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001b14:	ad03      	add	r5, sp, #12
 8001b16:	2400      	movs	r4, #0
 8001b18:	9503      	str	r5, [sp, #12]
  tqp->p_prev = (thread_t *)tqp;
 8001b1a:	9504      	str	r5, [sp, #16]
 8001b1c:	9405      	str	r4, [sp, #20]
 8001b1e:	2620      	movs	r6, #32
 8001b20:	f386 8811 	msr	BASEPRI, r6
 * @api
 */
void chSemReset(semaphore_t *sp, cnt_t n) {

  chSysLock();
  chSemResetI(sp, n);
 8001b24:	4628      	mov	r0, r5
 8001b26:	4621      	mov	r1, r4
 8001b28:	f7ff fa3a 	bl	8000fa0 <chSemResetI>
  chSchRescheduleS();
 8001b2c:	f7fe fdc8 	bl	80006c0 <chSchRescheduleS>
 8001b30:	f384 8811 	msr	BASEPRI, r4
 8001b34:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chBSemGetStateI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  return (bsp->bs_sem.s_cnt > (cnt_t)0) ? false : true;
 8001b38:	9905      	ldr	r1, [sp, #20]
  binary_semaphore_t bsem;
  
  /* Creates a taken binary semaphore.*/
  chBSemObjectInit(&bsem, TRUE);
  chBSemReset(&bsem, TRUE);
  test_assert_lock(1, chBSemGetStateI(&bsem) == TRUE, "not taken");
 8001b3a:	2001      	movs	r0, #1
 8001b3c:	42a1      	cmp	r1, r4
 8001b3e:	bfcc      	ite	gt
 8001b40:	2100      	movgt	r1, #0
 8001b42:	2101      	movle	r1, #1
 8001b44:	f000 fffc 	bl	8002b40 <_test_assert>
 8001b48:	4607      	mov	r7, r0
 8001b4a:	b118      	cbz	r0, 8001b54 <sem4_execute.lto_priv.125+0x44>
 8001b4c:	f384 8811 	msr	BASEPRI, r4

  /* Checking signaling overflow, the counter must not go beyond 1.*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "taken");
  test_assert_lock(5, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
}
 8001b50:	b007      	add	sp, #28
 8001b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b54:	f380 8811 	msr	BASEPRI, r0
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8001b58:	4b3f      	ldr	r3, [pc, #252]	; (8001c58 <sem4_execute.lto_priv.125+0x148>)
  chBSemObjectInit(&bsem, TRUE);
  chBSemReset(&bsem, TRUE);
  test_assert_lock(1, chBSemGetStateI(&bsem) == TRUE, "not taken");

  /* Starts a signaler thread at a lower priority.*/
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 8001b5a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	483e      	ldr	r0, [pc, #248]	; (8001c5c <sem4_execute.lto_priv.125+0x14c>)
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	4b3e      	ldr	r3, [pc, #248]	; (8001c60 <sem4_execute.lto_priv.125+0x150>)
 8001b66:	3a01      	subs	r2, #1
 8001b68:	9500      	str	r5, [sp, #0]
 8001b6a:	f7fe fe21 	bl	80007b0 <chThdCreateStatic>
 8001b6e:	4b3d      	ldr	r3, [pc, #244]	; (8001c64 <sem4_execute.lto_priv.125+0x154>)
 8001b70:	6018      	str	r0, [r3, #0]
 *
 * @api
 */
static inline msg_t chBSemWait(binary_semaphore_t *bsp) {

  return chSemWait(&bsp->bs_sem);
 8001b72:	4628      	mov	r0, r5
 8001b74:	f7fe fe94 	bl	80008a0 <chSemWait>
 8001b78:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chBSemGetStateI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  return (bsp->bs_sem.s_cnt > (cnt_t)0) ? false : true;
 8001b7c:	9905      	ldr	r1, [sp, #20]
                                 
  /* Waits to be signaled.*/
  chBSemWait(&bsem);
  
  /* The binary semaphore is expected to be taken.*/
  test_assert_lock(2, chBSemGetStateI(&bsem) == TRUE, "not taken");
 8001b7e:	2002      	movs	r0, #2
 8001b80:	2900      	cmp	r1, #0
 8001b82:	bfcc      	ite	gt
 8001b84:	2100      	movgt	r1, #0
 8001b86:	2101      	movle	r1, #1
 8001b88:	f000 ffda 	bl	8002b40 <_test_assert>
 8001b8c:	b118      	cbz	r0, 8001b96 <sem4_execute.lto_priv.125+0x86>
 8001b8e:	f387 8811 	msr	BASEPRI, r7

  /* Checking signaling overflow, the counter must not go beyond 1.*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "taken");
  test_assert_lock(5, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
}
 8001b92:	b007      	add	sp, #28
 8001b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b96:	f380 8811 	msr	BASEPRI, r0
 8001b9a:	f386 8811 	msr	BASEPRI, r6
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
 8001b9e:	9b05      	ldr	r3, [sp, #20]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	dd23      	ble.n	8001bec <sem4_execute.lto_priv.125+0xdc>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 8001ba4:	f7fe fd8c 	bl	80006c0 <chSchRescheduleS>
 8001ba8:	2400      	movs	r4, #0
 8001baa:	f384 8811 	msr	BASEPRI, r4
 8001bae:	2720      	movs	r7, #32
 8001bb0:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(2, chBSemGetStateI(&bsem) == TRUE, "not taken");

  /* Releasing it, check both the binary semaphore state and the underlying
     counter semaphore state..*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "still taken");
 8001bb4:	9905      	ldr	r1, [sp, #20]
 8001bb6:	2003      	movs	r0, #3
 8001bb8:	42a1      	cmp	r1, r4
 8001bba:	bfd4      	ite	le
 8001bbc:	2100      	movle	r1, #0
 8001bbe:	2101      	movgt	r1, #1
 8001bc0:	f000 ffbe 	bl	8002b40 <_test_assert>
 8001bc4:	4606      	mov	r6, r0
 8001bc6:	2800      	cmp	r0, #0
 8001bc8:	d1c0      	bne.n	8001b4c <sem4_execute.lto_priv.125+0x3c>
 8001bca:	f380 8811 	msr	BASEPRI, r0
 8001bce:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(4, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
 8001bd2:	9905      	ldr	r1, [sp, #20]
 8001bd4:	2004      	movs	r0, #4
 8001bd6:	f1a1 0101 	sub.w	r1, r1, #1
 8001bda:	fab1 f181 	clz	r1, r1
 8001bde:	0949      	lsrs	r1, r1, #5
 8001be0:	f000 ffae 	bl	8002b40 <_test_assert>
 8001be4:	b130      	cbz	r0, 8001bf4 <sem4_execute.lto_priv.125+0xe4>
 8001be6:	f386 8811 	msr	BASEPRI, r6
 8001bea:	e7b1      	b.n	8001b50 <sem4_execute.lto_priv.125+0x40>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
    chSemSignalI(&bsp->bs_sem);
 8001bec:	4628      	mov	r0, r5
 8001bee:	f7ff f9bf 	bl	8000f70 <chSemSignalI>
 8001bf2:	e7d7      	b.n	8001ba4 <sem4_execute.lto_priv.125+0x94>
 8001bf4:	f380 8811 	msr	BASEPRI, r0
 8001bf8:	f387 8811 	msr	BASEPRI, r7
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
 8001bfc:	9b05      	ldr	r3, [sp, #20]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	dd23      	ble.n	8001c4a <sem4_execute.lto_priv.125+0x13a>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 8001c02:	f7fe fd5d 	bl	80006c0 <chSchRescheduleS>
 8001c06:	2400      	movs	r4, #0
 8001c08:	f384 8811 	msr	BASEPRI, r4
 8001c0c:	2620      	movs	r6, #32
 8001c0e:	f386 8811 	msr	BASEPRI, r6

  /* Checking signaling overflow, the counter must not go beyond 1.*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "taken");
 8001c12:	9905      	ldr	r1, [sp, #20]
 8001c14:	2003      	movs	r0, #3
 8001c16:	42a1      	cmp	r1, r4
 8001c18:	bfd4      	ite	le
 8001c1a:	2100      	movle	r1, #0
 8001c1c:	2101      	movgt	r1, #1
 8001c1e:	f000 ff8f 	bl	8002b40 <_test_assert>
 8001c22:	4605      	mov	r5, r0
 8001c24:	2800      	cmp	r0, #0
 8001c26:	d191      	bne.n	8001b4c <sem4_execute.lto_priv.125+0x3c>
 8001c28:	f380 8811 	msr	BASEPRI, r0
 8001c2c:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(5, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
 8001c30:	9905      	ldr	r1, [sp, #20]
 8001c32:	2005      	movs	r0, #5
 8001c34:	f1a1 0101 	sub.w	r1, r1, #1
 8001c38:	fab1 f181 	clz	r1, r1
 8001c3c:	0949      	lsrs	r1, r1, #5
 8001c3e:	f000 ff7f 	bl	8002b40 <_test_assert>
 8001c42:	b130      	cbz	r0, 8001c52 <sem4_execute.lto_priv.125+0x142>
 8001c44:	f385 8811 	msr	BASEPRI, r5
 8001c48:	e782      	b.n	8001b50 <sem4_execute.lto_priv.125+0x40>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
    chSemSignalI(&bsp->bs_sem);
 8001c4a:	4628      	mov	r0, r5
 8001c4c:	f7ff f990 	bl	8000f70 <chSemSignalI>
 8001c50:	e7d7      	b.n	8001c02 <sem4_execute.lto_priv.125+0xf2>
 8001c52:	f380 8811 	msr	BASEPRI, r0
 8001c56:	e77b      	b.n	8001b50 <sem4_execute.lto_priv.125+0x40>
 8001c58:	200013f8 	.word	0x200013f8
 8001c5c:	20000d50 	.word	0x20000d50
 8001c60:	08001ab1 	.word	0x08001ab1
 8001c64:	20000968 	.word	0x20000968
	...

08001c70 <sem3_execute.lto_priv.124>:
  (void)p;
  chSemWait(&sem1);
  chSemSignal(&sem1);
}

static void sem3_execute(void) {
 8001c70:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8001c72:	4a1e      	ldr	r2, [pc, #120]	; (8001cec <sem3_execute.lto_priv.124+0x7c>)
 8001c74:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8001c76:	6992      	ldr	r2, [r2, #24]

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8001c78:	2300      	movs	r3, #0
 8001c7a:	6892      	ldr	r2, [r2, #8]
 8001c7c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001c80:	3201      	adds	r2, #1
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	481a      	ldr	r0, [pc, #104]	; (8001cf0 <sem3_execute.lto_priv.124+0x80>)
 8001c86:	4b1b      	ldr	r3, [pc, #108]	; (8001cf4 <sem3_execute.lto_priv.124+0x84>)
 8001c88:	f7fe fd92 	bl	80007b0 <chThdCreateStatic>
 *
 * @notapi
 */
static inline bool queue_isempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next == (const thread_t *)tqp);
 8001c8c:	4c1a      	ldr	r4, [pc, #104]	; (8001cf8 <sem3_execute.lto_priv.124+0x88>)
 8001c8e:	4b1b      	ldr	r3, [pc, #108]	; (8001cfc <sem3_execute.lto_priv.124+0x8c>)
 8001c90:	6018      	str	r0, [r3, #0]
  chSemSignalWait(&sem1, &sem1);
 8001c92:	f004 fee5 	bl	8006a60 <chSemSignalWait.constprop.72>
 8001c96:	6821      	ldr	r1, [r4, #0]
  test_assert(1, queue_isempty(&sem1.s_queue), "queue not empty");
 8001c98:	2001      	movs	r0, #1
 8001c9a:	1b09      	subs	r1, r1, r4
 8001c9c:	fab1 f181 	clz	r1, r1
 8001ca0:	0949      	lsrs	r1, r1, #5
 8001ca2:	f000 ff4d 	bl	8002b40 <_test_assert>
 8001ca6:	b108      	cbz	r0, 8001cac <sem3_execute.lto_priv.124+0x3c>
  test_assert(2, sem1.s_cnt == 0, "counter not zero");

  chSemSignalWait(&sem1, &sem1);
  test_assert(3, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(4, sem1.s_cnt == 0, "counter not zero");
}
 8001ca8:	b002      	add	sp, #8
 8001caa:	bd10      	pop	{r4, pc}
static void sem3_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
  chSemSignalWait(&sem1, &sem1);
  test_assert(1, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(2, sem1.s_cnt == 0, "counter not zero");
 8001cac:	68a1      	ldr	r1, [r4, #8]
 8001cae:	2002      	movs	r0, #2
 8001cb0:	fab1 f181 	clz	r1, r1
 8001cb4:	0949      	lsrs	r1, r1, #5
 8001cb6:	f000 ff43 	bl	8002b40 <_test_assert>
 8001cba:	2800      	cmp	r0, #0
 8001cbc:	d1f4      	bne.n	8001ca8 <sem3_execute.lto_priv.124+0x38>

  chSemSignalWait(&sem1, &sem1);
 8001cbe:	f004 fecf 	bl	8006a60 <chSemSignalWait.constprop.72>
 8001cc2:	6821      	ldr	r1, [r4, #0]
  test_assert(3, queue_isempty(&sem1.s_queue), "queue not empty");
 8001cc4:	2003      	movs	r0, #3
 8001cc6:	1b09      	subs	r1, r1, r4
 8001cc8:	fab1 f181 	clz	r1, r1
 8001ccc:	0949      	lsrs	r1, r1, #5
 8001cce:	f000 ff37 	bl	8002b40 <_test_assert>
 8001cd2:	2800      	cmp	r0, #0
 8001cd4:	d1e8      	bne.n	8001ca8 <sem3_execute.lto_priv.124+0x38>
  test_assert(4, sem1.s_cnt == 0, "counter not zero");
 8001cd6:	68a1      	ldr	r1, [r4, #8]
 8001cd8:	2004      	movs	r0, #4
 8001cda:	fab1 f181 	clz	r1, r1
 8001cde:	0949      	lsrs	r1, r1, #5
}
 8001ce0:	b002      	add	sp, #8
 8001ce2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_assert(1, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(2, sem1.s_cnt == 0, "counter not zero");

  chSemSignalWait(&sem1, &sem1);
  test_assert(3, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(4, sem1.s_cnt == 0, "counter not zero");
 8001ce6:	f000 bf2b 	b.w	8002b40 <_test_assert>
 8001cea:	bf00      	nop
 8001cec:	200013f8 	.word	0x200013f8
 8001cf0:	20000d50 	.word	0x20000d50
 8001cf4:	08001d01 	.word	0x08001d01
 8001cf8:	200008a0 	.word	0x200008a0
 8001cfc:	20000968 	.word	0x20000968

08001d00 <thread3>:
static void sem3_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static THD_FUNCTION(thread3, p) {
 8001d00:	b510      	push	{r4, lr}

  (void)p;
  chSemWait(&sem1);
 8001d02:	4c04      	ldr	r4, [pc, #16]	; (8001d14 <thread3+0x14>)
 8001d04:	4620      	mov	r0, r4
 8001d06:	f7fe fdcb 	bl	80008a0 <chSemWait>
  chSemSignal(&sem1);
 8001d0a:	4620      	mov	r0, r4
}
 8001d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

static THD_FUNCTION(thread3, p) {

  (void)p;
  chSemWait(&sem1);
  chSemSignal(&sem1);
 8001d10:	f7fe bd2e 	b.w	8000770 <chSemSignal>
 8001d14:	200008a0 	.word	0x200008a0
	...

08001d20 <sem2_execute.lto_priv.122>:
  chSemSignalI(&sem1); /* For coverage reasons */
  chSchRescheduleS();
  chSysUnlock();
}

static void sem2_execute(void) {
 8001d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d22:	2520      	movs	r5, #32
 8001d24:	b083      	sub	sp, #12
 8001d26:	f385 8811 	msr	BASEPRI, r5
 */
msg_t chSemWaitTimeout(semaphore_t *sp, systime_t time) {
  msg_t msg;

  chSysLock();
  msg = chSemWaitTimeoutS(sp, time);
 8001d2a:	4c55      	ldr	r4, [pc, #340]	; (8001e80 <sem2_execute.lto_priv.122+0x160>)
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	4620      	mov	r0, r4
 8001d30:	f7ff fa36 	bl	80011a0 <chSemWaitTimeoutS>
 8001d34:	2300      	movs	r3, #0
 8001d36:	4601      	mov	r1, r0
 8001d38:	f383 8811 	msr	BASEPRI, r3

  /*
   * Testing special case TIME_IMMEDIATE.
   */
  msg = chSemWaitTimeout(&sem1, TIME_IMMEDIATE);
  test_assert(1, msg == MSG_TIMEOUT, "wrong wake-up message");
 8001d3c:	f1a1 31ff 	sub.w	r1, r1, #4294967295
 8001d40:	fab1 f181 	clz	r1, r1
 8001d44:	2001      	movs	r0, #1
 8001d46:	0949      	lsrs	r1, r1, #5
 8001d48:	f000 fefa 	bl	8002b40 <_test_assert>
 8001d4c:	b108      	cbz	r0, 8001d52 <sem2_execute.lto_priv.122+0x32>
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
  test_assert_time_window(11, target_time, target_time + ALLOWED_DELAY);
}
 8001d4e:	b003      	add	sp, #12
 8001d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d52:	6821      	ldr	r1, [r4, #0]
  /*
   * Testing special case TIME_IMMEDIATE.
   */
  msg = chSemWaitTimeout(&sem1, TIME_IMMEDIATE);
  test_assert(1, msg == MSG_TIMEOUT, "wrong wake-up message");
  test_assert(2, queue_isempty(&sem1.s_queue), "queue not empty");
 8001d54:	2002      	movs	r0, #2
 8001d56:	1b09      	subs	r1, r1, r4
 8001d58:	fab1 f181 	clz	r1, r1
 8001d5c:	0949      	lsrs	r1, r1, #5
 8001d5e:	f000 feef 	bl	8002b40 <_test_assert>
 8001d62:	2800      	cmp	r0, #0
 8001d64:	d1f3      	bne.n	8001d4e <sem2_execute.lto_priv.122+0x2e>
  test_assert(3, sem1.s_cnt == 0, "counter not zero");
 8001d66:	68a1      	ldr	r1, [r4, #8]
 8001d68:	2003      	movs	r0, #3
 8001d6a:	fab1 f181 	clz	r1, r1
 8001d6e:	0949      	lsrs	r1, r1, #5
 8001d70:	f000 fee6 	bl	8002b40 <_test_assert>
 8001d74:	4606      	mov	r6, r0
 8001d76:	2800      	cmp	r0, #0
 8001d78:	d1e9      	bne.n	8001d4e <sem2_execute.lto_priv.122+0x2e>
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8001d7a:	4b42      	ldr	r3, [pc, #264]	; (8001e84 <sem2_execute.lto_priv.122+0x164>)

  /*
   * Testing not timeout condition.
   */
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8001d7c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	4841      	ldr	r0, [pc, #260]	; (8001e88 <sem2_execute.lto_priv.122+0x168>)
 8001d84:	689a      	ldr	r2, [r3, #8]
 8001d86:	4b41      	ldr	r3, [pc, #260]	; (8001e8c <sem2_execute.lto_priv.122+0x16c>)
 8001d88:	3a01      	subs	r2, #1
 8001d8a:	9600      	str	r6, [sp, #0]
 8001d8c:	f7fe fd10 	bl	80007b0 <chThdCreateStatic>
 8001d90:	4b3f      	ldr	r3, [pc, #252]	; (8001e90 <sem2_execute.lto_priv.122+0x170>)
 8001d92:	6018      	str	r0, [r3, #0]
 8001d94:	f385 8811 	msr	BASEPRI, r5
 8001d98:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d9c:	4620      	mov	r0, r4
 8001d9e:	f7ff f9ff 	bl	80011a0 <chSemWaitTimeoutS>
 8001da2:	4607      	mov	r7, r0
 8001da4:	f386 8811 	msr	BASEPRI, r6
                                 thread2, 0);
  msg = chSemWaitTimeout(&sem1, MS2ST(500));
  test_wait_threads();
 8001da8:	f000 fe4a 	bl	8002a40 <test_wait_threads>
  test_assert(4, msg == MSG_OK, "wrong wake-up message");
 8001dac:	fab7 f187 	clz	r1, r7
 8001db0:	2004      	movs	r0, #4
 8001db2:	0949      	lsrs	r1, r1, #5
 8001db4:	f000 fec4 	bl	8002b40 <_test_assert>
 8001db8:	2800      	cmp	r0, #0
 8001dba:	d1c8      	bne.n	8001d4e <sem2_execute.lto_priv.122+0x2e>
 8001dbc:	6821      	ldr	r1, [r4, #0]
  test_assert(5, queue_isempty(&sem1.s_queue), "queue not empty");
 8001dbe:	2005      	movs	r0, #5
 8001dc0:	1b09      	subs	r1, r1, r4
 8001dc2:	fab1 f181 	clz	r1, r1
 8001dc6:	0949      	lsrs	r1, r1, #5
 8001dc8:	f000 feba 	bl	8002b40 <_test_assert>
 8001dcc:	2800      	cmp	r0, #0
 8001dce:	d1be      	bne.n	8001d4e <sem2_execute.lto_priv.122+0x2e>
  test_assert(6, sem1.s_cnt == 0, "counter not zero");
 8001dd0:	68a1      	ldr	r1, [r4, #8]
 8001dd2:	2006      	movs	r0, #6
 8001dd4:	fab1 f181 	clz	r1, r1
 8001dd8:	0949      	lsrs	r1, r1, #5
 8001dda:	f000 feb1 	bl	8002b40 <_test_assert>
 8001dde:	4606      	mov	r6, r0
 8001de0:	2800      	cmp	r0, #0
 8001de2:	d1b4      	bne.n	8001d4e <sem2_execute.lto_priv.122+0x2e>

  /*
   * Testing timeout condition.
   */
  test_wait_tick();
 8001de4:	f000 fe1c 	bl	8002a20 <test_wait_tick>
 8001de8:	f385 8811 	msr	BASEPRI, r5
 8001dec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001df0:	6a5f      	ldr	r7, [r3, #36]	; 0x24
 8001df2:	f386 8811 	msr	BASEPRI, r6
 8001df6:	2641      	movs	r6, #65	; 0x41
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
  for (i = 0; i < 5; i++) {
    test_emit_token('A' + i);
 8001df8:	4630      	mov	r0, r6
 8001dfa:	f000 feb9 	bl	8002b70 <test_emit_token>
 8001dfe:	f385 8811 	msr	BASEPRI, r5
 8001e02:	2164      	movs	r1, #100	; 0x64
 8001e04:	481e      	ldr	r0, [pc, #120]	; (8001e80 <sem2_execute.lto_priv.122+0x160>)
 8001e06:	f7ff f9cb 	bl	80011a0 <chSemWaitTimeoutS>
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	4601      	mov	r1, r0
 8001e0e:	f383 8811 	msr	BASEPRI, r3
    msg = chSemWaitTimeout(&sem1, MS2ST(50));
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
 8001e12:	f1a1 31ff 	sub.w	r1, r1, #4294967295
 8001e16:	fab1 f181 	clz	r1, r1
 8001e1a:	2007      	movs	r0, #7
 8001e1c:	0949      	lsrs	r1, r1, #5
 8001e1e:	f000 fe8f 	bl	8002b40 <_test_assert>
 8001e22:	2800      	cmp	r0, #0
 8001e24:	d193      	bne.n	8001d4e <sem2_execute.lto_priv.122+0x2e>
 8001e26:	6821      	ldr	r1, [r4, #0]
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
 8001e28:	2008      	movs	r0, #8
 8001e2a:	1b09      	subs	r1, r1, r4
 8001e2c:	fab1 f181 	clz	r1, r1
 8001e30:	0949      	lsrs	r1, r1, #5
 8001e32:	f000 fe85 	bl	8002b40 <_test_assert>
 8001e36:	2800      	cmp	r0, #0
 8001e38:	d189      	bne.n	8001d4e <sem2_execute.lto_priv.122+0x2e>
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
 8001e3a:	68a1      	ldr	r1, [r4, #8]
 8001e3c:	2009      	movs	r0, #9
 8001e3e:	fab1 f181 	clz	r1, r1
 8001e42:	0949      	lsrs	r1, r1, #5
 8001e44:	f000 fe7c 	bl	8002b40 <_test_assert>
 8001e48:	3601      	adds	r6, #1
 8001e4a:	b2f6      	uxtb	r6, r6
 8001e4c:	2800      	cmp	r0, #0
 8001e4e:	f47f af7e 	bne.w	8001d4e <sem2_execute.lto_priv.122+0x2e>
  /*
   * Testing timeout condition.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
  for (i = 0; i < 5; i++) {
 8001e52:	2e46      	cmp	r6, #70	; 0x46
 8001e54:	d1d0      	bne.n	8001df8 <sem2_execute.lto_priv.122+0xd8>
    msg = chSemWaitTimeout(&sem1, MS2ST(50));
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
 8001e56:	200a      	movs	r0, #10
 8001e58:	490e      	ldr	r1, [pc, #56]	; (8001e94 <sem2_execute.lto_priv.122+0x174>)
 8001e5a:	f000 fe49 	bl	8002af0 <_test_assert_sequence>
 8001e5e:	2800      	cmp	r0, #0
 8001e60:	f47f af75 	bne.w	8001d4e <sem2_execute.lto_priv.122+0x2e>
 8001e64:	b2bf      	uxth	r7, r7

  /*
   * Testing timeout condition.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
 8001e66:	f507 71fa 	add.w	r1, r7, #500	; 0x1f4
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
  test_assert_time_window(11, target_time, target_time + ALLOWED_DELAY);
 8001e6a:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 8001e6e:	b289      	uxth	r1, r1
 8001e70:	b292      	uxth	r2, r2
 8001e72:	200b      	movs	r0, #11
}
 8001e74:	b003      	add	sp, #12
 8001e76:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
  test_assert_time_window(11, target_time, target_time + ALLOWED_DELAY);
 8001e7a:	f000 be11 	b.w	8002aa0 <_test_assert_time_window>
 8001e7e:	bf00      	nop
 8001e80:	200008a0 	.word	0x200008a0
 8001e84:	200013f8 	.word	0x200013f8
 8001e88:	20000d50 	.word	0x20000d50
 8001e8c:	08001ae1 	.word	0x08001ae1
 8001e90:	20000968 	.word	0x20000968
 8001e94:	08006fdc 	.word	0x08006fdc
	...

08001ea0 <sem1_execute.lto_priv.120>:

  chSemWait(&sem1);
  test_emit_token(*(char *)p);
}

static void sem1_execute(void) {
 8001ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8001ea2:	4d4b      	ldr	r5, [pc, #300]	; (8001fd0 <sem1_execute.lto_priv.120+0x130>)

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8001ea4:	4f4b      	ldr	r7, [pc, #300]	; (8001fd4 <sem1_execute.lto_priv.120+0x134>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8001ea6:	69ab      	ldr	r3, [r5, #24]

  chSemWait(&sem1);
  test_emit_token(*(char *)p);
}

static void sem1_execute(void) {
 8001ea8:	b083      	sub	sp, #12

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001eb0:	3205      	adds	r2, #5
 8001eb2:	4b49      	ldr	r3, [pc, #292]	; (8001fd8 <sem1_execute.lto_priv.120+0x138>)
 8001eb4:	4849      	ldr	r0, [pc, #292]	; (8001fdc <sem1_execute.lto_priv.120+0x13c>)
 8001eb6:	9700      	str	r7, [sp, #0]
 8001eb8:	f7fe fc7a 	bl	80007b0 <chThdCreateStatic>
 8001ebc:	69ab      	ldr	r3, [r5, #24]
 8001ebe:	4c48      	ldr	r4, [pc, #288]	; (8001fe0 <sem1_execute.lto_priv.120+0x140>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8001ec0:	689a      	ldr	r2, [r3, #8]
 8001ec2:	4b48      	ldr	r3, [pc, #288]	; (8001fe4 <sem1_execute.lto_priv.120+0x144>)
  test_emit_token(*(char *)p);
}

static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8001ec4:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8001ec6:	3201      	adds	r2, #1
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001ece:	4b42      	ldr	r3, [pc, #264]	; (8001fd8 <sem1_execute.lto_priv.120+0x138>)
 8001ed0:	4845      	ldr	r0, [pc, #276]	; (8001fe8 <sem1_execute.lto_priv.120+0x148>)
 8001ed2:	f7fe fc6d 	bl	80007b0 <chThdCreateStatic>
 8001ed6:	69aa      	ldr	r2, [r5, #24]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8001ed8:	4b44      	ldr	r3, [pc, #272]	; (8001fec <sem1_execute.lto_priv.120+0x14c>)
 8001eda:	6892      	ldr	r2, [r2, #8]
 8001edc:	f44f 71a4 	mov.w	r1, #328	; 0x148
}

static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8001ee0:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8001ee2:	3203      	adds	r2, #3
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	4842      	ldr	r0, [pc, #264]	; (8001ff0 <sem1_execute.lto_priv.120+0x150>)
 8001ee8:	4b3b      	ldr	r3, [pc, #236]	; (8001fd8 <sem1_execute.lto_priv.120+0x138>)
 8001eea:	f7fe fc61 	bl	80007b0 <chThdCreateStatic>
 8001eee:	69aa      	ldr	r2, [r5, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8001ef0:	4b40      	ldr	r3, [pc, #256]	; (8001ff4 <sem1_execute.lto_priv.120+0x154>)
 8001ef2:	6892      	ldr	r2, [r2, #8]
 8001ef4:	f44f 71a4 	mov.w	r1, #328	; 0x148

static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8001ef8:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8001efa:	3204      	adds	r2, #4
 8001efc:	9300      	str	r3, [sp, #0]
 8001efe:	483e      	ldr	r0, [pc, #248]	; (8001ff8 <sem1_execute.lto_priv.120+0x158>)
 8001f00:	4b35      	ldr	r3, [pc, #212]	; (8001fd8 <sem1_execute.lto_priv.120+0x138>)
 8001f02:	f7fe fc55 	bl	80007b0 <chThdCreateStatic>
 8001f06:	69aa      	ldr	r2, [r5, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8001f08:	4b3c      	ldr	r3, [pc, #240]	; (8001ffc <sem1_execute.lto_priv.120+0x15c>)
 8001f0a:	6892      	ldr	r2, [r2, #8]
 8001f0c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001f10:	3202      	adds	r2, #2
static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8001f12:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	483a      	ldr	r0, [pc, #232]	; (8002000 <sem1_execute.lto_priv.120+0x160>)
 8001f18:	4b2f      	ldr	r3, [pc, #188]	; (8001fd8 <sem1_execute.lto_priv.120+0x138>)
 8001f1a:	f7fe fc49 	bl	80007b0 <chThdCreateStatic>
 8001f1e:	6120      	str	r0, [r4, #16]
  chSemSignal(&sem1);
 8001f20:	4838      	ldr	r0, [pc, #224]	; (8002004 <sem1_execute.lto_priv.120+0x164>)
 8001f22:	f7fe fc25 	bl	8000770 <chSemSignal>
  chSemSignal(&sem1);
 8001f26:	4837      	ldr	r0, [pc, #220]	; (8002004 <sem1_execute.lto_priv.120+0x164>)
 8001f28:	f7fe fc22 	bl	8000770 <chSemSignal>
  chSemSignal(&sem1);
 8001f2c:	4835      	ldr	r0, [pc, #212]	; (8002004 <sem1_execute.lto_priv.120+0x164>)
 8001f2e:	f7fe fc1f 	bl	8000770 <chSemSignal>
  chSemSignal(&sem1);
 8001f32:	4834      	ldr	r0, [pc, #208]	; (8002004 <sem1_execute.lto_priv.120+0x164>)
 8001f34:	f7fe fc1c 	bl	8000770 <chSemSignal>
  chSemSignal(&sem1);
 8001f38:	4832      	ldr	r0, [pc, #200]	; (8002004 <sem1_execute.lto_priv.120+0x164>)
 8001f3a:	f7fe fc19 	bl	8000770 <chSemSignal>
  test_wait_threads();
 8001f3e:	f000 fd7f 	bl	8002a40 <test_wait_threads>
#if CH_CFG_USE_SEMAPHORES_PRIORITY
  test_assert_sequence(1, "ADCEB");
#else
  test_assert_sequence(1, "ABCDE");
 8001f42:	2001      	movs	r0, #1
 8001f44:	4930      	ldr	r1, [pc, #192]	; (8002008 <sem1_execute.lto_priv.120+0x168>)
 8001f46:	f000 fdd3 	bl	8002af0 <_test_assert_sequence>
 8001f4a:	4606      	mov	r6, r0
 8001f4c:	b108      	cbz	r0, 8001f52 <sem1_execute.lto_priv.120+0xb2>
  chSemAddCounterI(&sem1, 2);
  chSchRescheduleS();
  chSysUnlock();
  test_wait_threads();
  test_assert_lock(2, chSemGetCounterI(&sem1) == 1, "invalid counter");
}
 8001f4e:	b003      	add	sp, #12
 8001f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f52:	69ab      	ldr	r3, [r5, #24]
#if CH_CFG_USE_SEMAPHORES_PRIORITY
  test_assert_sequence(1, "ADCEB");
#else
  test_assert_sequence(1, "ABCDE");
#endif
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8001f54:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001f58:	689a      	ldr	r2, [r3, #8]
 8001f5a:	4820      	ldr	r0, [pc, #128]	; (8001fdc <sem1_execute.lto_priv.120+0x13c>)
 8001f5c:	3205      	adds	r2, #5
 8001f5e:	9700      	str	r7, [sp, #0]
 8001f60:	4b1d      	ldr	r3, [pc, #116]	; (8001fd8 <sem1_execute.lto_priv.120+0x138>)
 8001f62:	f7fe fc25 	bl	80007b0 <chThdCreateStatic>
 8001f66:	2320      	movs	r3, #32
 8001f68:	6020      	str	r0, [r4, #0]
 8001f6a:	f383 8811 	msr	BASEPRI, r3
 8001f6e:	4c25      	ldr	r4, [pc, #148]	; (8002004 <sem1_execute.lto_priv.120+0x164>)
 8001f70:	2502      	movs	r5, #2
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
    if (++sp->s_cnt <= (cnt_t)0) {
 8001f72:	4627      	mov	r7, r4
 8001f74:	e002      	b.n	8001f7c <sem1_execute.lto_priv.120+0xdc>
  chDbgCheck((sp != NULL) && (n > (cnt_t)0));
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
 8001f76:	2d01      	cmp	r5, #1
 8001f78:	d00e      	beq.n	8001f98 <sem1_execute.lto_priv.120+0xf8>
 8001f7a:	2501      	movs	r5, #1
    if (++sp->s_cnt <= (cnt_t)0) {
 8001f7c:	68a3      	ldr	r3, [r4, #8]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	60a3      	str	r3, [r4, #8]
 8001f84:	dcf7      	bgt.n	8001f76 <sem1_execute.lto_priv.120+0xd6>
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8001f86:	6838      	ldr	r0, [r7, #0]

  tqp->p_next = tp->p_next;
 8001f88:	6803      	ldr	r3, [r0, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001f8a:	605f      	str	r7, [r3, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001f8c:	603b      	str	r3, [r7, #0]
      chSchReadyI(queue_fifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_OK;
 8001f8e:	f7fe fcaf 	bl	80008f0 <chSchReadyI>
  chDbgCheck((sp != NULL) && (n > (cnt_t)0));
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
 8001f92:	2d01      	cmp	r5, #1
    if (++sp->s_cnt <= (cnt_t)0) {
      chSchReadyI(queue_fifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_OK;
 8001f94:	6206      	str	r6, [r0, #32]
  chDbgCheck((sp != NULL) && (n > (cnt_t)0));
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
 8001f96:	d1f0      	bne.n	8001f7a <sem1_execute.lto_priv.120+0xda>
  chSysLock();
  chSemAddCounterI(&sem1, 2);
  chSchRescheduleS();
 8001f98:	f7fe fb92 	bl	80006c0 <chSchRescheduleS>
 8001f9c:	2500      	movs	r5, #0
 8001f9e:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_wait_threads();
 8001fa2:	f000 fd4d 	bl	8002a40 <test_wait_threads>
 8001fa6:	2320      	movs	r3, #32
 8001fa8:	f383 8811 	msr	BASEPRI, r3
  test_assert_lock(2, chSemGetCounterI(&sem1) == 1, "invalid counter");
 8001fac:	68a1      	ldr	r1, [r4, #8]
 8001fae:	2002      	movs	r0, #2
 8001fb0:	f1a1 0101 	sub.w	r1, r1, #1
 8001fb4:	fab1 f181 	clz	r1, r1
 8001fb8:	0949      	lsrs	r1, r1, #5
 8001fba:	f000 fdc1 	bl	8002b40 <_test_assert>
 8001fbe:	b918      	cbnz	r0, 8001fc8 <sem1_execute.lto_priv.120+0x128>
 8001fc0:	f380 8811 	msr	BASEPRI, r0
}
 8001fc4:	b003      	add	sp, #12
 8001fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fc8:	f385 8811 	msr	BASEPRI, r5
 8001fcc:	b003      	add	sp, #12
 8001fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fd0:	200013f8 	.word	0x200013f8
 8001fd4:	08006fd4 	.word	0x08006fd4
 8001fd8:	08001a91 	.word	0x08001a91
 8001fdc:	20000d50 	.word	0x20000d50
 8001fe0:	20000968 	.word	0x20000968
 8001fe4:	08006fd0 	.word	0x08006fd0
 8001fe8:	20000e98 	.word	0x20000e98
 8001fec:	08006fd8 	.word	0x08006fd8
 8001ff0:	20000fe0 	.word	0x20000fe0
 8001ff4:	080080f8 	.word	0x080080f8
 8001ff8:	20001128 	.word	0x20001128
 8001ffc:	08006fe0 	.word	0x08006fe0
 8002000:	20001270 	.word	0x20001270
 8002004:	200008a0 	.word	0x200008a0
 8002008:	08006fdc 	.word	0x08006fdc
 800200c:	00000000 	.word	0x00000000

08002010 <thd2_execute.lto_priv.116>:
 * and atomically executed.<br>
 * The test expects the threads to perform their operations in increasing
 * priority order regardless of the initial order.
 */

static void thd2_execute(void) {
 8002010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8002014:	4e47      	ldr	r6, [pc, #284]	; (8002134 <thd2_execute.lto_priv.116+0x124>)

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8002016:	4d48      	ldr	r5, [pc, #288]	; (8002138 <thd2_execute.lto_priv.116+0x128>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8002018:	69b3      	ldr	r3, [r6, #24]
 800201a:	f8df 9134 	ldr.w	r9, [pc, #308]	; 8002150 <thd2_execute.lto_priv.116+0x140>
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	4946      	ldr	r1, [pc, #280]	; (800213c <thd2_execute.lto_priv.116+0x12c>)
 * and atomically executed.<br>
 * The test expects the threads to perform their operations in increasing
 * priority order regardless of the initial order.
 */

static void thd2_execute(void) {
 8002022:	b083      	sub	sp, #12

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8002024:	464b      	mov	r3, r9
 8002026:	9100      	str	r1, [sp, #0]
 8002028:	3a04      	subs	r2, #4
 800202a:	4628      	mov	r0, r5
 800202c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002030:	f7fe fbbe 	bl	80007b0 <chThdCreateStatic>
 8002034:	69b3      	ldr	r3, [r6, #24]
 8002036:	f8df 811c 	ldr.w	r8, [pc, #284]	; 8002154 <thd2_execute.lto_priv.116+0x144>
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	4940      	ldr	r1, [pc, #256]	; (8002140 <thd2_execute.lto_priv.116+0x130>)
 800203e:	f5a5 74a4 	sub.w	r4, r5, #328	; 0x148
 * priority order regardless of the initial order.
 */

static void thd2_execute(void) {

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8002042:	f8c8 0004 	str.w	r0, [r8, #4]
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8002046:	464b      	mov	r3, r9
 8002048:	9100      	str	r1, [sp, #0]
 800204a:	3a05      	subs	r2, #5
 800204c:	4620      	mov	r0, r4
 800204e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002052:	f7fe fbad 	bl	80007b0 <chThdCreateStatic>
 8002056:	69b3      	ldr	r3, [r6, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8002058:	493a      	ldr	r1, [pc, #232]	; (8002144 <thd2_execute.lto_priv.116+0x134>)
 800205a:	689a      	ldr	r2, [r3, #8]
 */

static void thd2_execute(void) {

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 800205c:	f8c8 0000 	str.w	r0, [r8]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8002060:	464b      	mov	r3, r9
 8002062:	9100      	str	r1, [sp, #0]
 8002064:	3a01      	subs	r2, #1
 8002066:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 800206a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800206e:	f7fe fb9f 	bl	80007b0 <chThdCreateStatic>
 8002072:	69b3      	ldr	r3, [r6, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8002074:	4934      	ldr	r1, [pc, #208]	; (8002148 <thd2_execute.lto_priv.116+0x138>)
 8002076:	689a      	ldr	r2, [r3, #8]

static void thd2_execute(void) {

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8002078:	f8c8 0010 	str.w	r0, [r8, #16]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 800207c:	9100      	str	r1, [sp, #0]
 800207e:	3a02      	subs	r2, #2
 8002080:	f505 7024 	add.w	r0, r5, #656	; 0x290
 8002084:	464b      	mov	r3, r9
 8002086:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800208a:	f7fe fb91 	bl	80007b0 <chThdCreateStatic>
 800208e:	2220      	movs	r2, #32
 8002090:	f8c8 000c 	str.w	r0, [r8, #12]
 8002094:	f382 8811 	msr	BASEPRI, r2
 8002098:	69b3      	ldr	r3, [r6, #24]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800209a:	6971      	ldr	r1, [r6, #20]
  /* Done this way for coverage of chThdCreateI() and chThdStart().*/
  chSysLock();
  threads[2] = chThdCreateI(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 800209c:	689b      	ldr	r3, [r3, #8]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800209e:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 8002158 <thd2_execute.lto_priv.116+0x148>
 80020a2:	f1a3 0a03 	sub.w	sl, r3, #3
 80020a6:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 800215c <thd2_execute.lto_priv.116+0x14c>
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80020aa:	f505 73a4 	add.w	r3, r5, #328	; 0x148
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 80020ae:	2700      	movs	r7, #0

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80020b0:	f505 7b1b 	add.w	fp, r5, #620	; 0x26c
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 80020b4:	f8c4 a298 	str.w	sl, [r4, #664]	; 0x298
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 80020b8:	f8c4 a2cc 	str.w	sl, [r4, #716]	; 0x2cc

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80020bc:	f8c4 93b4 	str.w	r9, [r4, #948]	; 0x3b4
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80020c0:	2002      	movs	r0, #2
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 80020c2:	f505 79b6 	add.w	r9, r5, #364	; 0x16c
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80020c6:	f04f 0a01 	mov.w	sl, #1
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80020ca:	f505 75b8 	add.w	r5, r5, #368	; 0x170
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80020ce:	f8c4 62a0 	str.w	r6, [r4, #672]	; 0x2a0

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80020d2:	f8c4 b29c 	str.w	fp, [r4, #668]	; 0x29c
 80020d6:	f8c4 c3b8 	str.w	ip, [r4, #952]	; 0x3b8
 80020da:	f8c4 e3d4 	str.w	lr, [r4, #980]	; 0x3d4
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80020de:	f884 02ac 	strb.w	r0, [r4, #684]	; 0x2ac
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80020e2:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 80020e6:	f884 72ad 	strb.w	r7, [r4, #685]	; 0x2ad
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 80020ea:	f8c4 72c8 	str.w	r7, [r4, #712]	; 0x2c8
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 80020ee:	f8c4 72c4 	str.w	r7, [r4, #708]	; 0x2c4
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 80020f2:	f8c4 72a8 	str.w	r7, [r4, #680]	; 0x2a8
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80020f6:	f884 a2ae 	strb.w	sl, [r4, #686]	; 0x2ae
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80020fa:	610b      	str	r3, [r1, #16]
 80020fc:	6173      	str	r3, [r6, #20]
 80020fe:	f8c8 3008 	str.w	r3, [r8, #8]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8002102:	f8c4 92b4 	str.w	r9, [r4, #692]	; 0x2b4
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002106:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
  tqp->p_prev = (thread_t *)tqp;
 800210a:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
 800210e:	f387 8811 	msr	BASEPRI, r7
  chSysUnlock();
  chThdStart(threads[2]);
 8002112:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8002116:	f382 8811 	msr	BASEPRI, r2
 */
static inline thread_t *chThdStartI(thread_t *tp) {

  chDbgAssert(tp->p_state == CH_STATE_WTSTART, "wrong state");

  return chSchReadyI(tp);
 800211a:	f7fe fbe9 	bl	80008f0 <chSchReadyI>
 800211e:	f387 8811 	msr	BASEPRI, r7
  test_wait_threads();
 8002122:	f000 fc8d 	bl	8002a40 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8002126:	4650      	mov	r0, sl
 8002128:	4908      	ldr	r1, [pc, #32]	; (800214c <thd2_execute.lto_priv.116+0x13c>)
}
 800212a:	b003      	add	sp, #12
 800212c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  chSysLock();
  threads[2] = chThdCreateI(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  chSysUnlock();
  chThdStart(threads[2]);
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 8002130:	f000 bcde 	b.w	8002af0 <_test_assert_sequence>
 8002134:	200013f8 	.word	0x200013f8
 8002138:	20000e98 	.word	0x20000e98
 800213c:	080080f8 	.word	0x080080f8
 8002140:	08006fe0 	.word	0x08006fe0
 8002144:	08006fd4 	.word	0x08006fd4
 8002148:	08006fd0 	.word	0x08006fd0
 800214c:	08006fdc 	.word	0x08006fdc
 8002150:	08001a81 	.word	0x08001a81
 8002154:	20000968 	.word	0x20000968
 8002158:	08006fd8 	.word	0x08006fd8
 800215c:	08000241 	.word	0x08000241

08002160 <thd4_execute.lto_priv.118>:
 * <h2>Description</h2>
 * Delay APIs and associated macros are tested, the invoking thread is verified
 * to wake up at the exact expected time.
 */

static void thd4_execute(void) {
 8002160:	b570      	push	{r4, r5, r6, lr}
  systime_t time;

  test_wait_tick();
 8002162:	f000 fc5d 	bl	8002a20 <test_wait_tick>
 8002166:	2620      	movs	r6, #32
 8002168:	f386 8811 	msr	BASEPRI, r6
 800216c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8002170:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8002172:	2300      	movs	r3, #0
 8002174:	b2a4      	uxth	r4, r4
 8002176:	f383 8811 	msr	BASEPRI, r3

  /* Timeouts in microseconds.*/
  time = chVTGetSystemTime();
  chThdSleepMicroseconds(100000);
 800217a:	20c8      	movs	r0, #200	; 0xc8
 800217c:	f7ff f938 	bl	80013f0 <chThdSleep>
  test_assert_time_window(1,
 8002180:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
 8002184:	f104 02cb 	add.w	r2, r4, #203	; 0xcb
 8002188:	b289      	uxth	r1, r1
 800218a:	b292      	uxth	r2, r2
 800218c:	2001      	movs	r0, #1
 800218e:	f000 fc87 	bl	8002aa0 <_test_assert_time_window>
 8002192:	b100      	cbz	r0, 8002196 <thd4_execute.lto_priv.118+0x36>
 8002194:	bd70      	pop	{r4, r5, r6, pc}
 8002196:	f386 8811 	msr	BASEPRI, r6
 800219a:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800219c:	b2a4      	uxth	r4, r4
 800219e:	f380 8811 	msr	BASEPRI, r0
                          time + US2ST(100000),
                          time + US2ST(100000) + CH_CFG_ST_TIMEDELTA + 1);

  /* Timeouts in milliseconds.*/
  time = chVTGetSystemTime();
  chThdSleepMilliseconds(100);
 80021a2:	20c8      	movs	r0, #200	; 0xc8
 80021a4:	f7ff f924 	bl	80013f0 <chThdSleep>
  test_assert_time_window(2,
 80021a8:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
 80021ac:	f104 02cb 	add.w	r2, r4, #203	; 0xcb
 80021b0:	b289      	uxth	r1, r1
 80021b2:	b292      	uxth	r2, r2
 80021b4:	2002      	movs	r0, #2
 80021b6:	f000 fc73 	bl	8002aa0 <_test_assert_time_window>
 80021ba:	2800      	cmp	r0, #0
 80021bc:	d1ea      	bne.n	8002194 <thd4_execute.lto_priv.118+0x34>
 80021be:	f386 8811 	msr	BASEPRI, r6
 80021c2:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 80021c4:	b2a4      	uxth	r4, r4
 80021c6:	f380 8811 	msr	BASEPRI, r0
                          time + MS2ST(100),
                          time + MS2ST(100) + CH_CFG_ST_TIMEDELTA + 1);

  /* Timeouts in seconds.*/
  time = chVTGetSystemTime();
  chThdSleepSeconds(1);
 80021ca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80021ce:	f7ff f90f 	bl	80013f0 <chThdSleep>
  test_assert_time_window(3,
 80021d2:	f504 61fa 	add.w	r1, r4, #2000	; 0x7d0
 80021d6:	f204 72d3 	addw	r2, r4, #2003	; 0x7d3
 80021da:	b289      	uxth	r1, r1
 80021dc:	b292      	uxth	r2, r2
 80021de:	2003      	movs	r0, #3
 80021e0:	f000 fc5e 	bl	8002aa0 <_test_assert_time_window>
 80021e4:	2800      	cmp	r0, #0
 80021e6:	d1d5      	bne.n	8002194 <thd4_execute.lto_priv.118+0x34>
 80021e8:	f386 8811 	msr	BASEPRI, r6
 80021ec:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 80021ee:	b2a4      	uxth	r4, r4
 80021f0:	f380 8811 	msr	BASEPRI, r0
                          time + S2ST(1),
                          time + S2ST(1) + CH_CFG_ST_TIMEDELTA + 1);

  /* Absolute timelines.*/
  time = chVTGetSystemTime() + MS2ST(100);
 80021f4:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
 80021f8:	b2ad      	uxth	r5, r5
  chThdSleepUntil(time);
 80021fa:	4628      	mov	r0, r5
 80021fc:	f7ff f8e0 	bl	80013c0 <chThdSleepUntil>
  test_assert_time_window(4,
 8002200:	f104 02cb 	add.w	r2, r4, #203	; 0xcb
 8002204:	4629      	mov	r1, r5
                          time,
                          time + CH_CFG_ST_TIMEDELTA + 1);
}
 8002206:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                          time + S2ST(1) + CH_CFG_ST_TIMEDELTA + 1);

  /* Absolute timelines.*/
  time = chVTGetSystemTime() + MS2ST(100);
  chThdSleepUntil(time);
  test_assert_time_window(4,
 800220a:	b292      	uxth	r2, r2
 800220c:	2004      	movs	r0, #4
 800220e:	f000 bc47 	b.w	8002aa0 <_test_assert_time_window>
 8002212:	bf00      	nop
	...

08002220 <thd3_execute.lto_priv.117>:
 * to verify that the priority change happens as expected.<br>
 * If the @p CH_CFG_USE_MUTEXES option is enabled then the priority changes are
 * also tested under priority inheritance boosted priority state.
 */

static void thd3_execute(void) {
 8002220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8002222:	4e49      	ldr	r6, [pc, #292]	; (8002348 <thd3_execute.lto_priv.117+0x128>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8002224:	69b3      	ldr	r3, [r6, #24]
 8002226:	689c      	ldr	r4, [r3, #8]
  tprio_t prio, p1;

  prio = chThdGetPriorityX();
  p1 = chThdSetPriority(prio + 1);
 8002228:	1c65      	adds	r5, r4, #1
 800222a:	4628      	mov	r0, r5
 800222c:	f7fe fa58 	bl	80006e0 <chThdSetPriority>
 8002230:	4607      	mov	r7, r0
  test_assert(1, p1 == prio,
 8002232:	1b39      	subs	r1, r7, r4
 8002234:	fab1 f181 	clz	r1, r1
 8002238:	2001      	movs	r0, #1
 800223a:	0949      	lsrs	r1, r1, #5
 800223c:	f000 fc80 	bl	8002b40 <_test_assert>
 8002240:	b100      	cbz	r0, 8002244 <thd3_execute.lto_priv.117+0x24>
 8002242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002244:	69b3      	ldr	r3, [r6, #24]
              "unexpected returned priority level");
  test_assert(2, chThdGetPriorityX() == prio + 1,
 8002246:	2002      	movs	r0, #2
 8002248:	6899      	ldr	r1, [r3, #8]
 800224a:	1a69      	subs	r1, r5, r1
 800224c:	fab1 f181 	clz	r1, r1
 8002250:	0949      	lsrs	r1, r1, #5
 8002252:	f000 fc75 	bl	8002b40 <_test_assert>
 8002256:	2800      	cmp	r0, #0
 8002258:	d1f3      	bne.n	8002242 <thd3_execute.lto_priv.117+0x22>
              "unexpected priority level");
  p1 = chThdSetPriority(p1);
 800225a:	4638      	mov	r0, r7
 800225c:	f7fe fa40 	bl	80006e0 <chThdSetPriority>
  test_assert(3, p1 == prio + 1,
 8002260:	1a29      	subs	r1, r5, r0
 8002262:	fab1 f181 	clz	r1, r1
 8002266:	2003      	movs	r0, #3
 8002268:	0949      	lsrs	r1, r1, #5
 800226a:	f000 fc69 	bl	8002b40 <_test_assert>
 800226e:	2800      	cmp	r0, #0
 8002270:	d1e7      	bne.n	8002242 <thd3_execute.lto_priv.117+0x22>
 8002272:	69b3      	ldr	r3, [r6, #24]
              "unexpected returned priority level");
  test_assert(4, chThdGetPriorityX() == prio,
 8002274:	2004      	movs	r0, #4
 8002276:	6899      	ldr	r1, [r3, #8]
 8002278:	1a61      	subs	r1, r4, r1
 800227a:	fab1 f181 	clz	r1, r1
 800227e:	0949      	lsrs	r1, r1, #5
 8002280:	f000 fc5e 	bl	8002b40 <_test_assert>
 8002284:	2800      	cmp	r0, #0
 8002286:	d1dc      	bne.n	8002242 <thd3_execute.lto_priv.117+0x22>
 8002288:	2320      	movs	r3, #32
 800228a:	f383 8811 	msr	BASEPRI, r3
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 800228e:	69b2      	ldr	r2, [r6, #24]
              "unexpected priority level");

#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
  /* Simulates a priority boost situation (p_prio > p_realprio).*/
  chSysLock();
  chThdGetSelfX()->p_prio += 2;
 8002290:	6893      	ldr	r3, [r2, #8]
 8002292:	3302      	adds	r3, #2
 8002294:	6093      	str	r3, [r2, #8]
 8002296:	f380 8811 	msr	BASEPRI, r0
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 800229a:	69b3      	ldr	r3, [r6, #24]
  chSysUnlock();
  test_assert(5, chThdGetPriorityX() == prio + 2,
 800229c:	1ca7      	adds	r7, r4, #2
 800229e:	6899      	ldr	r1, [r3, #8]
 80022a0:	2005      	movs	r0, #5
 80022a2:	1a79      	subs	r1, r7, r1
 80022a4:	fab1 f181 	clz	r1, r1
 80022a8:	0949      	lsrs	r1, r1, #5
 80022aa:	f000 fc49 	bl	8002b40 <_test_assert>
 80022ae:	2800      	cmp	r0, #0
 80022b0:	d1c7      	bne.n	8002242 <thd3_execute.lto_priv.117+0x22>
              "unexpected priority level");

  /* Tries to raise but below the boost level. */
  p1 = chThdSetPriority(prio + 1);
 80022b2:	4628      	mov	r0, r5
 80022b4:	f7fe fa14 	bl	80006e0 <chThdSetPriority>
  test_assert(6, p1 == prio,
 80022b8:	1b01      	subs	r1, r0, r4
 80022ba:	fab1 f181 	clz	r1, r1
 80022be:	2006      	movs	r0, #6
 80022c0:	0949      	lsrs	r1, r1, #5
 80022c2:	f000 fc3d 	bl	8002b40 <_test_assert>
 80022c6:	2800      	cmp	r0, #0
 80022c8:	d1bb      	bne.n	8002242 <thd3_execute.lto_priv.117+0x22>
              "unexpected returned priority level");
  test_assert(7, chThdGetSelfX()->p_prio == prio + 2,
 80022ca:	69b3      	ldr	r3, [r6, #24]
 80022cc:	2007      	movs	r0, #7
 80022ce:	6899      	ldr	r1, [r3, #8]
 80022d0:	1a79      	subs	r1, r7, r1
 80022d2:	fab1 f181 	clz	r1, r1
 80022d6:	0949      	lsrs	r1, r1, #5
 80022d8:	f000 fc32 	bl	8002b40 <_test_assert>
 80022dc:	2800      	cmp	r0, #0
 80022de:	d1b0      	bne.n	8002242 <thd3_execute.lto_priv.117+0x22>
              "unexpected priority level");
  test_assert(8, chThdGetSelfX()->p_realprio == prio + 1,
 80022e0:	69b3      	ldr	r3, [r6, #24]
 80022e2:	2008      	movs	r0, #8
 80022e4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80022e6:	1a69      	subs	r1, r5, r1
 80022e8:	fab1 f181 	clz	r1, r1
 80022ec:	0949      	lsrs	r1, r1, #5
 80022ee:	f000 fc27 	bl	8002b40 <_test_assert>
 80022f2:	2800      	cmp	r0, #0
 80022f4:	d1a5      	bne.n	8002242 <thd3_execute.lto_priv.117+0x22>
              "unexpected returned real priority level");

  /* Tries to raise above the boost level. */
  p1 = chThdSetPriority(prio + 3);
 80022f6:	1ce7      	adds	r7, r4, #3
 80022f8:	4638      	mov	r0, r7
 80022fa:	f7fe f9f1 	bl	80006e0 <chThdSetPriority>
  test_assert(9, p1 == prio + 1,
 80022fe:	1a28      	subs	r0, r5, r0
 8002300:	4241      	negs	r1, r0
 8002302:	4141      	adcs	r1, r0
 8002304:	2009      	movs	r0, #9
 8002306:	f000 fc1b 	bl	8002b40 <_test_assert>
 800230a:	2800      	cmp	r0, #0
 800230c:	d199      	bne.n	8002242 <thd3_execute.lto_priv.117+0x22>
              "unexpected returned priority level");
  test_assert(10, chThdGetSelfX()->p_prio == prio + 3,
 800230e:	69b3      	ldr	r3, [r6, #24]
 8002310:	200a      	movs	r0, #10
 8002312:	6899      	ldr	r1, [r3, #8]
 8002314:	1a7a      	subs	r2, r7, r1
 8002316:	4251      	negs	r1, r2
 8002318:	4151      	adcs	r1, r2
 800231a:	f000 fc11 	bl	8002b40 <_test_assert>
 800231e:	2800      	cmp	r0, #0
 8002320:	d18f      	bne.n	8002242 <thd3_execute.lto_priv.117+0x22>
              "unexpected priority level");
  test_assert(11, chThdGetSelfX()->p_realprio == prio + 3,
 8002322:	69b3      	ldr	r3, [r6, #24]
 8002324:	200b      	movs	r0, #11
 8002326:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002328:	1a7b      	subs	r3, r7, r1
 800232a:	4259      	negs	r1, r3
 800232c:	4159      	adcs	r1, r3
 800232e:	f000 fc07 	bl	8002b40 <_test_assert>
 8002332:	2800      	cmp	r0, #0
 8002334:	d185      	bne.n	8002242 <thd3_execute.lto_priv.117+0x22>
 8002336:	2320      	movs	r3, #32
 8002338:	f383 8811 	msr	BASEPRI, r3
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 800233c:	69b3      	ldr	r3, [r6, #24]
              "unexpected real priority level");

  chSysLock();
  chThdGetSelfX()->p_prio = prio;
 800233e:	609c      	str	r4, [r3, #8]
  chThdGetSelfX()->p_realprio = prio;
 8002340:	63dc      	str	r4, [r3, #60]	; 0x3c
 8002342:	f380 8811 	msr	BASEPRI, r0
 8002346:	e77c      	b.n	8002242 <thd3_execute.lto_priv.117+0x22>
 8002348:	200013f8 	.word	0x200013f8
 800234c:	00000000 	.word	0x00000000

08002350 <print_line>:
    tcp->teardown();

  test_wait_threads();
}

static void print_line(void) {
 8002350:	b570      	push	{r4, r5, r6, lr}
 8002352:	4e09      	ldr	r6, [pc, #36]	; (8002378 <print_line+0x28>)
 8002354:	244c      	movs	r4, #76	; 0x4c
  unsigned i;

  for (i = 0; i < 76; i++)
    chSequentialStreamPut(chp, '-');
 8002356:	6830      	ldr	r0, [r6, #0]
 8002358:	212d      	movs	r1, #45	; 0x2d
 800235a:	6803      	ldr	r3, [r0, #0]
 800235c:	4d06      	ldr	r5, [pc, #24]	; (8002378 <print_line+0x28>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	4798      	blx	r3
}

static void print_line(void) {
  unsigned i;

  for (i = 0; i < 76; i++)
 8002362:	3c01      	subs	r4, #1
 8002364:	d1f7      	bne.n	8002356 <print_line+0x6>
    chSequentialStreamPut(chp, '-');
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 8002366:	6828      	ldr	r0, [r5, #0]
 8002368:	4904      	ldr	r1, [pc, #16]	; (800237c <print_line+0x2c>)
 800236a:	6803      	ldr	r3, [r0, #0]
 800236c:	2202      	movs	r2, #2
 800236e:	681b      	ldr	r3, [r3, #0]
}
 8002370:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
static void print_line(void) {
  unsigned i;

  for (i = 0; i < 76; i++)
    chSequentialStreamPut(chp, '-');
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 8002374:	4718      	bx	r3
 8002376:	bf00      	nop
 8002378:	200008e8 	.word	0x200008e8
 800237c:	08007fa0 	.word	0x08007fa0

08002380 <tmr.lto_priv.82>:

static virtual_timer_t vt;
static void tmr(void *p) {
  (void)p;

  test_timer_done = TRUE;
 8002380:	4b01      	ldr	r3, [pc, #4]	; (8002388 <tmr.lto_priv.82+0x8>)
 8002382:	2201      	movs	r2, #1
 8002384:	701a      	strb	r2, [r3, #0]
 8002386:	4770      	bx	lr
 8002388:	20001548 	.word	0x20001548
 800238c:	00000000 	.word	0x00000000

08002390 <notify1.lto_priv.81>:

#if STM32_SERIAL_USE_USART1 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  USART1->CR1 |= USART_CR1_TXEIE;
 8002390:	4a02      	ldr	r2, [pc, #8]	; (800239c <notify1.lto_priv.81+0xc>)
 8002392:	68d3      	ldr	r3, [r2, #12]
 8002394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002398:	60d3      	str	r3, [r2, #12]
 800239a:	4770      	bx	lr
 800239c:	40013800 	.word	0x40013800

080023a0 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 80023a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 80023a4:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80023a8:	6923      	ldr	r3, [r4, #16]
 80023aa:	079b      	lsls	r3, r3, #30
 80023ac:	d403      	bmi.n	80023b6 <VectorB0+0x16>
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 80023ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 80023b2:	f7fe b8c5 	b.w	8000540 <_port_irq_epilogue>

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
    STM32_ST_TIM->SR = 0U;
 80023b6:	2700      	movs	r7, #0
 80023b8:	6127      	str	r7, [r4, #16]
 80023ba:	2520      	movs	r5, #32
 80023bc:	f385 8811 	msr	BASEPRI, r5
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 80023c0:	4e1e      	ldr	r6, [pc, #120]	; (800243c <VectorB0+0x9c>)
 80023c2:	6a62      	ldr	r2, [r4, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 80023c4:	f8b6 e026 	ldrh.w	lr, [r6, #38]	; 0x26
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 80023c8:	69f3      	ldr	r3, [r6, #28]
 80023ca:	b290      	uxth	r0, r2

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 80023cc:	ebce 0100 	rsb	r1, lr, r0
 80023d0:	891a      	ldrh	r2, [r3, #8]
 80023d2:	b289      	uxth	r1, r1
 80023d4:	4291      	cmp	r1, r2
 80023d6:	f106 081c 	add.w	r8, r6, #28
 80023da:	d31b      	bcc.n	8002414 <VectorB0+0x74>
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80023dc:	6819      	ldr	r1, [r3, #0]
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 80023de:	4472      	add	r2, lr
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 80023e0:	4541      	cmp	r1, r8
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 80023e2:	84f2      	strh	r2, [r6, #38]	; 0x26

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
 80023e4:	68da      	ldr	r2, [r3, #12]
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80023e6:	f8c1 8004 	str.w	r8, [r1, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 80023ea:	61f1      	str	r1, [r6, #28]
    fn = vtp->vt_func;
    vtp->vt_func = NULL;
 80023ec:	60df      	str	r7, [r3, #12]
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 80023ee:	bf08      	it	eq
 80023f0:	60e7      	streq	r7, [r4, #12]
 80023f2:	f387 8811 	msr	BASEPRI, r7
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->vt_par);
 80023f6:	6918      	ldr	r0, [r3, #16]
 80023f8:	4790      	blx	r2
 80023fa:	f385 8811 	msr	BASEPRI, r5
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80023fe:	6a62      	ldr	r2, [r4, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8002400:	f8b6 e026 	ldrh.w	lr, [r6, #38]	; 0x26
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.vt_next;
 8002404:	69f3      	ldr	r3, [r6, #28]
 8002406:	b290      	uxth	r0, r2

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8002408:	ebce 0100 	rsb	r1, lr, r0
 800240c:	891a      	ldrh	r2, [r3, #8]
 800240e:	b289      	uxth	r1, r1
 8002410:	428a      	cmp	r2, r1
 8002412:	d9e3      	bls.n	80023dc <VectorB0+0x3c>
    vtp = ch.vtlist.vt_next;
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8002414:	4543      	cmp	r3, r8
 8002416:	d00a      	beq.n	800242e <VectorB0+0x8e>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.vt_lasttime + vtp->vt_delta - now;
 8002418:	4472      	add	r2, lr
 800241a:	1a12      	subs	r2, r2, r0
 800241c:	b292      	uxth	r2, r2
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 800241e:	2a01      	cmp	r2, #1
 8002420:	bf98      	it	ls
 8002422:	2202      	movls	r2, #2
  }
  port_timer_set_alarm(now + delta);
 8002424:	4402      	add	r2, r0
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8002426:	b292      	uxth	r2, r2
 8002428:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800242c:	635a      	str	r2, [r3, #52]	; 0x34
 800242e:	2300      	movs	r3, #0
 8002430:	f383 8811 	msr	BASEPRI, r3
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 8002434:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8002438:	f7fe b882 	b.w	8000540 <_port_irq_epilogue>
 800243c:	200013f8 	.word	0x200013f8

08002440 <Vector84>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM7);
 8002440:	4b09      	ldr	r3, [pc, #36]	; (8002468 <Vector84+0x28>)
 8002442:	6819      	ldr	r1, [r3, #0]
 8002444:	f3c1 6103 	ubfx	r1, r1, #24, #4
 8002448:	b159      	cbz	r1, 8002462 <Vector84+0x22>
 800244a:	4808      	ldr	r0, [pc, #32]	; (800246c <Vector84+0x2c>)
/**
 * @brief   DMA1 stream 7 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 800244c:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM7);
 800244e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002450:	060a      	lsls	r2, r1, #24
 8002452:	605a      	str	r2, [r3, #4]
 8002454:	b10c      	cbz	r4, 800245a <Vector84+0x1a>
 8002456:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8002458:	47a0      	blx	r4

  OSAL_IRQ_EPILOGUE();
}
 800245a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM7);

  OSAL_IRQ_EPILOGUE();
 800245e:	f7fe b86f 	b.w	8000540 <_port_irq_epilogue>
 8002462:	f7fe b86d 	b.w	8000540 <_port_irq_epilogue>
 8002466:	bf00      	nop
 8002468:	40020000 	.word	0x40020000
 800246c:	2000098c 	.word	0x2000098c

08002470 <Vector80>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM6);
 8002470:	4b09      	ldr	r3, [pc, #36]	; (8002498 <Vector80+0x28>)
 8002472:	6819      	ldr	r1, [r3, #0]
 8002474:	f3c1 5103 	ubfx	r1, r1, #20, #4
 8002478:	b159      	cbz	r1, 8002492 <Vector80+0x22>
 800247a:	4808      	ldr	r0, [pc, #32]	; (800249c <Vector80+0x2c>)
/**
 * @brief   DMA1 stream 6 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 800247c:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM6);
 800247e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002480:	050a      	lsls	r2, r1, #20
 8002482:	605a      	str	r2, [r3, #4]
 8002484:	b10c      	cbz	r4, 800248a <Vector80+0x1a>
 8002486:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8002488:	47a0      	blx	r4

  OSAL_IRQ_EPILOGUE();
}
 800248a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM6);

  OSAL_IRQ_EPILOGUE();
 800248e:	f7fe b857 	b.w	8000540 <_port_irq_epilogue>
 8002492:	f7fe b855 	b.w	8000540 <_port_irq_epilogue>
 8002496:	bf00      	nop
 8002498:	40020000 	.word	0x40020000
 800249c:	2000098c 	.word	0x2000098c

080024a0 <Vector7C>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM5);
 80024a0:	4b09      	ldr	r3, [pc, #36]	; (80024c8 <Vector7C+0x28>)
 80024a2:	6819      	ldr	r1, [r3, #0]
 80024a4:	f3c1 4103 	ubfx	r1, r1, #16, #4
 80024a8:	b159      	cbz	r1, 80024c2 <Vector7C+0x22>
 80024aa:	4808      	ldr	r0, [pc, #32]	; (80024cc <Vector7C+0x2c>)
/**
 * @brief   DMA1 stream 5 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 80024ac:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM5);
 80024ae:	6a04      	ldr	r4, [r0, #32]
 80024b0:	040a      	lsls	r2, r1, #16
 80024b2:	605a      	str	r2, [r3, #4]
 80024b4:	b10c      	cbz	r4, 80024ba <Vector7C+0x1a>
 80024b6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80024b8:	47a0      	blx	r4

  OSAL_IRQ_EPILOGUE();
}
 80024ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM5);

  OSAL_IRQ_EPILOGUE();
 80024be:	f7fe b83f 	b.w	8000540 <_port_irq_epilogue>
 80024c2:	f7fe b83d 	b.w	8000540 <_port_irq_epilogue>
 80024c6:	bf00      	nop
 80024c8:	40020000 	.word	0x40020000
 80024cc:	2000098c 	.word	0x2000098c

080024d0 <Vector78>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM4);
 80024d0:	4b09      	ldr	r3, [pc, #36]	; (80024f8 <Vector78+0x28>)
 80024d2:	6819      	ldr	r1, [r3, #0]
 80024d4:	f3c1 3103 	ubfx	r1, r1, #12, #4
 80024d8:	b159      	cbz	r1, 80024f2 <Vector78+0x22>
 80024da:	4808      	ldr	r0, [pc, #32]	; (80024fc <Vector78+0x2c>)
/**
 * @brief   DMA1 stream 4 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 80024dc:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM4);
 80024de:	6984      	ldr	r4, [r0, #24]
 80024e0:	030a      	lsls	r2, r1, #12
 80024e2:	605a      	str	r2, [r3, #4]
 80024e4:	b10c      	cbz	r4, 80024ea <Vector78+0x1a>
 80024e6:	69c0      	ldr	r0, [r0, #28]
 80024e8:	47a0      	blx	r4

  OSAL_IRQ_EPILOGUE();
}
 80024ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM4);

  OSAL_IRQ_EPILOGUE();
 80024ee:	f7fe b827 	b.w	8000540 <_port_irq_epilogue>
 80024f2:	f7fe b825 	b.w	8000540 <_port_irq_epilogue>
 80024f6:	bf00      	nop
 80024f8:	40020000 	.word	0x40020000
 80024fc:	2000098c 	.word	0x2000098c

08002500 <Vector74>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM3);
 8002500:	4b09      	ldr	r3, [pc, #36]	; (8002528 <Vector74+0x28>)
 8002502:	6819      	ldr	r1, [r3, #0]
 8002504:	f3c1 2103 	ubfx	r1, r1, #8, #4
 8002508:	b159      	cbz	r1, 8002522 <Vector74+0x22>
 800250a:	4808      	ldr	r0, [pc, #32]	; (800252c <Vector74+0x2c>)
/**
 * @brief   DMA1 stream 3 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 800250c:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM3);
 800250e:	6904      	ldr	r4, [r0, #16]
 8002510:	020a      	lsls	r2, r1, #8
 8002512:	605a      	str	r2, [r3, #4]
 8002514:	b10c      	cbz	r4, 800251a <Vector74+0x1a>
 8002516:	6940      	ldr	r0, [r0, #20]
 8002518:	47a0      	blx	r4

  OSAL_IRQ_EPILOGUE();
}
 800251a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM3);

  OSAL_IRQ_EPILOGUE();
 800251e:	f7fe b80f 	b.w	8000540 <_port_irq_epilogue>
 8002522:	f7fe b80d 	b.w	8000540 <_port_irq_epilogue>
 8002526:	bf00      	nop
 8002528:	40020000 	.word	0x40020000
 800252c:	2000098c 	.word	0x2000098c

08002530 <Vector70>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM2);
 8002530:	4b09      	ldr	r3, [pc, #36]	; (8002558 <Vector70+0x28>)
 8002532:	6819      	ldr	r1, [r3, #0]
 8002534:	f3c1 1103 	ubfx	r1, r1, #4, #4
 8002538:	b159      	cbz	r1, 8002552 <Vector70+0x22>
 800253a:	4808      	ldr	r0, [pc, #32]	; (800255c <Vector70+0x2c>)
/**
 * @brief   DMA1 stream 2 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 800253c:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM2);
 800253e:	6884      	ldr	r4, [r0, #8]
 8002540:	010a      	lsls	r2, r1, #4
 8002542:	605a      	str	r2, [r3, #4]
 8002544:	b10c      	cbz	r4, 800254a <Vector70+0x1a>
 8002546:	68c0      	ldr	r0, [r0, #12]
 8002548:	47a0      	blx	r4

  OSAL_IRQ_EPILOGUE();
}
 800254a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM2);

  OSAL_IRQ_EPILOGUE();
 800254e:	f7fd bff7 	b.w	8000540 <_port_irq_epilogue>
 8002552:	f7fd bff5 	b.w	8000540 <_port_irq_epilogue>
 8002556:	bf00      	nop
 8002558:	40020000 	.word	0x40020000
 800255c:	2000098c 	.word	0x2000098c

08002560 <Vector6C>:
/**
 * @brief   DMA1 stream 1 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8002560:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM1);
 8002562:	4b07      	ldr	r3, [pc, #28]	; (8002580 <Vector6C+0x20>)
 8002564:	6819      	ldr	r1, [r3, #0]
 8002566:	f011 010f 	ands.w	r1, r1, #15
 800256a:	d005      	beq.n	8002578 <Vector6C+0x18>
 800256c:	4a05      	ldr	r2, [pc, #20]	; (8002584 <Vector6C+0x24>)
 800256e:	6059      	str	r1, [r3, #4]
 8002570:	6813      	ldr	r3, [r2, #0]
 8002572:	b10b      	cbz	r3, 8002578 <Vector6C+0x18>
 8002574:	6850      	ldr	r0, [r2, #4]
 8002576:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 8002578:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM1);

  OSAL_IRQ_EPILOGUE();
 800257c:	f7fd bfe0 	b.w	8000540 <_port_irq_epilogue>
 8002580:	40020000 	.word	0x40020000
 8002584:	2000098c 	.word	0x2000098c
	...

08002590 <Vector98>:
/**
 * @brief   CAN1 SCE interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_SCE_HANDLER) {
 8002590:	b538      	push	{r3, r4, r5, lr}
 */
static void can_lld_sce_handler(CANDriver *canp) {
  uint32_t msr;

  /* Clearing IRQ sources.*/
  msr = canp->can->MSR;
 8002592:	4d15      	ldr	r5, [pc, #84]	; (80025e8 <Vector98+0x58>)
 8002594:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002596:	685c      	ldr	r4, [r3, #4]
  canp->can->MSR = msr;

  /* Wakeup event.*/
#if CAN_USE_SLEEP_MODE
  if (msr & CAN_MSR_WKUI) {
 8002598:	0722      	lsls	r2, r4, #28
static void can_lld_sce_handler(CANDriver *canp) {
  uint32_t msr;

  /* Clearing IRQ sources.*/
  msr = canp->can->MSR;
  canp->can->MSR = msr;
 800259a:	605c      	str	r4, [r3, #4]

  /* Wakeup event.*/
#if CAN_USE_SLEEP_MODE
  if (msr & CAN_MSR_WKUI) {
 800259c:	d411      	bmi.n	80025c2 <Vector98+0x32>
    osalEventBroadcastFlagsI(&canp->wakeup_event, 0);
    osalSysUnlockFromISR();
  }
#endif /* CAN_USE_SLEEP_MODE */
  /* Error event.*/
  if (msr & CAN_MSR_ERRI) {
 800259e:	0763      	lsls	r3, r4, #29
 80025a0:	d50b      	bpl.n	80025ba <Vector98+0x2a>
    eventflags_t flags;
    uint32_t esr = canp->can->ESR;
 80025a2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80025a4:	2320      	movs	r3, #32
 80025a6:	6991      	ldr	r1, [r2, #24]
 80025a8:	f383 8811 	msr	BASEPRI, r3
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 80025ac:	480f      	ldr	r0, [pc, #60]	; (80025ec <Vector98+0x5c>)
 80025ae:	0409      	lsls	r1, r1, #16
 80025b0:	f7fe fa46 	bl	8000a40 <chEvtBroadcastFlagsI>
 80025b4:	2300      	movs	r3, #0
 80025b6:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_sce_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 80025ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  OSAL_IRQ_PROLOGUE();

  can_lld_sce_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
 80025be:	f7fd bfbf 	b.w	8000540 <_port_irq_epilogue>
  canp->can->MSR = msr;

  /* Wakeup event.*/
#if CAN_USE_SLEEP_MODE
  if (msr & CAN_MSR_WKUI) {
    canp->state = CAN_READY;
 80025c2:	4628      	mov	r0, r5
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 80025c4:	681a      	ldr	r2, [r3, #0]
  canp->can->MSR = msr;

  /* Wakeup event.*/
#if CAN_USE_SLEEP_MODE
  if (msr & CAN_MSR_WKUI) {
    canp->state = CAN_READY;
 80025c6:	2103      	movs	r1, #3
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 80025c8:	f022 0202 	bic.w	r2, r2, #2
  canp->can->MSR = msr;

  /* Wakeup event.*/
#if CAN_USE_SLEEP_MODE
  if (msr & CAN_MSR_WKUI) {
    canp->state = CAN_READY;
 80025cc:	f800 1b28 	strb.w	r1, [r0], #40
 80025d0:	2120      	movs	r1, #32
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	f381 8811 	msr	BASEPRI, r1
 80025d8:	2100      	movs	r1, #0
 80025da:	f7fe fa31 	bl	8000a40 <chEvtBroadcastFlagsI>
 80025de:	2300      	movs	r3, #0
 80025e0:	f383 8811 	msr	BASEPRI, r3
 80025e4:	e7db      	b.n	800259e <Vector98+0xe>
 80025e6:	bf00      	nop
 80025e8:	200009c8 	.word	0x200009c8
 80025ec:	200009e8 	.word	0x200009e8

080025f0 <VectorD4>:
/**
 * @brief   USART1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 80025f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
 80025f4:	4f4b      	ldr	r7, [pc, #300]	; (8002724 <VectorD4+0x134>)
 80025f6:	f8d7 52ac 	ldr.w	r5, [r7, #684]	; 0x2ac
  uint16_t cr1 = u->CR1;
 80025fa:	f8d5 800c 	ldr.w	r8, [r5, #12]
  uint16_t sr = u->SR;
 80025fe:	682b      	ldr	r3, [r5, #0]

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 8002600:	05de      	lsls	r6, r3, #23
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
  uint16_t cr1 = u->CR1;
  uint16_t sr = u->SR;
 8002602:	b29c      	uxth	r4, r3

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 8002604:	d45e      	bmi.n	80026c4 <VectorD4+0xd4>
 8002606:	2320      	movs	r3, #32
 8002608:	f383 8811 	msr	BASEPRI, r3
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800260c:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8002610:	d108      	bne.n	8002624 <VectorD4+0x34>
 8002612:	e031      	b.n	8002678 <VectorD4+0x88>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
    if (sr & USART_SR_RXNE)
 8002614:	06a0      	lsls	r0, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
 8002616:	686e      	ldr	r6, [r5, #4]
    if (sr & USART_SR_RXNE)
 8002618:	d41d      	bmi.n	8002656 <VectorD4+0x66>
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 800261a:	682c      	ldr	r4, [r5, #0]
 800261c:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800261e:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8002622:	d029      	beq.n	8002678 <VectorD4+0x88>
               USART_SR_PE)) {
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8002624:	0720      	lsls	r0, r4, #28
 8002626:	d0f5      	beq.n	8002614 <VectorD4+0x24>
 */
static void set_error(SerialDriver *sdp, uint16_t sr) {
  eventflags_t sts = 0;

  if (sr & USART_SR_ORE)
    sts |= SD_OVERRUN_ERROR;
 8002628:	f014 0f08 	tst.w	r4, #8
 800262c:	bf0c      	ite	eq
 800262e:	2100      	moveq	r1, #0
 8002630:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 8002632:	07e2      	lsls	r2, r4, #31
    sts |= SD_PARITY_ERROR;
 8002634:	bf48      	it	mi
 8002636:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 800263a:	07a3      	lsls	r3, r4, #30
    sts |= SD_FRAMING_ERROR;
 800263c:	bf48      	it	mi
 800263e:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 8002642:	0766      	lsls	r6, r4, #29
    sts |= SD_NOISE_ERROR;
 8002644:	bf48      	it	mi
 8002646:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 800264a:	4837      	ldr	r0, [pc, #220]	; (8002728 <VectorD4+0x138>)
 800264c:	f7fe f9f8 	bl	8000a40 <chEvtBroadcastFlagsI>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
    if (sr & USART_SR_RXNE)
 8002650:	06a0      	lsls	r0, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
 8002652:	686e      	ldr	r6, [r5, #4]
    if (sr & USART_SR_RXNE)
 8002654:	d5e1      	bpl.n	800261a <VectorD4+0x2a>
 8002656:	697b      	ldr	r3, [r7, #20]
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8002658:	b37b      	cbz	r3, 80026ba <VectorD4+0xca>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < Q_OK)
 800265a:	b2f1      	uxtb	r1, r6
 800265c:	4833      	ldr	r0, [pc, #204]	; (800272c <VectorD4+0x13c>)
 800265e:	f7fe f95f 	bl	8000920 <chIQPutI>
 8002662:	2800      	cmp	r0, #0
 8002664:	dad9      	bge.n	800261a <VectorD4+0x2a>
 8002666:	4830      	ldr	r0, [pc, #192]	; (8002728 <VectorD4+0x138>)
 8002668:	2180      	movs	r1, #128	; 0x80
 800266a:	f7fe f9e9 	bl	8000a40 <chEvtBroadcastFlagsI>
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 800266e:	682c      	ldr	r4, [r5, #0]
 8002670:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8002672:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8002676:	d1d5      	bne.n	8002624 <VectorD4+0x34>
 8002678:	2300      	movs	r3, #0
 800267a:	f383 8811 	msr	BASEPRI, r3
    sr = u->SR;
  }
  osalSysUnlockFromISR();

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 800267e:	f018 0f80 	tst.w	r8, #128	; 0x80
 8002682:	d001      	beq.n	8002688 <VectorD4+0x98>
 8002684:	0622      	lsls	r2, r4, #24
 8002686:	d42c      	bmi.n	80026e2 <VectorD4+0xf2>
      u->DR = b;
    osalSysUnlockFromISR();
  }

  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
 8002688:	0663      	lsls	r3, r4, #25
 800268a:	d512      	bpl.n	80026b2 <VectorD4+0xc2>
 800268c:	2320      	movs	r3, #32
 800268e:	f383 8811 	msr	BASEPRI, r3
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 8002692:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002694:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002696:	4823      	ldr	r0, [pc, #140]	; (8002724 <VectorD4+0x134>)
 8002698:	429a      	cmp	r2, r3
 800269a:	d02f      	beq.n	80026fc <VectorD4+0x10c>
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 800269c:	f64f 73bf 	movw	r3, #65471	; 0xffbf
    u->SR = ~USART_SR_TC;
 80026a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 80026a4:	ea08 0303 	and.w	r3, r8, r3
 80026a8:	60eb      	str	r3, [r5, #12]
 80026aa:	2300      	movs	r3, #0
    u->SR = ~USART_SR_TC;
 80026ac:	602a      	str	r2, [r5, #0]
 80026ae:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD1);

  OSAL_IRQ_EPILOGUE();
}
 80026b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD1);

  OSAL_IRQ_EPILOGUE();
 80026b6:	f7fd bf43 	b.w	8000540 <_port_irq_epilogue>
 80026ba:	481b      	ldr	r0, [pc, #108]	; (8002728 <VectorD4+0x138>)
 80026bc:	2104      	movs	r1, #4
 80026be:	f7fe f9bf 	bl	8000a40 <chEvtBroadcastFlagsI>
 80026c2:	e7ca      	b.n	800265a <VectorD4+0x6a>
 80026c4:	2320      	movs	r3, #32
 80026c6:	f383 8811 	msr	BASEPRI, r3
 80026ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026ce:	1d38      	adds	r0, r7, #4
 80026d0:	f7fe f9b6 	bl	8000a40 <chEvtBroadcastFlagsI>

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
    osalSysLockFromISR();
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
    u->SR = ~USART_SR_LBD;
 80026d4:	f46f 7380 	mvn.w	r3, #256	; 0x100
 80026d8:	602b      	str	r3, [r5, #0]
 80026da:	2300      	movs	r3, #0
 80026dc:	f383 8811 	msr	BASEPRI, r3
 80026e0:	e791      	b.n	8002606 <VectorD4+0x16>
 80026e2:	2320      	movs	r3, #32
 80026e4:	f383 8811 	msr	BASEPRI, r3

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
 80026e8:	4811      	ldr	r0, [pc, #68]	; (8002730 <VectorD4+0x140>)
 80026ea:	f7fe f949 	bl	8000980 <chOQGetI>
    if (b < Q_OK) {
 80026ee:	2800      	cmp	r0, #0
 80026f0:	db0c      	blt.n	800270c <VectorD4+0x11c>
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
    }
    else
      u->DR = b;
 80026f2:	6068      	str	r0, [r5, #4]
 80026f4:	2300      	movs	r3, #0
 80026f6:	f383 8811 	msr	BASEPRI, r3
 80026fa:	e7c5      	b.n	8002688 <VectorD4+0x98>
 80026fc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d0cc      	beq.n	800269c <VectorD4+0xac>
 8002702:	3004      	adds	r0, #4
 8002704:	2110      	movs	r1, #16
 8002706:	f7fe f99b 	bl	8000a40 <chEvtBroadcastFlagsI>
 800270a:	e7c7      	b.n	800269c <VectorD4+0xac>
 800270c:	4806      	ldr	r0, [pc, #24]	; (8002728 <VectorD4+0x138>)
 800270e:	2108      	movs	r1, #8
 8002710:	f7fe f996 	bl	8000a40 <chEvtBroadcastFlagsI>
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
    if (b < Q_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 8002714:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8002718:	ea08 0303 	and.w	r3, r8, r3
 800271c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002720:	60eb      	str	r3, [r5, #12]
 8002722:	e7e7      	b.n	80026f4 <VectorD4+0x104>
 8002724:	20001560 	.word	0x20001560
 8002728:	20001564 	.word	0x20001564
 800272c:	2000156c 	.word	0x2000156c
 8002730:	20001590 	.word	0x20001590
	...

08002740 <Vector94>:
/**
 * @brief   CAN1 RX1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_RX1_HANDLER) {
 8002740:	b538      	push	{r3, r4, r5, lr}
 * @notapi
 */
static void can_lld_rx1_handler(CANDriver *canp) {
  uint32_t rf1r;

  rf1r = canp->can->RF1R;
 8002742:	4d16      	ldr	r5, [pc, #88]	; (800279c <Vector94+0x5c>)
 8002744:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002746:	691c      	ldr	r4, [r3, #16]
  if ((rf1r & CAN_RF1R_FMP1) > 0) {
 8002748:	07a2      	lsls	r2, r4, #30
 800274a:	d111      	bne.n	8002770 <Vector94+0x30>
    osalSysLockFromISR();
    osalThreadDequeueAllI(&canp->rxqueue, MSG_OK);
    osalEventBroadcastFlagsI(&canp->rxfull_event, CAN_MAILBOX_TO_MASK(2U));
    osalSysUnlockFromISR();
  }
  if ((rf1r & CAN_RF1R_FOVR1) > 0) {
 800274c:	06e3      	lsls	r3, r4, #27
 800274e:	d50b      	bpl.n	8002768 <Vector94+0x28>
    /* Overflow events handling.*/
    canp->can->RF1R = CAN_RF1R_FOVR1;
 8002750:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002752:	2110      	movs	r1, #16
 8002754:	6119      	str	r1, [r3, #16]
 8002756:	2320      	movs	r3, #32
 8002758:	f383 8811 	msr	BASEPRI, r3
 800275c:	4810      	ldr	r0, [pc, #64]	; (80027a0 <Vector94+0x60>)
 800275e:	f7fe f96f 	bl	8000a40 <chEvtBroadcastFlagsI>
 8002762:	2300      	movs	r3, #0
 8002764:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_rx1_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 8002768:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  OSAL_IRQ_PROLOGUE();

  can_lld_rx1_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
 800276c:	f7fd bee8 	b.w	8000540 <_port_irq_epilogue>
  uint32_t rf1r;

  rf1r = canp->can->RF1R;
  if ((rf1r & CAN_RF1R_FMP1) > 0) {
    /* No more receive events until the queue 0 has been emptied.*/
    canp->can->IER &= ~CAN_IER_FMPIE1;
 8002770:	695a      	ldr	r2, [r3, #20]
 8002772:	2120      	movs	r1, #32
 8002774:	f022 0210 	bic.w	r2, r2, #16
 8002778:	615a      	str	r2, [r3, #20]
 800277a:	f381 8811 	msr	BASEPRI, r1
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 800277e:	2100      	movs	r1, #0
 8002780:	f105 0010 	add.w	r0, r5, #16
 8002784:	f7fe fc24 	bl	8000fd0 <chThdDequeueAllI>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8002788:	f105 0018 	add.w	r0, r5, #24
 800278c:	2102      	movs	r1, #2
 800278e:	f7fe f957 	bl	8000a40 <chEvtBroadcastFlagsI>
 8002792:	2300      	movs	r3, #0
 8002794:	f383 8811 	msr	BASEPRI, r3
 8002798:	e7d8      	b.n	800274c <Vector94+0xc>
 800279a:	bf00      	nop
 800279c:	200009c8 	.word	0x200009c8
 80027a0:	200009e8 	.word	0x200009e8
	...

080027b0 <Vector90>:
/*
 * @brief   CAN1 RX0 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_RX0_HANDLER) {
 80027b0:	b538      	push	{r3, r4, r5, lr}
 * @notapi
 */
static void can_lld_rx0_handler(CANDriver *canp) {
  uint32_t rf0r;

  rf0r = canp->can->RF0R;
 80027b2:	4d16      	ldr	r5, [pc, #88]	; (800280c <Vector90+0x5c>)
 80027b4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80027b6:	68dc      	ldr	r4, [r3, #12]
  if ((rf0r & CAN_RF0R_FMP0) > 0) {
 80027b8:	07a2      	lsls	r2, r4, #30
 80027ba:	d111      	bne.n	80027e0 <Vector90+0x30>
    osalSysLockFromISR();
    osalThreadDequeueAllI(&canp->rxqueue, MSG_OK);
    osalEventBroadcastFlagsI(&canp->rxfull_event, CAN_MAILBOX_TO_MASK(1U));
    osalSysUnlockFromISR();
  }
  if ((rf0r & CAN_RF0R_FOVR0) > 0) {
 80027bc:	06e3      	lsls	r3, r4, #27
 80027be:	d50b      	bpl.n	80027d8 <Vector90+0x28>
    /* Overflow events handling.*/
    canp->can->RF0R = CAN_RF0R_FOVR0;
 80027c0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80027c2:	2110      	movs	r1, #16
 80027c4:	60d9      	str	r1, [r3, #12]
 80027c6:	2320      	movs	r3, #32
 80027c8:	f383 8811 	msr	BASEPRI, r3
 80027cc:	4810      	ldr	r0, [pc, #64]	; (8002810 <Vector90+0x60>)
 80027ce:	f7fe f937 	bl	8000a40 <chEvtBroadcastFlagsI>
 80027d2:	2300      	movs	r3, #0
 80027d4:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_rx0_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 80027d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  OSAL_IRQ_PROLOGUE();

  can_lld_rx0_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
 80027dc:	f7fd beb0 	b.w	8000540 <_port_irq_epilogue>
  uint32_t rf0r;

  rf0r = canp->can->RF0R;
  if ((rf0r & CAN_RF0R_FMP0) > 0) {
    /* No more receive events until the queue 0 has been emptied.*/
    canp->can->IER &= ~CAN_IER_FMPIE0;
 80027e0:	695a      	ldr	r2, [r3, #20]
 80027e2:	2120      	movs	r1, #32
 80027e4:	f022 0202 	bic.w	r2, r2, #2
 80027e8:	615a      	str	r2, [r3, #20]
 80027ea:	f381 8811 	msr	BASEPRI, r1
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 80027ee:	2100      	movs	r1, #0
 80027f0:	f105 0010 	add.w	r0, r5, #16
 80027f4:	f7fe fbec 	bl	8000fd0 <chThdDequeueAllI>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 80027f8:	f105 0018 	add.w	r0, r5, #24
 80027fc:	2101      	movs	r1, #1
 80027fe:	f7fe f91f 	bl	8000a40 <chEvtBroadcastFlagsI>
 8002802:	2300      	movs	r3, #0
 8002804:	f383 8811 	msr	BASEPRI, r3
 8002808:	e7d8      	b.n	80027bc <Vector90+0xc>
 800280a:	bf00      	nop
 800280c:	200009c8 	.word	0x200009c8
 8002810:	200009e8 	.word	0x200009e8
	...

08002820 <Vector8C>:
static void can_lld_tx_handler(CANDriver *canp) {
  uint32_t tsr;
  eventflags_t flags;

  /* Clearing IRQ sources.*/
  tsr = canp->can->TSR;
 8002820:	4b18      	ldr	r3, [pc, #96]	; (8002884 <Vector8C+0x64>)
/**
 * @brief   CAN1 TX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_TX_HANDLER) {
 8002822:	b510      	push	{r4, lr}
static void can_lld_tx_handler(CANDriver *canp) {
  uint32_t tsr;
  eventflags_t flags;

  /* Clearing IRQ sources.*/
  tsr = canp->can->TSR;
 8002824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002826:	6893      	ldr	r3, [r2, #8]

  /* Flags to be signaled through the TX event source.*/
  flags = 0U;

  /* Checking mailbox 0.*/
  if ((tsr & CAN_TSR_RQCP0) != 0U) {
 8002828:	f013 0401 	ands.w	r4, r3, #1
  uint32_t tsr;
  eventflags_t flags;

  /* Clearing IRQ sources.*/
  tsr = canp->can->TSR;
  canp->can->TSR = tsr;
 800282c:	6093      	str	r3, [r2, #8]

  /* Flags to be signaled through the TX event source.*/
  flags = 0U;

  /* Checking mailbox 0.*/
  if ((tsr & CAN_TSR_RQCP0) != 0U) {
 800282e:	d005      	beq.n	800283c <Vector8C+0x1c>
    if ((tsr & (CAN_TSR_ALST0 | CAN_TSR_TERR0)) != 0U) {
      flags |= CAN_MAILBOX_TO_MASK(1U) << 16U;
    }
    else {
      flags |= CAN_MAILBOX_TO_MASK(1U);
 8002830:	f013 0f0c 	tst.w	r3, #12
 8002834:	bf14      	ite	ne
 8002836:	f44f 3480 	movne.w	r4, #65536	; 0x10000
 800283a:	2401      	moveq	r4, #1
    }
  }

  /* Checking mailbox 1.*/
  if ((tsr & CAN_TSR_RQCP1) != 0U) {
 800283c:	05d9      	lsls	r1, r3, #23
 800283e:	d506      	bpl.n	800284e <Vector8C+0x2e>
    if ((tsr & (CAN_TSR_ALST1 | CAN_TSR_TERR1)) != 0U) {
 8002840:	f413 6f40 	tst.w	r3, #3072	; 0xc00
      flags |= CAN_MAILBOX_TO_MASK(2U) << 16U;
 8002844:	bf14      	ite	ne
 8002846:	f444 3400 	orrne.w	r4, r4, #131072	; 0x20000
    }
    else {
      flags |= CAN_MAILBOX_TO_MASK(2U);
 800284a:	f044 0402 	orreq.w	r4, r4, #2
    }
  }

  /* Checking mailbox 2.*/
  if ((tsr & CAN_TSR_RQCP2) != 0U) {
 800284e:	03da      	lsls	r2, r3, #15
 8002850:	d506      	bpl.n	8002860 <Vector8C+0x40>
    if ((tsr & (CAN_TSR_ALST2 | CAN_TSR_TERR2)) != 0U) {
 8002852:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
      flags |= CAN_MAILBOX_TO_MASK(3U) << 16U;
 8002856:	bf14      	ite	ne
 8002858:	f444 2480 	orrne.w	r4, r4, #262144	; 0x40000
    }
    else {
      flags |= CAN_MAILBOX_TO_MASK(3U);
 800285c:	f044 0404 	orreq.w	r4, r4, #4
 8002860:	2320      	movs	r3, #32
 8002862:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 8002866:	4808      	ldr	r0, [pc, #32]	; (8002888 <Vector8C+0x68>)
 8002868:	2100      	movs	r1, #0
 800286a:	f7fe fbb1 	bl	8000fd0 <chThdDequeueAllI>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 800286e:	4621      	mov	r1, r4
 8002870:	4806      	ldr	r0, [pc, #24]	; (800288c <Vector8C+0x6c>)
 8002872:	f7fe f8e5 	bl	8000a40 <chEvtBroadcastFlagsI>
 8002876:	2300      	movs	r3, #0
 8002878:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_tx_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 800287c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  can_lld_tx_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
 8002880:	f7fd be5e 	b.w	8000540 <_port_irq_epilogue>
 8002884:	200009c8 	.word	0x200009c8
 8002888:	200009d0 	.word	0x200009d0
 800288c:	200009e4 	.word	0x200009e4

08002890 <adc_lld_serve_rx_interrupt.lto_priv.92>:
 * @brief   Shared ADC DMA ISR service routine.
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void adc_lld_serve_rx_interrupt(ADCDriver *adcp, uint32_t flags) {
 8002890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* DMA errors handling.*/
  if ((flags & STM32_DMA_ISR_TEIF) != 0) {
 8002894:	070d      	lsls	r5, r1, #28
 * @brief   Shared ADC DMA ISR service routine.
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void adc_lld_serve_rx_interrupt(ADCDriver *adcp, uint32_t flags) {
 8002896:	4604      	mov	r4, r0

  /* DMA errors handling.*/
  if ((flags & STM32_DMA_ISR_TEIF) != 0) {
 8002898:	d52b      	bpl.n	80028f2 <adc_lld_serve_rx_interrupt.lto_priv.92+0x62>
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 800289a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c

  /* DMA errors handling.*/
  if ((flags & STM32_DMA_ISR_TEIF) != 0) {
    /* DMA, this could help only if the DMA tries to access an unmapped
       address space or violates alignment rules.*/
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 800289c:	6907      	ldr	r7, [r0, #16]
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 800289e:	6855      	ldr	r5, [r2, #4]
 80028a0:	6816      	ldr	r6, [r2, #0]
 80028a2:	6829      	ldr	r1, [r5, #0]
 80028a4:	230f      	movs	r3, #15
 80028a6:	f021 010f 	bic.w	r1, r1, #15
 80028aa:	6029      	str	r1, [r5, #0]
 80028ac:	7c11      	ldrb	r1, [r2, #16]
  adcp->adc->CR2 = 0;
 80028ae:	6a85      	ldr	r5, [r0, #40]	; 0x28

  /* DMA errors handling.*/
  if ((flags & STM32_DMA_ISR_TEIF) != 0) {
    /* DMA, this could help only if the DMA tries to access an unmapped
       address space or violates alignment rules.*/
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 80028b0:	68ba      	ldr	r2, [r7, #8]
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 80028b2:	408b      	lsls	r3, r1
  adcp->adc->CR2 = 0;
 80028b4:	2100      	movs	r1, #0
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 80028b6:	6073      	str	r3, [r6, #4]
  adcp->adc->CR2 = 0;
 80028b8:	60a9      	str	r1, [r5, #8]

  /* DMA errors handling.*/
  if ((flags & STM32_DMA_ISR_TEIF) != 0) {
    /* DMA, this could help only if the DMA tries to access an unmapped
       address space or violates alignment rules.*/
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 80028ba:	b13a      	cbz	r2, 80028cc <adc_lld_serve_rx_interrupt.lto_priv.92+0x3c>
 80028bc:	2305      	movs	r3, #5
 80028be:	7003      	strb	r3, [r0, #0]
 80028c0:	4790      	blx	r2
 80028c2:	7823      	ldrb	r3, [r4, #0]
 80028c4:	2b05      	cmp	r3, #5
 80028c6:	bf04      	itt	eq
 80028c8:	2302      	moveq	r3, #2
 80028ca:	7023      	strbeq	r3, [r4, #0]
 80028cc:	2200      	movs	r2, #0
 80028ce:	6122      	str	r2, [r4, #16]
 80028d0:	2320      	movs	r3, #32
 80028d2:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 80028d6:	6963      	ldr	r3, [r4, #20]
 80028d8:	b133      	cbz	r3, 80028e8 <adc_lld_serve_rx_interrupt.lto_priv.92+0x58>

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
    tp->p_u.rdymsg = msg;
 80028da:	f04f 31ff 	mov.w	r1, #4294967295
    thread_t *tp = *trp;

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
 80028de:	6162      	str	r2, [r4, #20]
    tp->p_u.rdymsg = msg;
    (void) chSchReadyI(tp);
 80028e0:	4618      	mov	r0, r3

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
    tp->p_u.rdymsg = msg;
 80028e2:	6219      	str	r1, [r3, #32]
    (void) chSchReadyI(tp);
 80028e4:	f7fe f804 	bl	80008f0 <chSchReadyI>
 80028e8:	2300      	movs	r3, #0
 80028ea:	f383 8811 	msr	BASEPRI, r3
 80028ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  else {
    if ((flags & STM32_DMA_ISR_TCIF) != 0) {
 80028f2:	078a      	lsls	r2, r1, #30
 80028f4:	d52a      	bpl.n	800294c <adc_lld_serve_rx_interrupt.lto_priv.92+0xbc>
      /* Transfer complete processing.*/
      _adc_isr_full_code(adcp);
 80028f6:	6903      	ldr	r3, [r0, #16]
 80028f8:	781a      	ldrb	r2, [r3, #0]
 80028fa:	2a00      	cmp	r2, #0
 80028fc:	d133      	bne.n	8002966 <adc_lld_serve_rx_interrupt.lto_priv.92+0xd6>
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 80028fe:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
  }
  else {
    if ((flags & STM32_DMA_ISR_TCIF) != 0) {
      /* Transfer complete processing.*/
      _adc_isr_full_code(adcp);
 8002900:	685f      	ldr	r7, [r3, #4]
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8002902:	684e      	ldr	r6, [r1, #4]
 8002904:	f8d1 e000 	ldr.w	lr, [r1]
 8002908:	6835      	ldr	r5, [r6, #0]
 800290a:	230f      	movs	r3, #15
 800290c:	f025 050f 	bic.w	r5, r5, #15
 8002910:	6035      	str	r5, [r6, #0]
 8002912:	7c0d      	ldrb	r5, [r1, #16]
  adcp->adc->CR2 = 0;
 8002914:	6a81      	ldr	r1, [r0, #40]	; 0x28
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8002916:	40ab      	lsls	r3, r5
 8002918:	f8ce 3004 	str.w	r3, [lr, #4]
  adcp->adc->CR2 = 0;
 800291c:	608a      	str	r2, [r1, #8]
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
  }
  else {
    if ((flags & STM32_DMA_ISR_TCIF) != 0) {
      /* Transfer complete processing.*/
      _adc_isr_full_code(adcp);
 800291e:	2f00      	cmp	r7, #0
 8002920:	d032      	beq.n	8002988 <adc_lld_serve_rx_interrupt.lto_priv.92+0xf8>
 8002922:	2304      	movs	r3, #4
 8002924:	7003      	strb	r3, [r0, #0]
 8002926:	6881      	ldr	r1, [r0, #8]
 8002928:	68c2      	ldr	r2, [r0, #12]
 800292a:	47b8      	blx	r7
 800292c:	7823      	ldrb	r3, [r4, #0]
 800292e:	2b04      	cmp	r3, #4
 8002930:	d02a      	beq.n	8002988 <adc_lld_serve_rx_interrupt.lto_priv.92+0xf8>
 8002932:	2320      	movs	r3, #32
 8002934:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 8002938:	6963      	ldr	r3, [r4, #20]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0d4      	beq.n	80028e8 <adc_lld_serve_rx_interrupt.lto_priv.92+0x58>
    thread_t *tp = *trp;

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
 800293e:	2200      	movs	r2, #0
 8002940:	6162      	str	r2, [r4, #20]
    tp->p_u.rdymsg = msg;
    (void) chSchReadyI(tp);
 8002942:	4618      	mov	r0, r3

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
    tp->p_u.rdymsg = msg;
 8002944:	621a      	str	r2, [r3, #32]
    (void) chSchReadyI(tp);
 8002946:	f7fd ffd3 	bl	80008f0 <chSchReadyI>
 800294a:	e7cd      	b.n	80028e8 <adc_lld_serve_rx_interrupt.lto_priv.92+0x58>
    }
    else if ((flags & STM32_DMA_ISR_HTIF) != 0) {
 800294c:	074b      	lsls	r3, r1, #29
 800294e:	d508      	bpl.n	8002962 <adc_lld_serve_rx_interrupt.lto_priv.92+0xd2>
      /* Half transfer processing.*/
      _adc_isr_half_code(adcp);
 8002950:	6903      	ldr	r3, [r0, #16]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	b12b      	cbz	r3, 8002962 <adc_lld_serve_rx_interrupt.lto_priv.92+0xd2>
    }
  }
}
 8002956:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      /* Transfer complete processing.*/
      _adc_isr_full_code(adcp);
    }
    else if ((flags & STM32_DMA_ISR_HTIF) != 0) {
      /* Half transfer processing.*/
      _adc_isr_half_code(adcp);
 800295a:	68c2      	ldr	r2, [r0, #12]
 800295c:	6881      	ldr	r1, [r0, #8]
 800295e:	0852      	lsrs	r2, r2, #1
 8002960:	4718      	bx	r3
 8002962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
  }
  else {
    if ((flags & STM32_DMA_ISR_TCIF) != 0) {
      /* Transfer complete processing.*/
      _adc_isr_full_code(adcp);
 8002966:	685d      	ldr	r5, [r3, #4]
 8002968:	2d00      	cmp	r5, #0
 800296a:	d0fa      	beq.n	8002962 <adc_lld_serve_rx_interrupt.lto_priv.92+0xd2>
 800296c:	68c2      	ldr	r2, [r0, #12]
 800296e:	2a01      	cmp	r2, #1
 8002970:	d90f      	bls.n	8002992 <adc_lld_serve_rx_interrupt.lto_priv.92+0x102>
 8002972:	885b      	ldrh	r3, [r3, #2]
 8002974:	0852      	lsrs	r2, r2, #1
 8002976:	fb03 f302 	mul.w	r3, r3, r2
 800297a:	6881      	ldr	r1, [r0, #8]
 800297c:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8002980:	462b      	mov	r3, r5
    else if ((flags & STM32_DMA_ISR_HTIF) != 0) {
      /* Half transfer processing.*/
      _adc_isr_half_code(adcp);
    }
  }
}
 8002982:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
  }
  else {
    if ((flags & STM32_DMA_ISR_TCIF) != 0) {
      /* Transfer complete processing.*/
      _adc_isr_full_code(adcp);
 8002986:	4718      	bx	r3
 8002988:	2202      	movs	r2, #2
 800298a:	2300      	movs	r3, #0
 800298c:	7022      	strb	r2, [r4, #0]
 800298e:	6123      	str	r3, [r4, #16]
 8002990:	e7cf      	b.n	8002932 <adc_lld_serve_rx_interrupt.lto_priv.92+0xa2>
 8002992:	462b      	mov	r3, r5
    else if ((flags & STM32_DMA_ISR_HTIF) != 0) {
      /* Half transfer processing.*/
      _adc_isr_half_code(adcp);
    }
  }
}
 8002994:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
  }
  else {
    if ((flags & STM32_DMA_ISR_TCIF) != 0) {
      /* Transfer complete processing.*/
      _adc_isr_full_code(adcp);
 8002998:	6881      	ldr	r1, [r0, #8]
 800299a:	4718      	bx	r3
 800299c:	0000      	movs	r0, r0
	...

080029a0 <readt.lto_priv.90>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 80029a0:	300c      	adds	r0, #12
 80029a2:	f7fe bca5 	b.w	80012f0 <chIQReadTimeout>
 80029a6:	bf00      	nop
	...

080029b0 <read.lto_priv.84>:
                        n, TIME_INFINITE);
}

static size_t read(void *ip, uint8_t *bp, size_t n) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 80029b0:	300c      	adds	r0, #12
 80029b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029b6:	f7fe bc9b 	b.w	80012f0 <chIQReadTimeout>
 80029ba:	bf00      	nop
 80029bc:	0000      	movs	r0, r0
	...

080029c0 <writet.lto_priv.89>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
}

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 80029c0:	3030      	adds	r0, #48	; 0x30
 80029c2:	f7fe bc25 	b.w	8001210 <chOQWriteTimeout>
 80029c6:	bf00      	nop
	...

080029d0 <write.lto_priv.83>:
 * queue-level function or macro.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 80029d0:	3030      	adds	r0, #48	; 0x30
 80029d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029d6:	f7fe bc1b 	b.w	8001210 <chOQWriteTimeout>
 80029da:	bf00      	nop
 80029dc:	0000      	movs	r0, r0
	...

080029e0 <gett.lto_priv.88>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
}

static msg_t gett(void *ip, systime_t timeout) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 80029e0:	300c      	adds	r0, #12
 80029e2:	f7fe bcc5 	b.w	8001370 <chIQGetTimeout>
 80029e6:	bf00      	nop
	...

080029f0 <get.lto_priv.86>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t get(void *ip) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 80029f0:	300c      	adds	r0, #12
 80029f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80029f6:	f7fe bcbb 	b.w	8001370 <chIQGetTimeout>
 80029fa:	bf00      	nop
 80029fc:	0000      	movs	r0, r0
	...

08002a00 <putt.lto_priv.87>:
}

static msg_t putt(void *ip, uint8_t b, systime_t timeout) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8002a00:	3030      	adds	r0, #48	; 0x30
 8002a02:	f7fe bc45 	b.w	8001290 <chOQPutTimeout>
 8002a06:	bf00      	nop
	...

08002a10 <put.lto_priv.85>:
                       n, TIME_INFINITE);
}

static msg_t put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8002a10:	3030      	adds	r0, #48	; 0x30
 8002a12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a16:	f7fe bc3b 	b.w	8001290 <chOQPutTimeout>
 8002a1a:	bf00      	nop
 8002a1c:	0000      	movs	r0, r0
	...

08002a20 <test_wait_tick>:
/**
 * @brief   Delays execution until next system time tick.
 *
 * @return              The system time.
 */
systime_t test_wait_tick(void) {
 8002a20:	b508      	push	{r3, lr}

  chThdSleep(1);
 8002a22:	2001      	movs	r0, #1
 8002a24:	f7fe fce4 	bl	80013f0 <chThdSleep>
 8002a28:	2320      	movs	r3, #32
 8002a2a:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8002a2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a32:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002a34:	2300      	movs	r3, #0
 8002a36:	f383 8811 	msr	BASEPRI, r3
  return chVTGetSystemTime();
}
 8002a3a:	b280      	uxth	r0, r0
 8002a3c:	bd08      	pop	{r3, pc}
 8002a3e:	bf00      	nop

08002a40 <test_wait_threads>:
}

/**
 * @brief   Waits for the completion of all the test-spawned threads.
 */
void test_wait_threads(void) {
 8002a40:	b570      	push	{r4, r5, r6, lr}
 8002a42:	4c07      	ldr	r4, [pc, #28]	; (8002a60 <test_wait_threads+0x20>)
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
      chThdWait(threads[i]);
      threads[i] = NULL;
 8002a44:	2600      	movs	r6, #0
 8002a46:	f104 0514 	add.w	r5, r4, #20
 */
void test_wait_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
 8002a4a:	f854 0b04 	ldr.w	r0, [r4], #4
 8002a4e:	b118      	cbz	r0, 8002a58 <test_wait_threads+0x18>
      chThdWait(threads[i]);
 8002a50:	f7fe f9de 	bl	8000e10 <chThdWait>
      threads[i] = NULL;
 8002a54:	f844 6c04 	str.w	r6, [r4, #-4]
 * @brief   Waits for the completion of all the test-spawned threads.
 */
void test_wait_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
 8002a58:	42ac      	cmp	r4, r5
 8002a5a:	d1f6      	bne.n	8002a4a <test_wait_threads+0xa>
    if (threads[i] != NULL) {
      chThdWait(threads[i]);
      threads[i] = NULL;
    }
}
 8002a5c:	bd70      	pop	{r4, r5, r6, pc}
 8002a5e:	bf00      	nop
 8002a60:	20000968 	.word	0x20000968
	...

08002a70 <test_terminate_threads>:
 */

/**
 * @brief   Sets a termination request in all the test-spawned threads.
 */
void test_terminate_threads(void) {
 8002a70:	4b0a      	ldr	r3, [pc, #40]	; (8002a9c <test_terminate_threads+0x2c>)
 8002a72:	b430      	push	{r4, r5}
 8002a74:	f103 0014 	add.w	r0, r3, #20
 8002a78:	2520      	movs	r5, #32
 8002a7a:	2400      	movs	r4, #0
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i])
 8002a7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002a80:	b13a      	cbz	r2, 8002a92 <test_terminate_threads+0x22>
 8002a82:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
void chThdTerminate(thread_t *tp) {

  chSysLock();
  tp->p_flags |= CH_FLAG_TERMINATE;
 8002a86:	7f51      	ldrb	r1, [r2, #29]
 8002a88:	f041 0104 	orr.w	r1, r1, #4
 8002a8c:	7751      	strb	r1, [r2, #29]
 8002a8e:	f384 8811 	msr	BASEPRI, r4
 * @brief   Sets a termination request in all the test-spawned threads.
 */
void test_terminate_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
 8002a92:	4283      	cmp	r3, r0
 8002a94:	d1f2      	bne.n	8002a7c <test_terminate_threads+0xc>
    if (threads[i])
      chThdTerminate(threads[i]);
}
 8002a96:	bc30      	pop	{r4, r5}
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	20000968 	.word	0x20000968

08002aa0 <_test_assert_time_window>:
    return _test_fail(point);
  clear_tokens();
  return FALSE;
}

bool _test_assert_time_window(unsigned point, systime_t start, systime_t end) {
 8002aa0:	b410      	push	{r4}
 8002aa2:	2320      	movs	r3, #32
 8002aa4:	f383 8811 	msr	BASEPRI, r3
 8002aa8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002aac:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002aae:	2300      	movs	r3, #0
 8002ab0:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chVTIsTimeWithinX(systime_t time,
                                     systime_t start,
                                     systime_t end) {

  return (bool)((systime_t)(time - start) < (systime_t)(end - start));
 8002ab4:	1a52      	subs	r2, r2, r1
 8002ab6:	1a64      	subs	r4, r4, r1
  return TRUE;
}

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
 8002ab8:	b2a1      	uxth	r1, r4
 8002aba:	b292      	uxth	r2, r2
 8002abc:	4291      	cmp	r1, r2
 8002abe:	d306      	bcc.n	8002ace <_test_assert_time_window+0x2e>
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 8002ac0:	4c05      	ldr	r4, [pc, #20]	; (8002ad8 <_test_assert_time_window+0x38>)
  local_fail = TRUE;
 8002ac2:	4906      	ldr	r1, [pc, #24]	; (8002adc <_test_assert_time_window+0x3c>)
  failpoint = point;
 8002ac4:	4a06      	ldr	r2, [pc, #24]	; (8002ae0 <_test_assert_time_window+0x40>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	7023      	strb	r3, [r4, #0]
  local_fail = TRUE;
 8002aca:	700b      	strb	r3, [r1, #0]
  failpoint = point;
 8002acc:	6010      	str	r0, [r2, #0]
}

bool _test_assert_time_window(unsigned point, systime_t start, systime_t end) {

  return _test_assert(point, chVTIsSystemTimeWithin(start, end));
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	200008e4 	.word	0x200008e4
 8002adc:	200008e5 	.word	0x200008e5
 8002ae0:	200008fc 	.word	0x200008fc
	...

08002af0 <_test_assert_sequence>:
  if (!condition)
    return _test_fail(point);
  return FALSE;
}

bool _test_assert_sequence(unsigned point, char *expected) {
 8002af0:	b4f0      	push	{r4, r5, r6, r7}
 8002af2:	4e0e      	ldr	r6, [pc, #56]	; (8002b2c <_test_assert_sequence+0x3c>)
  char *cp = tokens_buffer;
 8002af4:	4f0e      	ldr	r7, [pc, #56]	; (8002b30 <_test_assert_sequence+0x40>)
 8002af6:	6835      	ldr	r5, [r6, #0]
 8002af8:	463b      	mov	r3, r7
 8002afa:	e005      	b.n	8002b08 <_test_assert_sequence+0x18>
  while (cp < tokp) {
    if (*cp++ != *expected++)
 8002afc:	f813 4b01 	ldrb.w	r4, [r3], #1
 8002b00:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002b04:	4294      	cmp	r4, r2
 8002b06:	d107      	bne.n	8002b18 <_test_assert_sequence+0x28>
  return FALSE;
}

bool _test_assert_sequence(unsigned point, char *expected) {
  char *cp = tokens_buffer;
  while (cp < tokp) {
 8002b08:	42ab      	cmp	r3, r5
 8002b0a:	d3f7      	bcc.n	8002afc <_test_assert_sequence+0xc>
    if (*cp++ != *expected++)
     return _test_fail(point);
  }
  if (*expected)
 8002b0c:	780b      	ldrb	r3, [r1, #0]
 8002b0e:	b91b      	cbnz	r3, 8002b18 <_test_assert_sequence+0x28>
/*
 * Tokens.
 */
static void clear_tokens(void) {

  tokp = tokens_buffer;
 8002b10:	6037      	str	r7, [r6, #0]
  }
  if (*expected)
    return _test_fail(point);
  clear_tokens();
  return FALSE;
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	bcf0      	pop	{r4, r5, r6, r7}
 8002b16:	4770      	bx	lr
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 8002b18:	4c06      	ldr	r4, [pc, #24]	; (8002b34 <_test_assert_sequence+0x44>)
  local_fail = TRUE;
 8002b1a:	4907      	ldr	r1, [pc, #28]	; (8002b38 <_test_assert_sequence+0x48>)
  failpoint = point;
 8002b1c:	4a07      	ldr	r2, [pc, #28]	; (8002b3c <_test_assert_sequence+0x4c>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	7023      	strb	r3, [r4, #0]
  local_fail = TRUE;
  failpoint = point;
 8002b22:	6010      	str	r0, [r2, #0]
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
  local_fail = TRUE;
 8002b24:	700b      	strb	r3, [r1, #0]
  }
  if (*expected)
    return _test_fail(point);
  clear_tokens();
  return FALSE;
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	bcf0      	pop	{r4, r5, r6, r7}
 8002b2a:	4770      	bx	lr
 8002b2c:	200008e0 	.word	0x200008e0
 8002b30:	200008ec 	.word	0x200008ec
 8002b34:	200008e4 	.word	0x200008e4
 8002b38:	200008e5 	.word	0x200008e5
 8002b3c:	200008fc 	.word	0x200008fc

08002b40 <_test_assert>:
  return TRUE;
}

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
 8002b40:	b959      	cbnz	r1, 8002b5a <_test_assert+0x1a>
  local_fail = TRUE;
  failpoint = point;
  return TRUE;
}

bool _test_assert(unsigned point, bool condition) {
 8002b42:	b410      	push	{r4}
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
  local_fail = TRUE;
 8002b44:	4906      	ldr	r1, [pc, #24]	; (8002b60 <_test_assert+0x20>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 8002b46:	4c07      	ldr	r4, [pc, #28]	; (8002b64 <_test_assert+0x24>)
  local_fail = TRUE;
  failpoint = point;
 8002b48:	4a07      	ldr	r2, [pc, #28]	; (8002b68 <_test_assert+0x28>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	7023      	strb	r3, [r4, #0]
  local_fail = TRUE;
  failpoint = point;
 8002b4e:	6010      	str	r0, [r2, #0]
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
  local_fail = TRUE;
 8002b50:	700b      	strb	r3, [r1, #0]
bool _test_assert(unsigned point, bool condition) {

  if (!condition)
    return _test_fail(point);
  return FALSE;
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002b58:	4770      	bx	lr

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
    return _test_fail(point);
  return FALSE;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	4770      	bx	lr
 8002b60:	200008e5 	.word	0x200008e5
 8002b64:	200008e4 	.word	0x200008e4
 8002b68:	200008fc 	.word	0x200008fc
 8002b6c:	00000000 	.word	0x00000000

08002b70 <test_emit_token>:
/**
 * @brief   Emits a token into the tokens buffer.
 *
 * @param[in] token     the token as a char
 */
void test_emit_token(char token) {
 8002b70:	b410      	push	{r4}
 8002b72:	2320      	movs	r3, #32
 8002b74:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  *tokp++ = token;
 8002b78:	4b05      	ldr	r3, [pc, #20]	; (8002b90 <test_emit_token+0x20>)
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	1c54      	adds	r4, r2, #1
 8002b80:	7010      	strb	r0, [r2, #0]
 8002b82:	601c      	str	r4, [r3, #0]
 8002b84:	f381 8811 	msr	BASEPRI, r1
  chSysUnlock();
}
 8002b88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	200008e0 	.word	0x200008e0
	...

08002ba0 <test_println>:
/**
 * @brief   Prints a line.
 *
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {
 8002ba0:	b570      	push	{r4, r5, r6, lr}
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8002ba2:	7801      	ldrb	r1, [r0, #0]
/**
 * @brief   Prints a line.
 *
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {
 8002ba4:	4604      	mov	r4, r0
 8002ba6:	4d09      	ldr	r5, [pc, #36]	; (8002bcc <test_println+0x2c>)
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8002ba8:	b139      	cbz	r1, 8002bba <test_println+0x1a>
    chSequentialStreamPut(chp, *msgp++);
 8002baa:	6828      	ldr	r0, [r5, #0]
 8002bac:	6803      	ldr	r3, [r0, #0]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8002bb2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8002bb6:	2900      	cmp	r1, #0
 8002bb8:	d1f7      	bne.n	8002baa <test_println+0xa>
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {

  test_print(msgp);
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 8002bba:	6828      	ldr	r0, [r5, #0]
 8002bbc:	4904      	ldr	r1, [pc, #16]	; (8002bd0 <test_println+0x30>)
 8002bbe:	6803      	ldr	r3, [r0, #0]
 8002bc0:	2202      	movs	r2, #2
 8002bc2:	681b      	ldr	r3, [r3, #0]
}
 8002bc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {

  test_print(msgp);
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 8002bc8:	4718      	bx	r3
 8002bca:	bf00      	nop
 8002bcc:	200008e8 	.word	0x200008e8
 8002bd0:	08007fa0 	.word	0x08007fa0
	...

08002be0 <test_print>:
/**
 * @brief   Prints a line without final end-of-line.
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {
 8002be0:	b538      	push	{r3, r4, r5, lr}

  while (*msgp)
 8002be2:	7801      	ldrb	r1, [r0, #0]
/**
 * @brief   Prints a line without final end-of-line.
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {
 8002be4:	4604      	mov	r4, r0

  while (*msgp)
 8002be6:	b141      	cbz	r1, 8002bfa <test_print+0x1a>
 8002be8:	4d04      	ldr	r5, [pc, #16]	; (8002bfc <test_print+0x1c>)
    chSequentialStreamPut(chp, *msgp++);
 8002bea:	6828      	ldr	r0, [r5, #0]
 8002bec:	6803      	ldr	r3, [r0, #0]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8002bf2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8002bf6:	2900      	cmp	r1, #0
 8002bf8:	d1f7      	bne.n	8002bea <test_print+0xa>
 8002bfa:	bd38      	pop	{r3, r4, r5, pc}
 8002bfc:	200008e8 	.word	0x200008e8

08002c00 <test_printn>:
 * @param[in] n         the number to be printed
 */
void test_printn(uint32_t n) {
  char buf[16], *p;

  if (!n)
 8002c00:	b310      	cbz	r0, 8002c48 <test_printn+0x48>
/**
 * @brief   Prints a decimal unsigned number.
 *
 * @param[in] n         the number to be printed
 */
void test_printn(uint32_t n) {
 8002c02:	b570      	push	{r4, r5, r6, lr}
 8002c04:	b084      	sub	sp, #16
  char buf[16], *p;

  if (!n)
 8002c06:	466d      	mov	r5, sp
 8002c08:	466c      	mov	r4, sp
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
 8002c0a:	4a12      	ldr	r2, [pc, #72]	; (8002c54 <test_printn+0x54>)
 8002c0c:	fba2 1300 	umull	r1, r3, r2, r0
 8002c10:	08db      	lsrs	r3, r3, #3
 8002c12:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8002c16:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
 8002c1a:	f100 0130 	add.w	r1, r0, #48	; 0x30
 8002c1e:	b2c9      	uxtb	r1, r1
 8002c20:	f804 1b01 	strb.w	r1, [r4], #1

  if (!n)
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
 8002c24:	4618      	mov	r0, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1f0      	bne.n	8002c0c <test_printn+0xc>
      *p++ = (n % 10) + '0', n /= 10;
    while (p > buf)
 8002c2a:	42ac      	cmp	r4, r5
 8002c2c:	d90a      	bls.n	8002c44 <test_printn+0x44>
 8002c2e:	4e0a      	ldr	r6, [pc, #40]	; (8002c58 <test_printn+0x58>)
 8002c30:	3c01      	subs	r4, #1
 8002c32:	e001      	b.n	8002c38 <test_printn+0x38>
 8002c34:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
      chSequentialStreamPut(chp, *--p);
 8002c38:	6830      	ldr	r0, [r6, #0]
 8002c3a:	6803      	ldr	r3, [r0, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	4798      	blx	r3
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
    while (p > buf)
 8002c40:	42ac      	cmp	r4, r5
 8002c42:	d1f7      	bne.n	8002c34 <test_printn+0x34>
      chSequentialStreamPut(chp, *--p);
  }
}
 8002c44:	b004      	add	sp, #16
 8002c46:	bd70      	pop	{r4, r5, r6, pc}
 */
void test_printn(uint32_t n) {
  char buf[16], *p;

  if (!n)
    chSequentialStreamPut(chp, '0');
 8002c48:	4b03      	ldr	r3, [pc, #12]	; (8002c58 <test_printn+0x58>)
 8002c4a:	2130      	movs	r1, #48	; 0x30
 8002c4c:	6818      	ldr	r0, [r3, #0]
 8002c4e:	6803      	ldr	r3, [r0, #0]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	4718      	bx	r3
 8002c54:	cccccccd 	.word	0xcccccccd
 8002c58:	200008e8 	.word	0x200008e8
 8002c5c:	00000000 	.word	0x00000000

08002c60 <TestThread>:
/**
 * @brief   Test execution thread function.
 *
 * @param[in] p         pointer to a @p BaseChannel object for test output
 */
void TestThread(void *p) {
 8002c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int i, j;

  chp = p;
 8002c64:	4c9f      	ldr	r4, [pc, #636]	; (8002ee4 <TestThread+0x284>)
/**
 * @brief   Test execution thread function.
 *
 * @param[in] p         pointer to a @p BaseChannel object for test output
 */
void TestThread(void *p) {
 8002c66:	b083      	sub	sp, #12
  int i, j;

  chp = p;
 8002c68:	6020      	str	r0, [r4, #0]
  test_println("");
 8002c6a:	489f      	ldr	r0, [pc, #636]	; (8002ee8 <TestThread+0x288>)
 8002c6c:	f7ff ff98 	bl	8002ba0 <test_println>
  test_println("*** ChibiOS/RT test suite");
 8002c70:	489e      	ldr	r0, [pc, #632]	; (8002eec <TestThread+0x28c>)
 8002c72:	f7ff ff95 	bl	8002ba0 <test_println>
  test_println("***");
 8002c76:	4d9e      	ldr	r5, [pc, #632]	; (8002ef0 <TestThread+0x290>)
 8002c78:	489e      	ldr	r0, [pc, #632]	; (8002ef4 <TestThread+0x294>)
 8002c7a:	f7ff ff91 	bl	8002ba0 <test_println>
 8002c7e:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8002c80:	6820      	ldr	r0, [r4, #0]
 8002c82:	6803      	ldr	r3, [r0, #0]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8002c88:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8002c8c:	2900      	cmp	r1, #0
 8002c8e:	d1f7      	bne.n	8002c80 <TestThread+0x20>
  chp = p;
  test_println("");
  test_println("*** ChibiOS/RT test suite");
  test_println("***");
  test_print("*** Kernel:       ");
  test_println(CH_KERNEL_VERSION);
 8002c90:	4899      	ldr	r0, [pc, #612]	; (8002ef8 <TestThread+0x298>)
 8002c92:	4d9a      	ldr	r5, [pc, #616]	; (8002efc <TestThread+0x29c>)
 8002c94:	f7ff ff84 	bl	8002ba0 <test_println>
 8002c98:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8002c9a:	6820      	ldr	r0, [r4, #0]
 8002c9c:	6803      	ldr	r3, [r0, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8002ca2:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8002ca6:	2900      	cmp	r1, #0
 8002ca8:	d1f7      	bne.n	8002c9a <TestThread+0x3a>
  test_println("*** ChibiOS/RT test suite");
  test_println("***");
  test_print("*** Kernel:       ");
  test_println(CH_KERNEL_VERSION);
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
 8002caa:	4895      	ldr	r0, [pc, #596]	; (8002f00 <TestThread+0x2a0>)
 8002cac:	4d95      	ldr	r5, [pc, #596]	; (8002f04 <TestThread+0x2a4>)
 8002cae:	f7ff ff77 	bl	8002ba0 <test_println>
 8002cb2:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8002cb4:	6820      	ldr	r0, [r4, #0]
 8002cb6:	6803      	ldr	r3, [r0, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8002cbc:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8002cc0:	2900      	cmp	r1, #0
 8002cc2:	d1f7      	bne.n	8002cb4 <TestThread+0x54>
  test_println(CH_KERNEL_VERSION);
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
#ifdef PORT_COMPILER_NAME
  test_print("*** Compiler:     ");
  test_println(PORT_COMPILER_NAME);
 8002cc4:	4890      	ldr	r0, [pc, #576]	; (8002f08 <TestThread+0x2a8>)
 8002cc6:	4d91      	ldr	r5, [pc, #580]	; (8002f0c <TestThread+0x2ac>)
 8002cc8:	f7ff ff6a 	bl	8002ba0 <test_println>
 8002ccc:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8002cce:	6820      	ldr	r0, [r4, #0]
 8002cd0:	6803      	ldr	r3, [r0, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8002cd6:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8002cda:	2900      	cmp	r1, #0
 8002cdc:	d1f7      	bne.n	8002cce <TestThread+0x6e>
#ifdef PORT_COMPILER_NAME
  test_print("*** Compiler:     ");
  test_println(PORT_COMPILER_NAME);
#endif
  test_print("*** Architecture: ");
  test_println(PORT_ARCHITECTURE_NAME);
 8002cde:	488c      	ldr	r0, [pc, #560]	; (8002f10 <TestThread+0x2b0>)
 8002ce0:	4d8c      	ldr	r5, [pc, #560]	; (8002f14 <TestThread+0x2b4>)
 8002ce2:	f7ff ff5d 	bl	8002ba0 <test_println>
 8002ce6:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8002ce8:	6820      	ldr	r0, [r4, #0]
 8002cea:	6803      	ldr	r3, [r0, #0]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8002cf0:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8002cf4:	2900      	cmp	r1, #0
 8002cf6:	d1f7      	bne.n	8002ce8 <TestThread+0x88>
#endif
  test_print("*** Architecture: ");
  test_println(PORT_ARCHITECTURE_NAME);
#ifdef PORT_CORE_VARIANT_NAME
  test_print("*** Core Variant: ");
  test_println(PORT_CORE_VARIANT_NAME);
 8002cf8:	4887      	ldr	r0, [pc, #540]	; (8002f18 <TestThread+0x2b8>)
 8002cfa:	4d88      	ldr	r5, [pc, #544]	; (8002f1c <TestThread+0x2bc>)
 8002cfc:	f7ff ff50 	bl	8002ba0 <test_println>
 8002d00:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8002d02:	6820      	ldr	r0, [r4, #0]
 8002d04:	6803      	ldr	r3, [r0, #0]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8002d0a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8002d0e:	2900      	cmp	r1, #0
 8002d10:	d1f7      	bne.n	8002d02 <TestThread+0xa2>
  test_print("*** Core Variant: ");
  test_println(PORT_CORE_VARIANT_NAME);
#endif
#ifdef PORT_INFO
  test_print("*** Port Info:    ");
  test_println(PORT_INFO);
 8002d12:	4883      	ldr	r0, [pc, #524]	; (8002f20 <TestThread+0x2c0>)
 8002d14:	4d83      	ldr	r5, [pc, #524]	; (8002f24 <TestThread+0x2c4>)
 8002d16:	f7ff ff43 	bl	8002ba0 <test_println>
 8002d1a:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8002d1c:	6820      	ldr	r0, [r4, #0]
 8002d1e:	6803      	ldr	r3, [r0, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8002d24:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8002d28:	2900      	cmp	r1, #0
 8002d2a:	d1f7      	bne.n	8002d1c <TestThread+0xbc>
  test_print("*** Port Info:    ");
  test_println(PORT_INFO);
#endif
#ifdef PLATFORM_NAME
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
 8002d2c:	487e      	ldr	r0, [pc, #504]	; (8002f28 <TestThread+0x2c8>)
 8002d2e:	4d7f      	ldr	r5, [pc, #508]	; (8002f2c <TestThread+0x2cc>)
 8002d30:	f7ff ff36 	bl	8002ba0 <test_println>
 8002d34:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8002d36:	6820      	ldr	r0, [r4, #0]
 8002d38:	6803      	ldr	r3, [r0, #0]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8002d3e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8002d42:	2900      	cmp	r1, #0
 8002d44:	d1f7      	bne.n	8002d36 <TestThread+0xd6>
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
#endif
#ifdef BOARD_NAME
  test_print("*** Test Board:   ");
  test_println(BOARD_NAME);
 8002d46:	487a      	ldr	r0, [pc, #488]	; (8002f30 <TestThread+0x2d0>)
 8002d48:	9100      	str	r1, [sp, #0]
 8002d4a:	f7ff ff29 	bl	8002ba0 <test_println>
#endif
  test_println("");
 8002d4e:	4866      	ldr	r0, [pc, #408]	; (8002ee8 <TestThread+0x288>)
 8002d50:	f7ff ff26 	bl	8002ba0 <test_println>

  test_global_fail = FALSE;
 8002d54:	4b77      	ldr	r3, [pc, #476]	; (8002f34 <TestThread+0x2d4>)
 8002d56:	9900      	ldr	r1, [sp, #0]
 8002d58:	4f77      	ldr	r7, [pc, #476]	; (8002f38 <TestThread+0x2d8>)
 8002d5a:	7019      	strb	r1, [r3, #0]
 8002d5c:	4b77      	ldr	r3, [pc, #476]	; (8002f3c <TestThread+0x2dc>)
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8002d5e:	f8df b184 	ldr.w	fp, [pc, #388]	; 8002ee4 <TestThread+0x284>
 8002d62:	9301      	str	r3, [sp, #4]
 8002d64:	9b00      	ldr	r3, [sp, #0]
}

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
 8002d66:	2600      	movs	r6, #0
 8002d68:	3301      	adds	r3, #1
 8002d6a:	9300      	str	r3, [sp, #0]

  test_global_fail = FALSE;
  i = 0;
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
 8002d6c:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
 8002d70:	eb07 0886 	add.w	r8, r7, r6, lsl #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 808b 	beq.w	8002e90 <TestThread+0x230>
      print_line();
 8002d7a:	4d71      	ldr	r5, [pc, #452]	; (8002f40 <TestThread+0x2e0>)
 8002d7c:	f7ff fae8 	bl	8002350 <print_line>
 8002d80:	212d      	movs	r1, #45	; 0x2d
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8002d82:	6820      	ldr	r0, [r4, #0]
 8002d84:	6803      	ldr	r3, [r0, #0]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8002d8a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8002d8e:	2900      	cmp	r1, #0
 8002d90:	d1f7      	bne.n	8002d82 <TestThread+0x122>
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
 8002d92:	9800      	ldr	r0, [sp, #0]
 8002d94:	f7ff ff34 	bl	8002c00 <test_printn>
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8002d98:	f8db 0000 	ldr.w	r0, [fp]
 8002d9c:	212e      	movs	r1, #46	; 0x2e
 8002d9e:	6803      	ldr	r3, [r0, #0]
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
 8002da0:	3601      	adds	r6, #1
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	4798      	blx	r3
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
 8002da6:	4d67      	ldr	r5, [pc, #412]	; (8002f44 <TestThread+0x2e4>)
 8002da8:	4630      	mov	r0, r6
 8002daa:	f7ff ff29 	bl	8002c00 <test_printn>
 8002dae:	2120      	movs	r1, #32
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8002db0:	6820      	ldr	r0, [r4, #0]
 8002db2:	6803      	ldr	r3, [r0, #0]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8002db8:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8002dbc:	2900      	cmp	r1, #0
 8002dbe:	d1f7      	bne.n	8002db0 <TestThread+0x150>
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
      test_print(" (");
      test_print(patterns[i][j]->name);
 8002dc0:	f8d8 3000 	ldr.w	r3, [r8]
 8002dc4:	681d      	ldr	r5, [r3, #0]
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8002dc6:	7829      	ldrb	r1, [r5, #0]
 8002dc8:	b139      	cbz	r1, 8002dda <TestThread+0x17a>
    chSequentialStreamPut(chp, *msgp++);
 8002dca:	6820      	ldr	r0, [r4, #0]
 8002dcc:	6803      	ldr	r3, [r0, #0]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8002dd2:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8002dd6:	2900      	cmp	r1, #0
 8002dd8:	d1f7      	bne.n	8002dca <TestThread+0x16a>
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
      test_print(" (");
      test_print(patterns[i][j]->name);
      test_println(")");
 8002dda:	485b      	ldr	r0, [pc, #364]	; (8002f48 <TestThread+0x2e8>)
 8002ddc:	f7ff fee0 	bl	8002ba0 <test_println>
#if DELAY_BETWEEN_TESTS > 0
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
 8002de0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002de4:	f7fe fb04 	bl	80013f0 <chThdSleep>

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;
 8002de8:	4a58      	ldr	r2, [pc, #352]	; (8002f4c <TestThread+0x2ec>)
      test_print(patterns[i][j]->name);
      test_println(")");
#if DELAY_BETWEEN_TESTS > 0
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
#endif
      execute_test(patterns[i][j]);
 8002dea:	f8d8 a000 	ldr.w	sl, [r8]
static void execute_test(const struct testcase *tcp) {
  int i;

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
 8002dee:	2300      	movs	r3, #0
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	6053      	str	r3, [r2, #4]
 8002df4:	6093      	str	r3, [r2, #8]
 8002df6:	60d3      	str	r3, [r2, #12]
 8002df8:	6113      	str	r3, [r2, #16]
static void execute_test(const struct testcase *tcp) {
  int i;

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
 8002dfa:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8002f78 <TestThread+0x318>
/*
 * Tokens.
 */
static void clear_tokens(void) {

  tokp = tokens_buffer;
 8002dfe:	4d54      	ldr	r5, [pc, #336]	; (8002f50 <TestThread+0x2f0>)
 8002e00:	f8df 915c 	ldr.w	r9, [pc, #348]	; 8002f60 <TestThread+0x300>
  clear_tokens();
  local_fail = FALSE;
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;

  if (tcp->setup != NULL)
 8002e04:	f8da 2004 	ldr.w	r2, [sl, #4]
static void execute_test(const struct testcase *tcp) {
  int i;

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
 8002e08:	f888 3000 	strb.w	r3, [r8]
/*
 * Tokens.
 */
static void clear_tokens(void) {

  tokp = tokens_buffer;
 8002e0c:	f8c5 9000 	str.w	r9, [r5]
  clear_tokens();
  local_fail = FALSE;
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;

  if (tcp->setup != NULL)
 8002e10:	b102      	cbz	r2, 8002e14 <TestThread+0x1b4>
    tcp->setup();
 8002e12:	4790      	blx	r2
  tcp->execute();
 8002e14:	f8da 300c 	ldr.w	r3, [sl, #12]
 8002e18:	4798      	blx	r3
  if (tcp->teardown != NULL)
 8002e1a:	f8da 3008 	ldr.w	r3, [sl, #8]
 8002e1e:	b103      	cbz	r3, 8002e22 <TestThread+0x1c2>
    tcp->teardown();
 8002e20:	4798      	blx	r3

  test_wait_threads();
 8002e22:	f7ff fe0d 	bl	8002a40 <test_wait_threads>
      test_println(")");
#if DELAY_BETWEEN_TESTS > 0
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
#endif
      execute_test(patterns[i][j]);
      if (local_fail) {
 8002e26:	f898 3000 	ldrb.w	r3, [r8]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d04f      	beq.n	8002ece <TestThread+0x26e>
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
 8002e2e:	4f49      	ldr	r7, [pc, #292]	; (8002f54 <TestThread+0x2f4>)
 8002e30:	212d      	movs	r1, #45	; 0x2d
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8002e32:	6820      	ldr	r0, [r4, #0]
 8002e34:	6803      	ldr	r3, [r0, #0]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8002e3a:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 8002e3e:	2900      	cmp	r1, #0
 8002e40:	d1f7      	bne.n	8002e32 <TestThread+0x1d2>
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
#endif
      execute_test(patterns[i][j]);
      if (local_fail) {
        test_print("--- Result: FAILURE (#");
        test_printn(failpoint);
 8002e42:	4b45      	ldr	r3, [pc, #276]	; (8002f58 <TestThread+0x2f8>)
 8002e44:	4f45      	ldr	r7, [pc, #276]	; (8002f5c <TestThread+0x2fc>)
 8002e46:	6818      	ldr	r0, [r3, #0]
 8002e48:	f7ff feda 	bl	8002c00 <test_printn>
 8002e4c:	2120      	movs	r1, #32
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8002e4e:	6820      	ldr	r0, [r4, #0]
 8002e50:	6803      	ldr	r3, [r0, #0]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8002e56:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 8002e5a:	2900      	cmp	r1, #0
 8002e5c:	d1f7      	bne.n	8002e4e <TestThread+0x1ee>
}

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
 8002e5e:	682b      	ldr	r3, [r5, #0]
 8002e60:	454b      	cmp	r3, r9
 8002e62:	d909      	bls.n	8002e78 <TestThread+0x218>
 8002e64:	4f3e      	ldr	r7, [pc, #248]	; (8002f60 <TestThread+0x300>)
    chSequentialStreamPut(chp, *cp++);
 8002e66:	6820      	ldr	r0, [r4, #0]
 8002e68:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002e6c:	6803      	ldr	r3, [r0, #0]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	4798      	blx	r3
}

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
 8002e72:	682b      	ldr	r3, [r5, #0]
 8002e74:	429f      	cmp	r7, r3
 8002e76:	d3f6      	bcc.n	8002e66 <TestThread+0x206>
      if (local_fail) {
        test_print("--- Result: FAILURE (#");
        test_printn(failpoint);
        test_print(" [");
        print_tokens();
        test_println("])");
 8002e78:	483a      	ldr	r0, [pc, #232]	; (8002f64 <TestThread+0x304>)
 8002e7a:	f7ff fe91 	bl	8002ba0 <test_println>
 8002e7e:	9b01      	ldr	r3, [sp, #4]
 8002e80:	681f      	ldr	r7, [r3, #0]

  test_global_fail = FALSE;
  i = 0;
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
 8002e82:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
 8002e86:	eb07 0886 	add.w	r8, r7, r6, lsl #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f47f af75 	bne.w	8002d7a <TestThread+0x11a>
#endif
  test_println("");

  test_global_fail = FALSE;
  i = 0;
  while (patterns[i]) {
 8002e90:	9b01      	ldr	r3, [sp, #4]
 8002e92:	f853 7f04 	ldr.w	r7, [r3, #4]!
 8002e96:	9301      	str	r3, [sp, #4]
 8002e98:	2f00      	cmp	r7, #0
 8002e9a:	f47f af63 	bne.w	8002d64 <TestThread+0x104>
        test_println("--- Result: SUCCESS");
      j++;
    }
    i++;
  }
  print_line();
 8002e9e:	f7ff fa57 	bl	8002350 <print_line>
  test_println("");
 8002ea2:	4d31      	ldr	r5, [pc, #196]	; (8002f68 <TestThread+0x308>)
 8002ea4:	4810      	ldr	r0, [pc, #64]	; (8002ee8 <TestThread+0x288>)
 8002ea6:	f7ff fe7b 	bl	8002ba0 <test_println>
 8002eaa:	2146      	movs	r1, #70	; 0x46
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8002eac:	6820      	ldr	r0, [r4, #0]
 8002eae:	6803      	ldr	r3, [r0, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8002eb4:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8002eb8:	2900      	cmp	r1, #0
 8002eba:	d1f7      	bne.n	8002eac <TestThread+0x24c>
    i++;
  }
  print_line();
  test_println("");
  test_print("Final result: ");
  if (test_global_fail)
 8002ebc:	4b1d      	ldr	r3, [pc, #116]	; (8002f34 <TestThread+0x2d4>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	b94b      	cbnz	r3, 8002ed6 <TestThread+0x276>
    test_println("FAILURE");
  else
    test_println("SUCCESS");
 8002ec2:	482a      	ldr	r0, [pc, #168]	; (8002f6c <TestThread+0x30c>)
}
 8002ec4:	b003      	add	sp, #12
 8002ec6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_println("");
  test_print("Final result: ");
  if (test_global_fail)
    test_println("FAILURE");
  else
    test_println("SUCCESS");
 8002eca:	f7ff be69 	b.w	8002ba0 <test_println>
        test_print(" [");
        print_tokens();
        test_println("])");
      }
      else
        test_println("--- Result: SUCCESS");
 8002ece:	4828      	ldr	r0, [pc, #160]	; (8002f70 <TestThread+0x310>)
 8002ed0:	f7ff fe66 	bl	8002ba0 <test_println>
 8002ed4:	e74a      	b.n	8002d6c <TestThread+0x10c>
  }
  print_line();
  test_println("");
  test_print("Final result: ");
  if (test_global_fail)
    test_println("FAILURE");
 8002ed6:	4827      	ldr	r0, [pc, #156]	; (8002f74 <TestThread+0x314>)
  else
    test_println("SUCCESS");
}
 8002ed8:	b003      	add	sp, #12
 8002eda:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_println("");
  test_print("Final result: ");
  if (test_global_fail)
    test_println("FAILURE");
  else
    test_println("SUCCESS");
 8002ede:	f7ff be5f 	b.w	8002ba0 <test_println>
 8002ee2:	bf00      	nop
 8002ee4:	200008e8 	.word	0x200008e8
 8002ee8:	08007dbc 	.word	0x08007dbc
 8002eec:	080074b0 	.word	0x080074b0
 8002ef0:	080073d0 	.word	0x080073d0
 8002ef4:	080074cc 	.word	0x080074cc
 8002ef8:	080074f4 	.word	0x080074f4
 8002efc:	080073e4 	.word	0x080073e4
 8002f00:	080074fc 	.word	0x080074fc
 8002f04:	080073f8 	.word	0x080073f8
 8002f08:	08007514 	.word	0x08007514
 8002f0c:	0800740c 	.word	0x0800740c
 8002f10:	0800755c 	.word	0x0800755c
 8002f14:	08007420 	.word	0x08007420
 8002f18:	08007564 	.word	0x08007564
 8002f1c:	08007434 	.word	0x08007434
 8002f20:	08007570 	.word	0x08007570
 8002f24:	08007448 	.word	0x08007448
 8002f28:	08007588 	.word	0x08007588
 8002f2c:	0800745c 	.word	0x0800745c
 8002f30:	080075b4 	.word	0x080075b4
 8002f34:	200008e4 	.word	0x200008e4
 8002f38:	080071a0 	.word	0x080071a0
 8002f3c:	08007210 	.word	0x08007210
 8002f40:	08007470 	.word	0x08007470
 8002f44:	08007480 	.word	0x08007480
 8002f48:	080074d0 	.word	0x080074d0
 8002f4c:	20000968 	.word	0x20000968
 8002f50:	200008e0 	.word	0x200008e0
 8002f54:	08007484 	.word	0x08007484
 8002f58:	200008fc 	.word	0x200008fc
 8002f5c:	0800749c 	.word	0x0800749c
 8002f60:	200008ec 	.word	0x200008ec
 8002f64:	080074d4 	.word	0x080074d4
 8002f68:	080074a0 	.word	0x080074a0
 8002f6c:	080074e4 	.word	0x080074e4
 8002f70:	080074d8 	.word	0x080074d8
 8002f74:	080074ec 	.word	0x080074ec
 8002f78:	200008e5 	.word	0x200008e5
 8002f7c:	00000000 	.word	0x00000000

08002f80 <__early_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8002f80:	4b1f      	ldr	r3, [pc, #124]	; (8003000 <__early_init+0x80>)
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8002f82:	4619      	mov	r1, r3
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	f042 0201 	orr.w	r2, r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8002f8c:	680b      	ldr	r3, [r1, #0]
 8002f8e:	4a1c      	ldr	r2, [pc, #112]	; (8003000 <__early_init+0x80>)
 8002f90:	079b      	lsls	r3, r3, #30
 8002f92:	d5fb      	bpl.n	8002f8c <__early_init+0xc>
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  RCC->CFGR = 0;                            /* CFGR reset value.            */
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8002f94:	4611      	mov	r1, r2
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8002f96:	6813      	ldr	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8002f98:	2000      	movs	r0, #0
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8002f9a:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
 8002f9e:	6013      	str	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8002fa0:	6050      	str	r0, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8002fa2:	684b      	ldr	r3, [r1, #4]
 8002fa4:	4a16      	ldr	r2, [pc, #88]	; (8003000 <__early_init+0x80>)
 8002fa6:	f013 0f0c 	tst.w	r3, #12
 8002faa:	d1fa      	bne.n	8002fa2 <__early_init+0x22>
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
  while (!(RCC->CR & RCC_CR_HSERDY))
 8002fac:	4611      	mov	r1, r2
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
 8002fae:	6813      	ldr	r3, [r2, #0]
 8002fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb4:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 8002fb6:	680b      	ldr	r3, [r1, #0]
 8002fb8:	4a11      	ldr	r2, [pc, #68]	; (8003000 <__early_init+0x80>)
 8002fba:	0398      	lsls	r0, r3, #14
 8002fbc:	d5fb      	bpl.n	8002fb6 <__early_init+0x36>

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
  RCC->CR   |= RCC_CR_PLLON;
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8002fbe:	4611      	mov	r1, r2
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 8002fc0:	6853      	ldr	r3, [r2, #4]
 8002fc2:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8002fc6:	6053      	str	r3, [r2, #4]
  RCC->CR   |= RCC_CR_PLLON;
 8002fc8:	6813      	ldr	r3, [r2, #0]
 8002fca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fce:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8002fd0:	680b      	ldr	r3, [r1, #0]
 8002fd2:	4a0b      	ldr	r2, [pc, #44]	; (8003000 <__early_init+0x80>)
 8002fd4:	019b      	lsls	r3, r3, #6
 8002fd6:	d5fb      	bpl.n	8002fd0 <__early_init+0x50>

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8002fd8:	4611      	mov	r1, r2
/*
 * Early initialization code.
 * This initialization must be performed just after stack setup and before
 * any other initialization.
 */
void __early_init(void) {
 8002fda:	b410      	push	{r4}
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8002fdc:	4b09      	ldr	r3, [pc, #36]	; (8003004 <__early_init+0x84>)
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Clock settings.*/
#if STM32_HAS_USB
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 8002fde:	4c0a      	ldr	r4, [pc, #40]	; (8003008 <__early_init+0x88>)
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8002fe0:	2012      	movs	r0, #18
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Clock settings.*/
#if STM32_HAS_USB
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 8002fe2:	6054      	str	r4, [r2, #4]
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8002fe4:	6018      	str	r0, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 8002fe6:	6853      	ldr	r3, [r2, #4]
 8002fe8:	f043 0302 	orr.w	r3, r3, #2
 8002fec:	6053      	str	r3, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8002fee:	684b      	ldr	r3, [r1, #4]
 8002ff0:	f003 030c 	and.w	r3, r3, #12
 8002ff4:	2b08      	cmp	r3, #8
 8002ff6:	d1fa      	bne.n	8002fee <__early_init+0x6e>

  stm32_clock_init();
}
 8002ff8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	40021000 	.word	0x40021000
 8003004:	40022000 	.word	0x40022000
 8003008:	001d6400 	.word	0x001d6400
 800300c:	00000000 	.word	0x00000000

08003010 <mbox1_setup.lto_priv.139>:
 * Messages are posted/fetched from a mailbox in carefully designed sequences
 * in order to stimulate all the possible code paths inside the mailbox.<br>
 * The test expects to find a consistent mailbox status after each operation.
 */

static void mbox1_setup(void) {
 8003010:	b470      	push	{r4, r5, r6}
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, cnt_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (cnt_t)0));

  mbp->mb_buffer = buf;
 8003012:	4b0b      	ldr	r3, [pc, #44]	; (8003040 <mbox1_setup.lto_priv.139+0x30>)
 8003014:	4a0b      	ldr	r2, [pc, #44]	; (8003044 <mbox1_setup.lto_priv.139+0x34>)
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));

  queue_init(&sp->s_queue);
  sp->s_cnt = n;
 8003016:	2505      	movs	r5, #5
  mbp->mb_rdptr = buf;
  mbp->mb_wrptr = buf;
  mbp->mb_top = &buf[n];
 8003018:	f102 0614 	add.w	r6, r2, #20
 800301c:	2400      	movs	r4, #0
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800301e:	f103 001c 	add.w	r0, r3, #28
 8003022:	f103 0110 	add.w	r1, r3, #16
 8003026:	605e      	str	r6, [r3, #4]
 8003028:	625d      	str	r5, [r3, #36]	; 0x24
 800302a:	619c      	str	r4, [r3, #24]
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, cnt_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (cnt_t)0));

  mbp->mb_buffer = buf;
 800302c:	601a      	str	r2, [r3, #0]
  mbp->mb_rdptr = buf;
 800302e:	60da      	str	r2, [r3, #12]
  mbp->mb_wrptr = buf;
 8003030:	609a      	str	r2, [r3, #8]
 8003032:	61d8      	str	r0, [r3, #28]
  tqp->p_prev = (thread_t *)tqp;
 8003034:	6218      	str	r0, [r3, #32]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8003036:	6119      	str	r1, [r3, #16]
  tqp->p_prev = (thread_t *)tqp;
 8003038:	6159      	str	r1, [r3, #20]

  chMBObjectInit(&mb1, (msg_t *)test.wa.T0, MB_SIZE);
}
 800303a:	bc70      	pop	{r4, r5, r6}
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	200008ac 	.word	0x200008ac
 8003044:	20000d50 	.word	0x20000d50
	...

08003050 <mtx8_setup.lto_priv.136>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8003050:	4a06      	ldr	r2, [pc, #24]	; (800306c <mtx8_setup.lto_priv.136+0x1c>)
 8003052:	4b07      	ldr	r3, [pc, #28]	; (8003070 <mtx8_setup.lto_priv.136+0x20>)
 8003054:	4907      	ldr	r1, [pc, #28]	; (8003074 <mtx8_setup.lto_priv.136+0x24>)
 8003056:	2000      	movs	r0, #0
 8003058:	6009      	str	r1, [r1, #0]
  tqp->p_prev = (thread_t *)tqp;
 800305a:	6049      	str	r1, [r1, #4]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800305c:	6012      	str	r2, [r2, #0]
  tqp->p_prev = (thread_t *)tqp;
 800305e:	6052      	str	r2, [r2, #4]
 8003060:	6090      	str	r0, [r2, #8]
 8003062:	6098      	str	r0, [r3, #8]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8003064:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8003066:	605b      	str	r3, [r3, #4]
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	20000800 	.word	0x20000800
 8003070:	20000810 	.word	0x20000810
 8003074:	200008d4 	.word	0x200008d4
	...

08003080 <mtx7_setup.lto_priv.134>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8003080:	4b04      	ldr	r3, [pc, #16]	; (8003094 <mtx7_setup.lto_priv.134+0x14>)
 8003082:	4a05      	ldr	r2, [pc, #20]	; (8003098 <mtx7_setup.lto_priv.134+0x18>)
 8003084:	2100      	movs	r1, #0
 8003086:	6012      	str	r2, [r2, #0]
  tqp->p_prev = (thread_t *)tqp;
 8003088:	6052      	str	r2, [r2, #4]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800308a:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 800308c:	605b      	str	r3, [r3, #4]
 800308e:	6099      	str	r1, [r3, #8]
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	20000800 	.word	0x20000800
 8003098:	200008d4 	.word	0x200008d4
 800309c:	00000000 	.word	0x00000000

080030a0 <mtx6_setup.lto_priv.132>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80030a0:	4b04      	ldr	r3, [pc, #16]	; (80030b4 <mtx6_setup.lto_priv.132+0x14>)
 80030a2:	4a05      	ldr	r2, [pc, #20]	; (80030b8 <mtx6_setup.lto_priv.132+0x18>)
 80030a4:	2100      	movs	r1, #0
 80030a6:	6012      	str	r2, [r2, #0]
  tqp->p_prev = (thread_t *)tqp;
 80030a8:	6052      	str	r2, [r2, #4]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80030aa:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80030ac:	605b      	str	r3, [r3, #4]
 80030ae:	6099      	str	r1, [r3, #8]
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	20000800 	.word	0x20000800
 80030b8:	200008d4 	.word	0x200008d4
 80030bc:	00000000 	.word	0x00000000

080030c0 <mbox1_execute.lto_priv.140>:

static void mbox1_execute(void) {
 80030c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030c4:	2320      	movs	r3, #32
 80030c6:	b082      	sub	sp, #8
 80030c8:	f383 8811 	msr	BASEPRI, r3
 80030cc:	4d95      	ldr	r5, [pc, #596]	; (8003324 <mbox1_execute.lto_priv.140+0x264>)
  unsigned i;

  /*
   * Testing initial space.
   */
  test_assert_lock(1, chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
 80030ce:	2001      	movs	r0, #1
 80030d0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80030d2:	f1a1 0105 	sub.w	r1, r1, #5
 80030d6:	fab1 f181 	clz	r1, r1
 80030da:	0949      	lsrs	r1, r1, #5
 80030dc:	f7ff fd30 	bl	8002b40 <_test_assert>
 80030e0:	2800      	cmp	r0, #0
 80030e2:	f040 8089 	bne.w	80031f8 <mbox1_execute.lto_priv.140+0x138>
 80030e6:	f380 8811 	msr	BASEPRI, r0
 80030ea:	2442      	movs	r4, #66	; 0x42

  /*
   * Testing enqueuing and backward circularity.
   */
  for (i = 0; i < MB_SIZE - 1; i++) {
    msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
 80030ec:	4620      	mov	r0, r4
 80030ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80030f2:	f003 fd6d 	bl	8006bd0 <chMBPost.constprop.40>
    test_assert(2, msg1 == MSG_OK, "wrong wake-up message");
 80030f6:	fab0 f180 	clz	r1, r0
 80030fa:	2002      	movs	r0, #2
 80030fc:	0949      	lsrs	r1, r1, #5
 80030fe:	f7ff fd1f 	bl	8002b40 <_test_assert>
 8003102:	3401      	adds	r4, #1
 8003104:	b970      	cbnz	r0, 8003124 <mbox1_execute.lto_priv.140+0x64>
  test_assert_lock(1, chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");

  /*
   * Testing enqueuing and backward circularity.
   */
  for (i = 0; i < MB_SIZE - 1; i++) {
 8003106:	2c46      	cmp	r4, #70	; 0x46
 8003108:	d1f0      	bne.n	80030ec <mbox1_execute.lto_priv.140+0x2c>
    msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
    test_assert(2, msg1 == MSG_OK, "wrong wake-up message");
  }
  msg1 = chMBPostAhead(&mb1, 'A', TIME_INFINITE);
 800310a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800310e:	2041      	movs	r0, #65	; 0x41
 8003110:	f003 fda6 	bl	8006c60 <chMBPostAhead.constprop.38>
  test_assert(3, msg1 == MSG_OK, "wrong wake-up message");
 8003114:	fab0 f180 	clz	r1, r0
 8003118:	2003      	movs	r0, #3
 800311a:	0949      	lsrs	r1, r1, #5
 800311c:	f7ff fd10 	bl	8002b40 <_test_assert>
 8003120:	2800      	cmp	r0, #0
 8003122:	d06f      	beq.n	8003204 <mbox1_execute.lto_priv.140+0x144>
   */
  test_assert_lock(44, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
  test_assert_lock(45, chMBGetUsedCountI(&mb1) == 0, "still full");
  test_assert_lock(46, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
  test_assert_lock(47, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
}
 8003124:	b002      	add	sp, #8
 8003126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800312a:	f386 8811 	msr	BASEPRI, r6
 800312e:	f387 8811 	msr	BASEPRI, r7
    test_assert(39, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
  }
  test_assert_sequence(40, "ABCDE");
  test_assert_lock(41, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
  test_assert_lock(42, chMBGetUsedCountI(&mb1) == 0, "still full");
 8003132:	69a1      	ldr	r1, [r4, #24]
 8003134:	202a      	movs	r0, #42	; 0x2a
 8003136:	fab1 f181 	clz	r1, r1
 800313a:	0949      	lsrs	r1, r1, #5
 800313c:	f7ff fd00 	bl	8002b40 <_test_assert>
 8003140:	2800      	cmp	r0, #0
 8003142:	f040 8299 	bne.w	8003678 <mbox1_execute.lto_priv.140+0x5b8>
 8003146:	f386 8811 	msr	BASEPRI, r6
  test_assert(43, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 800314a:	68e1      	ldr	r1, [r4, #12]
 800314c:	68a3      	ldr	r3, [r4, #8]
 800314e:	202b      	movs	r0, #43	; 0x2b
 8003150:	ebc3 0e01 	rsb	lr, r3, r1
 8003154:	f1de 0100 	rsbs	r1, lr, #0
 8003158:	eb41 010e 	adc.w	r1, r1, lr
 800315c:	f7ff fcf0 	bl	8002b40 <_test_assert>
 8003160:	2800      	cmp	r0, #0
 8003162:	d1df      	bne.n	8003124 <mbox1_execute.lto_priv.140+0x64>
 8003164:	f387 8811 	msr	BASEPRI, r7
void chMBResetI(mailbox_t *mbp) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->mb_wrptr = mbp->mb_buffer;
 8003168:	6823      	ldr	r3, [r4, #0]
  mbp->mb_rdptr = mbp->mb_buffer;
  chSemResetI(&mbp->mb_emptysem, (cnt_t)(mbp->mb_top - mbp->mb_buffer));
 800316a:	6862      	ldr	r2, [r4, #4]
 800316c:	f104 001c 	add.w	r0, r4, #28
 8003170:	1ad1      	subs	r1, r2, r3
 8003172:	1089      	asrs	r1, r1, #2
void chMBResetI(mailbox_t *mbp) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->mb_wrptr = mbp->mb_buffer;
 8003174:	60a3      	str	r3, [r4, #8]
  mbp->mb_rdptr = mbp->mb_buffer;
 8003176:	60e3      	str	r3, [r4, #12]
  chSemResetI(&mbp->mb_emptysem, (cnt_t)(mbp->mb_top - mbp->mb_buffer));
 8003178:	f7fd ff12 	bl	8000fa0 <chSemResetI>
  chSemResetI(&mbp->mb_fullsem, (cnt_t)0);
 800317c:	f104 0010 	add.w	r0, r4, #16
 8003180:	4631      	mov	r1, r6
 8003182:	f7fd ff0d 	bl	8000fa0 <chSemResetI>
 */
void chMBReset(mailbox_t *mbp) {

  chSysLock();
  chMBResetI(mbp);
  chSchRescheduleS();
 8003186:	f7fd fa9b 	bl	80006c0 <chSchRescheduleS>
 800318a:	f386 8811 	msr	BASEPRI, r6
 800318e:	f387 8811 	msr	BASEPRI, r7
  chMBReset(&mb1);

  /*
   * Re-testing final conditions.
   */
  test_assert_lock(44, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8003192:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003194:	202c      	movs	r0, #44	; 0x2c
 8003196:	1f4d      	subs	r5, r1, #5
 8003198:	4269      	negs	r1, r5
 800319a:	4169      	adcs	r1, r5
 800319c:	f7ff fcd0 	bl	8002b40 <_test_assert>
 80031a0:	2800      	cmp	r0, #0
 80031a2:	f040 8269 	bne.w	8003678 <mbox1_execute.lto_priv.140+0x5b8>
 80031a6:	f386 8811 	msr	BASEPRI, r6
 80031aa:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(45, chMBGetUsedCountI(&mb1) == 0, "still full");
 80031ae:	69a1      	ldr	r1, [r4, #24]
 80031b0:	202d      	movs	r0, #45	; 0x2d
 80031b2:	fab1 f181 	clz	r1, r1
 80031b6:	0949      	lsrs	r1, r1, #5
 80031b8:	f7ff fcc2 	bl	8002b40 <_test_assert>
 80031bc:	2800      	cmp	r0, #0
 80031be:	f040 825b 	bne.w	8003678 <mbox1_execute.lto_priv.140+0x5b8>
 80031c2:	f386 8811 	msr	BASEPRI, r6
 80031c6:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(46, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
 80031ca:	6821      	ldr	r1, [r4, #0]
 80031cc:	68a3      	ldr	r3, [r4, #8]
 80031ce:	202e      	movs	r0, #46	; 0x2e
 80031d0:	1aca      	subs	r2, r1, r3
 80031d2:	4251      	negs	r1, r2
 80031d4:	4151      	adcs	r1, r2
 80031d6:	f7ff fcb3 	bl	8002b40 <_test_assert>
 80031da:	2800      	cmp	r0, #0
 80031dc:	f040 824c 	bne.w	8003678 <mbox1_execute.lto_priv.140+0x5b8>
 80031e0:	f386 8811 	msr	BASEPRI, r6
 80031e4:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(47, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
 80031e8:	6821      	ldr	r1, [r4, #0]
 80031ea:	68e3      	ldr	r3, [r4, #12]
 80031ec:	202f      	movs	r0, #47	; 0x2f
 80031ee:	1acb      	subs	r3, r1, r3
 80031f0:	4259      	negs	r1, r3
 80031f2:	4159      	adcs	r1, r3
 80031f4:	f7ff fca4 	bl	8002b40 <_test_assert>
 80031f8:	2300      	movs	r3, #0
 80031fa:	f383 8811 	msr	BASEPRI, r3
}
 80031fe:	b002      	add	sp, #8
 8003200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_assert(3, msg1 == MSG_OK, "wrong wake-up message");

  /*
   * Testing post timeout.
   */
  msg1 = chMBPost(&mb1, 'X', 1);
 8003204:	2101      	movs	r1, #1
 8003206:	2058      	movs	r0, #88	; 0x58
 8003208:	f003 fce2 	bl	8006bd0 <chMBPost.constprop.40>
  test_assert(4, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 800320c:	f1a0 31ff 	sub.w	r1, r0, #4294967295
 8003210:	fab1 f181 	clz	r1, r1
 8003214:	2004      	movs	r0, #4
 8003216:	0949      	lsrs	r1, r1, #5
 8003218:	f7ff fc92 	bl	8002b40 <_test_assert>
 800321c:	4604      	mov	r4, r0
 800321e:	2800      	cmp	r0, #0
 8003220:	d180      	bne.n	8003124 <mbox1_execute.lto_priv.140+0x64>
 8003222:	2620      	movs	r6, #32
 8003224:	f386 8811 	msr	BASEPRI, r6
  chSysLock();
  msg1 = chMBPostI(&mb1, 'X');
 8003228:	2058      	movs	r0, #88	; 0x58
 800322a:	f003 fcf9 	bl	8006c20 <chMBPostI.constprop.39>
 800322e:	4601      	mov	r1, r0
 8003230:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();
  test_assert(5, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8003234:	f1a1 31ff 	sub.w	r1, r1, #4294967295
 8003238:	fab1 f181 	clz	r1, r1
 800323c:	2005      	movs	r0, #5
 800323e:	0949      	lsrs	r1, r1, #5
 8003240:	f7ff fc7e 	bl	8002b40 <_test_assert>
 8003244:	2800      	cmp	r0, #0
 8003246:	f47f af6d 	bne.w	8003124 <mbox1_execute.lto_priv.140+0x64>
  msg1 = chMBPostAhead(&mb1, 'X', 1);
 800324a:	2101      	movs	r1, #1
 800324c:	2058      	movs	r0, #88	; 0x58
 800324e:	f003 fd07 	bl	8006c60 <chMBPostAhead.constprop.38>
  test_assert(6, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8003252:	f1a0 31ff 	sub.w	r1, r0, #4294967295
 8003256:	fab1 f181 	clz	r1, r1
 800325a:	2006      	movs	r0, #6
 800325c:	0949      	lsrs	r1, r1, #5
 800325e:	f7ff fc6f 	bl	8002b40 <_test_assert>
 8003262:	4604      	mov	r4, r0
 8003264:	2800      	cmp	r0, #0
 8003266:	f47f af5d 	bne.w	8003124 <mbox1_execute.lto_priv.140+0x64>
 800326a:	f386 8811 	msr	BASEPRI, r6
  chSysLock();
  msg1 = chMBPostAheadI(&mb1, 'X');
 800326e:	2058      	movs	r0, #88	; 0x58
 8003270:	f003 fd1e 	bl	8006cb0 <chMBPostAheadI.constprop.37>
 8003274:	4601      	mov	r1, r0
 8003276:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();
  test_assert(7, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 800327a:	f1a1 31ff 	sub.w	r1, r1, #4294967295
 800327e:	fab1 f181 	clz	r1, r1
 8003282:	2007      	movs	r0, #7
 8003284:	0949      	lsrs	r1, r1, #5
 8003286:	f7ff fc5b 	bl	8002b40 <_test_assert>
 800328a:	4680      	mov	r8, r0
 800328c:	2800      	cmp	r0, #0
 800328e:	f47f af49 	bne.w	8003124 <mbox1_execute.lto_priv.140+0x64>
 8003292:	f386 8811 	msr	BASEPRI, r6

  /*
   * Testing final conditions.
   */
  test_assert_lock(8, chMBGetFreeCountI(&mb1) == 0, "still empty");
 8003296:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8003298:	2008      	movs	r0, #8
 800329a:	fab1 f181 	clz	r1, r1
 800329e:	0949      	lsrs	r1, r1, #5
 80032a0:	f7ff fc4e 	bl	8002b40 <_test_assert>
 80032a4:	4c1f      	ldr	r4, [pc, #124]	; (8003324 <mbox1_execute.lto_priv.140+0x264>)
 80032a6:	4607      	mov	r7, r0
 80032a8:	b110      	cbz	r0, 80032b0 <mbox1_execute.lto_priv.140+0x1f0>
 80032aa:	f388 8811 	msr	BASEPRI, r8
 80032ae:	e739      	b.n	8003124 <mbox1_execute.lto_priv.140+0x64>
 80032b0:	f380 8811 	msr	BASEPRI, r0
 80032b4:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(9, chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 80032b8:	69a1      	ldr	r1, [r4, #24]
 80032ba:	2009      	movs	r0, #9
 80032bc:	f1a1 0e05 	sub.w	lr, r1, #5
 80032c0:	f1de 0100 	rsbs	r1, lr, #0
 80032c4:	eb41 010e 	adc.w	r1, r1, lr
 80032c8:	f7ff fc3a 	bl	8002b40 <_test_assert>
 80032cc:	b110      	cbz	r0, 80032d4 <mbox1_execute.lto_priv.140+0x214>
 80032ce:	f387 8811 	msr	BASEPRI, r7
 80032d2:	e727      	b.n	8003124 <mbox1_execute.lto_priv.140+0x64>
 80032d4:	f380 8811 	msr	BASEPRI, r0
 80032d8:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(10, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 80032dc:	68e1      	ldr	r1, [r4, #12]
 80032de:	68a3      	ldr	r3, [r4, #8]
 80032e0:	200a      	movs	r0, #10
 80032e2:	1acf      	subs	r7, r1, r3
 80032e4:	4279      	negs	r1, r7
 80032e6:	4179      	adcs	r1, r7
 80032e8:	f7ff fc2a 	bl	8002b40 <_test_assert>
 80032ec:	2300      	movs	r3, #0
 80032ee:	2800      	cmp	r0, #0
 80032f0:	d183      	bne.n	80031fa <mbox1_execute.lto_priv.140+0x13a>
 80032f2:	f383 8811 	msr	BASEPRI, r3
 80032f6:	2405      	movs	r4, #5
 80032f8:	e005      	b.n	8003306 <mbox1_execute.lto_priv.140+0x246>
   * Testing dequeuing.
   */
  for (i = 0; i < MB_SIZE; i++) {
    msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
    test_assert(11, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
 80032fa:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80032fe:	f7ff fc37 	bl	8002b70 <test_emit_token>
  test_assert_lock(10, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");

  /*
   * Testing dequeuing.
   */
  for (i = 0; i < MB_SIZE; i++) {
 8003302:	3c01      	subs	r4, #1
 8003304:	d010      	beq.n	8003328 <mbox1_execute.lto_priv.140+0x268>
    msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
 8003306:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800330a:	a801      	add	r0, sp, #4
 800330c:	f003 fcf0 	bl	8006cf0 <chMBFetch.constprop.36>
    test_assert(11, msg1 == MSG_OK, "wrong wake-up message");
 8003310:	fab0 f180 	clz	r1, r0
 8003314:	200b      	movs	r0, #11
 8003316:	0949      	lsrs	r1, r1, #5
 8003318:	f7ff fc12 	bl	8002b40 <_test_assert>
 800331c:	2800      	cmp	r0, #0
 800331e:	d0ec      	beq.n	80032fa <mbox1_execute.lto_priv.140+0x23a>
 8003320:	e700      	b.n	8003124 <mbox1_execute.lto_priv.140+0x64>
 8003322:	bf00      	nop
 8003324:	200008ac 	.word	0x200008ac
    test_emit_token(msg2);
  }
  test_assert_sequence(12, "ABCDE");
 8003328:	200c      	movs	r0, #12
 800332a:	49d5      	ldr	r1, [pc, #852]	; (8003680 <mbox1_execute.lto_priv.140+0x5c0>)
 800332c:	f7ff fbe0 	bl	8002af0 <_test_assert_sequence>
 8003330:	2800      	cmp	r0, #0
 8003332:	f47f aef7 	bne.w	8003124 <mbox1_execute.lto_priv.140+0x64>

  /*
   * Testing buffer circularity.
   */
  msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
 8003336:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800333a:	2047      	movs	r0, #71	; 0x47
 800333c:	f003 fc48 	bl	8006bd0 <chMBPost.constprop.40>
  test_assert(13, msg1 == MSG_OK, "wrong wake-up message");
 8003340:	fab0 f180 	clz	r1, r0
 8003344:	200d      	movs	r0, #13
 8003346:	0949      	lsrs	r1, r1, #5
 8003348:	f7ff fbfa 	bl	8002b40 <_test_assert>
 800334c:	2800      	cmp	r0, #0
 800334e:	f47f aee9 	bne.w	8003124 <mbox1_execute.lto_priv.140+0x64>
  msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
 8003352:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003356:	a801      	add	r0, sp, #4
 8003358:	f003 fcca 	bl	8006cf0 <chMBFetch.constprop.36>
  test_assert(14, msg1 == MSG_OK, "wrong wake-up message");
 800335c:	fab0 f180 	clz	r1, r0
 8003360:	200e      	movs	r0, #14
 8003362:	0949      	lsrs	r1, r1, #5
 8003364:	f7ff fbec 	bl	8002b40 <_test_assert>
 8003368:	2800      	cmp	r0, #0
 800336a:	f47f aedb 	bne.w	8003124 <mbox1_execute.lto_priv.140+0x64>
  test_assert(15, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
 800336e:	6829      	ldr	r1, [r5, #0]
 8003370:	68ab      	ldr	r3, [r5, #8]
 8003372:	200f      	movs	r0, #15
 8003374:	1ace      	subs	r6, r1, r3
 8003376:	4271      	negs	r1, r6
 8003378:	4171      	adcs	r1, r6
 800337a:	4ec2      	ldr	r6, [pc, #776]	; (8003684 <mbox1_execute.lto_priv.140+0x5c4>)
 800337c:	f7ff fbe0 	bl	8002b40 <_test_assert>
 8003380:	2800      	cmp	r0, #0
 8003382:	f47f aecf 	bne.w	8003124 <mbox1_execute.lto_priv.140+0x64>
  test_assert(16, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
 8003386:	6831      	ldr	r1, [r6, #0]
 8003388:	68f3      	ldr	r3, [r6, #12]
 800338a:	2010      	movs	r0, #16
 800338c:	1aca      	subs	r2, r1, r3
 800338e:	4251      	negs	r1, r2
 8003390:	4151      	adcs	r1, r2
 8003392:	f7ff fbd5 	bl	8002b40 <_test_assert>
 8003396:	2800      	cmp	r0, #0
 8003398:	f47f aec4 	bne.w	8003124 <mbox1_execute.lto_priv.140+0x64>

  /*
   * Testing fetch timeout.
   */
  msg1 = chMBFetch(&mb1, &msg2, 1);
 800339c:	2101      	movs	r1, #1
 800339e:	a801      	add	r0, sp, #4
 80033a0:	f003 fca6 	bl	8006cf0 <chMBFetch.constprop.36>
  test_assert(17, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80033a4:	1c43      	adds	r3, r0, #1
 80033a6:	4259      	negs	r1, r3
 80033a8:	4159      	adcs	r1, r3
 80033aa:	2011      	movs	r0, #17
 80033ac:	f7ff fbc8 	bl	8002b40 <_test_assert>
 80033b0:	2800      	cmp	r0, #0
 80033b2:	f47f aeb7 	bne.w	8003124 <mbox1_execute.lto_priv.140+0x64>
 80033b6:	2720      	movs	r7, #32
 80033b8:	f387 8811 	msr	BASEPRI, r7
  chSysLock();
  msg1 = chMBFetchI(&mb1, &msg2);
 80033bc:	a801      	add	r0, sp, #4
 80033be:	f003 fcbf 	bl	8006d40 <chMBFetchI.constprop.35>
 80033c2:	4601      	mov	r1, r0
 80033c4:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();
  test_assert(18, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80033c8:	f101 0801 	add.w	r8, r1, #1
 80033cc:	f1d8 0100 	rsbs	r1, r8, #0
 80033d0:	eb41 0108 	adc.w	r1, r1, r8
 80033d4:	2012      	movs	r0, #18
 80033d6:	f7ff fbb3 	bl	8002b40 <_test_assert>
 80033da:	2800      	cmp	r0, #0
 80033dc:	f47f aea2 	bne.w	8003124 <mbox1_execute.lto_priv.140+0x64>
 80033e0:	f387 8811 	msr	BASEPRI, r7

  /*
   * Testing final conditions.
   */
  test_assert_lock(19, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 80033e4:	6a71      	ldr	r1, [r6, #36]	; 0x24
 80033e6:	2013      	movs	r0, #19
 80033e8:	f1a1 0c05 	sub.w	ip, r1, #5
 80033ec:	f1dc 0100 	rsbs	r1, ip, #0
 80033f0:	eb41 010c 	adc.w	r1, r1, ip
 80033f4:	f7ff fba4 	bl	8002b40 <_test_assert>
 80033f8:	2800      	cmp	r0, #0
 80033fa:	f47f aefd 	bne.w	80031f8 <mbox1_execute.lto_priv.140+0x138>
 80033fe:	f04f 0800 	mov.w	r8, #0
 8003402:	f388 8811 	msr	BASEPRI, r8
 8003406:	2420      	movs	r4, #32
 8003408:	f384 8811 	msr	BASEPRI, r4
  test_assert_lock(20, chMBGetUsedCountI(&mb1) == 0, "still full");
 800340c:	69a9      	ldr	r1, [r5, #24]
 800340e:	2014      	movs	r0, #20
 8003410:	fab1 f181 	clz	r1, r1
 8003414:	0949      	lsrs	r1, r1, #5
 8003416:	f7ff fb93 	bl	8002b40 <_test_assert>
 800341a:	4e9a      	ldr	r6, [pc, #616]	; (8003684 <mbox1_execute.lto_priv.140+0x5c4>)
 800341c:	4607      	mov	r7, r0
 800341e:	2800      	cmp	r0, #0
 8003420:	f47f af43 	bne.w	80032aa <mbox1_execute.lto_priv.140+0x1ea>
 8003424:	f380 8811 	msr	BASEPRI, r0
 8003428:	f384 8811 	msr	BASEPRI, r4
  test_assert_lock(21, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 800342c:	68f1      	ldr	r1, [r6, #12]
 800342e:	68b3      	ldr	r3, [r6, #8]
 8003430:	2015      	movs	r0, #21
 8003432:	ebc3 0e01 	rsb	lr, r3, r1
 8003436:	f1de 0100 	rsbs	r1, lr, #0
 800343a:	eb41 010e 	adc.w	r1, r1, lr
 800343e:	f7ff fb7f 	bl	8002b40 <_test_assert>
 8003442:	2800      	cmp	r0, #0
 8003444:	f47f af43 	bne.w	80032ce <mbox1_execute.lto_priv.140+0x20e>
 8003448:	f380 8811 	msr	BASEPRI, r0
 800344c:	f384 8811 	msr	BASEPRI, r4

  /*
   * Testing I-Class.
   */
  chSysLock();
  msg1 = chMBPostI(&mb1, 'A');
 8003450:	2041      	movs	r0, #65	; 0x41
 8003452:	f003 fbe5 	bl	8006c20 <chMBPostI.constprop.39>
  test_assert(22, msg1 == MSG_OK, "wrong wake-up message");
 8003456:	fab0 f180 	clz	r1, r0
 800345a:	2016      	movs	r0, #22
 800345c:	0949      	lsrs	r1, r1, #5
 800345e:	f7ff fb6f 	bl	8002b40 <_test_assert>
 8003462:	2800      	cmp	r0, #0
 8003464:	f47f ae5e 	bne.w	8003124 <mbox1_execute.lto_priv.140+0x64>
  msg1 = chMBPostI(&mb1, 'B');
 8003468:	2042      	movs	r0, #66	; 0x42
 800346a:	f003 fbd9 	bl	8006c20 <chMBPostI.constprop.39>
  test_assert(23, msg1 == MSG_OK, "wrong wake-up message");
 800346e:	fab0 f180 	clz	r1, r0
 8003472:	2017      	movs	r0, #23
 8003474:	0949      	lsrs	r1, r1, #5
 8003476:	f7ff fb63 	bl	8002b40 <_test_assert>
 800347a:	2800      	cmp	r0, #0
 800347c:	f47f ae52 	bne.w	8003124 <mbox1_execute.lto_priv.140+0x64>
  msg1 = chMBPostI(&mb1, 'C');
 8003480:	2043      	movs	r0, #67	; 0x43
 8003482:	f003 fbcd 	bl	8006c20 <chMBPostI.constprop.39>
  test_assert(24, msg1 == MSG_OK, "wrong wake-up message");
 8003486:	fab0 f180 	clz	r1, r0
 800348a:	2018      	movs	r0, #24
 800348c:	0949      	lsrs	r1, r1, #5
 800348e:	f7ff fb57 	bl	8002b40 <_test_assert>
 8003492:	2800      	cmp	r0, #0
 8003494:	f47f ae46 	bne.w	8003124 <mbox1_execute.lto_priv.140+0x64>
  msg1 = chMBPostI(&mb1, 'D');
 8003498:	2044      	movs	r0, #68	; 0x44
 800349a:	f003 fbc1 	bl	8006c20 <chMBPostI.constprop.39>
  test_assert(25, msg1 == MSG_OK, "wrong wake-up message");
 800349e:	fab0 f180 	clz	r1, r0
 80034a2:	2019      	movs	r0, #25
 80034a4:	0949      	lsrs	r1, r1, #5
 80034a6:	f7ff fb4b 	bl	8002b40 <_test_assert>
 80034aa:	4607      	mov	r7, r0
 80034ac:	2800      	cmp	r0, #0
 80034ae:	f47f ae39 	bne.w	8003124 <mbox1_execute.lto_priv.140+0x64>
  msg1 = chMBPostI(&mb1, 'E');
 80034b2:	2045      	movs	r0, #69	; 0x45
 80034b4:	f003 fbb4 	bl	8006c20 <chMBPostI.constprop.39>
 80034b8:	f387 8811 	msr	BASEPRI, r7
  chSysUnlock();
  test_assert(26, msg1 == MSG_OK, "wrong wake-up message");
 80034bc:	fab0 f180 	clz	r1, r0
 80034c0:	201a      	movs	r0, #26
 80034c2:	0949      	lsrs	r1, r1, #5
 80034c4:	f7ff fb3c 	bl	8002b40 <_test_assert>
 80034c8:	2800      	cmp	r0, #0
 80034ca:	f47f ae2b 	bne.w	8003124 <mbox1_execute.lto_priv.140+0x64>
  test_assert(27, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 80034ce:	68f1      	ldr	r1, [r6, #12]
 80034d0:	68b3      	ldr	r3, [r6, #8]
 80034d2:	201b      	movs	r0, #27
 80034d4:	1ace      	subs	r6, r1, r3
 80034d6:	4271      	negs	r1, r6
 80034d8:	4171      	adcs	r1, r6
 80034da:	f7ff fb31 	bl	8002b40 <_test_assert>
 80034de:	2800      	cmp	r0, #0
 80034e0:	f47f ae20 	bne.w	8003124 <mbox1_execute.lto_priv.140+0x64>
 80034e4:	4680      	mov	r8, r0
 80034e6:	4626      	mov	r6, r4
 80034e8:	2405      	movs	r4, #5
 80034ea:	2720      	movs	r7, #32
 80034ec:	f386 8811 	msr	BASEPRI, r6
  for (i = 0; i < MB_SIZE; i++) {
    chSysLock();
    msg1 = chMBFetchI(&mb1, &msg2);
 80034f0:	a801      	add	r0, sp, #4
 80034f2:	f003 fc25 	bl	8006d40 <chMBFetchI.constprop.35>
 80034f6:	f388 8811 	msr	BASEPRI, r8
    chSysUnlock();
    test_assert(28, msg1 == MSG_OK, "wrong wake-up message");
 80034fa:	fab0 f180 	clz	r1, r0
 80034fe:	201c      	movs	r0, #28
 8003500:	0949      	lsrs	r1, r1, #5
 8003502:	f7ff fb1d 	bl	8002b40 <_test_assert>
 8003506:	2800      	cmp	r0, #0
 8003508:	f47f ae0c 	bne.w	8003124 <mbox1_execute.lto_priv.140+0x64>
    test_emit_token(msg2);
 800350c:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8003510:	f7ff fb2e 	bl	8002b70 <test_emit_token>
  test_assert(25, msg1 == MSG_OK, "wrong wake-up message");
  msg1 = chMBPostI(&mb1, 'E');
  chSysUnlock();
  test_assert(26, msg1 == MSG_OK, "wrong wake-up message");
  test_assert(27, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
  for (i = 0; i < MB_SIZE; i++) {
 8003514:	3c01      	subs	r4, #1
 8003516:	d1e8      	bne.n	80034ea <mbox1_execute.lto_priv.140+0x42a>
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(28, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
  }
  test_assert_sequence(29, "ABCDE");
 8003518:	201d      	movs	r0, #29
 800351a:	4959      	ldr	r1, [pc, #356]	; (8003680 <mbox1_execute.lto_priv.140+0x5c0>)
 800351c:	f7ff fae8 	bl	8002af0 <_test_assert_sequence>
 8003520:	2800      	cmp	r0, #0
 8003522:	f47f adff 	bne.w	8003124 <mbox1_execute.lto_priv.140+0x64>
 8003526:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(30, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 800352a:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800352c:	201e      	movs	r0, #30
 800352e:	1f4a      	subs	r2, r1, #5
 8003530:	4251      	negs	r1, r2
 8003532:	4151      	adcs	r1, r2
 8003534:	4e53      	ldr	r6, [pc, #332]	; (8003684 <mbox1_execute.lto_priv.140+0x5c4>)
 8003536:	f7ff fb03 	bl	8002b40 <_test_assert>
 800353a:	b110      	cbz	r0, 8003542 <mbox1_execute.lto_priv.140+0x482>
 800353c:	f384 8811 	msr	BASEPRI, r4
 8003540:	e5f0      	b.n	8003124 <mbox1_execute.lto_priv.140+0x64>
 8003542:	f384 8811 	msr	BASEPRI, r4
 8003546:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(31, chMBGetUsedCountI(&mb1) == 0, "still full");
 800354a:	69b1      	ldr	r1, [r6, #24]
 800354c:	201f      	movs	r0, #31
 800354e:	fab1 f181 	clz	r1, r1
 8003552:	0949      	lsrs	r1, r1, #5
 8003554:	f7ff faf4 	bl	8002b40 <_test_assert>
 8003558:	2800      	cmp	r0, #0
 800355a:	d1ef      	bne.n	800353c <mbox1_execute.lto_priv.140+0x47c>
 800355c:	f384 8811 	msr	BASEPRI, r4
  test_assert(32, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8003560:	68f1      	ldr	r1, [r6, #12]
 8003562:	68b3      	ldr	r3, [r6, #8]
 8003564:	4638      	mov	r0, r7
 8003566:	1acb      	subs	r3, r1, r3
 8003568:	4259      	negs	r1, r3
 800356a:	4159      	adcs	r1, r3
 800356c:	f7ff fae8 	bl	8002b40 <_test_assert>
 8003570:	2800      	cmp	r0, #0
 8003572:	f47f add7 	bne.w	8003124 <mbox1_execute.lto_priv.140+0x64>
 8003576:	f387 8811 	msr	BASEPRI, r7

  chSysLock();
  msg1 = chMBPostAheadI(&mb1, 'E');
 800357a:	2045      	movs	r0, #69	; 0x45
 800357c:	f003 fb98 	bl	8006cb0 <chMBPostAheadI.constprop.37>
  test_assert(33, msg1 == MSG_OK, "wrong wake-up message");
 8003580:	fab0 f180 	clz	r1, r0
 8003584:	2021      	movs	r0, #33	; 0x21
 8003586:	0949      	lsrs	r1, r1, #5
 8003588:	f7ff fada 	bl	8002b40 <_test_assert>
 800358c:	2800      	cmp	r0, #0
 800358e:	f47f adc9 	bne.w	8003124 <mbox1_execute.lto_priv.140+0x64>
  msg1 = chMBPostAheadI(&mb1, 'D');
 8003592:	2044      	movs	r0, #68	; 0x44
 8003594:	f003 fb8c 	bl	8006cb0 <chMBPostAheadI.constprop.37>
  test_assert(34, msg1 == MSG_OK, "wrong wake-up message");
 8003598:	fab0 f180 	clz	r1, r0
 800359c:	2022      	movs	r0, #34	; 0x22
 800359e:	0949      	lsrs	r1, r1, #5
 80035a0:	f7ff face 	bl	8002b40 <_test_assert>
 80035a4:	2800      	cmp	r0, #0
 80035a6:	f47f adbd 	bne.w	8003124 <mbox1_execute.lto_priv.140+0x64>
  msg1 = chMBPostAheadI(&mb1, 'C');
 80035aa:	2043      	movs	r0, #67	; 0x43
 80035ac:	f003 fb80 	bl	8006cb0 <chMBPostAheadI.constprop.37>
  test_assert(35, msg1 == MSG_OK, "wrong wake-up message");
 80035b0:	fab0 f180 	clz	r1, r0
 80035b4:	2023      	movs	r0, #35	; 0x23
 80035b6:	0949      	lsrs	r1, r1, #5
 80035b8:	f7ff fac2 	bl	8002b40 <_test_assert>
 80035bc:	2800      	cmp	r0, #0
 80035be:	f47f adb1 	bne.w	8003124 <mbox1_execute.lto_priv.140+0x64>
  msg1 = chMBPostAheadI(&mb1, 'B');
 80035c2:	2042      	movs	r0, #66	; 0x42
 80035c4:	f003 fb74 	bl	8006cb0 <chMBPostAheadI.constprop.37>
  test_assert(36, msg1 == MSG_OK, "wrong wake-up message");
 80035c8:	fab0 f180 	clz	r1, r0
 80035cc:	2024      	movs	r0, #36	; 0x24
 80035ce:	0949      	lsrs	r1, r1, #5
 80035d0:	f7ff fab6 	bl	8002b40 <_test_assert>
 80035d4:	2800      	cmp	r0, #0
 80035d6:	f47f ada5 	bne.w	8003124 <mbox1_execute.lto_priv.140+0x64>
  msg1 = chMBPostAheadI(&mb1, 'A');
 80035da:	2041      	movs	r0, #65	; 0x41
 80035dc:	f003 fb68 	bl	8006cb0 <chMBPostAheadI.constprop.37>
 80035e0:	2300      	movs	r3, #0
 80035e2:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  test_assert(37, msg1 == MSG_OK, "wrong wake-up message");
 80035e6:	fab0 f180 	clz	r1, r0
 80035ea:	2025      	movs	r0, #37	; 0x25
 80035ec:	0949      	lsrs	r1, r1, #5
 80035ee:	f7ff faa7 	bl	8002b40 <_test_assert>
 80035f2:	2800      	cmp	r0, #0
 80035f4:	f47f ad96 	bne.w	8003124 <mbox1_execute.lto_priv.140+0x64>
  test_assert(38, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 80035f8:	68e9      	ldr	r1, [r5, #12]
 80035fa:	68ab      	ldr	r3, [r5, #8]
 80035fc:	2026      	movs	r0, #38	; 0x26
 80035fe:	ebc3 0801 	rsb	r8, r3, r1
 8003602:	f1d8 0100 	rsbs	r1, r8, #0
 8003606:	eb41 0108 	adc.w	r1, r1, r8
 800360a:	f7ff fa99 	bl	8002b40 <_test_assert>
 800360e:	2800      	cmp	r0, #0
 8003610:	f47f ad88 	bne.w	8003124 <mbox1_execute.lto_priv.140+0x64>
 8003614:	4604      	mov	r4, r0
 8003616:	2605      	movs	r6, #5
 8003618:	f04f 0820 	mov.w	r8, #32
 800361c:	2720      	movs	r7, #32
 800361e:	f388 8811 	msr	BASEPRI, r8
  for (i = 0; i < MB_SIZE; i++) {
    chSysLock();
    msg1 = chMBFetchI(&mb1, &msg2);
 8003622:	a801      	add	r0, sp, #4
 8003624:	f003 fb8c 	bl	8006d40 <chMBFetchI.constprop.35>
 8003628:	f384 8811 	msr	BASEPRI, r4
    chSysUnlock();
    test_assert(39, msg1 == MSG_OK, "wrong wake-up message");
 800362c:	fab0 f180 	clz	r1, r0
 8003630:	2027      	movs	r0, #39	; 0x27
 8003632:	0949      	lsrs	r1, r1, #5
 8003634:	f7ff fa84 	bl	8002b40 <_test_assert>
 8003638:	2800      	cmp	r0, #0
 800363a:	f47f ad73 	bne.w	8003124 <mbox1_execute.lto_priv.140+0x64>
    test_emit_token(msg2);
 800363e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8003642:	f7ff fa95 	bl	8002b70 <test_emit_token>
  test_assert(36, msg1 == MSG_OK, "wrong wake-up message");
  msg1 = chMBPostAheadI(&mb1, 'A');
  chSysUnlock();
  test_assert(37, msg1 == MSG_OK, "wrong wake-up message");
  test_assert(38, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
  for (i = 0; i < MB_SIZE; i++) {
 8003646:	3e01      	subs	r6, #1
 8003648:	d1e8      	bne.n	800361c <mbox1_execute.lto_priv.140+0x55c>
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(39, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
  }
  test_assert_sequence(40, "ABCDE");
 800364a:	2028      	movs	r0, #40	; 0x28
 800364c:	490c      	ldr	r1, [pc, #48]	; (8003680 <mbox1_execute.lto_priv.140+0x5c0>)
 800364e:	f7ff fa4f 	bl	8002af0 <_test_assert_sequence>
 8003652:	2800      	cmp	r0, #0
 8003654:	f47f ad66 	bne.w	8003124 <mbox1_execute.lto_priv.140+0x64>
 8003658:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(41, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 800365c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800365e:	2029      	movs	r0, #41	; 0x29
 8003660:	f1a1 0c05 	sub.w	ip, r1, #5
 8003664:	f1dc 0100 	rsbs	r1, ip, #0
 8003668:	eb41 010c 	adc.w	r1, r1, ip
 800366c:	4c05      	ldr	r4, [pc, #20]	; (8003684 <mbox1_execute.lto_priv.140+0x5c4>)
 800366e:	f7ff fa67 	bl	8002b40 <_test_assert>
 8003672:	2800      	cmp	r0, #0
 8003674:	f43f ad59 	beq.w	800312a <mbox1_execute.lto_priv.140+0x6a>
 8003678:	f386 8811 	msr	BASEPRI, r6
 800367c:	e552      	b.n	8003124 <mbox1_execute.lto_priv.140+0x64>
 800367e:	bf00      	nop
 8003680:	08006fdc 	.word	0x08006fdc
 8003684:	200008ac 	.word	0x200008ac
	...

08003690 <thread>:
 * A thread is spawned that sends four messages back to the tester thread.<br>
 * The test expect to receive the messages in the correct sequence and to
 * not find a fifth message waiting.
 */

static THD_FUNCTION(thread, p) {
 8003690:	b510      	push	{r4, lr}
 8003692:	4604      	mov	r4, r0

  chMsgSend(p, 'A');
 8003694:	2141      	movs	r1, #65	; 0x41
 8003696:	f7fd f99b 	bl	80009d0 <chMsgSend>
  chMsgSend(p, 'B');
 800369a:	4620      	mov	r0, r4
 800369c:	2142      	movs	r1, #66	; 0x42
 800369e:	f7fd f997 	bl	80009d0 <chMsgSend>
  chMsgSend(p, 'C');
 80036a2:	4620      	mov	r0, r4
}
 80036a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

static THD_FUNCTION(thread, p) {

  chMsgSend(p, 'A');
  chMsgSend(p, 'B');
  chMsgSend(p, 'C');
 80036a8:	2143      	movs	r1, #67	; 0x43
 80036aa:	f7fd b991 	b.w	80009d0 <chMsgSend>
 80036ae:	bf00      	nop

080036b0 <msg1_execute.lto_priv.138>:
}

static void msg1_execute(void) {
 80036b0:	b570      	push	{r4, r5, r6, lr}
 80036b2:	4b1f      	ldr	r3, [pc, #124]	; (8003730 <msg1_execute.lto_priv.138+0x80>)
 80036b4:	b082      	sub	sp, #8
 80036b6:	699c      	ldr	r4, [r3, #24]
  msg_t msg;

  /*
   * Testing the whole messages loop.
   */
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 80036b8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80036bc:	68a2      	ldr	r2, [r4, #8]
 80036be:	4b1d      	ldr	r3, [pc, #116]	; (8003734 <msg1_execute.lto_priv.138+0x84>)
 80036c0:	3201      	adds	r2, #1
 80036c2:	9400      	str	r4, [sp, #0]
 80036c4:	481c      	ldr	r0, [pc, #112]	; (8003738 <msg1_execute.lto_priv.138+0x88>)
 80036c6:	f7fd f873 	bl	80007b0 <chThdCreateStatic>
 80036ca:	4b1c      	ldr	r3, [pc, #112]	; (800373c <msg1_execute.lto_priv.138+0x8c>)
 80036cc:	2520      	movs	r5, #32
 80036ce:	6018      	str	r0, [r3, #0]
                                 thread, chThdGetSelfX());
  tp = chMsgWait();
 80036d0:	f7fd f8c6 	bl	8000860 <chMsgWait>
 80036d4:	6b06      	ldr	r6, [r0, #48]	; 0x30
 80036d6:	f385 8811 	msr	BASEPRI, r5
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 80036da:	4631      	mov	r1, r6
 80036dc:	f7fd f818 	bl	8000710 <chSchWakeupS>
 80036e0:	2400      	movs	r4, #0
 80036e2:	f384 8811 	msr	BASEPRI, r4
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
 80036e6:	b2f0      	uxtb	r0, r6
 80036e8:	f7ff fa42 	bl	8002b70 <test_emit_token>
  tp = chMsgWait();
 80036ec:	f7fd f8b8 	bl	8000860 <chMsgWait>
 80036f0:	6b06      	ldr	r6, [r0, #48]	; 0x30
 80036f2:	f385 8811 	msr	BASEPRI, r5
 80036f6:	4631      	mov	r1, r6
 80036f8:	f7fd f80a 	bl	8000710 <chSchWakeupS>
 80036fc:	f384 8811 	msr	BASEPRI, r4
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
 8003700:	b2f0      	uxtb	r0, r6
 8003702:	f7ff fa35 	bl	8002b70 <test_emit_token>
  tp = chMsgWait();
 8003706:	f7fd f8ab 	bl	8000860 <chMsgWait>
 800370a:	6b06      	ldr	r6, [r0, #48]	; 0x30
 800370c:	f385 8811 	msr	BASEPRI, r5
 8003710:	4631      	mov	r1, r6
 8003712:	f7fc fffd 	bl	8000710 <chSchWakeupS>
 8003716:	f384 8811 	msr	BASEPRI, r4
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
 800371a:	b2f0      	uxtb	r0, r6
 800371c:	f7ff fa28 	bl	8002b70 <test_emit_token>
  test_assert_sequence(1, "ABC");
 8003720:	4907      	ldr	r1, [pc, #28]	; (8003740 <msg1_execute.lto_priv.138+0x90>)
 8003722:	2001      	movs	r0, #1
}
 8003724:	b002      	add	sp, #8
 8003726:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  test_emit_token(msg);
  tp = chMsgWait();
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
  test_assert_sequence(1, "ABC");
 800372a:	f7ff b9e1 	b.w	8002af0 <_test_assert_sequence>
 800372e:	bf00      	nop
 8003730:	200013f8 	.word	0x200013f8
 8003734:	08003691 	.word	0x08003691
 8003738:	20000d50 	.word	0x20000d50
 800373c:	20000968 	.word	0x20000968
 8003740:	08007ac0 	.word	0x08007ac0
	...

08003750 <mtx8_execute.lto_priv.137>:
  chMtxLock(&m2);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m2);
}

static void mtx8_execute(void) {
 8003750:	b570      	push	{r4, r5, r6, lr}
 8003752:	4b19      	ldr	r3, [pc, #100]	; (80037b8 <mtx8_execute.lto_priv.137+0x68>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
 8003754:	4d19      	ldr	r5, [pc, #100]	; (80037bc <mtx8_execute.lto_priv.137+0x6c>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003756:	699a      	ldr	r2, [r3, #24]
 8003758:	4b19      	ldr	r3, [pc, #100]	; (80037c0 <mtx8_execute.lto_priv.137+0x70>)
 800375a:	6896      	ldr	r6, [r2, #8]
  chMtxLock(&m2);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m2);
}

static void mtx8_execute(void) {
 800375c:	b082      	sub	sp, #8

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
 800375e:	1c72      	adds	r2, r6, #1
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	4628      	mov	r0, r5
 8003764:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003768:	4b16      	ldr	r3, [pc, #88]	; (80037c4 <mtx8_execute.lto_priv.137+0x74>)
 800376a:	f7fd f821 	bl	80007b0 <chThdCreateStatic>
 800376e:	4c16      	ldr	r4, [pc, #88]	; (80037c8 <mtx8_execute.lto_priv.137+0x78>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
 8003770:	4b16      	ldr	r3, [pc, #88]	; (80037cc <mtx8_execute.lto_priv.137+0x7c>)
}

static void mtx8_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
 8003772:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
 8003774:	1cb2      	adds	r2, r6, #2
 8003776:	9300      	str	r3, [sp, #0]
 8003778:	f505 70a4 	add.w	r0, r5, #328	; 0x148
 800377c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003780:	4b13      	ldr	r3, [pc, #76]	; (80037d0 <mtx8_execute.lto_priv.137+0x80>)
 8003782:	f7fd f815 	bl	80007b0 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread12, "B");
 8003786:	4b13      	ldr	r3, [pc, #76]	; (80037d4 <mtx8_execute.lto_priv.137+0x84>)
 8003788:	1cf2      	adds	r2, r6, #3
 800378a:	f44f 71a4 	mov.w	r1, #328	; 0x148

static void mtx8_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
 800378e:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread12, "B");
 8003790:	9300      	str	r3, [sp, #0]
 8003792:	f505 7024 	add.w	r0, r5, #656	; 0x290
 8003796:	4b10      	ldr	r3, [pc, #64]	; (80037d8 <mtx8_execute.lto_priv.137+0x88>)
 8003798:	f7fd f80a 	bl	80007b0 <chThdCreateStatic>
 800379c:	60a0      	str	r0, [r4, #8]
  chCondSignal(&c1);
 800379e:	f003 f997 	bl	8006ad0 <chCondSignal.constprop.68>
  chCondSignal(&c1);
 80037a2:	f003 f995 	bl	8006ad0 <chCondSignal.constprop.68>
  test_wait_threads();
 80037a6:	f7ff f94b 	bl	8002a40 <test_wait_threads>
  test_assert_sequence(1, "ABC");
 80037aa:	490c      	ldr	r1, [pc, #48]	; (80037dc <mtx8_execute.lto_priv.137+0x8c>)
 80037ac:	2001      	movs	r0, #1
}
 80037ae:	b002      	add	sp, #8
 80037b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread12, "B");
  chCondSignal(&c1);
  chCondSignal(&c1);
  test_wait_threads();
  test_assert_sequence(1, "ABC");
 80037b4:	f7ff b99c 	b.w	8002af0 <_test_assert_sequence>
 80037b8:	200013f8 	.word	0x200013f8
 80037bc:	20000d50 	.word	0x20000d50
 80037c0:	08006fd4 	.word	0x08006fd4
 80037c4:	08003801 	.word	0x08003801
 80037c8:	20000968 	.word	0x20000968
 80037cc:	08006fd8 	.word	0x08006fd8
 80037d0:	08003891 	.word	0x08003891
 80037d4:	08006fd0 	.word	0x08006fd0
 80037d8:	080037e1 	.word	0x080037e1
 80037dc:	08007ac0 	.word	0x08007ac0

080037e0 <thread12>:
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
  chMtxUnlock(&m2);
}

static THD_FUNCTION(thread12, p) {
 80037e0:	b538      	push	{r3, r4, r5, lr}
 80037e2:	4605      	mov	r5, r0

  chMtxLock(&m2);
 80037e4:	4c05      	ldr	r4, [pc, #20]	; (80037fc <thread12+0x1c>)
 80037e6:	4620      	mov	r0, r4
 80037e8:	f7fd fa3a 	bl	8000c60 <chMtxLock>
  test_emit_token(*(char *)p);
 80037ec:	7828      	ldrb	r0, [r5, #0]
 80037ee:	f7ff f9bf 	bl	8002b70 <test_emit_token>
  chMtxUnlock(&m2);
 80037f2:	4620      	mov	r0, r4
}
 80037f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

static THD_FUNCTION(thread12, p) {

  chMtxLock(&m2);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m2);
 80037f8:	f7fd b992 	b.w	8000b20 <chMtxUnlock>
 80037fc:	20000810 	.word	0x20000810

08003800 <thread11>:
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}

static THD_FUNCTION(thread11, p) {
 8003800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003802:	4607      	mov	r7, r0

  chMtxLock(&m2);
 8003804:	481c      	ldr	r0, [pc, #112]	; (8003878 <thread11+0x78>)
 8003806:	f7fd fa2b 	bl	8000c60 <chMtxLock>
  chMtxLock(&m1);
 800380a:	481c      	ldr	r0, [pc, #112]	; (800387c <thread11+0x7c>)
 800380c:	f7fd fa28 	bl	8000c60 <chMtxLock>
 8003810:	2320      	movs	r3, #32
 8003812:	f383 8811 	msr	BASEPRI, r3
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003816:	4d1a      	ldr	r5, [pc, #104]	; (8003880 <thread11+0x80>)
 *
 * @sclass
 */
static inline mutex_t *chMtxGetNextMutexS(void) {

  return chThdGetSelfX()->p_mtxlist;
 8003818:	69ab      	ldr	r3, [r5, #24]
 800381a:	6b9e      	ldr	r6, [r3, #56]	; 0x38
  chDbgCheck((cp != NULL) && (time != TIME_IMMEDIATE));
  chDbgAssert(currp->p_mtxlist != NULL, "not owning a mutex");

  /* Getting "current" mutex and releasing it.*/
  mp = chMtxGetNextMutexS();
  chMtxUnlockS(mp);
 800381c:	4630      	mov	r0, r6
 800381e:	f7fd f957 	bl	8000ad0 <chMtxUnlockS>

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  currp->p_u.wtobjp = cp;
 8003822:	4a18      	ldr	r2, [pc, #96]	; (8003884 <thread11+0x84>)
 8003824:	69ac      	ldr	r4, [r5, #24]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8003826:	4610      	mov	r0, r2
 8003828:	4613      	mov	r3, r2
 800382a:	6222      	str	r2, [r4, #32]
 800382c:	e003      	b.n	8003836 <thread11+0x36>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 800382e:	6899      	ldr	r1, [r3, #8]
 8003830:	68a2      	ldr	r2, [r4, #8]
 8003832:	4291      	cmp	r1, r2
 8003834:	d302      	bcc.n	800383c <thread11+0x3c>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8003836:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8003838:	4283      	cmp	r3, r0
 800383a:	d1f8      	bne.n	800382e <thread11+0x2e>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800383c:	685a      	ldr	r2, [r3, #4]
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 800383e:	2007      	movs	r0, #7

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8003840:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 8003842:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 8003844:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8003846:	605c      	str	r4, [r3, #4]
 8003848:	f7fc fff2 	bl	8000830 <chSchGoSleepS>
  }

  return currp->p_u.rdymsg;
 800384c:	69ab      	ldr	r3, [r5, #24]
  queue_prio_insert(currp, &cp->c_queue);
  msg = chSchGoSleepTimeoutS(CH_STATE_WTCOND, time);
  if (msg != MSG_TIMEOUT) {
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	3301      	adds	r3, #1
 8003852:	d002      	beq.n	800385a <thread11+0x5a>
    chMtxLockS(mp);
 8003854:	4630      	mov	r0, r6
 8003856:	f7fd f99b 	bl	8000b90 <chMtxLockS>
 800385a:	2300      	movs	r3, #0
 800385c:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_CONDVARS_TIMEOUT || defined(__DOXYGEN__)
  chCondWaitTimeout(&c1, TIME_INFINITE);
#else
  chCondWait(&c1);
#endif
  test_emit_token(*(char *)p);
 8003860:	7838      	ldrb	r0, [r7, #0]
 8003862:	f7ff f985 	bl	8002b70 <test_emit_token>
  chMtxUnlock(&m1);
 8003866:	4805      	ldr	r0, [pc, #20]	; (800387c <thread11+0x7c>)
 8003868:	f7fd f95a 	bl	8000b20 <chMtxUnlock>
  chMtxUnlock(&m2);
}
 800386c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
#else
  chCondWait(&c1);
#endif
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
  chMtxUnlock(&m2);
 8003870:	4801      	ldr	r0, [pc, #4]	; (8003878 <thread11+0x78>)
 8003872:	f7fd b955 	b.w	8000b20 <chMtxUnlock>
 8003876:	bf00      	nop
 8003878:	20000810 	.word	0x20000810
 800387c:	20000800 	.word	0x20000800
 8003880:	200013f8 	.word	0x200013f8
 8003884:	200008d4 	.word	0x200008d4
	...

08003890 <thread10>:

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static THD_FUNCTION(thread10, p) {
 8003890:	b570      	push	{r4, r5, r6, lr}
 8003892:	4606      	mov	r6, r0

  chMtxLock(&m1);
 8003894:	4816      	ldr	r0, [pc, #88]	; (80038f0 <thread10+0x60>)
 8003896:	f7fd f9e3 	bl	8000c60 <chMtxLock>
 800389a:	2320      	movs	r3, #32
 800389c:	f383 8811 	msr	BASEPRI, r3
 *                      @p chCondBroadcast().
 *
 * @sclass
 */
msg_t chCondWaitS(condition_variable_t *cp) {
  thread_t *ctp = currp;
 80038a0:	4b14      	ldr	r3, [pc, #80]	; (80038f4 <thread10+0x64>)
 80038a2:	699c      	ldr	r4, [r3, #24]
 80038a4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  chDbgCheck(cp != NULL);
  chDbgAssert(ctp->p_mtxlist != NULL, "not owning a mutex");

  /* Getting "current" mutex and releasing it.*/
  mp = chMtxGetNextMutexS();
  chMtxUnlockS(mp);
 80038a6:	4628      	mov	r0, r5
 80038a8:	f7fd f912 	bl	8000ad0 <chMtxUnlockS>

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  ctp->p_u.wtobjp = cp;
 80038ac:	4a12      	ldr	r2, [pc, #72]	; (80038f8 <thread10+0x68>)
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 80038ae:	4610      	mov	r0, r2
 80038b0:	4613      	mov	r3, r2
 80038b2:	6222      	str	r2, [r4, #32]
 80038b4:	e003      	b.n	80038be <thread10+0x2e>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80038b6:	6899      	ldr	r1, [r3, #8]
 80038b8:	68a2      	ldr	r2, [r4, #8]
 80038ba:	4291      	cmp	r1, r2
 80038bc:	d302      	bcc.n	80038c4 <thread10+0x34>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 80038be:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80038c0:	4283      	cmp	r3, r0
 80038c2:	d1f8      	bne.n	80038b6 <thread10+0x26>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80038c4:	685a      	ldr	r2, [r3, #4]
  queue_prio_insert(ctp, &cp->c_queue);
  chSchGoSleepS(CH_STATE_WTCOND);
 80038c6:	2007      	movs	r0, #7

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 80038c8:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 80038ca:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 80038cc:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 80038ce:	605c      	str	r4, [r3, #4]
 80038d0:	f7fc ffae 	bl	8000830 <chSchGoSleepS>
  msg = ctp->p_u.rdymsg;
  chMtxLockS(mp);
 80038d4:	4628      	mov	r0, r5
 80038d6:	f7fd f95b 	bl	8000b90 <chMtxLockS>
 80038da:	2300      	movs	r3, #0
 80038dc:	f383 8811 	msr	BASEPRI, r3
  chCondWait(&c1);
  test_emit_token(*(char *)p);
 80038e0:	7830      	ldrb	r0, [r6, #0]
 80038e2:	f7ff f945 	bl	8002b70 <test_emit_token>
  chMtxUnlock(&m1);
}
 80038e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
static THD_FUNCTION(thread10, p) {

  chMtxLock(&m1);
  chCondWait(&c1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
 80038ea:	4801      	ldr	r0, [pc, #4]	; (80038f0 <thread10+0x60>)
 80038ec:	f7fd b918 	b.w	8000b20 <chMtxUnlock>
 80038f0:	20000800 	.word	0x20000800
 80038f4:	200013f8 	.word	0x200013f8
 80038f8:	200008d4 	.word	0x200008d4
 80038fc:	00000000 	.word	0x00000000

08003900 <mtx7_execute.lto_priv.135>:

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static void mtx7_execute(void) {
 8003900:	b530      	push	{r4, r5, lr}
 8003902:	4a2c      	ldr	r2, [pc, #176]	; (80039b4 <mtx7_execute.lto_priv.135+0xb4>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8003904:	4b2c      	ldr	r3, [pc, #176]	; (80039b8 <mtx7_execute.lto_priv.135+0xb8>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003906:	6992      	ldr	r2, [r2, #24]

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static void mtx7_execute(void) {
 8003908:	b083      	sub	sp, #12
 800390a:	6895      	ldr	r5, [r2, #8]

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 800390c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003910:	1c6a      	adds	r2, r5, #1
 8003912:	9300      	str	r3, [sp, #0]
 8003914:	4829      	ldr	r0, [pc, #164]	; (80039bc <mtx7_execute.lto_priv.135+0xbc>)
 8003916:	4b2a      	ldr	r3, [pc, #168]	; (80039c0 <mtx7_execute.lto_priv.135+0xc0>)
 8003918:	f7fc ff4a 	bl	80007b0 <chThdCreateStatic>
 800391c:	4c29      	ldr	r4, [pc, #164]	; (80039c4 <mtx7_execute.lto_priv.135+0xc4>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 800391e:	4b2a      	ldr	r3, [pc, #168]	; (80039c8 <mtx7_execute.lto_priv.135+0xc8>)
}

static void mtx7_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8003920:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8003922:	1caa      	adds	r2, r5, #2
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800392a:	4b25      	ldr	r3, [pc, #148]	; (80039c0 <mtx7_execute.lto_priv.135+0xc0>)
 800392c:	4827      	ldr	r0, [pc, #156]	; (80039cc <mtx7_execute.lto_priv.135+0xcc>)
 800392e:	f7fc ff3f 	bl	80007b0 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8003932:	4b27      	ldr	r3, [pc, #156]	; (80039d0 <mtx7_execute.lto_priv.135+0xd0>)

static void mtx7_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8003934:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8003936:	1cea      	adds	r2, r5, #3
 8003938:	9300      	str	r3, [sp, #0]
 800393a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800393e:	4b20      	ldr	r3, [pc, #128]	; (80039c0 <mtx7_execute.lto_priv.135+0xc0>)
 8003940:	4824      	ldr	r0, [pc, #144]	; (80039d4 <mtx7_execute.lto_priv.135+0xd4>)
 8003942:	f7fc ff35 	bl	80007b0 <chThdCreateStatic>
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8003946:	4b24      	ldr	r3, [pc, #144]	; (80039d8 <mtx7_execute.lto_priv.135+0xd8>)
static void mtx7_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8003948:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 800394a:	1d2a      	adds	r2, r5, #4
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003952:	4b1b      	ldr	r3, [pc, #108]	; (80039c0 <mtx7_execute.lto_priv.135+0xc0>)
 8003954:	4821      	ldr	r0, [pc, #132]	; (80039dc <mtx7_execute.lto_priv.135+0xdc>)
 8003956:	f7fc ff2b 	bl	80007b0 <chThdCreateStatic>
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 800395a:	4b21      	ldr	r3, [pc, #132]	; (80039e0 <mtx7_execute.lto_priv.135+0xe0>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 800395c:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 800395e:	1d6a      	adds	r2, r5, #5
 8003960:	9300      	str	r3, [sp, #0]
 8003962:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003966:	4b16      	ldr	r3, [pc, #88]	; (80039c0 <mtx7_execute.lto_priv.135+0xc0>)
 8003968:	481e      	ldr	r0, [pc, #120]	; (80039e4 <mtx7_execute.lto_priv.135+0xe4>)
 800396a:	f7fc ff21 	bl	80007b0 <chThdCreateStatic>
 800396e:	2320      	movs	r3, #32
 8003970:	6120      	str	r0, [r4, #16]
 8003972:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8003976:	4c1c      	ldr	r4, [pc, #112]	; (80039e8 <mtx7_execute.lto_priv.135+0xe8>)
 8003978:	6823      	ldr	r3, [r4, #0]
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (queue_notempty(&cp->c_queue)) {
 800397a:	42a3      	cmp	r3, r4
    chSchReadyI(queue_fifo_remove(&cp->c_queue))->p_u.rdymsg = MSG_RESET;
 800397c:	bf18      	it	ne
 800397e:	f06f 0501 	mvnne.w	r5, #1
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (queue_notempty(&cp->c_queue)) {
 8003982:	d009      	beq.n	8003998 <mtx7_execute.lto_priv.135+0x98>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8003984:	681a      	ldr	r2, [r3, #0]
    chSchReadyI(queue_fifo_remove(&cp->c_queue))->p_u.rdymsg = MSG_RESET;
 8003986:	4618      	mov	r0, r3
  tqp->p_next->p_prev = (thread_t *)tqp;
 8003988:	6054      	str	r4, [r2, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 800398a:	6022      	str	r2, [r4, #0]
 800398c:	f7fc ffb0 	bl	80008f0 <chSchReadyI>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8003990:	6823      	ldr	r3, [r4, #0]
 8003992:	6205      	str	r5, [r0, #32]
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (queue_notempty(&cp->c_queue)) {
 8003994:	42a3      	cmp	r3, r4
 8003996:	d1f5      	bne.n	8003984 <mtx7_execute.lto_priv.135+0x84>
 */
void chCondBroadcast(condition_variable_t *cp) {

  chSysLock();
  chCondBroadcastI(cp);
  chSchRescheduleS();
 8003998:	f7fc fe92 	bl	80006c0 <chSchRescheduleS>
 800399c:	2300      	movs	r3, #0
 800399e:	f383 8811 	msr	BASEPRI, r3
  chCondBroadcast(&c1);
  test_wait_threads();
 80039a2:	f7ff f84d 	bl	8002a40 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 80039a6:	4911      	ldr	r1, [pc, #68]	; (80039ec <mtx7_execute.lto_priv.135+0xec>)
 80039a8:	2001      	movs	r0, #1
}
 80039aa:	b003      	add	sp, #12
 80039ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
  chCondBroadcast(&c1);
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 80039b0:	f7ff b89e 	b.w	8002af0 <_test_assert_sequence>
 80039b4:	200013f8 	.word	0x200013f8
 80039b8:	08006fe0 	.word	0x08006fe0
 80039bc:	20000d50 	.word	0x20000d50
 80039c0:	08003891 	.word	0x08003891
 80039c4:	20000968 	.word	0x20000968
 80039c8:	080080f8 	.word	0x080080f8
 80039cc:	20000e98 	.word	0x20000e98
 80039d0:	08006fd8 	.word	0x08006fd8
 80039d4:	20000fe0 	.word	0x20000fe0
 80039d8:	08006fd0 	.word	0x08006fd0
 80039dc:	20001128 	.word	0x20001128
 80039e0:	08006fd4 	.word	0x08006fd4
 80039e4:	20001270 	.word	0x20001270
 80039e8:	200008d4 	.word	0x200008d4
 80039ec:	08006fdc 	.word	0x08006fdc

080039f0 <mtx6_execute.lto_priv.133>:
  chCondWait(&c1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
}

static void mtx6_execute(void) {
 80039f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80039f2:	4b2c      	ldr	r3, [pc, #176]	; (8003aa4 <mtx6_execute.lto_priv.133+0xb4>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 80039f4:	4e2c      	ldr	r6, [pc, #176]	; (8003aa8 <mtx6_execute.lto_priv.133+0xb8>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	4d2c      	ldr	r5, [pc, #176]	; (8003aac <mtx6_execute.lto_priv.133+0xbc>)
 80039fa:	689f      	ldr	r7, [r3, #8]
 80039fc:	492c      	ldr	r1, [pc, #176]	; (8003ab0 <mtx6_execute.lto_priv.133+0xc0>)
  chCondWait(&c1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
}

static void mtx6_execute(void) {
 80039fe:	b083      	sub	sp, #12

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8003a00:	1c7a      	adds	r2, r7, #1
 8003a02:	462b      	mov	r3, r5
 8003a04:	9100      	str	r1, [sp, #0]
 8003a06:	4630      	mov	r0, r6
 8003a08:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003a0c:	f7fc fed0 	bl	80007b0 <chThdCreateStatic>
 8003a10:	4c28      	ldr	r4, [pc, #160]	; (8003ab4 <mtx6_execute.lto_priv.133+0xc4>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8003a12:	4929      	ldr	r1, [pc, #164]	; (8003ab8 <mtx6_execute.lto_priv.133+0xc8>)
}

static void mtx6_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8003a14:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8003a16:	1cba      	adds	r2, r7, #2
 8003a18:	462b      	mov	r3, r5
 8003a1a:	9100      	str	r1, [sp, #0]
 8003a1c:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 8003a20:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003a24:	f7fc fec4 	bl	80007b0 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8003a28:	4924      	ldr	r1, [pc, #144]	; (8003abc <mtx6_execute.lto_priv.133+0xcc>)

static void mtx6_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8003a2a:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8003a2c:	1cfa      	adds	r2, r7, #3
 8003a2e:	462b      	mov	r3, r5
 8003a30:	9100      	str	r1, [sp, #0]
 8003a32:	f506 7024 	add.w	r0, r6, #656	; 0x290
 8003a36:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003a3a:	f7fc feb9 	bl	80007b0 <chThdCreateStatic>
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8003a3e:	4920      	ldr	r1, [pc, #128]	; (8003ac0 <mtx6_execute.lto_priv.133+0xd0>)
static void mtx6_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8003a40:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8003a42:	1d3a      	adds	r2, r7, #4
 8003a44:	462b      	mov	r3, r5
 8003a46:	9100      	str	r1, [sp, #0]
 8003a48:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 8003a4c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003a50:	f7fc feae 	bl	80007b0 <chThdCreateStatic>
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 8003a54:	491b      	ldr	r1, [pc, #108]	; (8003ac4 <mtx6_execute.lto_priv.133+0xd4>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8003a56:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 8003a58:	462b      	mov	r3, r5
 8003a5a:	9100      	str	r1, [sp, #0]
 8003a5c:	1d7a      	adds	r2, r7, #5
 8003a5e:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 8003a62:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003a66:	f7fc fea3 	bl	80007b0 <chThdCreateStatic>
 8003a6a:	2320      	movs	r3, #32
 8003a6c:	6120      	str	r0, [r4, #16]
 8003a6e:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chCondSignalI(&c1);
 8003a72:	f003 f845 	bl	8006b00 <chCondSignalI.constprop.67>
  chCondSignalI(&c1);
 8003a76:	f003 f843 	bl	8006b00 <chCondSignalI.constprop.67>
  chCondSignalI(&c1);
 8003a7a:	f003 f841 	bl	8006b00 <chCondSignalI.constprop.67>
  chCondSignalI(&c1);
 8003a7e:	f003 f83f 	bl	8006b00 <chCondSignalI.constprop.67>
  chCondSignalI(&c1);
 8003a82:	f003 f83d 	bl	8006b00 <chCondSignalI.constprop.67>
  chSchRescheduleS();
 8003a86:	f7fc fe1b 	bl	80006c0 <chSchRescheduleS>
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  test_wait_threads();
 8003a90:	f7fe ffd6 	bl	8002a40 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8003a94:	490c      	ldr	r1, [pc, #48]	; (8003ac8 <mtx6_execute.lto_priv.133+0xd8>)
 8003a96:	2001      	movs	r0, #1
}
 8003a98:	b003      	add	sp, #12
 8003a9a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  chCondSignalI(&c1);
  chCondSignalI(&c1);
  chSchRescheduleS();
  chSysUnlock();
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 8003a9e:	f7ff b827 	b.w	8002af0 <_test_assert_sequence>
 8003aa2:	bf00      	nop
 8003aa4:	200013f8 	.word	0x200013f8
 8003aa8:	20000d50 	.word	0x20000d50
 8003aac:	08003891 	.word	0x08003891
 8003ab0:	08006fe0 	.word	0x08006fe0
 8003ab4:	20000968 	.word	0x20000968
 8003ab8:	080080f8 	.word	0x080080f8
 8003abc:	08006fd8 	.word	0x08006fd8
 8003ac0:	08006fd0 	.word	0x08006fd0
 8003ac4:	08006fd4 	.word	0x08006fd4
 8003ac8:	08006fdc 	.word	0x08006fdc
 8003acc:	00000000 	.word	0x00000000

08003ad0 <mtx5_execute.lto_priv.131>:
static void mtx5_setup(void) {

  chMtxObjectInit(&m1);
}

static void mtx5_execute(void) {
 8003ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003ad4:	4d3b      	ldr	r5, [pc, #236]	; (8003bc4 <mtx5_execute.lto_priv.131+0xf4>)
 8003ad6:	2320      	movs	r3, #32
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003ad8:	69aa      	ldr	r2, [r5, #24]
 8003ada:	6896      	ldr	r6, [r2, #8]
 8003adc:	f383 8811 	msr	BASEPRI, r3
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->m_owner != NULL) {
 8003ae0:	4c39      	ldr	r4, [pc, #228]	; (8003bc8 <mtx5_execute.lto_priv.131+0xf8>)
    if (mp->m_owner == currp) {
      mp->m_cnt++;
      return true;
    }
#endif
    return false;
 8003ae2:	2100      	movs	r1, #0
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->m_owner != NULL) {
 8003ae4:	68a3      	ldr	r3, [r4, #8]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d05e      	beq.n	8003ba8 <mtx5_execute.lto_priv.131+0xd8>
 8003aea:	2300      	movs	r3, #0
 8003aec:	f383 8811 	msr	BASEPRI, r3
#if !CH_CFG_USE_MUTEXES_RECURSIVE
  bool b;
  tprio_t prio = chThdGetPriorityX();

  b = chMtxTryLock(&m1);
  test_assert(1, b, "already locked");
 8003af0:	2001      	movs	r0, #1
 8003af2:	f7ff f825 	bl	8002b40 <_test_assert>
 8003af6:	4601      	mov	r1, r0
 8003af8:	b108      	cbz	r0, 8003afe <mtx5_execute.lto_priv.131+0x2e>
 8003afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003afe:	2320      	movs	r3, #32
 8003b00:	f383 8811 	msr	BASEPRI, r3
 8003b04:	68a3      	ldr	r3, [r4, #8]
 8003b06:	4a30      	ldr	r2, [pc, #192]	; (8003bc8 <mtx5_execute.lto_priv.131+0xf8>)
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d054      	beq.n	8003bb6 <mtx5_execute.lto_priv.131+0xe6>
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	2300      	movs	r3, #0
 8003b10:	f383 8811 	msr	BASEPRI, r3

  b = chMtxTryLock(&m1);
  test_assert(2, !b, "not locked");
 8003b14:	2002      	movs	r0, #2
 8003b16:	f7ff f813 	bl	8002b40 <_test_assert>
 8003b1a:	4607      	mov	r7, r0
 8003b1c:	2800      	cmp	r0, #0
 8003b1e:	d1ec      	bne.n	8003afa <mtx5_execute.lto_priv.131+0x2a>
 8003b20:	2320      	movs	r3, #32
 8003b22:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chMtxUnlockS(&m1);
 8003b26:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8003bc8 <mtx5_execute.lto_priv.131+0xf8>
 8003b2a:	4640      	mov	r0, r8
 8003b2c:	f7fc ffd0 	bl	8000ad0 <chMtxUnlockS>
 8003b30:	f387 8811 	msr	BASEPRI, r7
 *
 * @notapi
 */
static inline bool queue_isempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next == (const thread_t *)tqp);
 8003b34:	6821      	ldr	r1, [r4, #0]
  chSysUnlock();

  test_assert(3, queue_isempty(&m1.m_queue), "queue not empty");
 8003b36:	2003      	movs	r0, #3
 8003b38:	1b09      	subs	r1, r1, r4
 8003b3a:	fab1 f181 	clz	r1, r1
 8003b3e:	0949      	lsrs	r1, r1, #5
 8003b40:	f7fe fffe 	bl	8002b40 <_test_assert>
 8003b44:	2800      	cmp	r0, #0
 8003b46:	d1d8      	bne.n	8003afa <mtx5_execute.lto_priv.131+0x2a>
  test_assert(4, m1.m_owner == NULL, "still owned");
 8003b48:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8003b4c:	2004      	movs	r0, #4
 8003b4e:	fab1 f181 	clz	r1, r1
 8003b52:	0949      	lsrs	r1, r1, #5
 8003b54:	f7fe fff4 	bl	8002b40 <_test_assert>
 8003b58:	2800      	cmp	r0, #0
 8003b5a:	d1ce      	bne.n	8003afa <mtx5_execute.lto_priv.131+0x2a>
 8003b5c:	69ab      	ldr	r3, [r5, #24]
  test_assert(5, chThdGetPriorityX() == prio, "wrong priority level");
 8003b5e:	2005      	movs	r0, #5
 8003b60:	6899      	ldr	r1, [r3, #8]
 8003b62:	1a71      	subs	r1, r6, r1
 8003b64:	fab1 f181 	clz	r1, r1
 8003b68:	0949      	lsrs	r1, r1, #5
 8003b6a:	f7fe ffe9 	bl	8002b40 <_test_assert>
 8003b6e:	2800      	cmp	r0, #0
 8003b70:	d1c3      	bne.n	8003afa <mtx5_execute.lto_priv.131+0x2a>
#endif /* !CH_CFG_USE_MUTEXES_RECURSIVE */
  
  chMtxLock(&m1);
 8003b72:	4640      	mov	r0, r8
 8003b74:	f7fd f874 	bl	8000c60 <chMtxLock>
  chMtxUnlockAll();
 8003b78:	f7fc ff7a 	bl	8000a70 <chMtxUnlockAll>
 8003b7c:	f8d8 1000 	ldr.w	r1, [r8]
  test_assert(6, queue_isempty(&m1.m_queue), "queue not empty");
 8003b80:	2006      	movs	r0, #6
 8003b82:	ebc8 0101 	rsb	r1, r8, r1
 8003b86:	fab1 f181 	clz	r1, r1
 8003b8a:	0949      	lsrs	r1, r1, #5
 8003b8c:	f7fe ffd8 	bl	8002b40 <_test_assert>
 8003b90:	2800      	cmp	r0, #0
 8003b92:	d1b2      	bne.n	8003afa <mtx5_execute.lto_priv.131+0x2a>
  test_assert(7, m1.m_owner == NULL, "still owned");
 8003b94:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8003b98:	2007      	movs	r0, #7
 8003b9a:	fab1 f181 	clz	r1, r1
}
 8003b9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* !CH_CFG_USE_MUTEXES_RECURSIVE */
  
  chMtxLock(&m1);
  chMtxUnlockAll();
  test_assert(6, queue_isempty(&m1.m_queue), "queue not empty");
  test_assert(7, m1.m_owner == NULL, "still owned");
 8003ba2:	0949      	lsrs	r1, r1, #5
 8003ba4:	f7fe bfcc 	b.w	8002b40 <_test_assert>

  chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 8003ba8:	69ab      	ldr	r3, [r5, #24]
  mp->m_next = currp->p_mtxlist;
  currp->p_mtxlist = mp;
 8003baa:	2101      	movs	r1, #1
  chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
  mp->m_next = currp->p_mtxlist;
 8003bac:	6b9a      	ldr	r2, [r3, #56]	; 0x38

  chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 8003bae:	60a3      	str	r3, [r4, #8]
  mp->m_next = currp->p_mtxlist;
 8003bb0:	60e2      	str	r2, [r4, #12]
  currp->p_mtxlist = mp;
 8003bb2:	639c      	str	r4, [r3, #56]	; 0x38
 8003bb4:	e799      	b.n	8003aea <mtx5_execute.lto_priv.131+0x1a>

  chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 8003bb6:	69ab      	ldr	r3, [r5, #24]
  mp->m_next = currp->p_mtxlist;
 8003bb8:	6b98      	ldr	r0, [r3, #56]	; 0x38

  chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 8003bba:	6093      	str	r3, [r2, #8]
  mp->m_next = currp->p_mtxlist;
 8003bbc:	60d0      	str	r0, [r2, #12]
  currp->p_mtxlist = mp;
 8003bbe:	639a      	str	r2, [r3, #56]	; 0x38
 8003bc0:	e7a5      	b.n	8003b0e <mtx5_execute.lto_priv.131+0x3e>
 8003bc2:	bf00      	nop
 8003bc4:	200013f8 	.word	0x200013f8
 8003bc8:	20000800 	.word	0x20000800
 8003bcc:	00000000 	.word	0x00000000

08003bd0 <bmk12_setup.lto_priv.174>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8003bd0:	4b02      	ldr	r3, [pc, #8]	; (8003bdc <bmk12_setup.lto_priv.174+0xc>)
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8003bd6:	605b      	str	r3, [r3, #4]
 8003bd8:	609a      	str	r2, [r3, #8]
 8003bda:	4770      	bx	lr
 8003bdc:	20000928 	.word	0x20000928

08003be0 <bmk11_setup.lto_priv.172>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8003be0:	4b02      	ldr	r3, [pc, #8]	; (8003bec <bmk11_setup.lto_priv.172+0xc>)
 8003be2:	2201      	movs	r2, #1
 8003be4:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8003be6:	605b      	str	r3, [r3, #4]
 8003be8:	609a      	str	r2, [r3, #8]
 8003bea:	4770      	bx	lr
 8003bec:	2000095c 	.word	0x2000095c

08003bf0 <tmo>:
 * A virtual timer is set and immediately reset into a continuous loop.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void tmo(void *param) {(void)param;}
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
	...

08003c00 <bmk7_setup.lto_priv.167>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8003c00:	4b02      	ldr	r3, [pc, #8]	; (8003c0c <bmk7_setup.lto_priv.167+0xc>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8003c06:	605b      	str	r3, [r3, #4]
 8003c08:	609a      	str	r2, [r3, #8]
 8003c0a:	4770      	bx	lr
 8003c0c:	2000095c 	.word	0x2000095c

08003c10 <sys2_execute.lto_priv.113>:
 8003c10:	2320      	movs	r3, #32
 8003c12:	f383 8811 	msr	BASEPRI, r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8003c16:	b662      	cpsie	i
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c18:	b672      	cpsid	i

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003c1a:	f383 8811 	msr	BASEPRI, r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8003c1e:	b662      	cpsie	i

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003c20:	2300      	movs	r3, #0
 8003c22:	f383 8811 	msr	BASEPRI, r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8003c26:	b662      	cpsie	i
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	0000      	movs	r0, r0
	...

08003c30 <bmk13_execute.lto_priv.176>:
 *
 * <h2>Description</h2>
 * The memory size of the various kernel objects is printed.
 */

static void bmk13_execute(void) {
 8003c30:	b510      	push	{r4, lr}

  test_print("--- System: ");
 8003c32:	482f      	ldr	r0, [pc, #188]	; (8003cf0 <bmk13_execute.lto_priv.176+0xc0>)
  test_printn(sizeof(ch_system_t));
  test_println(" bytes");
 8003c34:	4c2f      	ldr	r4, [pc, #188]	; (8003cf4 <bmk13_execute.lto_priv.176+0xc4>)
 * The memory size of the various kernel objects is printed.
 */

static void bmk13_execute(void) {

  test_print("--- System: ");
 8003c36:	f7fe ffd3 	bl	8002be0 <test_print>
  test_printn(sizeof(ch_system_t));
 8003c3a:	f44f 70a8 	mov.w	r0, #336	; 0x150
 8003c3e:	f7fe ffdf 	bl	8002c00 <test_printn>
  test_println(" bytes");
 8003c42:	4620      	mov	r0, r4
 8003c44:	f7fe ffac 	bl	8002ba0 <test_println>
  test_print("--- Thread: ");
 8003c48:	482b      	ldr	r0, [pc, #172]	; (8003cf8 <bmk13_execute.lto_priv.176+0xc8>)
 8003c4a:	f7fe ffc9 	bl	8002be0 <test_print>
  test_printn(sizeof(thread_t));
 8003c4e:	2044      	movs	r0, #68	; 0x44
 8003c50:	f7fe ffd6 	bl	8002c00 <test_printn>
  test_println(" bytes");
 8003c54:	4620      	mov	r0, r4
 8003c56:	f7fe ffa3 	bl	8002ba0 <test_println>
  test_print("--- Timer : ");
 8003c5a:	4828      	ldr	r0, [pc, #160]	; (8003cfc <bmk13_execute.lto_priv.176+0xcc>)
 8003c5c:	f7fe ffc0 	bl	8002be0 <test_print>
  test_printn(sizeof(virtual_timer_t));
 8003c60:	2014      	movs	r0, #20
 8003c62:	f7fe ffcd 	bl	8002c00 <test_printn>
  test_println(" bytes");
 8003c66:	4620      	mov	r0, r4
 8003c68:	f7fe ff9a 	bl	8002ba0 <test_println>
#if CH_CFG_USE_SEMAPHORES || defined(__DOXYGEN__)
  test_print("--- Semaph: ");
 8003c6c:	4824      	ldr	r0, [pc, #144]	; (8003d00 <bmk13_execute.lto_priv.176+0xd0>)
 8003c6e:	f7fe ffb7 	bl	8002be0 <test_print>
  test_printn(sizeof(semaphore_t));
 8003c72:	200c      	movs	r0, #12
 8003c74:	f7fe ffc4 	bl	8002c00 <test_printn>
  test_println(" bytes");
 8003c78:	4620      	mov	r0, r4
 8003c7a:	f7fe ff91 	bl	8002ba0 <test_println>
#endif
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
  test_print("--- EventS: ");
 8003c7e:	4821      	ldr	r0, [pc, #132]	; (8003d04 <bmk13_execute.lto_priv.176+0xd4>)
 8003c80:	f7fe ffae 	bl	8002be0 <test_print>
  test_printn(sizeof(event_source_t));
 8003c84:	2004      	movs	r0, #4
 8003c86:	f7fe ffbb 	bl	8002c00 <test_printn>
  test_println(" bytes");
 8003c8a:	4620      	mov	r0, r4
 8003c8c:	f7fe ff88 	bl	8002ba0 <test_println>
  test_print("--- EventL: ");
 8003c90:	481d      	ldr	r0, [pc, #116]	; (8003d08 <bmk13_execute.lto_priv.176+0xd8>)
 8003c92:	f7fe ffa5 	bl	8002be0 <test_print>
  test_printn(sizeof(event_listener_t));
 8003c96:	2014      	movs	r0, #20
 8003c98:	f7fe ffb2 	bl	8002c00 <test_printn>
  test_println(" bytes");
 8003c9c:	4620      	mov	r0, r4
 8003c9e:	f7fe ff7f 	bl	8002ba0 <test_println>
#endif
#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
  test_print("--- Mutex : ");
 8003ca2:	481a      	ldr	r0, [pc, #104]	; (8003d0c <bmk13_execute.lto_priv.176+0xdc>)
 8003ca4:	f7fe ff9c 	bl	8002be0 <test_print>
  test_printn(sizeof(mutex_t));
 8003ca8:	2010      	movs	r0, #16
 8003caa:	f7fe ffa9 	bl	8002c00 <test_printn>
  test_println(" bytes");
 8003cae:	4620      	mov	r0, r4
 8003cb0:	f7fe ff76 	bl	8002ba0 <test_println>
#endif
#if CH_CFG_USE_CONDVARS || defined(__DOXYGEN__)
  test_print("--- CondV.: ");
 8003cb4:	4816      	ldr	r0, [pc, #88]	; (8003d10 <bmk13_execute.lto_priv.176+0xe0>)
 8003cb6:	f7fe ff93 	bl	8002be0 <test_print>
  test_printn(sizeof(condition_variable_t));
 8003cba:	2008      	movs	r0, #8
 8003cbc:	f7fe ffa0 	bl	8002c00 <test_printn>
  test_println(" bytes");
 8003cc0:	4620      	mov	r0, r4
 8003cc2:	f7fe ff6d 	bl	8002ba0 <test_println>
#endif
#if CH_CFG_USE_QUEUES || defined(__DOXYGEN__)
  test_print("--- Queue : ");
 8003cc6:	4813      	ldr	r0, [pc, #76]	; (8003d14 <bmk13_execute.lto_priv.176+0xe4>)
 8003cc8:	f7fe ff8a 	bl	8002be0 <test_print>
  test_printn(sizeof(io_queue_t));
 8003ccc:	2024      	movs	r0, #36	; 0x24
 8003cce:	f7fe ff97 	bl	8002c00 <test_printn>
  test_println(" bytes");
 8003cd2:	4620      	mov	r0, r4
 8003cd4:	f7fe ff64 	bl	8002ba0 <test_println>
#endif
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
  test_print("--- MailB.: ");
 8003cd8:	480f      	ldr	r0, [pc, #60]	; (8003d18 <bmk13_execute.lto_priv.176+0xe8>)
 8003cda:	f7fe ff81 	bl	8002be0 <test_print>
  test_printn(sizeof(mailbox_t));
 8003cde:	2028      	movs	r0, #40	; 0x28
 8003ce0:	f7fe ff8e 	bl	8002c00 <test_printn>
  test_println(" bytes");
 8003ce4:	4620      	mov	r0, r4
#endif
}
 8003ce6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_println(" bytes");
#endif
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
  test_print("--- MailB.: ");
  test_printn(sizeof(mailbox_t));
  test_println(" bytes");
 8003cea:	f7fe bf59 	b.w	8002ba0 <test_println>
 8003cee:	bf00      	nop
 8003cf0:	08007af0 	.word	0x08007af0
 8003cf4:	08007b00 	.word	0x08007b00
 8003cf8:	08007b08 	.word	0x08007b08
 8003cfc:	08007b18 	.word	0x08007b18
 8003d00:	08007b28 	.word	0x08007b28
 8003d04:	08007b38 	.word	0x08007b38
 8003d08:	08007b48 	.word	0x08007b48
 8003d0c:	08007b58 	.word	0x08007b58
 8003d10:	08007b68 	.word	0x08007b68
 8003d14:	08007b78 	.word	0x08007b78
 8003d18:	08007b88 	.word	0x08007b88
 8003d1c:	00000000 	.word	0x00000000

08003d20 <bmk12_execute.lto_priv.175>:
static void bmk12_setup(void) {

  chMtxObjectInit(&mtx1);
}

static void bmk12_execute(void) {
 8003d20:	b538      	push	{r3, r4, r5, lr}
  uint32_t n = 0;

  test_wait_tick();
 8003d22:	f7fe fe7d 	bl	8002a20 <test_wait_tick>
  test_start_timer(1000);
 8003d26:	f003 f863 	bl	8006df0 <test_start_timer.constprop.6>
 8003d2a:	4d14      	ldr	r5, [pc, #80]	; (8003d7c <bmk12_execute.lto_priv.175+0x5c>)

  chMtxObjectInit(&mtx1);
}

static void bmk12_execute(void) {
  uint32_t n = 0;
 8003d2c:	2400      	movs	r4, #0

  test_wait_tick();
  test_start_timer(1000);
  do {
    chMtxLock(&mtx1);
 8003d2e:	4814      	ldr	r0, [pc, #80]	; (8003d80 <bmk12_execute.lto_priv.175+0x60>)
 8003d30:	f7fc ff96 	bl	8000c60 <chMtxLock>
    chMtxUnlock(&mtx1);
 8003d34:	4812      	ldr	r0, [pc, #72]	; (8003d80 <bmk12_execute.lto_priv.175+0x60>)
 8003d36:	f7fc fef3 	bl	8000b20 <chMtxUnlock>
    chMtxLock(&mtx1);
 8003d3a:	4811      	ldr	r0, [pc, #68]	; (8003d80 <bmk12_execute.lto_priv.175+0x60>)
 8003d3c:	f7fc ff90 	bl	8000c60 <chMtxLock>
    chMtxUnlock(&mtx1);
 8003d40:	480f      	ldr	r0, [pc, #60]	; (8003d80 <bmk12_execute.lto_priv.175+0x60>)
 8003d42:	f7fc feed 	bl	8000b20 <chMtxUnlock>
    chMtxLock(&mtx1);
 8003d46:	480e      	ldr	r0, [pc, #56]	; (8003d80 <bmk12_execute.lto_priv.175+0x60>)
 8003d48:	f7fc ff8a 	bl	8000c60 <chMtxLock>
    chMtxUnlock(&mtx1);
 8003d4c:	480c      	ldr	r0, [pc, #48]	; (8003d80 <bmk12_execute.lto_priv.175+0x60>)
 8003d4e:	f7fc fee7 	bl	8000b20 <chMtxUnlock>
    chMtxLock(&mtx1);
 8003d52:	480b      	ldr	r0, [pc, #44]	; (8003d80 <bmk12_execute.lto_priv.175+0x60>)
 8003d54:	f7fc ff84 	bl	8000c60 <chMtxLock>
    chMtxUnlock(&mtx1);
 8003d58:	4809      	ldr	r0, [pc, #36]	; (8003d80 <bmk12_execute.lto_priv.175+0x60>)
 8003d5a:	f7fc fee1 	bl	8000b20 <chMtxUnlock>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8003d5e:	782b      	ldrb	r3, [r5, #0]
    chMtxUnlock(&mtx1);
    chMtxLock(&mtx1);
    chMtxUnlock(&mtx1);
    chMtxLock(&mtx1);
    chMtxUnlock(&mtx1);
    n++;
 8003d60:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d0e3      	beq.n	8003d2e <bmk12_execute.lto_priv.175+0xe>
  test_print("--- Score : ");
 8003d66:	4807      	ldr	r0, [pc, #28]	; (8003d84 <bmk12_execute.lto_priv.175+0x64>)
 8003d68:	f7fe ff3a 	bl	8002be0 <test_print>
  test_printn(n * 4);
 8003d6c:	00a0      	lsls	r0, r4, #2
 8003d6e:	f7fe ff47 	bl	8002c00 <test_printn>
  test_println(" lock+unlock/S");
}
 8003d72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 4);
  test_println(" lock+unlock/S");
 8003d76:	4804      	ldr	r0, [pc, #16]	; (8003d88 <bmk12_execute.lto_priv.175+0x68>)
 8003d78:	f7fe bf12 	b.w	8002ba0 <test_println>
 8003d7c:	20001548 	.word	0x20001548
 8003d80:	20000928 	.word	0x20000928
 8003d84:	08007b98 	.word	0x08007b98
 8003d88:	08007ba8 	.word	0x08007ba8
 8003d8c:	00000000 	.word	0x00000000

08003d90 <bmk11_execute.lto_priv.173>:
static void bmk11_setup(void) {

  chSemObjectInit(&sem1, 1);
}

static void bmk11_execute(void) {
 8003d90:	b538      	push	{r3, r4, r5, lr}
  uint32_t n = 0;

  test_wait_tick();
 8003d92:	f7fe fe45 	bl	8002a20 <test_wait_tick>
  test_start_timer(1000);
 8003d96:	f003 f82b 	bl	8006df0 <test_start_timer.constprop.6>
 8003d9a:	4d14      	ldr	r5, [pc, #80]	; (8003dec <bmk11_execute.lto_priv.173+0x5c>)

  chSemObjectInit(&sem1, 1);
}

static void bmk11_execute(void) {
  uint32_t n = 0;
 8003d9c:	2400      	movs	r4, #0

  test_wait_tick();
  test_start_timer(1000);
  do {
    chSemWait(&sem1);
 8003d9e:	4814      	ldr	r0, [pc, #80]	; (8003df0 <bmk11_execute.lto_priv.173+0x60>)
 8003da0:	f7fc fd7e 	bl	80008a0 <chSemWait>
    chSemSignal(&sem1);
 8003da4:	4812      	ldr	r0, [pc, #72]	; (8003df0 <bmk11_execute.lto_priv.173+0x60>)
 8003da6:	f7fc fce3 	bl	8000770 <chSemSignal>
    chSemWait(&sem1);
 8003daa:	4811      	ldr	r0, [pc, #68]	; (8003df0 <bmk11_execute.lto_priv.173+0x60>)
 8003dac:	f7fc fd78 	bl	80008a0 <chSemWait>
    chSemSignal(&sem1);
 8003db0:	480f      	ldr	r0, [pc, #60]	; (8003df0 <bmk11_execute.lto_priv.173+0x60>)
 8003db2:	f7fc fcdd 	bl	8000770 <chSemSignal>
    chSemWait(&sem1);
 8003db6:	480e      	ldr	r0, [pc, #56]	; (8003df0 <bmk11_execute.lto_priv.173+0x60>)
 8003db8:	f7fc fd72 	bl	80008a0 <chSemWait>
    chSemSignal(&sem1);
 8003dbc:	480c      	ldr	r0, [pc, #48]	; (8003df0 <bmk11_execute.lto_priv.173+0x60>)
 8003dbe:	f7fc fcd7 	bl	8000770 <chSemSignal>
    chSemWait(&sem1);
 8003dc2:	480b      	ldr	r0, [pc, #44]	; (8003df0 <bmk11_execute.lto_priv.173+0x60>)
 8003dc4:	f7fc fd6c 	bl	80008a0 <chSemWait>
    chSemSignal(&sem1);
 8003dc8:	4809      	ldr	r0, [pc, #36]	; (8003df0 <bmk11_execute.lto_priv.173+0x60>)
 8003dca:	f7fc fcd1 	bl	8000770 <chSemSignal>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8003dce:	782b      	ldrb	r3, [r5, #0]
    chSemSignal(&sem1);
    chSemWait(&sem1);
    chSemSignal(&sem1);
    chSemWait(&sem1);
    chSemSignal(&sem1);
    n++;
 8003dd0:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0e3      	beq.n	8003d9e <bmk11_execute.lto_priv.173+0xe>
  test_print("--- Score : ");
 8003dd6:	4807      	ldr	r0, [pc, #28]	; (8003df4 <bmk11_execute.lto_priv.173+0x64>)
 8003dd8:	f7fe ff02 	bl	8002be0 <test_print>
  test_printn(n * 4);
 8003ddc:	00a0      	lsls	r0, r4, #2
 8003dde:	f7fe ff0f 	bl	8002c00 <test_printn>
  test_println(" wait+signal/S");
}
 8003de2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 4);
  test_println(" wait+signal/S");
 8003de6:	4804      	ldr	r0, [pc, #16]	; (8003df8 <bmk11_execute.lto_priv.173+0x68>)
 8003de8:	f7fe beda 	b.w	8002ba0 <test_println>
 8003dec:	20001548 	.word	0x20001548
 8003df0:	2000095c 	.word	0x2000095c
 8003df4:	08007b98 	.word	0x08007b98
 8003df8:	08007bb8 	.word	0x08007bb8
 8003dfc:	00000000 	.word	0x00000000

08003e00 <thread3>:
 * continuous loop.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static THD_FUNCTION(thread3, p) {
 8003e00:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003e02:	4c06      	ldr	r4, [pc, #24]	; (8003e1c <thread3+0x1c>)
 *
 * @xclass
 */
static inline bool chThdShouldTerminateX(void) {

  return (bool)((chThdGetSelfX()->p_flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8003e04:	69a3      	ldr	r3, [r4, #24]
 8003e06:	7f5b      	ldrb	r3, [r3, #29]

  (void)p;
  while (!chThdShouldTerminateX())
 8003e08:	075a      	lsls	r2, r3, #29
 8003e0a:	d406      	bmi.n	8003e1a <thread3+0x1a>
    chSemWait(&sem1);
 8003e0c:	4804      	ldr	r0, [pc, #16]	; (8003e20 <thread3+0x20>)
 8003e0e:	f7fc fd47 	bl	80008a0 <chSemWait>
 8003e12:	69a3      	ldr	r3, [r4, #24]
 8003e14:	7f5b      	ldrb	r3, [r3, #29]
 */

static THD_FUNCTION(thread3, p) {

  (void)p;
  while (!chThdShouldTerminateX())
 8003e16:	075b      	lsls	r3, r3, #29
 8003e18:	d5f8      	bpl.n	8003e0c <thread3+0xc>
 8003e1a:	bd10      	pop	{r4, pc}
 8003e1c:	200013f8 	.word	0x200013f8
 8003e20:	2000095c 	.word	0x2000095c
	...

08003e30 <bmk10_execute.lto_priv.171>:
 * a second of continuous operations.
 */

static void tmo(void *param) {(void)param;}

static void bmk10_execute(void) {
 8003e30:	b538      	push	{r3, r4, r5, lr}
  static virtual_timer_t vt1, vt2;
  uint32_t n = 0;

  test_wait_tick();
 8003e32:	f7fe fdf5 	bl	8002a20 <test_wait_tick>
  test_start_timer(1000);
 8003e36:	f002 ffdb 	bl	8006df0 <test_start_timer.constprop.6>
 8003e3a:	4d15      	ldr	r5, [pc, #84]	; (8003e90 <bmk10_execute.lto_priv.171+0x60>)

static void tmo(void *param) {(void)param;}

static void bmk10_execute(void) {
  static virtual_timer_t vt1, vt2;
  uint32_t n = 0;
 8003e3c:	2400      	movs	r4, #0

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003e3e:	2320      	movs	r3, #32
 8003e40:	f383 8811 	msr	BASEPRI, r3

  test_wait_tick();
  test_start_timer(1000);
  do {
    chSysLock();
    chVTDoSetI(&vt1, 1, tmo, NULL);
 8003e44:	4813      	ldr	r0, [pc, #76]	; (8003e94 <bmk10_execute.lto_priv.171+0x64>)
 8003e46:	2101      	movs	r1, #1
 8003e48:	4a13      	ldr	r2, [pc, #76]	; (8003e98 <bmk10_execute.lto_priv.171+0x68>)
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	f7fd f940 	bl	80010d0 <chVTDoSetI>
    chVTDoSetI(&vt2, 10000, tmo, NULL);
 8003e50:	f242 7110 	movw	r1, #10000	; 0x2710
 8003e54:	4a10      	ldr	r2, [pc, #64]	; (8003e98 <bmk10_execute.lto_priv.171+0x68>)
 8003e56:	2300      	movs	r3, #0
 8003e58:	4810      	ldr	r0, [pc, #64]	; (8003e9c <bmk10_execute.lto_priv.171+0x6c>)
 8003e5a:	f7fd f939 	bl	80010d0 <chVTDoSetI>
    chVTDoResetI(&vt1);
 8003e5e:	480d      	ldr	r0, [pc, #52]	; (8003e94 <bmk10_execute.lto_priv.171+0x64>)
 8003e60:	f7fd f8f6 	bl	8001050 <chVTDoResetI>
    chVTDoResetI(&vt2);
 8003e64:	480d      	ldr	r0, [pc, #52]	; (8003e9c <bmk10_execute.lto_priv.171+0x6c>)
 8003e66:	f7fd f8f3 	bl	8001050 <chVTDoResetI>
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	f383 8811 	msr	BASEPRI, r3
    chSysUnlock();
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8003e70:	782b      	ldrb	r3, [r5, #0]
    chVTDoSetI(&vt1, 1, tmo, NULL);
    chVTDoSetI(&vt2, 10000, tmo, NULL);
    chVTDoResetI(&vt1);
    chVTDoResetI(&vt2);
    chSysUnlock();
    n++;
 8003e72:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0e2      	beq.n	8003e3e <bmk10_execute.lto_priv.171+0xe>
  test_print("--- Score : ");
 8003e78:	4809      	ldr	r0, [pc, #36]	; (8003ea0 <bmk10_execute.lto_priv.171+0x70>)
 8003e7a:	f7fe feb1 	bl	8002be0 <test_print>
  test_printn(n * 2);
 8003e7e:	0060      	lsls	r0, r4, #1
 8003e80:	f7fe febe 	bl	8002c00 <test_printn>
  test_println(" timers/S");
}
 8003e84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 2);
  test_println(" timers/S");
 8003e88:	4806      	ldr	r0, [pc, #24]	; (8003ea4 <bmk10_execute.lto_priv.171+0x74>)
 8003e8a:	f7fe be89 	b.w	8002ba0 <test_println>
 8003e8e:	bf00      	nop
 8003e90:	20001548 	.word	0x20001548
 8003e94:	20000914 	.word	0x20000914
 8003e98:	08003bf1 	.word	0x08003bf1
 8003e9c:	20000900 	.word	0x20000900
 8003ea0:	08007b98 	.word	0x08007b98
 8003ea4:	08007bc8 	.word	0x08007bc8
	...

08003eb0 <bmk9_execute.lto_priv.170>:
 * loop.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk9_execute(void) {
 8003eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 8003eb2:	4926      	ldr	r1, [pc, #152]	; (8003f4c <bmk9_execute.lto_priv.170+0x9c>)
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8003eb4:	4b26      	ldr	r3, [pc, #152]	; (8003f50 <bmk9_execute.lto_priv.170+0xa0>)
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8003eb6:	2200      	movs	r2, #0
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 8003eb8:	f101 0010 	add.w	r0, r1, #16
 8003ebc:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8003ebe:	605b      	str	r3, [r3, #4]
  uint32_t n;
  static uint8_t ib[16];
  static input_queue_t iq;

  chIQObjectInit(&iq, ib, sizeof(ib), NULL, NULL);
  n = 0;
 8003ec0:	4614      	mov	r4, r2
 8003ec2:	6118      	str	r0, [r3, #16]
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 8003ec4:	60d9      	str	r1, [r3, #12]
  iqp->q_rdptr   = bp;
 8003ec6:	6199      	str	r1, [r3, #24]
  iqp->q_wrptr   = bp;
 8003ec8:	6159      	str	r1, [r3, #20]
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8003eca:	609a      	str	r2, [r3, #8]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 8003ecc:	61da      	str	r2, [r3, #28]
  iqp->q_link    = link;
 8003ece:	621a      	str	r2, [r3, #32]
  test_wait_tick();
  test_start_timer(1000);
  do {
    chSysLock();
    chIQPutI(&iq, 0);
 8003ed0:	4617      	mov	r7, r2
  static uint8_t ib[16];
  static input_queue_t iq;

  chIQObjectInit(&iq, ib, sizeof(ib), NULL, NULL);
  n = 0;
  test_wait_tick();
 8003ed2:	f7fe fda5 	bl	8002a20 <test_wait_tick>
  test_start_timer(1000);
 8003ed6:	f002 ff8b 	bl	8006df0 <test_start_timer.constprop.6>
 8003eda:	4e1e      	ldr	r6, [pc, #120]	; (8003f54 <bmk9_execute.lto_priv.170+0xa4>)
 8003edc:	2520      	movs	r5, #32
 8003ede:	f385 8811 	msr	BASEPRI, r5
  do {
    chSysLock();
    chIQPutI(&iq, 0);
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	481a      	ldr	r0, [pc, #104]	; (8003f50 <bmk9_execute.lto_priv.170+0xa0>)
 8003ee6:	f7fc fd1b 	bl	8000920 <chIQPutI>
    chIQPutI(&iq, 1);
 8003eea:	2101      	movs	r1, #1
 8003eec:	4818      	ldr	r0, [pc, #96]	; (8003f50 <bmk9_execute.lto_priv.170+0xa0>)
 8003eee:	f7fc fd17 	bl	8000920 <chIQPutI>
    chIQPutI(&iq, 2);
 8003ef2:	2102      	movs	r1, #2
 8003ef4:	4816      	ldr	r0, [pc, #88]	; (8003f50 <bmk9_execute.lto_priv.170+0xa0>)
 8003ef6:	f7fc fd13 	bl	8000920 <chIQPutI>
    chIQPutI(&iq, 3);
 8003efa:	2103      	movs	r1, #3
 8003efc:	4814      	ldr	r0, [pc, #80]	; (8003f50 <bmk9_execute.lto_priv.170+0xa0>)
 8003efe:	f7fc fd0f 	bl	8000920 <chIQPutI>
 8003f02:	f387 8811 	msr	BASEPRI, r7
 *
 * @api
 */
static inline msg_t chIQGet(input_queue_t *iqp) {

  return chIQGetTimeout(iqp, TIME_INFINITE);
 8003f06:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003f0a:	4811      	ldr	r0, [pc, #68]	; (8003f50 <bmk9_execute.lto_priv.170+0xa0>)
 8003f0c:	f7fd fa30 	bl	8001370 <chIQGetTimeout>
 8003f10:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003f14:	480e      	ldr	r0, [pc, #56]	; (8003f50 <bmk9_execute.lto_priv.170+0xa0>)
 8003f16:	f7fd fa2b 	bl	8001370 <chIQGetTimeout>
 8003f1a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003f1e:	480c      	ldr	r0, [pc, #48]	; (8003f50 <bmk9_execute.lto_priv.170+0xa0>)
 8003f20:	f7fd fa26 	bl	8001370 <chIQGetTimeout>
 8003f24:	480a      	ldr	r0, [pc, #40]	; (8003f50 <bmk9_execute.lto_priv.170+0xa0>)
 8003f26:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003f2a:	f7fd fa21 	bl	8001370 <chIQGetTimeout>
    (void)chIQGet(&iq);
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8003f2e:	7833      	ldrb	r3, [r6, #0]
    chSysUnlock();
    (void)chIQGet(&iq);
    (void)chIQGet(&iq);
    (void)chIQGet(&iq);
    (void)chIQGet(&iq);
    n++;
 8003f30:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d0d3      	beq.n	8003ede <bmk9_execute.lto_priv.170+0x2e>
  test_print("--- Score : ");
 8003f36:	4808      	ldr	r0, [pc, #32]	; (8003f58 <bmk9_execute.lto_priv.170+0xa8>)
 8003f38:	f7fe fe52 	bl	8002be0 <test_print>
  test_printn(n * 4);
 8003f3c:	00a0      	lsls	r0, r4, #2
 8003f3e:	f7fe fe5f 	bl	8002c00 <test_printn>
  test_println(" bytes/S");
}
 8003f42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 4);
  test_println(" bytes/S");
 8003f46:	4805      	ldr	r0, [pc, #20]	; (8003f5c <bmk9_execute.lto_priv.170+0xac>)
 8003f48:	f7fe be2a 	b.w	8002ba0 <test_println>
 8003f4c:	2000097c 	.word	0x2000097c
 8003f50:	20000938 	.word	0x20000938
 8003f54:	20001548 	.word	0x20001548
 8003f58:	08007b98 	.word	0x08007b98
 8003f5c:	08007bd4 	.word	0x08007bd4

08003f60 <bmk8_execute.lto_priv.169>:
    _sim_check_for_interrupts();
#endif
  } while(!chThdShouldTerminateX());
}

static void bmk8_execute(void) {
 8003f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003f64:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004038 <bmk8_execute.lto_priv.169+0xd8>
 8003f68:	b084      	sub	sp, #16
  uint32_t n;

  n = 0;
 8003f6a:	ac04      	add	r4, sp, #16
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	f844 3d04 	str.w	r3, [r4, #-4]!
  test_wait_tick();
 8003f72:	f7fe fd55 	bl	8002a20 <test_wait_tick>
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003f76:	f8d8 3018 	ldr.w	r3, [r8, #24]

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8003f7a:	4f2a      	ldr	r7, [pc, #168]	; (8004024 <bmk8_execute.lto_priv.169+0xc4>)
 8003f7c:	4e2a      	ldr	r6, [pc, #168]	; (8004028 <bmk8_execute.lto_priv.169+0xc8>)
 8003f7e:	689a      	ldr	r2, [r3, #8]
 8003f80:	4638      	mov	r0, r7
 8003f82:	4633      	mov	r3, r6
 8003f84:	3a01      	subs	r2, #1
 8003f86:	9400      	str	r4, [sp, #0]
 8003f88:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003f8c:	f7fc fc10 	bl	80007b0 <chThdCreateStatic>
 8003f90:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8003f94:	4d25      	ldr	r5, [pc, #148]	; (800402c <bmk8_execute.lto_priv.169+0xcc>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8003f96:	689a      	ldr	r2, [r3, #8]
 8003f98:	f44f 71a4 	mov.w	r1, #328	; 0x148
  uint32_t n;

  n = 0;
  test_wait_tick();

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8003f9c:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8003f9e:	4633      	mov	r3, r6
 8003fa0:	3a01      	subs	r2, #1
 8003fa2:	9400      	str	r4, [sp, #0]
 8003fa4:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8003fa8:	f7fc fc02 	bl	80007b0 <chThdCreateStatic>
 8003fac:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8003fb0:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8003fb2:	689a      	ldr	r2, [r3, #8]
 8003fb4:	f507 7024 	add.w	r0, r7, #656	; 0x290
 8003fb8:	4633      	mov	r3, r6
 8003fba:	3a01      	subs	r2, #1
 8003fbc:	9400      	str	r4, [sp, #0]
 8003fbe:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003fc2:	f7fc fbf5 	bl	80007b0 <chThdCreateStatic>
 8003fc6:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8003fca:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8003fcc:	689a      	ldr	r2, [r3, #8]
 8003fce:	f507 7076 	add.w	r0, r7, #984	; 0x3d8
 8003fd2:	4633      	mov	r3, r6
 8003fd4:	3a01      	subs	r2, #1
 8003fd6:	9400      	str	r4, [sp, #0]
 8003fd8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003fdc:	f7fc fbe8 	bl	80007b0 <chThdCreateStatic>
 8003fe0:	f8d8 3018 	ldr.w	r3, [r8, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8003fe4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003fe8:	689a      	ldr	r2, [r3, #8]
  test_wait_tick();

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8003fea:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8003fec:	3a01      	subs	r2, #1
 8003fee:	4633      	mov	r3, r6
 8003ff0:	f507 60a4 	add.w	r0, r7, #1312	; 0x520
 8003ff4:	9400      	str	r4, [sp, #0]
 8003ff6:	f7fc fbdb 	bl	80007b0 <chThdCreateStatic>
 8003ffa:	6128      	str	r0, [r5, #16]

  chThdSleepSeconds(1);
 8003ffc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004000:	f7fd f9f6 	bl	80013f0 <chThdSleep>
  test_terminate_threads();
 8004004:	f7fe fd34 	bl	8002a70 <test_terminate_threads>
  test_wait_threads();
 8004008:	f7fe fd1a 	bl	8002a40 <test_wait_threads>

  test_print("--- Score : ");
 800400c:	4808      	ldr	r0, [pc, #32]	; (8004030 <bmk8_execute.lto_priv.169+0xd0>)
 800400e:	f7fe fde7 	bl	8002be0 <test_print>
  test_printn(n);
 8004012:	9803      	ldr	r0, [sp, #12]
 8004014:	f7fe fdf4 	bl	8002c00 <test_printn>
  test_println(" ctxswc/S");
 8004018:	4806      	ldr	r0, [pc, #24]	; (8004034 <bmk8_execute.lto_priv.169+0xd4>)
 800401a:	f7fe fdc1 	bl	8002ba0 <test_println>
}
 800401e:	b004      	add	sp, #16
 8004020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004024:	20000d50 	.word	0x20000d50
 8004028:	080040b1 	.word	0x080040b1
 800402c:	20000968 	.word	0x20000968
 8004030:	08007b98 	.word	0x08007b98
 8004034:	08007be0 	.word	0x08007be0
 8004038:	200013f8 	.word	0x200013f8
 800403c:	00000000 	.word	0x00000000

08004040 <bmk6_execute.lto_priv.166>:
 * terminate.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk6_execute(void) {
 8004040:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004042:	4b12      	ldr	r3, [pc, #72]	; (800408c <bmk6_execute.lto_priv.166+0x4c>)
 8004044:	b083      	sub	sp, #12
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004046:	699b      	ldr	r3, [r3, #24]

  uint32_t n = 0;
 8004048:	2400      	movs	r4, #0
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() + 1;
 800404a:	689d      	ldr	r5, [r3, #8]
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL);
 800404c:	4627      	mov	r7, r4
 800404e:	4e10      	ldr	r6, [pc, #64]	; (8004090 <bmk6_execute.lto_priv.166+0x50>)

static void bmk6_execute(void) {

  uint32_t n = 0;
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() + 1;
 8004050:	3501      	adds	r5, #1
  test_wait_tick();
 8004052:	f7fe fce5 	bl	8002a20 <test_wait_tick>
  test_start_timer(1000);
 8004056:	f002 fecb 	bl	8006df0 <test_start_timer.constprop.6>
  do {
    chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL);
 800405a:	4b0e      	ldr	r3, [pc, #56]	; (8004094 <bmk6_execute.lto_priv.166+0x54>)
 800405c:	9700      	str	r7, [sp, #0]
 800405e:	480e      	ldr	r0, [pc, #56]	; (8004098 <bmk6_execute.lto_priv.166+0x58>)
 8004060:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004064:	462a      	mov	r2, r5
 8004066:	f7fc fba3 	bl	80007b0 <chThdCreateStatic>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800406a:	7833      	ldrb	r3, [r6, #0]
  tprio_t prio = chThdGetPriorityX() + 1;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL);
    n++;
 800406c:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0f3      	beq.n	800405a <bmk6_execute.lto_priv.166+0x1a>
  test_print("--- Score : ");
 8004072:	480a      	ldr	r0, [pc, #40]	; (800409c <bmk6_execute.lto_priv.166+0x5c>)
 8004074:	f7fe fdb4 	bl	8002be0 <test_print>
  test_printn(n);
 8004078:	4620      	mov	r0, r4
 800407a:	f7fe fdc1 	bl	8002c00 <test_printn>
  test_println(" threads/S");
 800407e:	4808      	ldr	r0, [pc, #32]	; (80040a0 <bmk6_execute.lto_priv.166+0x60>)
}
 8004080:	b003      	add	sp, #12
 8004082:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n);
  test_println(" threads/S");
 8004086:	f7fe bd8b 	b.w	8002ba0 <test_println>
 800408a:	bf00      	nop
 800408c:	200013f8 	.word	0x200013f8
 8004090:	20001548 	.word	0x20001548
 8004094:	08004a21 	.word	0x08004a21
 8004098:	20000d50 	.word	0x20000d50
 800409c:	08007b98 	.word	0x08007b98
 80040a0:	08007bec 	.word	0x08007bec
	...

080040b0 <thread8>:
 * variable and yields.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static THD_FUNCTION(thread8, p) {
 80040b0:	b538      	push	{r3, r4, r5, lr}
 80040b2:	4604      	mov	r4, r0
 80040b4:	4d08      	ldr	r5, [pc, #32]	; (80040d8 <thread8+0x28>)

  do {
    chThdYield();
 80040b6:	f7fc facb 	bl	8000650 <chThdYield>
    chThdYield();
 80040ba:	f7fc fac9 	bl	8000650 <chThdYield>
    chThdYield();
 80040be:	f7fc fac7 	bl	8000650 <chThdYield>
    chThdYield();
 80040c2:	f7fc fac5 	bl	8000650 <chThdYield>
    (*(uint32_t *)p) += 4;
 80040c6:	6823      	ldr	r3, [r4, #0]
 *
 * @xclass
 */
static inline bool chThdShouldTerminateX(void) {

  return (bool)((chThdGetSelfX()->p_flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 80040c8:	69aa      	ldr	r2, [r5, #24]
 80040ca:	3304      	adds	r3, #4
 80040cc:	6023      	str	r3, [r4, #0]
 80040ce:	7f53      	ldrb	r3, [r2, #29]
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while(!chThdShouldTerminateX());
 80040d0:	075b      	lsls	r3, r3, #29
 80040d2:	d5f0      	bpl.n	80040b6 <thread8+0x6>
}
 80040d4:	bd38      	pop	{r3, r4, r5, pc}
 80040d6:	bf00      	nop
 80040d8:	200013f8 	.word	0x200013f8
 80040dc:	00000000 	.word	0x00000000

080040e0 <bmk7_execute.lto_priv.168>:
static void bmk7_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static void bmk7_execute(void) {
 80040e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80040e4:	4e3a      	ldr	r6, [pc, #232]	; (80041d0 <bmk7_execute.lto_priv.168+0xf0>)
 80040e6:	b083      	sub	sp, #12
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80040e8:	69b3      	ldr	r3, [r6, #24]
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread3, NULL);
 80040ea:	2400      	movs	r4, #0
 80040ec:	689a      	ldr	r2, [r3, #8]
 80040ee:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80040f2:	3205      	adds	r2, #5
 80040f4:	4b37      	ldr	r3, [pc, #220]	; (80041d4 <bmk7_execute.lto_priv.168+0xf4>)
 80040f6:	4838      	ldr	r0, [pc, #224]	; (80041d8 <bmk7_execute.lto_priv.168+0xf8>)
 80040f8:	9400      	str	r4, [sp, #0]
 80040fa:	f7fc fb59 	bl	80007b0 <chThdCreateStatic>
 80040fe:	69b3      	ldr	r3, [r6, #24]
 8004100:	4d36      	ldr	r5, [pc, #216]	; (80041dc <bmk7_execute.lto_priv.168+0xfc>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, thread3, NULL);
 8004102:	689a      	ldr	r2, [r3, #8]
 8004104:	f44f 71a4 	mov.w	r1, #328	; 0x148
}

static void bmk7_execute(void) {
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread3, NULL);
 8004108:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, thread3, NULL);
 800410a:	3204      	adds	r2, #4
 800410c:	4b31      	ldr	r3, [pc, #196]	; (80041d4 <bmk7_execute.lto_priv.168+0xf4>)
 800410e:	9400      	str	r4, [sp, #0]
 8004110:	4833      	ldr	r0, [pc, #204]	; (80041e0 <bmk7_execute.lto_priv.168+0x100>)
 8004112:	f7fc fb4d 	bl	80007b0 <chThdCreateStatic>
 8004116:	69b3      	ldr	r3, [r6, #24]
 8004118:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread3, NULL);
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004120:	3203      	adds	r2, #3
 8004122:	4b2c      	ldr	r3, [pc, #176]	; (80041d4 <bmk7_execute.lto_priv.168+0xf4>)
 8004124:	482f      	ldr	r0, [pc, #188]	; (80041e4 <bmk7_execute.lto_priv.168+0x104>)
 8004126:	9400      	str	r4, [sp, #0]
 8004128:	f7fc fb42 	bl	80007b0 <chThdCreateStatic>
 800412c:	69b3      	ldr	r3, [r6, #24]
 800412e:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, thread3, NULL);
 8004130:	689a      	ldr	r2, [r3, #8]
 8004132:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004136:	3202      	adds	r2, #2
 8004138:	4b26      	ldr	r3, [pc, #152]	; (80041d4 <bmk7_execute.lto_priv.168+0xf4>)
 800413a:	482b      	ldr	r0, [pc, #172]	; (80041e8 <bmk7_execute.lto_priv.168+0x108>)
 800413c:	9400      	str	r4, [sp, #0]
 800413e:	f7fc fb37 	bl	80007b0 <chThdCreateStatic>
 8004142:	69b3      	ldr	r3, [r6, #24]
 8004144:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, thread3, NULL);
 8004146:	689a      	ldr	r2, [r3, #8]
 8004148:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800414c:	3201      	adds	r2, #1
 800414e:	4b21      	ldr	r3, [pc, #132]	; (80041d4 <bmk7_execute.lto_priv.168+0xf4>)
 8004150:	4826      	ldr	r0, [pc, #152]	; (80041ec <bmk7_execute.lto_priv.168+0x10c>)
 8004152:	9400      	str	r4, [sp, #0]
 8004154:	f7fc fb2c 	bl	80007b0 <chThdCreateStatic>
 * @api
 */
void chSemReset(semaphore_t *sp, cnt_t n) {

  chSysLock();
  chSemResetI(sp, n);
 8004158:	46a1      	mov	r9, r4
 800415a:	6128      	str	r0, [r5, #16]

  n = 0;
  test_wait_tick();
 800415c:	f7fe fc60 	bl	8002a20 <test_wait_tick>
  test_start_timer(1000);
 8004160:	f002 fe46 	bl	8006df0 <test_start_timer.constprop.6>
 8004164:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8004200 <bmk7_execute.lto_priv.168+0x120>
 8004168:	2720      	movs	r7, #32
 800416a:	2620      	movs	r6, #32
 800416c:	f387 8811 	msr	BASEPRI, r7
 8004170:	481f      	ldr	r0, [pc, #124]	; (80041f0 <bmk7_execute.lto_priv.168+0x110>)
 8004172:	2100      	movs	r1, #0
 8004174:	f7fc ff14 	bl	8000fa0 <chSemResetI>
 8004178:	2500      	movs	r5, #0
  chSchRescheduleS();
 800417a:	f7fc faa1 	bl	80006c0 <chSchRescheduleS>
 800417e:	f389 8811 	msr	BASEPRI, r9
    chSemReset(&sem1, 0);
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8004182:	f898 3000 	ldrb.w	r3, [r8]
  n = 0;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chSemReset(&sem1, 0);
    n++;
 8004186:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8004188:	2b00      	cmp	r3, #0
 800418a:	d0ee      	beq.n	800416a <bmk7_execute.lto_priv.168+0x8a>
  test_terminate_threads();
 800418c:	f7fe fc70 	bl	8002a70 <test_terminate_threads>
 8004190:	f386 8811 	msr	BASEPRI, r6
 * @api
 */
void chSemReset(semaphore_t *sp, cnt_t n) {

  chSysLock();
  chSemResetI(sp, n);
 8004194:	4816      	ldr	r0, [pc, #88]	; (80041f0 <bmk7_execute.lto_priv.168+0x110>)
 8004196:	4629      	mov	r1, r5
 8004198:	f7fc ff02 	bl	8000fa0 <chSemResetI>
  chSchRescheduleS();
 800419c:	f7fc fa90 	bl	80006c0 <chSchRescheduleS>
 80041a0:	f385 8811 	msr	BASEPRI, r5
  chSemReset(&sem1, 0);
  test_wait_threads();
 80041a4:	f7fe fc4c 	bl	8002a40 <test_wait_threads>

  test_print("--- Score : ");
 80041a8:	4812      	ldr	r0, [pc, #72]	; (80041f4 <bmk7_execute.lto_priv.168+0x114>)
 80041aa:	f7fe fd19 	bl	8002be0 <test_print>
  test_printn(n);
 80041ae:	4620      	mov	r0, r4
 80041b0:	f7fe fd26 	bl	8002c00 <test_printn>
  test_print(" reschedules/S, ");
 80041b4:	4810      	ldr	r0, [pc, #64]	; (80041f8 <bmk7_execute.lto_priv.168+0x118>)
 80041b6:	f7fe fd13 	bl	8002be0 <test_print>
  test_printn(n * 6);
 80041ba:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 80041be:	0040      	lsls	r0, r0, #1
 80041c0:	f7fe fd1e 	bl	8002c00 <test_printn>
  test_println(" ctxswc/S");
 80041c4:	480d      	ldr	r0, [pc, #52]	; (80041fc <bmk7_execute.lto_priv.168+0x11c>)
}
 80041c6:	b003      	add	sp, #12
 80041c8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}

  test_print("--- Score : ");
  test_printn(n);
  test_print(" reschedules/S, ");
  test_printn(n * 6);
  test_println(" ctxswc/S");
 80041cc:	f7fe bce8 	b.w	8002ba0 <test_println>
 80041d0:	200013f8 	.word	0x200013f8
 80041d4:	08003e01 	.word	0x08003e01
 80041d8:	20000d50 	.word	0x20000d50
 80041dc:	20000968 	.word	0x20000968
 80041e0:	20000e98 	.word	0x20000e98
 80041e4:	20000fe0 	.word	0x20000fe0
 80041e8:	20001128 	.word	0x20001128
 80041ec:	20001270 	.word	0x20001270
 80041f0:	2000095c 	.word	0x2000095c
 80041f4:	08007b98 	.word	0x08007b98
 80041f8:	08007bf8 	.word	0x08007bf8
 80041fc:	08007be0 	.word	0x08007be0
 8004200:	20001548 	.word	0x20001548
	...

08004210 <bmk5_execute.lto_priv.165>:
 * in each iteration.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk5_execute(void) {
 8004210:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004212:	4b13      	ldr	r3, [pc, #76]	; (8004260 <bmk5_execute.lto_priv.165+0x50>)
 8004214:	b083      	sub	sp, #12
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004216:	699b      	ldr	r3, [r3, #24]

  uint32_t n = 0;
 8004218:	2400      	movs	r4, #0
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() - 1;
 800421a:	689d      	ldr	r5, [r3, #8]
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdWait(chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL));
 800421c:	4627      	mov	r7, r4
 800421e:	4e11      	ldr	r6, [pc, #68]	; (8004264 <bmk5_execute.lto_priv.165+0x54>)

static void bmk5_execute(void) {

  uint32_t n = 0;
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() - 1;
 8004220:	3d01      	subs	r5, #1
  test_wait_tick();
 8004222:	f7fe fbfd 	bl	8002a20 <test_wait_tick>
  test_start_timer(1000);
 8004226:	f002 fde3 	bl	8006df0 <test_start_timer.constprop.6>
  do {
    chThdWait(chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL));
 800422a:	4b0f      	ldr	r3, [pc, #60]	; (8004268 <bmk5_execute.lto_priv.165+0x58>)
 800422c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004230:	462a      	mov	r2, r5
 8004232:	9700      	str	r7, [sp, #0]
 8004234:	480d      	ldr	r0, [pc, #52]	; (800426c <bmk5_execute.lto_priv.165+0x5c>)
 8004236:	f7fc fabb 	bl	80007b0 <chThdCreateStatic>
 800423a:	f7fc fde9 	bl	8000e10 <chThdWait>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800423e:	7833      	ldrb	r3, [r6, #0]
  tprio_t prio = chThdGetPriorityX() - 1;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdWait(chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL));
    n++;
 8004240:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8004242:	2b00      	cmp	r3, #0
 8004244:	d0f1      	beq.n	800422a <bmk5_execute.lto_priv.165+0x1a>
  test_print("--- Score : ");
 8004246:	480a      	ldr	r0, [pc, #40]	; (8004270 <bmk5_execute.lto_priv.165+0x60>)
 8004248:	f7fe fcca 	bl	8002be0 <test_print>
  test_printn(n);
 800424c:	4620      	mov	r0, r4
 800424e:	f7fe fcd7 	bl	8002c00 <test_printn>
  test_println(" threads/S");
 8004252:	4808      	ldr	r0, [pc, #32]	; (8004274 <bmk5_execute.lto_priv.165+0x64>)
}
 8004254:	b003      	add	sp, #12
 8004256:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n);
  test_println(" threads/S");
 800425a:	f7fe bca1 	b.w	8002ba0 <test_println>
 800425e:	bf00      	nop
 8004260:	200013f8 	.word	0x200013f8
 8004264:	20001548 	.word	0x20001548
 8004268:	08004a21 	.word	0x08004a21
 800426c:	20000d50 	.word	0x20000d50
 8004270:	08007b98 	.word	0x08007b98
 8004274:	08007bec 	.word	0x08007bec
	...

08004280 <bmk4_execute.lto_priv.164>:
    msg = self->p_u.rdymsg;
  } while (msg == MSG_OK);
  chSysUnlock();
}

static void bmk4_execute(void) {
 8004280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004284:	4b25      	ldr	r3, [pc, #148]	; (800431c <bmk4_execute.lto_priv.164+0x9c>)
 8004286:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004288:	699b      	ldr	r3, [r3, #24]
  thread_t *tp;
  uint32_t n;

  tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 800428a:	2500      	movs	r5, #0
 800428c:	689a      	ldr	r2, [r3, #8]
 800428e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004292:	3201      	adds	r2, #1
 8004294:	4b22      	ldr	r3, [pc, #136]	; (8004320 <bmk4_execute.lto_priv.164+0xa0>)
 8004296:	4823      	ldr	r0, [pc, #140]	; (8004324 <bmk4_execute.lto_priv.164+0xa4>)
 8004298:	9500      	str	r5, [sp, #0]
 800429a:	f7fc fa89 	bl	80007b0 <chThdCreateStatic>
 800429e:	4b22      	ldr	r3, [pc, #136]	; (8004328 <bmk4_execute.lto_priv.164+0xa8>)
 80042a0:	4604      	mov	r4, r0
 80042a2:	6018      	str	r0, [r3, #0]
  n = 0;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chSysLock();
    chSchWakeupS(tp, MSG_OK);
 80042a4:	46aa      	mov	sl, r5
  uint32_t n;

  tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
                                      thread4, NULL);
  n = 0;
  test_wait_tick();
 80042a6:	f7fe fbbb 	bl	8002a20 <test_wait_tick>
  test_start_timer(1000);
 80042aa:	f002 fda1 	bl	8006df0 <test_start_timer.constprop.6>
 80042ae:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8004334 <bmk4_execute.lto_priv.164+0xb4>
 80042b2:	f04f 0820 	mov.w	r8, #32
 80042b6:	2720      	movs	r7, #32
 80042b8:	f388 8811 	msr	BASEPRI, r8
  do {
    chSysLock();
    chSchWakeupS(tp, MSG_OK);
 80042bc:	2100      	movs	r1, #0
 80042be:	4620      	mov	r0, r4
 80042c0:	f7fc fa26 	bl	8000710 <chSchWakeupS>
    chSchWakeupS(tp, MSG_OK);
 80042c4:	4620      	mov	r0, r4
 80042c6:	2100      	movs	r1, #0
 80042c8:	f7fc fa22 	bl	8000710 <chSchWakeupS>
    chSchWakeupS(tp, MSG_OK);
 80042cc:	4620      	mov	r0, r4
 80042ce:	2100      	movs	r1, #0
 80042d0:	f7fc fa1e 	bl	8000710 <chSchWakeupS>
    chSchWakeupS(tp, MSG_OK);
 80042d4:	4620      	mov	r0, r4
 80042d6:	2100      	movs	r1, #0
 80042d8:	f7fc fa1a 	bl	8000710 <chSchWakeupS>
 80042dc:	2600      	movs	r6, #0
 80042de:	f38a 8811 	msr	BASEPRI, sl
    chSysUnlock();
    n += 4;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80042e2:	f899 3000 	ldrb.w	r3, [r9]
    chSchWakeupS(tp, MSG_OK);
    chSchWakeupS(tp, MSG_OK);
    chSchWakeupS(tp, MSG_OK);
    chSchWakeupS(tp, MSG_OK);
    chSysUnlock();
    n += 4;
 80042e6:	3504      	adds	r5, #4
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d0e4      	beq.n	80042b6 <bmk4_execute.lto_priv.164+0x36>
 80042ec:	f387 8811 	msr	BASEPRI, r7
  chSysLock();
  chSchWakeupS(tp, MSG_TIMEOUT);
 80042f0:	f04f 31ff 	mov.w	r1, #4294967295
 80042f4:	4620      	mov	r0, r4
 80042f6:	f7fc fa0b 	bl	8000710 <chSchWakeupS>
 80042fa:	f386 8811 	msr	BASEPRI, r6
  chSysUnlock();

  test_wait_threads();
 80042fe:	f7fe fb9f 	bl	8002a40 <test_wait_threads>
  test_print("--- Score : ");
 8004302:	480a      	ldr	r0, [pc, #40]	; (800432c <bmk4_execute.lto_priv.164+0xac>)
 8004304:	f7fe fc6c 	bl	8002be0 <test_print>
  test_printn(n * 2);
 8004308:	0068      	lsls	r0, r5, #1
 800430a:	f7fe fc79 	bl	8002c00 <test_printn>
  test_println(" ctxswc/S");
 800430e:	4808      	ldr	r0, [pc, #32]	; (8004330 <bmk4_execute.lto_priv.164+0xb0>)
}
 8004310:	b002      	add	sp, #8
 8004312:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  chSysUnlock();

  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n * 2);
  test_println(" ctxswc/S");
 8004316:	f7fe bc43 	b.w	8002ba0 <test_println>
 800431a:	bf00      	nop
 800431c:	200013f8 	.word	0x200013f8
 8004320:	08004341 	.word	0x08004341
 8004324:	20000d50 	.word	0x20000d50
 8004328:	20000968 	.word	0x20000968
 800432c:	08007b98 	.word	0x08007b98
 8004330:	08007be0 	.word	0x08007be0
 8004334:	20001548 	.word	0x20001548
	...

08004340 <thread4>:
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004340:	4a07      	ldr	r2, [pc, #28]	; (8004360 <thread4+0x20>)
 * the thread is awakened as fast is possible by the tester thread.<br>
 * The Context Switch performance is calculated by measuring the number of
 * iterations after a second of continuous operations.
 */

static THD_FUNCTION(thread4, p) {
 8004342:	b510      	push	{r4, lr}
 8004344:	2320      	movs	r3, #32
 8004346:	6994      	ldr	r4, [r2, #24]
 8004348:	f383 8811 	msr	BASEPRI, r3
  thread_t *self = chThdGetSelfX();

  (void)p;
  chSysLock();
  do {
    chSchGoSleepS(CH_STATE_SUSPENDED);
 800434c:	2003      	movs	r0, #3
 800434e:	f7fc fa6f 	bl	8000830 <chSchGoSleepS>
    msg = self->p_u.rdymsg;
  } while (msg == MSG_OK);
 8004352:	6a23      	ldr	r3, [r4, #32]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d0f9      	beq.n	800434c <thread4+0xc>
 8004358:	2300      	movs	r3, #0
 800435a:	f383 8811 	msr	BASEPRI, r3
 800435e:	bd10      	pop	{r4, pc}
 8004360:	200013f8 	.word	0x200013f8
	...

08004370 <thread2>:

  chThdExit((msg_t)p);
}

#if CH_CFG_USE_MESSAGES || defined(__DOXYGEN__)
static THD_FUNCTION(thread2, p) {
 8004370:	b570      	push	{r4, r5, r6, lr}
 8004372:	2620      	movs	r6, #32
 8004374:	2500      	movs	r5, #0
  thread_t *tp;
  msg_t msg;

  (void)p;
  do {
    tp = chMsgWait();
 8004376:	f7fc fa73 	bl	8000860 <chMsgWait>
 800437a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800437c:	f386 8811 	msr	BASEPRI, r6
 8004380:	4621      	mov	r1, r4
 8004382:	f7fc f9c5 	bl	8000710 <chSchWakeupS>
 8004386:	f385 8811 	msr	BASEPRI, r5
    msg = chMsgGet(tp);
    chMsgRelease(tp, msg);
  } while (msg);
 800438a:	2c00      	cmp	r4, #0
 800438c:	d1f3      	bne.n	8004376 <thread2+0x6>
}
 800438e:	bd70      	pop	{r4, r5, r6, pc}

08004390 <msg_loop_test>:

#ifdef __GNUC__
__attribute__((noinline))
#endif
static unsigned int msg_loop_test(thread_t *tp) {
 8004390:	b570      	push	{r4, r5, r6, lr}
 8004392:	4605      	mov	r5, r0

  uint32_t n = 0;
  test_wait_tick();
 8004394:	f7fe fb44 	bl	8002a20 <test_wait_tick>
  test_start_timer(1000);
 8004398:	f002 fd2a 	bl	8006df0 <test_start_timer.constprop.6>
 800439c:	4e07      	ldr	r6, [pc, #28]	; (80043bc <msg_loop_test+0x2c>)
#ifdef __GNUC__
__attribute__((noinline))
#endif
static unsigned int msg_loop_test(thread_t *tp) {

  uint32_t n = 0;
 800439e:	2400      	movs	r4, #0
  test_wait_tick();
  test_start_timer(1000);
  do {
    (void)chMsgSend(tp, 1);
 80043a0:	4628      	mov	r0, r5
 80043a2:	2101      	movs	r1, #1
 80043a4:	f7fc fb14 	bl	80009d0 <chMsgSend>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80043a8:	7833      	ldrb	r3, [r6, #0]
  uint32_t n = 0;
  test_wait_tick();
  test_start_timer(1000);
  do {
    (void)chMsgSend(tp, 1);
    n++;
 80043aa:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d0f7      	beq.n	80043a0 <msg_loop_test+0x10>
  (void)chMsgSend(tp, 0);
 80043b0:	4628      	mov	r0, r5
 80043b2:	2100      	movs	r1, #0
 80043b4:	f7fc fb0c 	bl	80009d0 <chMsgSend>
  return n;
}
 80043b8:	4620      	mov	r0, r4
 80043ba:	bd70      	pop	{r4, r5, r6, pc}
 80043bc:	20001548 	.word	0x20001548

080043c0 <bmk3_execute.lto_priv.163>:
 * thread, four lower priority threads crowd the ready list, the messages
 * throughput per second is measured while the ready list and the result
 * printed in the output log.
 */

static void bmk3_execute(void) {
 80043c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043c4:	4f2c      	ldr	r7, [pc, #176]	; (8004478 <bmk3_execute.lto_priv.163+0xb8>)
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 80043c6:	4e2d      	ldr	r6, [pc, #180]	; (800447c <bmk3_execute.lto_priv.163+0xbc>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80043c8:	69bb      	ldr	r3, [r7, #24]
 * thread, four lower priority threads crowd the ready list, the messages
 * throughput per second is measured while the ready list and the result
 * printed in the output log.
 */

static void bmk3_execute(void) {
 80043ca:	b082      	sub	sp, #8
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 80043cc:	689a      	ldr	r2, [r3, #8]
 80043ce:	2500      	movs	r5, #0
 80043d0:	4630      	mov	r0, r6
 80043d2:	3201      	adds	r2, #1
 80043d4:	9500      	str	r5, [sp, #0]
 80043d6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80043da:	4b29      	ldr	r3, [pc, #164]	; (8004480 <bmk3_execute.lto_priv.163+0xc0>)
 80043dc:	f7fc f9e8 	bl	80007b0 <chThdCreateStatic>
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	4c28      	ldr	r4, [pc, #160]	; (8004484 <bmk3_execute.lto_priv.163+0xc4>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
 80043e4:	689a      	ldr	r2, [r3, #8]
 80043e6:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8004494 <bmk3_execute.lto_priv.163+0xd4>
 */

static void bmk3_execute(void) {
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 80043ea:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
 80043ec:	4643      	mov	r3, r8
 80043ee:	3a02      	subs	r2, #2
 80043f0:	9500      	str	r5, [sp, #0]
 80043f2:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 80043f6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80043fa:	f7fc f9d9 	bl	80007b0 <chThdCreateStatic>
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread1, NULL);
 8004402:	689a      	ldr	r2, [r3, #8]
 8004404:	f506 7024 	add.w	r0, r6, #656	; 0x290
 8004408:	4643      	mov	r3, r8
 800440a:	3a03      	subs	r2, #3
 800440c:	9500      	str	r5, [sp, #0]
 800440e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004412:	f7fc f9cd 	bl	80007b0 <chThdCreateStatic>
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, thread1, NULL);
 800441a:	689a      	ldr	r2, [r3, #8]
 800441c:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 8004420:	4643      	mov	r3, r8
 8004422:	3a04      	subs	r2, #4
 8004424:	9500      	str	r5, [sp, #0]
 8004426:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800442a:	f7fc f9c1 	bl	80007b0 <chThdCreateStatic>
 800442e:	69bb      	ldr	r3, [r7, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, thread1, NULL);
 8004430:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004434:	689a      	ldr	r2, [r3, #8]
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread1, NULL);
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, thread1, NULL);
 8004436:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, thread1, NULL);
 8004438:	3a05      	subs	r2, #5
 800443a:	4643      	mov	r3, r8
 800443c:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 8004440:	9500      	str	r5, [sp, #0]
 8004442:	f7fc f9b5 	bl	80007b0 <chThdCreateStatic>
 8004446:	6120      	str	r0, [r4, #16]
  n = msg_loop_test(threads[0]);
 8004448:	6820      	ldr	r0, [r4, #0]
 800444a:	f7ff ffa1 	bl	8004390 <msg_loop_test>
 800444e:	4604      	mov	r4, r0
  test_wait_threads();
 8004450:	f7fe faf6 	bl	8002a40 <test_wait_threads>
  test_print("--- Score : ");
 8004454:	480c      	ldr	r0, [pc, #48]	; (8004488 <bmk3_execute.lto_priv.163+0xc8>)
 8004456:	f7fe fbc3 	bl	8002be0 <test_print>
  test_printn(n);
 800445a:	4620      	mov	r0, r4
 800445c:	f7fe fbd0 	bl	8002c00 <test_printn>
  test_print(" msgs/S, ");
 8004460:	480a      	ldr	r0, [pc, #40]	; (800448c <bmk3_execute.lto_priv.163+0xcc>)
 8004462:	f7fe fbbd 	bl	8002be0 <test_print>
  test_printn(n << 1);
 8004466:	0060      	lsls	r0, r4, #1
 8004468:	f7fe fbca 	bl	8002c00 <test_printn>
  test_println(" ctxswc/S");
 800446c:	4808      	ldr	r0, [pc, #32]	; (8004490 <bmk3_execute.lto_priv.163+0xd0>)
}
 800446e:	b002      	add	sp, #8
 8004470:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n);
  test_print(" msgs/S, ");
  test_printn(n << 1);
  test_println(" ctxswc/S");
 8004474:	f7fe bb94 	b.w	8002ba0 <test_println>
 8004478:	200013f8 	.word	0x200013f8
 800447c:	20000d50 	.word	0x20000d50
 8004480:	08004371 	.word	0x08004371
 8004484:	20000968 	.word	0x20000968
 8004488:	08007b98 	.word	0x08007b98
 800448c:	08007c0c 	.word	0x08007c0c
 8004490:	08007be0 	.word	0x08007be0
 8004494:	08004a21 	.word	0x08004a21
	...

080044a0 <bmk2_execute.lto_priv.162>:
 * A message server thread is created with an higher priority than the client
 * thread, the messages throughput per second is measured and the result
 * printed in the output log.
 */

static void bmk2_execute(void) {
 80044a0:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80044a2:	4a13      	ldr	r2, [pc, #76]	; (80044f0 <bmk2_execute.lto_priv.162+0x50>)
 80044a4:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80044a6:	6992      	ldr	r2, [r2, #24]
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 80044a8:	2300      	movs	r3, #0
 80044aa:	6892      	ldr	r2, [r2, #8]
 80044ac:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80044b0:	3201      	adds	r2, #1
 80044b2:	9300      	str	r3, [sp, #0]
 80044b4:	480f      	ldr	r0, [pc, #60]	; (80044f4 <bmk2_execute.lto_priv.162+0x54>)
 80044b6:	4b10      	ldr	r3, [pc, #64]	; (80044f8 <bmk2_execute.lto_priv.162+0x58>)
 80044b8:	f7fc f97a 	bl	80007b0 <chThdCreateStatic>
 80044bc:	4b0f      	ldr	r3, [pc, #60]	; (80044fc <bmk2_execute.lto_priv.162+0x5c>)
 80044be:	6018      	str	r0, [r3, #0]
  n = msg_loop_test(threads[0]);
 80044c0:	f7ff ff66 	bl	8004390 <msg_loop_test>
 80044c4:	4604      	mov	r4, r0
  test_wait_threads();
 80044c6:	f7fe fabb 	bl	8002a40 <test_wait_threads>
  test_print("--- Score : ");
 80044ca:	480d      	ldr	r0, [pc, #52]	; (8004500 <bmk2_execute.lto_priv.162+0x60>)
 80044cc:	f7fe fb88 	bl	8002be0 <test_print>
  test_printn(n);
 80044d0:	4620      	mov	r0, r4
 80044d2:	f7fe fb95 	bl	8002c00 <test_printn>
  test_print(" msgs/S, ");
 80044d6:	480b      	ldr	r0, [pc, #44]	; (8004504 <bmk2_execute.lto_priv.162+0x64>)
 80044d8:	f7fe fb82 	bl	8002be0 <test_print>
  test_printn(n << 1);
 80044dc:	0060      	lsls	r0, r4, #1
 80044de:	f7fe fb8f 	bl	8002c00 <test_printn>
  test_println(" ctxswc/S");
 80044e2:	4809      	ldr	r0, [pc, #36]	; (8004508 <bmk2_execute.lto_priv.162+0x68>)
}
 80044e4:	b002      	add	sp, #8
 80044e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n);
  test_print(" msgs/S, ");
  test_printn(n << 1);
  test_println(" ctxswc/S");
 80044ea:	f7fe bb59 	b.w	8002ba0 <test_println>
 80044ee:	bf00      	nop
 80044f0:	200013f8 	.word	0x200013f8
 80044f4:	20000d50 	.word	0x20000d50
 80044f8:	08004371 	.word	0x08004371
 80044fc:	20000968 	.word	0x20000968
 8004500:	08007b98 	.word	0x08007b98
 8004504:	08007c0c 	.word	0x08007c0c
 8004508:	08007be0 	.word	0x08007be0
 800450c:	00000000 	.word	0x00000000

08004510 <bmk1_execute.lto_priv.161>:
 * A message server thread is created with a lower priority than the client
 * thread, the messages throughput per second is measured and the result
 * printed in the output log.
 */

static void bmk1_execute(void) {
 8004510:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004512:	4a13      	ldr	r2, [pc, #76]	; (8004560 <bmk1_execute.lto_priv.161+0x50>)
 8004514:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004516:	6992      	ldr	r2, [r2, #24]
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread2, NULL);
 8004518:	2300      	movs	r3, #0
 800451a:	6892      	ldr	r2, [r2, #8]
 800451c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004520:	3a01      	subs	r2, #1
 8004522:	9300      	str	r3, [sp, #0]
 8004524:	480f      	ldr	r0, [pc, #60]	; (8004564 <bmk1_execute.lto_priv.161+0x54>)
 8004526:	4b10      	ldr	r3, [pc, #64]	; (8004568 <bmk1_execute.lto_priv.161+0x58>)
 8004528:	f7fc f942 	bl	80007b0 <chThdCreateStatic>
 800452c:	4b0f      	ldr	r3, [pc, #60]	; (800456c <bmk1_execute.lto_priv.161+0x5c>)
 800452e:	6018      	str	r0, [r3, #0]
  n = msg_loop_test(threads[0]);
 8004530:	f7ff ff2e 	bl	8004390 <msg_loop_test>
 8004534:	4604      	mov	r4, r0
  test_wait_threads();
 8004536:	f7fe fa83 	bl	8002a40 <test_wait_threads>
  test_print("--- Score : ");
 800453a:	480d      	ldr	r0, [pc, #52]	; (8004570 <bmk1_execute.lto_priv.161+0x60>)
 800453c:	f7fe fb50 	bl	8002be0 <test_print>
  test_printn(n);
 8004540:	4620      	mov	r0, r4
 8004542:	f7fe fb5d 	bl	8002c00 <test_printn>
  test_print(" msgs/S, ");
 8004546:	480b      	ldr	r0, [pc, #44]	; (8004574 <bmk1_execute.lto_priv.161+0x64>)
 8004548:	f7fe fb4a 	bl	8002be0 <test_print>
  test_printn(n << 1);
 800454c:	0060      	lsls	r0, r4, #1
 800454e:	f7fe fb57 	bl	8002c00 <test_printn>
  test_println(" ctxswc/S");
 8004552:	4809      	ldr	r0, [pc, #36]	; (8004578 <bmk1_execute.lto_priv.161+0x68>)
}
 8004554:	b002      	add	sp, #8
 8004556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n);
  test_print(" msgs/S, ");
  test_printn(n << 1);
  test_println(" ctxswc/S");
 800455a:	f7fe bb21 	b.w	8002ba0 <test_println>
 800455e:	bf00      	nop
 8004560:	200013f8 	.word	0x200013f8
 8004564:	20000d50 	.word	0x20000d50
 8004568:	08004371 	.word	0x08004371
 800456c:	20000968 	.word	0x20000968
 8004570:	08007b98 	.word	0x08007b98
 8004574:	08007c0c 	.word	0x08007c0c
 8004578:	08007be0 	.word	0x08007be0
 800457c:	00000000 	.word	0x00000000

08004580 <sys3_execute.lto_priv.114>:
 * <h2>Description</h2>
 * The chSysIntegrityCheckI() API is invoked in order to asses the state of the
 * system data structures.
 */

static void sys3_execute(void) {
 8004580:	b538      	push	{r3, r4, r5, lr}
 8004582:	2420      	movs	r4, #32
 8004584:	f384 8811 	msr	BASEPRI, r4
  bool result;

  chSysLock();
  result = chSysIntegrityCheckI(CH_INTEGRITY_RLIST);
 8004588:	2001      	movs	r0, #1
 800458a:	f7fc ff61 	bl	8001450 <chSysIntegrityCheckI>
 800458e:	2300      	movs	r3, #0
 8004590:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  test_assert(1, result == false, "ready list check failed");
 8004594:	f080 0101 	eor.w	r1, r0, #1
 8004598:	b2c9      	uxtb	r1, r1
 800459a:	2001      	movs	r0, #1
 800459c:	f7fe fad0 	bl	8002b40 <_test_assert>
 80045a0:	4605      	mov	r5, r0
 80045a2:	b100      	cbz	r0, 80045a6 <sys3_execute.lto_priv.114+0x26>
 80045a4:	bd38      	pop	{r3, r4, r5, pc}
 80045a6:	f384 8811 	msr	BASEPRI, r4

  chSysLock();
  result = chSysIntegrityCheckI(CH_INTEGRITY_VTLIST);
 80045aa:	2002      	movs	r0, #2
 80045ac:	f7fc ff50 	bl	8001450 <chSysIntegrityCheckI>
 80045b0:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_assert(2, result == false, "virtual timers list check failed");
 80045b4:	f080 0101 	eor.w	r1, r0, #1
 80045b8:	b2c9      	uxtb	r1, r1
 80045ba:	2002      	movs	r0, #2
 80045bc:	f7fe fac0 	bl	8002b40 <_test_assert>
 80045c0:	4605      	mov	r5, r0
 80045c2:	2800      	cmp	r0, #0
 80045c4:	d1ee      	bne.n	80045a4 <sys3_execute.lto_priv.114+0x24>
 80045c6:	f384 8811 	msr	BASEPRI, r4

  chSysLock();
  result = chSysIntegrityCheckI(CH_INTEGRITY_REGISTRY);
 80045ca:	2004      	movs	r0, #4
 80045cc:	f7fc ff40 	bl	8001450 <chSysIntegrityCheckI>
 80045d0:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_assert(3, result == false, "registry list check failed");
 80045d4:	f080 0101 	eor.w	r1, r0, #1
 80045d8:	b2c9      	uxtb	r1, r1
 80045da:	2003      	movs	r0, #3
 80045dc:	f7fe fab0 	bl	8002b40 <_test_assert>
 80045e0:	4605      	mov	r5, r0
 80045e2:	2800      	cmp	r0, #0
 80045e4:	d1de      	bne.n	80045a4 <sys3_execute.lto_priv.114+0x24>
 80045e6:	f384 8811 	msr	BASEPRI, r4

  chSysLock();
  result = chSysIntegrityCheckI(CH_INTEGRITY_PORT);
 80045ea:	2008      	movs	r0, #8
 80045ec:	f7fc ff30 	bl	8001450 <chSysIntegrityCheckI>
 80045f0:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_assert(4, result == false, "port layer check failed");
}
 80045f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  test_assert(3, result == false, "registry list check failed");

  chSysLock();
  result = chSysIntegrityCheckI(CH_INTEGRITY_PORT);
  chSysUnlock();
  test_assert(4, result == false, "port layer check failed");
 80045f8:	f080 0101 	eor.w	r1, r0, #1
 80045fc:	b2c9      	uxtb	r1, r1
 80045fe:	2004      	movs	r0, #4
 8004600:	f7fe ba9e 	b.w	8002b40 <_test_assert>
	...

08004610 <sys1_execute.lto_priv.112>:
  sts = chSysGetStatusAndLockX();
  chSysRestoreStatusX(sts);
  chSysUnlockFromISR();
}

static void sys1_execute(void) {
 8004610:	b510      	push	{r4, lr}
 8004612:	b086      	sub	sp, #24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004614:	f3ef 8311 	mrs	r3, BASEPRI
 * @xclass
 */
syssts_t chSysGetStatusAndLockX(void) {

  syssts_t sts = port_get_irq_status();
  if (port_irq_enabled(sts)) {
 8004618:	b91b      	cbnz	r3, 8004622 <sys1_execute.lto_priv.112+0x12>
 800461a:	f7fc ff09 	bl	8001430 <chSysGetStatusAndLockX.part.2.lto_priv.100>
 800461e:	f7fc fef7 	bl	8001410 <chSysRestoreStatusX.part.3.lto_priv.99>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8004622:	2320      	movs	r3, #32
 8004624:	f383 8811 	msr	BASEPRI, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004628:	f3ef 8311 	mrs	r3, BASEPRI
 800462c:	b91b      	cbnz	r3, 8004636 <sys1_execute.lto_priv.112+0x26>
 800462e:	f7fc feff 	bl	8001430 <chSysGetStatusAndLockX.part.2.lto_priv.100>
 8004632:	f7fc feed 	bl	8001410 <chSysRestoreStatusX.part.3.lto_priv.99>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8004636:	2300      	movs	r3, #0
 8004638:	f383 8811 	msr	BASEPRI, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800463c:	f3ef 8311 	mrs	r3, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalLock(void) {

  if (port_irq_enabled(port_get_irq_status())) {
 8004640:	b913      	cbnz	r3, 8004648 <sys1_execute.lto_priv.112+0x38>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8004642:	2320      	movs	r3, #32
 8004644:	f383 8811 	msr	BASEPRI, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004648:	f3ef 8311 	mrs	r3, BASEPRI
 800464c:	b913      	cbnz	r3, 8004654 <sys1_execute.lto_priv.112+0x44>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800464e:	2320      	movs	r3, #32
 8004650:	f383 8811 	msr	BASEPRI, r3
 8004654:	2300      	movs	r3, #0
 8004656:	f383 8811 	msr	BASEPRI, r3
 800465a:	2220      	movs	r2, #32
 800465c:	f382 8811 	msr	BASEPRI, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004660:	f3ef 8211 	mrs	r2, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalUnlock(void) {

  if (!port_irq_enabled(port_get_irq_status())) {
 8004664:	b10a      	cbz	r2, 800466a <sys1_execute.lto_priv.112+0x5a>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8004666:	f383 8811 	msr	BASEPRI, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800466a:	f3ef 8311 	mrs	r3, BASEPRI
 800466e:	b113      	cbz	r3, 8004676 <sys1_execute.lto_priv.112+0x66>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8004670:	2300      	movs	r3, #0
 8004672:	f383 8811 	msr	BASEPRI, r3
 *
 * @init
 */
static inline void chVTObjectInit(virtual_timer_t *vtp) {

  vtp->vt_func = NULL;
 8004676:	2300      	movs	r3, #0
 8004678:	9304      	str	r3, [sp, #16]
 800467a:	2320      	movs	r3, #32
 800467c:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 8004680:	9b04      	ldr	r3, [sp, #16]
    chVTDoResetI(vtp);
 8004682:	ac01      	add	r4, sp, #4
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 8004684:	b113      	cbz	r3, 800468c <sys1_execute.lto_priv.112+0x7c>
    chVTDoResetI(vtp);
 8004686:	4620      	mov	r0, r4
 8004688:	f7fc fce2 	bl	8001050 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, systime_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 800468c:	4620      	mov	r0, r4
 800468e:	2101      	movs	r1, #1
 8004690:	4a0b      	ldr	r2, [pc, #44]	; (80046c0 <sys1_execute.lto_priv.112+0xb0>)
 8004692:	2300      	movs	r3, #0
 8004694:	f7fc fd1c 	bl	80010d0 <chVTDoSetI>
 8004698:	2400      	movs	r4, #0
 800469a:	f384 8811 	msr	BASEPRI, r4
  chSysUnconditionalUnlock();

  /*/Testing from ISR context using a virtual timer.*/
  chVTObjectInit(&vt);
  chVTSet(&vt, 1, vtcb, NULL);
  chThdSleep(10);
 800469e:	200a      	movs	r0, #10
 80046a0:	f7fc fea6 	bl	80013f0 <chThdSleep>
 80046a4:	2320      	movs	r3, #32
 80046a6:	f383 8811 	msr	BASEPRI, r3
 80046aa:	9904      	ldr	r1, [sp, #16]
 80046ac:	f384 8811 	msr	BASEPRI, r4

  test_assert(1, chVTIsArmed(&vt) == false, "timer still armed");
 80046b0:	fab1 f181 	clz	r1, r1
 80046b4:	2001      	movs	r0, #1
 80046b6:	0949      	lsrs	r1, r1, #5
 80046b8:	f7fe fa42 	bl	8002b40 <_test_assert>
}
 80046bc:	b006      	add	sp, #24
 80046be:	bd10      	pop	{r4, pc}
 80046c0:	080046d1 	.word	0x080046d1
	...

080046d0 <vtcb>:
 *
 * <h2>Description</h2>
 * The critical zones API is invoked for coverage.
 */

static void vtcb(void *p) {
 80046d0:	b508      	push	{r3, lr}
 80046d2:	2320      	movs	r3, #32
 80046d4:	f383 8811 	msr	BASEPRI, r3
 80046d8:	2200      	movs	r2, #0
 80046da:	f382 8811 	msr	BASEPRI, r2
 80046de:	f383 8811 	msr	BASEPRI, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80046e2:	f3ef 8311 	mrs	r3, BASEPRI
 80046e6:	b91b      	cbnz	r3, 80046f0 <vtcb+0x20>
 80046e8:	f7fc fea2 	bl	8001430 <chSysGetStatusAndLockX.part.2.lto_priv.100>
 80046ec:	f7fc fe90 	bl	8001410 <chSysRestoreStatusX.part.3.lto_priv.99>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80046f0:	2300      	movs	r3, #0
 80046f2:	f383 8811 	msr	BASEPRI, r3
 80046f6:	bd08      	pop	{r3, pc}
	...

08004700 <chprintf>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8004700:	b40e      	push	{r1, r2, r3}
 8004702:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	aa0f      	add	r2, sp, #60	; 0x3c
 800470a:	f852 9b04 	ldr.w	r9, [r2], #4
 800470e:	4682      	mov	sl, r0
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 8004710:	46cb      	mov	fp, r9
 8004712:	4615      	mov	r5, r2
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8004714:	9202      	str	r2, [sp, #8]
 8004716:	f10d 030d 	add.w	r3, sp, #13
 800471a:	aa03      	add	r2, sp, #12
 800471c:	1a9b      	subs	r3, r3, r2
 800471e:	9301      	str	r3, [sp, #4]
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 8004720:	f04f 0800 	mov.w	r8, #0
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8004724:	f89b 1000 	ldrb.w	r1, [fp]
 8004728:	f10b 0301 	add.w	r3, fp, #1
    if (c == 0)
 800472c:	b179      	cbz	r1, 800474e <chprintf+0x4e>
      return n;
    if (c != '%') {
 800472e:	2925      	cmp	r1, #37	; 0x25
 8004730:	d013      	beq.n	800475a <chprintf+0x5a>
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8004732:	469b      	mov	fp, r3
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
 8004734:	f8da 2000 	ldr.w	r2, [sl]
 8004738:	4650      	mov	r0, sl
 800473a:	6892      	ldr	r2, [r2, #8]
 800473c:	4790      	blx	r2
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 800473e:	f89b 1000 	ldrb.w	r1, [fp]
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
      n++;
 8004742:	f108 0801 	add.w	r8, r8, #1
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8004746:	f10b 0301 	add.w	r3, fp, #1
    if (c == 0)
 800474a:	2900      	cmp	r1, #0
 800474c:	d1ef      	bne.n	800472e <chprintf+0x2e>
  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 800474e:	4640      	mov	r0, r8
 8004750:	b006      	add	sp, #24
 8004752:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004756:	b003      	add	sp, #12
 8004758:	4770      	bx	lr
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 800475a:	f89b 2001 	ldrb.w	r2, [fp, #1]
    filler = ' ';
    if (*fmt == '0') {
      fmt++;
      filler = '0';
    }
    width = 0;
 800475e:	2600      	movs	r6, #0
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 8004760:	2a2d      	cmp	r2, #45	; 0x2d
 8004762:	bf03      	ittte	eq
 8004764:	f89b 2002 	ldrbeq.w	r2, [fp, #2]
      fmt++;
 8004768:	f10b 0302 	addeq.w	r3, fp, #2
      left_align = TRUE;
 800476c:	f04f 0901 	moveq.w	r9, #1
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
 8004770:	f04f 0900 	movne.w	r9, #0
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
 8004774:	2a30      	cmp	r2, #48	; 0x30
 8004776:	bf03      	ittte	eq
 8004778:	785a      	ldrbeq	r2, [r3, #1]
      fmt++;
 800477a:	3301      	addeq	r3, #1
      filler = '0';
 800477c:	2730      	moveq	r7, #48	; 0x30
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
 800477e:	2720      	movne	r7, #32
 8004780:	1c59      	adds	r1, r3, #1
 8004782:	e006      	b.n	8004792 <chprintf+0x92>
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
 8004784:	782b      	ldrb	r3, [r5, #0]
 8004786:	3504      	adds	r5, #4
 8004788:	f89b 2000 	ldrb.w	r2, [fp]
      else
        break;
      width = width * 10 + c;
 800478c:	eb03 0640 	add.w	r6, r3, r0, lsl #1
 8004790:	3101      	adds	r1, #1
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 8004792:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b09      	cmp	r3, #9
      fmt++;
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
 800479a:	468b      	mov	fp, r1
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
      else
        break;
      width = width * 10 + c;
 800479c:	eb06 0086 	add.w	r0, r6, r6, lsl #2
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 80047a0:	d9f2      	bls.n	8004788 <chprintf+0x88>
        c -= '0';
      else if (c == '*')
 80047a2:	2a2a      	cmp	r2, #42	; 0x2a
 80047a4:	d0ee      	beq.n	8004784 <chprintf+0x84>
      else
        break;
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
 80047a6:	2a2e      	cmp	r2, #46	; 0x2e
 80047a8:	f04f 0100 	mov.w	r1, #0
 80047ac:	d043      	beq.n	8004836 <chprintf+0x136>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 80047ae:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 80047b2:	2b4c      	cmp	r3, #76	; 0x4c
 80047b4:	d04e      	beq.n	8004854 <chprintf+0x154>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 80047b6:	f1a2 0044 	sub.w	r0, r2, #68	; 0x44
 80047ba:	2834      	cmp	r0, #52	; 0x34
 80047bc:	f200 80f6 	bhi.w	80049ac <chprintf+0x2ac>
 80047c0:	e8df f010 	tbh	[pc, r0, lsl #1]
 80047c4:	00f400ea 	.word	0x00f400ea
 80047c8:	00f400f4 	.word	0x00f400f4
 80047cc:	00ea00f4 	.word	0x00ea00f4
 80047d0:	00f400f4 	.word	0x00f400f4
 80047d4:	00f400f4 	.word	0x00f400f4
 80047d8:	00e800f4 	.word	0x00e800f4
 80047dc:	00f400f4 	.word	0x00f400f4
 80047e0:	00f400f4 	.word	0x00f400f4
 80047e4:	00dd00f4 	.word	0x00dd00f4
 80047e8:	00f400f4 	.word	0x00f400f4
 80047ec:	00f400f1 	.word	0x00f400f1
 80047f0:	00f400f4 	.word	0x00f400f4
 80047f4:	00f400f4 	.word	0x00f400f4
 80047f8:	00f400f4 	.word	0x00f400f4
 80047fc:	00f400f4 	.word	0x00f400f4
 8004800:	00a100f4 	.word	0x00a100f4
 8004804:	00f400ea 	.word	0x00f400ea
 8004808:	00f400f4 	.word	0x00f400f4
 800480c:	00ea00f4 	.word	0x00ea00f4
 8004810:	00f400f4 	.word	0x00f400f4
 8004814:	00f400f4 	.word	0x00f400f4
 8004818:	00e800f4 	.word	0x00e800f4
 800481c:	00f400f4 	.word	0x00f400f4
 8004820:	007100f4 	.word	0x007100f4
 8004824:	00dd00f4 	.word	0x00dd00f4
 8004828:	00f400f4 	.word	0x00f400f4
 800482c:	00f1      	.short	0x00f1
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
 800482e:	782b      	ldrb	r3, [r5, #0]
 8004830:	3504      	adds	r5, #4
        else
          break;
        precision *= 10;
        precision += c;
 8004832:	eb03 0140 	add.w	r1, r3, r0, lsl #1
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
 8004836:	f81b 2b01 	ldrb.w	r2, [fp], #1
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
        else
          break;
        precision *= 10;
 800483a:	eb01 0081 	add.w	r0, r1, r1, lsl #2
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
 800483e:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004842:	b2db      	uxtb	r3, r3
 8004844:	2b09      	cmp	r3, #9
 8004846:	d9f4      	bls.n	8004832 <chprintf+0x132>
          c -= '0';
        else if (c == '*')
 8004848:	2a2a      	cmp	r2, #42	; 0x2a
 800484a:	d0f0      	beq.n	800482e <chprintf+0x12e>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 800484c:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8004850:	2b4c      	cmp	r3, #76	; 0x4c
 8004852:	d1b0      	bne.n	80047b6 <chprintf+0xb6>
      is_long = TRUE;
      if (*fmt)
 8004854:	f89b 3000 	ldrb.w	r3, [fp]
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 80a7 	beq.w	80049ac <chprintf+0x2ac>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 800485e:	f1a3 0244 	sub.w	r2, r3, #68	; 0x44
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = TRUE;
      if (*fmt)
        c = *fmt++;
 8004862:	f10b 0b01 	add.w	fp, fp, #1
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8004866:	2a34      	cmp	r2, #52	; 0x34
 8004868:	f200 809f 	bhi.w	80049aa <chprintf+0x2aa>
 800486c:	e8df f002 	tbb	[pc, r2]
 8004870:	9d9d9d94 	.word	0x9d9d9d94
 8004874:	9d9d949d 	.word	0x9d9d949d
 8004878:	929d9d9d 	.word	0x929d9d9d
 800487c:	9d9d9d9d 	.word	0x9d9d9d9d
 8004880:	9d9d879d 	.word	0x9d9d879d
 8004884:	9d9d9d9b 	.word	0x9d9d9d9b
 8004888:	9d9d9d9d 	.word	0x9d9d9d9d
 800488c:	4b9d9d9d 	.word	0x4b9d9d9d
 8004890:	9d9d9d94 	.word	0x9d9d9d94
 8004894:	9d9d949d 	.word	0x9d9d949d
 8004898:	929d9d9d 	.word	0x929d9d9d
 800489c:	1b9d9d9d 	.word	0x1b9d9d9d
 80048a0:	9d9d879d 	.word	0x9d9d879d
 80048a4:	9b          	.byte	0x9b
 80048a5:	00          	.byte	0x00
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 80048a6:	682c      	ldr	r4, [r5, #0]
        s = "(null)";
 80048a8:	4b59      	ldr	r3, [pc, #356]	; (8004a10 <chprintf+0x310>)
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 80048aa:	3504      	adds	r5, #4
        s = "(null)";
 80048ac:	2c00      	cmp	r4, #0
 80048ae:	bf08      	it	eq
 80048b0:	461c      	moveq	r4, r3
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 80048b2:	7823      	ldrb	r3, [r4, #0]
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
 80048b4:	2900      	cmp	r1, #0
 80048b6:	f000 8093 	beq.w	80049e0 <chprintf+0x2e0>
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f000 8095 	beq.w	80049ea <chprintf+0x2ea>
 80048c0:	3901      	subs	r1, #1
 80048c2:	4620      	mov	r0, r4
 80048c4:	e001      	b.n	80048ca <chprintf+0x1ca>
 80048c6:	3901      	subs	r1, #1
 80048c8:	d403      	bmi.n	80048d2 <chprintf+0x1d2>
 80048ca:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1f9      	bne.n	80048c6 <chprintf+0x1c6>
 80048d2:	1b00      	subs	r0, r0, r4
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 80048d4:	1a36      	subs	r6, r6, r0
 80048d6:	1e43      	subs	r3, r0, #1
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 80048d8:	2720      	movs	r7, #32
 80048da:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 80048de:	f1b9 0f00 	cmp.w	r9, #0
 80048e2:	d01f      	beq.n	8004924 <chprintf+0x224>
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	9300      	str	r3, [sp, #0]
 80048e8:	da34      	bge.n	8004954 <chprintf+0x254>
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 80048ea:	2e00      	cmp	r6, #0
 80048ec:	f43f af1a 	beq.w	8004724 <chprintf+0x24>
 80048f0:	4634      	mov	r4, r6
      streamPut(chp, (uint8_t)filler);
 80048f2:	f8da 3000 	ldr.w	r3, [sl]
 80048f6:	4650      	mov	r0, sl
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	4639      	mov	r1, r7
 80048fc:	4798      	blx	r3
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 80048fe:	3c01      	subs	r4, #1
 8004900:	d1f7      	bne.n	80048f2 <chprintf+0x1f2>
 8004902:	44b0      	add	r8, r6
 8004904:	e70e      	b.n	8004724 <chprintf+0x24>
 8004906:	9a01      	ldr	r2, [sp, #4]

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
 8004908:	682b      	ldr	r3, [r5, #0]
 800490a:	4610      	mov	r0, r2
 800490c:	f88d 300c 	strb.w	r3, [sp, #12]
 8004910:	3504      	adds	r5, #4
 8004912:	1e53      	subs	r3, r2, #1
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
 8004914:	2720      	movs	r7, #32
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8004916:	ac03      	add	r4, sp, #12
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 8004918:	1a36      	subs	r6, r6, r0
 800491a:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      width = 0;
    if (left_align == FALSE)
 800491e:	f1b9 0f00 	cmp.w	r9, #0
 8004922:	d1df      	bne.n	80048e4 <chprintf+0x1e4>
 8004924:	9300      	str	r3, [sp, #0]
      width = -width;
 8004926:	f1c6 0900 	rsb	r9, r6, #0
    if (width < 0) {
 800492a:	f1b9 0f00 	cmp.w	r9, #0
 800492e:	d044      	beq.n	80049ba <chprintf+0x2ba>
      if (*s == '-' && filler == '0') {
 8004930:	7821      	ldrb	r1, [r4, #0]
 8004932:	292d      	cmp	r1, #45	; 0x2d
 8004934:	d046      	beq.n	80049c4 <chprintf+0x2c4>
        streamPut(chp, (uint8_t)*s++);
        n++;
 8004936:	464e      	mov	r6, r9
        i--;
      }
      do {
        streamPut(chp, (uint8_t)filler);
 8004938:	f8da 3000 	ldr.w	r3, [sl]
 800493c:	4650      	mov	r0, sl
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	4639      	mov	r1, r7
 8004942:	4798      	blx	r3
        n++;
      } while (++width != 0);
 8004944:	3601      	adds	r6, #1
 8004946:	d1f7      	bne.n	8004938 <chprintf+0x238>
    }
    while (--i >= 0) {
 8004948:	9b00      	ldr	r3, [sp, #0]
 800494a:	ebc9 0808 	rsb	r8, r9, r8
 800494e:	2b00      	cmp	r3, #0
 8004950:	f6ff aee8 	blt.w	8004724 <chprintf+0x24>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8004954:	f8dd 9000 	ldr.w	r9, [sp]
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
 8004958:	f8da 3000 	ldr.w	r3, [sl]
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 800495c:	f109 39ff 	add.w	r9, r9, #4294967295
      streamPut(chp, (uint8_t)*s++);
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	4650      	mov	r0, sl
 8004964:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004968:	4798      	blx	r3
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 800496a:	f1b9 3fff 	cmp.w	r9, #4294967295
 800496e:	d1f3      	bne.n	8004958 <chprintf+0x258>
 8004970:	9b00      	ldr	r3, [sp, #0]
 8004972:	f108 0801 	add.w	r8, r8, #1
 8004976:	2b00      	cmp	r3, #0
 8004978:	bfa8      	it	ge
 800497a:	4498      	addge	r8, r3
 800497c:	e7b5      	b.n	80048ea <chprintf+0x1ea>
 800497e:	220a      	movs	r2, #10
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 8004980:	6829      	ldr	r1, [r5, #0]
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8004982:	a803      	add	r0, sp, #12
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 8004984:	3504      	adds	r5, #4
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8004986:	f002 fa53 	bl	8006e30 <long_to_string_with_divisor.constprop.4>
 800498a:	ab03      	add	r3, sp, #12
 800498c:	1ac0      	subs	r0, r0, r3
 800498e:	1e43      	subs	r3, r0, #1
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8004990:	ac03      	add	r4, sp, #12
 8004992:	e7c1      	b.n	8004918 <chprintf+0x218>
 8004994:	2208      	movs	r2, #8
 8004996:	e7f3      	b.n	8004980 <chprintf+0x280>
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
 8004998:	6829      	ldr	r1, [r5, #0]
 800499a:	3504      	adds	r5, #4
      if (l < 0) {
 800499c:	2900      	cmp	r1, #0
 800499e:	db2e      	blt.n	80049fe <chprintf+0x2fe>
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 80049a0:	a803      	add	r0, sp, #12
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 80049a2:	220a      	movs	r2, #10
 80049a4:	e7ef      	b.n	8004986 <chprintf+0x286>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 80049a6:	2210      	movs	r2, #16
 80049a8:	e7ea      	b.n	8004980 <chprintf+0x280>
 80049aa:	461a      	mov	r2, r3
 80049ac:	9b01      	ldr	r3, [sp, #4]
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 80049ae:	ac03      	add	r4, sp, #12
 80049b0:	4618      	mov	r0, r3
      else
        l = va_arg(ap, unsigned int);
      p = ch_ltoa(p, l, c);
      break;
    default:
      *p++ = c;
 80049b2:	f88d 200c 	strb.w	r2, [sp, #12]
 80049b6:	3b01      	subs	r3, #1
 80049b8:	e7ae      	b.n	8004918 <chprintf+0x218>
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 80049ba:	9b00      	ldr	r3, [sp, #0]
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
 80049bc:	464e      	mov	r6, r9
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 80049be:	2b00      	cmp	r3, #0
 80049c0:	dac8      	bge.n	8004954 <chprintf+0x254>
 80049c2:	e6af      	b.n	8004724 <chprintf+0x24>
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
 80049c4:	2f30      	cmp	r7, #48	; 0x30
 80049c6:	d1b6      	bne.n	8004936 <chprintf+0x236>
        streamPut(chp, (uint8_t)*s++);
 80049c8:	f8da 3000 	ldr.w	r3, [sl]
 80049cc:	4650      	mov	r0, sl
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	4798      	blx	r3
 80049d2:	9b00      	ldr	r3, [sp, #0]
 80049d4:	3401      	adds	r4, #1
 80049d6:	3b01      	subs	r3, #1
        n++;
 80049d8:	f108 0801 	add.w	r8, r8, #1
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	e7aa      	b.n	8004936 <chprintf+0x236>
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 80049e0:	f647 71fe 	movw	r1, #32766	; 0x7ffe
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f47f af6c 	bne.w	80048c2 <chprintf+0x1c2>
 80049ea:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 80049ee:	f1b9 0f00 	cmp.w	r9, #0
 80049f2:	d10b      	bne.n	8004a0c <chprintf+0x30c>
 80049f4:	f04f 33ff 	mov.w	r3, #4294967295
 80049f8:	9300      	str	r3, [sp, #0]
 80049fa:	2720      	movs	r7, #32
 80049fc:	e793      	b.n	8004926 <chprintf+0x226>
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 80049fe:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 8004a00:	4249      	negs	r1, r1
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 8004a02:	f88d 300c 	strb.w	r3, [sp, #12]
 8004a06:	f10d 000d 	add.w	r0, sp, #13
 8004a0a:	e7ca      	b.n	80049a2 <chprintf+0x2a2>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8004a0c:	2720      	movs	r7, #32
 8004a0e:	e76c      	b.n	80048ea <chprintf+0x1ea>
 8004a10:	08007c18 	.word	0x08007c18
	...

08004a20 <thread1>:
static mutex_t mtx1;
#endif

static THD_FUNCTION(thread1, p) {

  chThdExit((msg_t)p);
 8004a20:	f7fc bb0e 	b.w	8001040 <chThdExit>
	...

08004a30 <cmd_systime>:
}

static void cmd_systime(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc > 0) {
 8004a30:	2900      	cmp	r1, #0
 8004a32:	dd03      	ble.n	8004a3c <cmd_systime+0xc>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8004a34:	4908      	ldr	r1, [pc, #32]	; (8004a58 <cmd_systime+0x28>)
 8004a36:	4a09      	ldr	r2, [pc, #36]	; (8004a5c <cmd_systime+0x2c>)
 8004a38:	f7ff be62 	b.w	8004700 <chprintf>
 8004a3c:	2320      	movs	r3, #32
 8004a3e:	f383 8811 	msr	BASEPRI, r3
 8004a42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004a46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a48:	2300      	movs	r3, #0
 8004a4a:	f383 8811 	msr	BASEPRI, r3
  (void)argv;
  if (argc > 0) {
    usage(chp, "systime");
    return;
  }
  chprintf(chp, "%lu\r\n", (unsigned long)chVTGetSystemTime());
 8004a4e:	4904      	ldr	r1, [pc, #16]	; (8004a60 <cmd_systime+0x30>)
 8004a50:	b292      	uxth	r2, r2
 8004a52:	f7ff be55 	b.w	8004700 <chprintf>
 8004a56:	bf00      	nop
 8004a58:	08007c60 	.word	0x08007c60
 8004a5c:	08007c6c 	.word	0x08007c6c
 8004a60:	08007c74 	.word	0x08007c74
	...

08004a70 <cmd_info>:
}

static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc > 0) {
 8004a70:	2900      	cmp	r1, #0
 8004a72:	dd03      	ble.n	8004a7c <cmd_info+0xc>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8004a74:	4919      	ldr	r1, [pc, #100]	; (8004adc <cmd_info+0x6c>)
 8004a76:	4a1a      	ldr	r2, [pc, #104]	; (8004ae0 <cmd_info+0x70>)
 8004a78:	f7ff be42 	b.w	8004700 <chprintf>
    chprintf(chp, "%s ", scp->sc_name);
    scp++;
  }
}

static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 8004a7c:	b510      	push	{r4, lr}
 8004a7e:	4604      	mov	r4, r0
 8004a80:	b082      	sub	sp, #8
  if (argc > 0) {
    usage(chp, "info");
    return;
  }

  chprintf(chp, "Kernel:       %s\r\n", CH_KERNEL_VERSION);
 8004a82:	4918      	ldr	r1, [pc, #96]	; (8004ae4 <cmd_info+0x74>)
 8004a84:	4a18      	ldr	r2, [pc, #96]	; (8004ae8 <cmd_info+0x78>)
 8004a86:	f7ff fe3b 	bl	8004700 <chprintf>
#ifdef PORT_COMPILER_NAME
  chprintf(chp, "Compiler:     %s\r\n", PORT_COMPILER_NAME);
 8004a8a:	4620      	mov	r0, r4
 8004a8c:	4917      	ldr	r1, [pc, #92]	; (8004aec <cmd_info+0x7c>)
 8004a8e:	4a18      	ldr	r2, [pc, #96]	; (8004af0 <cmd_info+0x80>)
 8004a90:	f7ff fe36 	bl	8004700 <chprintf>
#endif
  chprintf(chp, "Architecture: %s\r\n", PORT_ARCHITECTURE_NAME);
 8004a94:	4620      	mov	r0, r4
 8004a96:	4917      	ldr	r1, [pc, #92]	; (8004af4 <cmd_info+0x84>)
 8004a98:	4a17      	ldr	r2, [pc, #92]	; (8004af8 <cmd_info+0x88>)
 8004a9a:	f7ff fe31 	bl	8004700 <chprintf>
#ifdef PORT_CORE_VARIANT_NAME
  chprintf(chp, "Core Variant: %s\r\n", PORT_CORE_VARIANT_NAME);
 8004a9e:	4620      	mov	r0, r4
 8004aa0:	4916      	ldr	r1, [pc, #88]	; (8004afc <cmd_info+0x8c>)
 8004aa2:	4a17      	ldr	r2, [pc, #92]	; (8004b00 <cmd_info+0x90>)
 8004aa4:	f7ff fe2c 	bl	8004700 <chprintf>
#endif
#ifdef PORT_INFO
  chprintf(chp, "Port Info:    %s\r\n", PORT_INFO);
 8004aa8:	4620      	mov	r0, r4
 8004aaa:	4916      	ldr	r1, [pc, #88]	; (8004b04 <cmd_info+0x94>)
 8004aac:	4a16      	ldr	r2, [pc, #88]	; (8004b08 <cmd_info+0x98>)
 8004aae:	f7ff fe27 	bl	8004700 <chprintf>
#endif
#ifdef PLATFORM_NAME
  chprintf(chp, "Platform:     %s\r\n", PLATFORM_NAME);
 8004ab2:	4620      	mov	r0, r4
 8004ab4:	4915      	ldr	r1, [pc, #84]	; (8004b0c <cmd_info+0x9c>)
 8004ab6:	4a16      	ldr	r2, [pc, #88]	; (8004b10 <cmd_info+0xa0>)
 8004ab8:	f7ff fe22 	bl	8004700 <chprintf>
#endif
#ifdef BOARD_NAME
  chprintf(chp, "Board:        %s\r\n", BOARD_NAME);
 8004abc:	4620      	mov	r0, r4
 8004abe:	4915      	ldr	r1, [pc, #84]	; (8004b14 <cmd_info+0xa4>)
 8004ac0:	4a15      	ldr	r2, [pc, #84]	; (8004b18 <cmd_info+0xa8>)
 8004ac2:	f7ff fe1d 	bl	8004700 <chprintf>
#endif
#ifdef __DATE__
#ifdef __TIME__
  chprintf(chp, "Build time:   %s%s%s\r\n", __DATE__, " - ", __TIME__);
 8004ac6:	4b15      	ldr	r3, [pc, #84]	; (8004b1c <cmd_info+0xac>)
 8004ac8:	4620      	mov	r0, r4
 8004aca:	9300      	str	r3, [sp, #0]
 8004acc:	4914      	ldr	r1, [pc, #80]	; (8004b20 <cmd_info+0xb0>)
 8004ace:	4a15      	ldr	r2, [pc, #84]	; (8004b24 <cmd_info+0xb4>)
 8004ad0:	4b15      	ldr	r3, [pc, #84]	; (8004b28 <cmd_info+0xb8>)
 8004ad2:	f7ff fe15 	bl	8004700 <chprintf>
#endif
#endif
}
 8004ad6:	b002      	add	sp, #8
 8004ad8:	bd10      	pop	{r4, pc}
 8004ada:	bf00      	nop
 8004adc:	08007c60 	.word	0x08007c60
 8004ae0:	08007c7c 	.word	0x08007c7c
 8004ae4:	08007c84 	.word	0x08007c84
 8004ae8:	080074f4 	.word	0x080074f4
 8004aec:	08007c98 	.word	0x08007c98
 8004af0:	08007514 	.word	0x08007514
 8004af4:	08007cac 	.word	0x08007cac
 8004af8:	0800755c 	.word	0x0800755c
 8004afc:	08007cc0 	.word	0x08007cc0
 8004b00:	08007564 	.word	0x08007564
 8004b04:	08007cd4 	.word	0x08007cd4
 8004b08:	08007570 	.word	0x08007570
 8004b0c:	08007ce8 	.word	0x08007ce8
 8004b10:	08007588 	.word	0x08007588
 8004b14:	08007cfc 	.word	0x08007cfc
 8004b18:	080075b4 	.word	0x080075b4
 8004b1c:	08007d38 	.word	0x08007d38
 8004b20:	08007d10 	.word	0x08007d10
 8004b24:	08007d28 	.word	0x08007d28
 8004b28:	08007d34 	.word	0x08007d34
 8004b2c:	00000000 	.word	0x00000000

08004b30 <shell_thread>:
/**
 * @brief   Shell thread function.
 *
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
static THD_FUNCTION(shell_thread, p) {
 8004b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 8004b34:	4b79      	ldr	r3, [pc, #484]	; (8004d1c <shell_thread+0x1ec>)
  int n;
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
 8004b36:	6804      	ldr	r4, [r0, #0]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	4a79      	ldr	r2, [pc, #484]	; (8004d20 <shell_thread+0x1f0>)
/**
 * @brief   Shell thread function.
 *
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
static THD_FUNCTION(shell_thread, p) {
 8004b3c:	b098      	sub	sp, #96	; 0x60
  int n;
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
  const ShellCommand *scp = ((ShellConfig *)p)->sc_commands;
 8004b3e:	f8d0 8004 	ldr.w	r8, [r0, #4]
  char *lp, *cmd, *tokp, line[SHELL_MAX_LINE_LENGTH];
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
  chprintf(chp, "\r\nChibiOS/RT Shell\r\n");
 8004b42:	4978      	ldr	r1, [pc, #480]	; (8004d24 <shell_thread+0x1f4>)
 8004b44:	4620      	mov	r0, r4
 8004b46:	619a      	str	r2, [r3, #24]
 8004b48:	f7ff fdda 	bl	8004700 <chprintf>
 8004b4c:	ae08      	add	r6, sp, #32
      *p = 0;
      return false;
    }
    if (c < 0x20)
      continue;
    if (p < line + size - 1) {
 8004b4e:	f10d 075f 	add.w	r7, sp, #95	; 0x5f
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
  chprintf(chp, "\r\nChibiOS/RT Shell\r\n");
  while (true) {
    chprintf(chp, "ch> ");
 8004b52:	4620      	mov	r0, r4
 8004b54:	4974      	ldr	r1, [pc, #464]	; (8004d28 <shell_thread+0x1f8>)
 8004b56:	f7ff fdd3 	bl	8004700 <chprintf>
 * @retval false        operation successful.
 *
 * @api
 */
bool shellGetLine(BaseSequentialStream *chp, char *line, unsigned size) {
  char *p = line;
 8004b5a:	4635      	mov	r5, r6

  while (true) {
    char c;

    if (chSequentialStreamRead(chp, (uint8_t *)&c, 1) == 0)
 8004b5c:	6823      	ldr	r3, [r4, #0]
 8004b5e:	4620      	mov	r0, r4
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f10d 0107 	add.w	r1, sp, #7
 8004b66:	2201      	movs	r2, #1
 8004b68:	4798      	blx	r3
 8004b6a:	b370      	cbz	r0, 8004bca <shell_thread+0x9a>
      return true;
    if (c == 4) {
 8004b6c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8004b70:	2904      	cmp	r1, #4
 8004b72:	d026      	beq.n	8004bc2 <shell_thread+0x92>
      chprintf(chp, "^D");
      return true;
    }
    if ((c == 8) || (c == 127)) {
 8004b74:	2908      	cmp	r1, #8
 8004b76:	d011      	beq.n	8004b9c <shell_thread+0x6c>
 8004b78:	297f      	cmp	r1, #127	; 0x7f
 8004b7a:	d00f      	beq.n	8004b9c <shell_thread+0x6c>
        chSequentialStreamPut(chp, c);
        p--;
      }
      continue;
    }
    if (c == '\r') {
 8004b7c:	290d      	cmp	r1, #13
 8004b7e:	d035      	beq.n	8004bec <shell_thread+0xbc>
      chprintf(chp, "\r\n");
      *p = 0;
      return false;
    }
    if (c < 0x20)
 8004b80:	291f      	cmp	r1, #31
 8004b82:	d9eb      	bls.n	8004b5c <shell_thread+0x2c>
      continue;
    if (p < line + size - 1) {
 8004b84:	42bd      	cmp	r5, r7
 8004b86:	d2e9      	bcs.n	8004b5c <shell_thread+0x2c>
      chSequentialStreamPut(chp, c);
 8004b88:	6823      	ldr	r3, [r4, #0]
 8004b8a:	4620      	mov	r0, r4
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	4798      	blx	r3
      *p++ = (char)c;
 8004b90:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004b94:	3501      	adds	r5, #1
 8004b96:	f805 3c01 	strb.w	r3, [r5, #-1]
 8004b9a:	e7df      	b.n	8004b5c <shell_thread+0x2c>
    if (c == 4) {
      chprintf(chp, "^D");
      return true;
    }
    if ((c == 8) || (c == 127)) {
      if (p != line) {
 8004b9c:	42b5      	cmp	r5, r6
 8004b9e:	d0dd      	beq.n	8004b5c <shell_thread+0x2c>
        chSequentialStreamPut(chp, c);
 8004ba0:	6823      	ldr	r3, [r4, #0]
 8004ba2:	4620      	mov	r0, r4
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	4798      	blx	r3
        chSequentialStreamPut(chp, 0x20);
 8004ba8:	6823      	ldr	r3, [r4, #0]
 8004baa:	4620      	mov	r0, r4
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	2120      	movs	r1, #32
 8004bb0:	4798      	blx	r3
        chSequentialStreamPut(chp, c);
 8004bb2:	6823      	ldr	r3, [r4, #0]
 8004bb4:	4620      	mov	r0, r4
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f89d 1007 	ldrb.w	r1, [sp, #7]
        p--;
 8004bbc:	3d01      	subs	r5, #1
    }
    if ((c == 8) || (c == 127)) {
      if (p != line) {
        chSequentialStreamPut(chp, c);
        chSequentialStreamPut(chp, 0x20);
        chSequentialStreamPut(chp, c);
 8004bbe:	4798      	blx	r3
 8004bc0:	e7cc      	b.n	8004b5c <shell_thread+0x2c>
    char c;

    if (chSequentialStreamRead(chp, (uint8_t *)&c, 1) == 0)
      return true;
    if (c == 4) {
      chprintf(chp, "^D");
 8004bc2:	4620      	mov	r0, r4
 8004bc4:	4959      	ldr	r1, [pc, #356]	; (8004d2c <shell_thread+0x1fc>)
 8004bc6:	f7ff fd9b 	bl	8004700 <chprintf>
  chRegSetThreadName("shell");
  chprintf(chp, "\r\nChibiOS/RT Shell\r\n");
  while (true) {
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
 8004bca:	4620      	mov	r0, r4
 8004bcc:	4958      	ldr	r1, [pc, #352]	; (8004d30 <shell_thread+0x200>)
 8004bce:	f7ff fd97 	bl	8004700 <chprintf>
 8004bd2:	2320      	movs	r3, #32
 8004bd4:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void chEvtBroadcastI(event_source_t *esp) {

  chEvtBroadcastFlagsI(esp, (eventflags_t)0);
 8004bd8:	2100      	movs	r1, #0
 8004bda:	4856      	ldr	r0, [pc, #344]	; (8004d34 <shell_thread+0x204>)
 8004bdc:	f7fb ff30 	bl	8000a40 <chEvtBroadcastFlagsI>

  /* Atomically broadcasting the event source and terminating the thread,
     there is not a chSysUnlock() because the thread terminates upon return.*/
  chSysLock();
  chEvtBroadcastI(&shell_terminated);
  chThdExitS(msg);
 8004be0:	2000      	movs	r0, #0
 8004be2:	f7fc fa0d 	bl	8001000 <chThdExitS>
        chprintf(chp, " ?\r\n");
      }
    }
  }
  shellExit(MSG_OK);
}
 8004be6:	b018      	add	sp, #96	; 0x60
 8004be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p--;
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, "\r\n");
 8004bec:	4952      	ldr	r1, [pc, #328]	; (8004d38 <shell_thread+0x208>)
 8004bee:	4620      	mov	r0, r4
 8004bf0:	f7ff fd86 	bl	8004700 <chprintf>
      *p = 0;
 8004bf4:	2300      	movs	r3, #0
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 8004bf6:	a902      	add	r1, sp, #8
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, "\r\n");
      *p = 0;
 8004bf8:	702b      	strb	r3, [r5, #0]
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 8004bfa:	4630      	mov	r0, r6
    cmd = lp;
    n = 0;
 8004bfc:	461d      	mov	r5, r3
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 8004bfe:	f002 f93f 	bl	8006e80 <_strtok.constprop.3>
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8004c02:	a902      	add	r1, sp, #8
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 8004c04:	4682      	mov	sl, r0
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8004c06:	2000      	movs	r0, #0
 8004c08:	f10d 090c 	add.w	r9, sp, #12
 8004c0c:	f002 f938 	bl	8006e80 <_strtok.constprop.3>
 8004c10:	b150      	cbz	r0, 8004c28 <shell_thread+0xf8>
      if (n >= SHELL_MAX_ARGUMENTS) {
 8004c12:	2d04      	cmp	r5, #4
 8004c14:	d01d      	beq.n	8004c52 <shell_thread+0x122>
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 8004c16:	f849 0b04 	str.w	r0, [r9], #4
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8004c1a:	a902      	add	r1, sp, #8
 8004c1c:	2000      	movs	r0, #0
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 8004c1e:	3501      	adds	r5, #1
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8004c20:	f002 f92e 	bl	8006e80 <_strtok.constprop.3>
 8004c24:	2800      	cmp	r0, #0
 8004c26:	d1f4      	bne.n	8004c12 <shell_thread+0xe2>
        cmd = NULL;
        break;
      }
      args[n++] = lp;
    }
    args[n] = NULL;
 8004c28:	ab18      	add	r3, sp, #96	; 0x60
 8004c2a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8004c2e:	f843 0c54 	str.w	r0, [r3, #-84]
    if (cmd != NULL) {
 8004c32:	f1ba 0f00 	cmp.w	sl, #0
 8004c36:	d08c      	beq.n	8004b52 <shell_thread+0x22>
      if (strcmp(cmd, "exit") == 0) {
 8004c38:	4650      	mov	r0, sl
 8004c3a:	4940      	ldr	r1, [pc, #256]	; (8004d3c <shell_thread+0x20c>)
 8004c3c:	f7fb fb10 	bl	8000260 <strcmp>
 8004c40:	b970      	cbnz	r0, 8004c60 <shell_thread+0x130>
        if (n > 0) {
 8004c42:	2d00      	cmp	r5, #0
 8004c44:	d0c5      	beq.n	8004bd2 <shell_thread+0xa2>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8004c46:	4620      	mov	r0, r4
 8004c48:	493d      	ldr	r1, [pc, #244]	; (8004d40 <shell_thread+0x210>)
 8004c4a:	4a3c      	ldr	r2, [pc, #240]	; (8004d3c <shell_thread+0x20c>)
 8004c4c:	f7ff fd58 	bl	8004700 <chprintf>
 8004c50:	e77f      	b.n	8004b52 <shell_thread+0x22>
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
 8004c52:	4620      	mov	r0, r4
 8004c54:	493b      	ldr	r1, [pc, #236]	; (8004d44 <shell_thread+0x214>)
 8004c56:	f7ff fd53 	bl	8004700 <chprintf>
        cmd = NULL;
        break;
      }
      args[n++] = lp;
    }
    args[n] = NULL;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	9307      	str	r3, [sp, #28]
 8004c5e:	e778      	b.n	8004b52 <shell_thread+0x22>
          usage(chp, "exit");
          continue;
        }
        break;
      }
      else if (strcmp(cmd, "help") == 0) {
 8004c60:	4650      	mov	r0, sl
 8004c62:	4939      	ldr	r1, [pc, #228]	; (8004d48 <shell_thread+0x218>)
 8004c64:	f7fb fafc 	bl	8000260 <strcmp>
 8004c68:	b930      	cbnz	r0, 8004c78 <shell_thread+0x148>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8004c6a:	4620      	mov	r0, r4
          continue;
        }
        break;
      }
      else if (strcmp(cmd, "help") == 0) {
        if (n > 0) {
 8004c6c:	b1c5      	cbz	r5, 8004ca0 <shell_thread+0x170>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8004c6e:	4934      	ldr	r1, [pc, #208]	; (8004d40 <shell_thread+0x210>)
 8004c70:	4a35      	ldr	r2, [pc, #212]	; (8004d48 <shell_thread+0x218>)
 8004c72:	f7ff fd45 	bl	8004700 <chprintf>
 8004c76:	e76c      	b.n	8004b52 <shell_thread+0x22>
};

static bool cmdexec(const ShellCommand *scp, BaseSequentialStream *chp,
                      char *name, int argc, char *argv[]) {

  while (scp->sc_name != NULL) {
 8004c78:	4b34      	ldr	r3, [pc, #208]	; (8004d4c <shell_thread+0x21c>)
 8004c7a:	6818      	ldr	r0, [r3, #0]
 8004c7c:	4699      	mov	r9, r3
 8004c7e:	b918      	cbnz	r0, 8004c88 <shell_thread+0x158>
 8004c80:	e031      	b.n	8004ce6 <shell_thread+0x1b6>
 8004c82:	f859 0f08 	ldr.w	r0, [r9, #8]!
 8004c86:	b370      	cbz	r0, 8004ce6 <shell_thread+0x1b6>
    if (strcmp(scp->sc_name, name) == 0) {
 8004c88:	4651      	mov	r1, sl
 8004c8a:	f7fb fae9 	bl	8000260 <strcmp>
 8004c8e:	2800      	cmp	r0, #0
 8004c90:	d1f7      	bne.n	8004c82 <shell_thread+0x152>
      scp->sc_function(chp, argc, argv);
 8004c92:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004c96:	4629      	mov	r1, r5
 8004c98:	aa03      	add	r2, sp, #12
 8004c9a:	4620      	mov	r0, r4
 8004c9c:	4798      	blx	r3
 8004c9e:	e758      	b.n	8004b52 <shell_thread+0x22>
      else if (strcmp(cmd, "help") == 0) {
        if (n > 0) {
          usage(chp, "help");
          continue;
        }
        chprintf(chp, "Commands: help exit ");
 8004ca0:	492b      	ldr	r1, [pc, #172]	; (8004d50 <shell_thread+0x220>)
 8004ca2:	f7ff fd2d 	bl	8004700 <chprintf>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8004ca6:	4b29      	ldr	r3, [pc, #164]	; (8004d4c <shell_thread+0x21c>)
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	461d      	mov	r5, r3
 8004cac:	b13a      	cbz	r2, 8004cbe <shell_thread+0x18e>
    chprintf(chp, "%s ", scp->sc_name);
 8004cae:	4620      	mov	r0, r4
 8004cb0:	4928      	ldr	r1, [pc, #160]	; (8004d54 <shell_thread+0x224>)
 8004cb2:	f7ff fd25 	bl	8004700 <chprintf>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8004cb6:	f855 2f08 	ldr.w	r2, [r5, #8]!
 8004cba:	2a00      	cmp	r2, #0
 8004cbc:	d1f7      	bne.n	8004cae <shell_thread+0x17e>
          usage(chp, "help");
          continue;
        }
        chprintf(chp, "Commands: help exit ");
        list_commands(chp, local_commands);
        if (scp != NULL)
 8004cbe:	f1b8 0f00 	cmp.w	r8, #0
 8004cc2:	d00b      	beq.n	8004cdc <shell_thread+0x1ac>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8004cc4:	f8d8 2000 	ldr.w	r2, [r8]
 8004cc8:	b142      	cbz	r2, 8004cdc <shell_thread+0x1ac>
 8004cca:	4645      	mov	r5, r8
    chprintf(chp, "%s ", scp->sc_name);
 8004ccc:	4620      	mov	r0, r4
 8004cce:	4921      	ldr	r1, [pc, #132]	; (8004d54 <shell_thread+0x224>)
 8004cd0:	f7ff fd16 	bl	8004700 <chprintf>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8004cd4:	f855 2f08 	ldr.w	r2, [r5, #8]!
 8004cd8:	2a00      	cmp	r2, #0
 8004cda:	d1f7      	bne.n	8004ccc <shell_thread+0x19c>
        }
        chprintf(chp, "Commands: help exit ");
        list_commands(chp, local_commands);
        if (scp != NULL)
          list_commands(chp, scp);
        chprintf(chp, "\r\n");
 8004cdc:	4620      	mov	r0, r4
 8004cde:	4916      	ldr	r1, [pc, #88]	; (8004d38 <shell_thread+0x208>)
 8004ce0:	f7ff fd0e 	bl	8004700 <chprintf>
 8004ce4:	e735      	b.n	8004b52 <shell_thread+0x22>
      }
      else if (cmdexec(local_commands, chp, cmd, n, args) &&
 8004ce6:	f1b8 0f00 	cmp.w	r8, #0
 8004cea:	d00d      	beq.n	8004d08 <shell_thread+0x1d8>
};

static bool cmdexec(const ShellCommand *scp, BaseSequentialStream *chp,
                      char *name, int argc, char *argv[]) {

  while (scp->sc_name != NULL) {
 8004cec:	f8d8 0000 	ldr.w	r0, [r8]
 8004cf0:	b150      	cbz	r0, 8004d08 <shell_thread+0x1d8>
 8004cf2:	46c1      	mov	r9, r8
 8004cf4:	e002      	b.n	8004cfc <shell_thread+0x1cc>
 8004cf6:	f859 0f08 	ldr.w	r0, [r9, #8]!
 8004cfa:	b128      	cbz	r0, 8004d08 <shell_thread+0x1d8>
    if (strcmp(scp->sc_name, name) == 0) {
 8004cfc:	4651      	mov	r1, sl
 8004cfe:	f7fb faaf 	bl	8000260 <strcmp>
 8004d02:	2800      	cmp	r0, #0
 8004d04:	d1f7      	bne.n	8004cf6 <shell_thread+0x1c6>
 8004d06:	e7c4      	b.n	8004c92 <shell_thread+0x162>
          list_commands(chp, scp);
        chprintf(chp, "\r\n");
      }
      else if (cmdexec(local_commands, chp, cmd, n, args) &&
          ((scp == NULL) || cmdexec(scp, chp, cmd, n, args))) {
        chprintf(chp, "%s", cmd);
 8004d08:	4652      	mov	r2, sl
 8004d0a:	4620      	mov	r0, r4
 8004d0c:	4912      	ldr	r1, [pc, #72]	; (8004d58 <shell_thread+0x228>)
 8004d0e:	f7ff fcf7 	bl	8004700 <chprintf>
        chprintf(chp, " ?\r\n");
 8004d12:	4620      	mov	r0, r4
 8004d14:	4911      	ldr	r1, [pc, #68]	; (8004d5c <shell_thread+0x22c>)
 8004d16:	f7ff fcf3 	bl	8004700 <chprintf>
 8004d1a:	e71a      	b.n	8004b52 <shell_thread+0x22>
 8004d1c:	200013f8 	.word	0x200013f8
 8004d20:	08007d44 	.word	0x08007d44
 8004d24:	08007d4c 	.word	0x08007d4c
 8004d28:	08007d64 	.word	0x08007d64
 8004d2c:	08007d6c 	.word	0x08007d6c
 8004d30:	08007dc0 	.word	0x08007dc0
 8004d34:	20000a18 	.word	0x20000a18
 8004d38:	08007fa0 	.word	0x08007fa0
 8004d3c:	08007d88 	.word	0x08007d88
 8004d40:	08007c60 	.word	0x08007c60
 8004d44:	08007d70 	.word	0x08007d70
 8004d48:	08007d90 	.word	0x08007d90
 8004d4c:	20000820 	.word	0x20000820
 8004d50:	08007d98 	.word	0x08007d98
 8004d54:	08007db0 	.word	0x08007db0
 8004d58:	08007db4 	.word	0x08007db4
 8004d5c:	08007db8 	.word	0x08007db8

08004d60 <main>:


/*
 * Application entry point.
 */
int main(void) {
 8004d60:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8004d64:	f8df e33c 	ldr.w	lr, [pc, #828]	; 80050a4 <main+0x344>
 * @notapi
 */
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
 8004d68:	2100      	movs	r1, #0
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0U;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8004d6a:	460a      	mov	r2, r1
    _stm32_dma_streams[i].channel->CCR = 0U;
 8004d6c:	460d      	mov	r5, r1
 8004d6e:	4674      	mov	r4, lr
 8004d70:	4bb7      	ldr	r3, [pc, #732]	; (8005050 <main+0x2f0>)
 8004d72:	f04f 30ff 	mov.w	r0, #4294967295
 8004d76:	691e      	ldr	r6, [r3, #16]
 8004d78:	6118      	str	r0, [r3, #16]
 8004d7a:	6119      	str	r1, [r3, #16]
  rccResetAPB2(0xFFFFFFFF);
 8004d7c:	68de      	ldr	r6, [r3, #12]
 8004d7e:	60d8      	str	r0, [r3, #12]
 8004d80:	60d9      	str	r1, [r3, #12]

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
 8004d82:	69d8      	ldr	r0, [r3, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8004d84:	4eb3      	ldr	r6, [pc, #716]	; (8005054 <main+0x2f4>)
  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
  rccResetAPB2(0xFFFFFFFF);

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
 8004d86:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8004d8a:	61d8      	str	r0, [r3, #28]
  rccEnableBKPInterface(FALSE);
 8004d8c:	69d8      	ldr	r0, [r3, #28]
 8004d8e:	f8df 9318 	ldr.w	r9, [pc, #792]	; 80050a8 <main+0x348>
 8004d92:	f040 6000 	orr.w	r0, r0, #134217728	; 0x8000000
 8004d96:	61d8      	str	r0, [r3, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8004d98:	6833      	ldr	r3, [r6, #0]
 8004d9a:	b08d      	sub	sp, #52	; 0x34
 8004d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004da0:	6033      	str	r3, [r6, #0]
 * @init
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0U;
 8004da2:	4bad      	ldr	r3, [pc, #692]	; (8005058 <main+0x2f8>)
 8004da4:	6019      	str	r1, [r3, #0]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0U;
 8004da6:	6861      	ldr	r1, [r4, #4]
 8004da8:	2300      	movs	r3, #0
 8004daa:	600d      	str	r5, [r1, #0]
    _stm32_dma_isr_redir[i].dma_func = NULL;
 8004dac:	f849 5032 	str.w	r5, [r9, r2, lsl #3]
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0U;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8004db0:	3201      	adds	r2, #1
 8004db2:	2a07      	cmp	r2, #7
 8004db4:	f104 0414 	add.w	r4, r4, #20
 8004db8:	d1f5      	bne.n	8004da6 <main+0x46>
void adc_lld_init(void) {

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
  ADCD1.adc = ADC1;
 8004dba:	4aa8      	ldr	r2, [pc, #672]	; (800505c <main+0x2fc>)
  ADCD1.dmastp  = STM32_DMA1_STREAM1;
  ADCD1.dmamode = STM32_DMA_CR_PL(STM32_ADC_ADC1_DMA_PRIORITY) |
 8004dbc:	f242 5c8a 	movw	ip, #9610	; 0x258a
  ADC1->CR1 = 0;
  ADC1->CR2 = ADC_CR2_ADON;

  /* Reset calibration just to be safe.*/
  ADC1->CR2 = ADC_CR2_ADON | ADC_CR2_RSTCAL;
  while ((ADC1->CR2 & ADC_CR2_RSTCAL) != 0)
 8004dc0:	4692      	mov	sl, r2
    _stm32_dma_streams[i].channel->CCR = 0U;
    _stm32_dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->IFCR = 0xFFFFFFFFU;
 8004dc2:	48a7      	ldr	r0, [pc, #668]	; (8005060 <main+0x300>)
 8004dc4:	f04f 37ff 	mov.w	r7, #4294967295
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 8004dc8:	49a1      	ldr	r1, [pc, #644]	; (8005050 <main+0x2f0>)
 8004dca:	6047      	str	r7, [r0, #4]
 8004dcc:	698c      	ldr	r4, [r1, #24]

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
 8004dce:	f8df b2dc 	ldr.w	fp, [pc, #732]	; 80050ac <main+0x34c>
  rccEnableAPB2(APB2_EN_MASK, FALSE);

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 8004dd2:	f5a0 4078 	sub.w	r0, r0, #63488	; 0xf800
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
 8004dd6:	4ea3      	ldr	r6, [pc, #652]	; (8005064 <main+0x304>)
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 8004dd8:	f044 047d 	orr.w	r4, r4, #125	; 0x7d
 8004ddc:	618c      	str	r4, [r1, #24]
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
 8004dde:	4da2      	ldr	r5, [pc, #648]	; (8005068 <main+0x308>)
  rccEnableAPB2(APB2_EN_MASK, FALSE);

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 8004de0:	60c7      	str	r7, [r0, #12]
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
 8004de2:	4ca2      	ldr	r4, [pc, #648]	; (800506c <main+0x30c>)

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
 8004de4:	f8c0 b004 	str.w	fp, [r0, #4]
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
 8004de8:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 80050b0 <main+0x350>
  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
 8004dec:	f04f 4b88 	mov.w	fp, #1140850688	; 0x44000000
 8004df0:	f8c0 b000 	str.w	fp, [r0]
  GPIOB->ODR = config->PBData.odr;
 8004df4:	60f7      	str	r7, [r6, #12]
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 8004df6:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
 8004dfa:	f04f 3788 	mov.w	r7, #2290649224	; 0x88888888
 8004dfe:	6077      	str	r7, [r6, #4]
  GPIOB->CRL = config->PBData.crl;
 8004e00:	f8c6 8000 	str.w	r8, [r6]
  GPIOC->ODR = config->PCData.odr;
 8004e04:	60eb      	str	r3, [r5, #12]
  GPIOC->CRH = config->PCData.crh;
 8004e06:	606b      	str	r3, [r5, #4]
  GPIOC->CRL = config->PCData.crl;
 8004e08:	602b      	str	r3, [r5, #0]
  GPIOD->ODR = config->PDData.odr;
 8004e0a:	60e3      	str	r3, [r4, #12]
  GPIOD->CRH = config->PDData.crh;
 8004e0c:	6063      	str	r3, [r4, #4]
  GPIOD->CRL = config->PDData.crl;
 8004e0e:	6023      	str	r3, [r4, #0]
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 8004e10:	60c3      	str	r3, [r0, #12]
  GPIOE->CRH = config->PEData.crh;
 8004e12:	6043      	str	r3, [r0, #4]
  GPIOE->CRL = config->PEData.crl;
 8004e14:	6003      	str	r3, [r0, #0]
                  STM32_DMA_CR_MSIZE_HWORD | STM32_DMA_CR_PSIZE_HWORD |
                  STM32_DMA_CR_MINC        | STM32_DMA_CR_TCIE        |
                  STM32_DMA_CR_TEIE;

  /* Temporary activation.*/
  rccEnableADC1(FALSE);
 8004e16:	6988      	ldr	r0, [r1, #24]
 *
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
 8004e18:	4f95      	ldr	r7, [pc, #596]	; (8005070 <main+0x310>)
 8004e1a:	2601      	movs	r6, #1
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8004e1c:	f107 0418 	add.w	r4, r7, #24
 8004e20:	f440 7000 	orr.w	r0, r0, #512	; 0x200
  ADC1->CR1 = 0;
  ADC1->CR2 = ADC_CR2_ADON;

  /* Reset calibration just to be safe.*/
  ADC1->CR2 = ADC_CR2_ADON | ADC_CR2_RSTCAL;
 8004e24:	2509      	movs	r5, #9
 8004e26:	703e      	strb	r6, [r7, #0]
  adcp->config   = NULL;
 8004e28:	607b      	str	r3, [r7, #4]
  adcp->samples  = NULL;
 8004e2a:	60bb      	str	r3, [r7, #8]
  adcp->depth    = 0;
 8004e2c:	60fb      	str	r3, [r7, #12]
  adcp->grpp     = NULL;
 8004e2e:	613b      	str	r3, [r7, #16]
#if ADC_USE_WAIT == TRUE
  adcp->thread   = NULL;
 8004e30:	617b      	str	r3, [r7, #20]
 8004e32:	623b      	str	r3, [r7, #32]

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
  ADCD1.adc = ADC1;
  ADCD1.dmastp  = STM32_DMA1_STREAM1;
 8004e34:	f8c7 e02c 	str.w	lr, [r7, #44]	; 0x2c
                  STM32_DMA_CR_MSIZE_HWORD | STM32_DMA_CR_PSIZE_HWORD |
                  STM32_DMA_CR_MINC        | STM32_DMA_CR_TCIE        |
                  STM32_DMA_CR_TEIE;

  /* Temporary activation.*/
  rccEnableADC1(FALSE);
 8004e38:	6188      	str	r0, [r1, #24]
#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
  ADCD1.adc = ADC1;
  ADCD1.dmastp  = STM32_DMA1_STREAM1;
  ADCD1.dmamode = STM32_DMA_CR_PL(STM32_ADC_ADC1_DMA_PRIORITY) |
 8004e3a:	f8c7 c030 	str.w	ip, [r7, #48]	; 0x30
 8004e3e:	61bc      	str	r4, [r7, #24]
  tqp->p_prev = (thread_t *)tqp;
 8004e40:	61fc      	str	r4, [r7, #28]
void adc_lld_init(void) {

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
  ADCD1.adc = ADC1;
 8004e42:	62ba      	str	r2, [r7, #40]	; 0x28
                  STM32_DMA_CR_MINC        | STM32_DMA_CR_TCIE        |
                  STM32_DMA_CR_TEIE;

  /* Temporary activation.*/
  rccEnableADC1(FALSE);
  ADC1->CR1 = 0;
 8004e44:	6053      	str	r3, [r2, #4]
  ADC1->CR2 = ADC_CR2_ADON;
 8004e46:	6096      	str	r6, [r2, #8]

  /* Reset calibration just to be safe.*/
  ADC1->CR2 = ADC_CR2_ADON | ADC_CR2_RSTCAL;
 8004e48:	6095      	str	r5, [r2, #8]
  while ((ADC1->CR2 & ADC_CR2_RSTCAL) != 0)
 8004e4a:	f8da 2008 	ldr.w	r2, [sl, #8]
 8004e4e:	4b83      	ldr	r3, [pc, #524]	; (800505c <main+0x2fc>)
 8004e50:	0716      	lsls	r6, r2, #28
 8004e52:	d4fa      	bmi.n	8004e4a <main+0xea>
    ;

  /* Calibration.*/
  ADC1->CR2 = ADC_CR2_ADON | ADC_CR2_CAL;
  while ((ADC1->CR2 & ADC_CR2_CAL) != 0)
 8004e54:	4619      	mov	r1, r3
  ADC1->CR2 = ADC_CR2_ADON | ADC_CR2_RSTCAL;
  while ((ADC1->CR2 & ADC_CR2_RSTCAL) != 0)
    ;

  /* Calibration.*/
  ADC1->CR2 = ADC_CR2_ADON | ADC_CR2_CAL;
 8004e56:	2205      	movs	r2, #5
 8004e58:	609a      	str	r2, [r3, #8]
  while ((ADC1->CR2 & ADC_CR2_CAL) != 0)
 8004e5a:	688d      	ldr	r5, [r1, #8]
 8004e5c:	4b7f      	ldr	r3, [pc, #508]	; (800505c <main+0x2fc>)
 8004e5e:	f015 0504 	ands.w	r5, r5, #4
 8004e62:	d1fa      	bne.n	8004e5a <main+0xfa>
    ;

  /* Return the ADC in low power mode.*/
  ADC1->CR2 = 0;
  rccDisableADC1(FALSE);
 8004e64:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8005050 <main+0x2f0>
  ADC1->CR2 = ADC_CR2_ADON | ADC_CR2_CAL;
  while ((ADC1->CR2 & ADC_CR2_CAL) != 0)
    ;

  /* Return the ADC in low power mode.*/
  ADC1->CR2 = 0;
 8004e68:	609d      	str	r5, [r3, #8]
  rccDisableADC1(FALSE);
 8004e6a:	f8d8 3018 	ldr.w	r3, [r8, #24]
 *
 * @init
 */
void canObjectInit(CANDriver *canp) {

  canp->state    = CAN_STOP;
 8004e6e:	4e81      	ldr	r6, [pc, #516]	; (8005074 <main+0x314>)
 8004e70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e74:	f8c8 3018 	str.w	r3, [r8, #24]
static void can_lld_set_filters(uint32_t can2sb,
                                uint32_t num,
                                const CANFilter *cfp) {

  /* Temporarily enabling CAN1 clock.*/
  rccEnableCAN1(FALSE);
 8004e78:	f8d8 101c 	ldr.w	r1, [r8, #28]
void can_lld_init(void) {

#if STM32_CAN_USE_CAN1
  /* Driver initialization.*/
  canObjectInit(&CAND1);
  CAND1.can = CAN1;
 8004e7c:	4b7e      	ldr	r3, [pc, #504]	; (8005078 <main+0x318>)
 8004e7e:	2201      	movs	r2, #1
static void can_lld_set_filters(uint32_t can2sb,
                                uint32_t num,
                                const CANFilter *cfp) {

  /* Temporarily enabling CAN1 clock.*/
  rccEnableCAN1(FALSE);
 8004e80:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8004e84:	7032      	strb	r2, [r6, #0]
 8004e86:	f8c8 101c 	str.w	r1, [r8, #28]

  /* Filters initialization.*/
  CAN1->FMR = (CAN1->FMR & 0xFFFF0000) | (can2sb << 8) | CAN_FMR_FINIT;
 8004e8a:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8004e8e:	f106 0008 	add.w	r0, r6, #8
 8004e92:	0c09      	lsrs	r1, r1, #16
 8004e94:	0409      	lsls	r1, r1, #16
 8004e96:	f441 6160 	orr.w	r1, r1, #3584	; 0xe00
 8004e9a:	4311      	orrs	r1, r2
 8004e9c:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    }
  }
  else {
    /* Setting up a single default filter that enables everything for both
       CANs.*/
    CAN1->sFilterRegister[0].FR1 = 0;
 8004ea0:	f8c3 5240 	str.w	r5, [r3, #576]	; 0x240
    CAN1->sFilterRegister[0].FR2 = 0;
 8004ea4:	f8c3 5244 	str.w	r5, [r3, #580]	; 0x244
#if STM32_HAS_CAN2
    CAN1->sFilterRegister[can2sb].FR1 = 0;
    CAN1->sFilterRegister[can2sb].FR2 = 0;
#endif
    CAN1->FM1R = 0;
 8004ea8:	f8c3 5204 	str.w	r5, [r3, #516]	; 0x204
    CAN1->FFA1R = 0;
 8004eac:	f8c3 5214 	str.w	r5, [r3, #532]	; 0x214
#if STM32_HAS_CAN2
    CAN1->FS1R = 1 | (1 << can2sb);
    CAN1->FA1R = 1 | (1 << can2sb);
#else
    CAN1->FS1R = 1;
 8004eb0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    CAN1->FA1R = 1;
 8004eb4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
#endif
  }
  CAN1->FMR &= ~CAN_FMR_FINIT;
 8004eb8:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
#if STM32_HAS_CAN2
    CAN1->FS1R = 1 | (1 << can2sb);
    CAN1->FA1R = 1 | (1 << can2sb);
#else
    CAN1->FS1R = 1;
    CAN1->FA1R = 1;
 8004ebc:	9202      	str	r2, [sp, #8]
#endif
  }
  CAN1->FMR &= ~CAN_FMR_FINIT;
 8004ebe:	f021 0101 	bic.w	r1, r1, #1
 8004ec2:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200

  /* Clock disabled, it will be enabled again in can_lld_start().*/
  rccDisableCAN1(FALSE);
 8004ec6:	f8d8 101c 	ldr.w	r1, [r8, #28]
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 8004eca:	f106 0c20 	add.w	ip, r6, #32
 8004ece:	f021 7100 	bic.w	r1, r1, #33554432	; 0x2000000
 8004ed2:	f8c8 101c 	str.w	r1, [r8, #28]
 8004ed6:	f106 0e24 	add.w	lr, r6, #36	; 0x24
 8004eda:	f106 0110 	add.w	r1, r6, #16
 8004ede:	f106 0b18 	add.w	fp, r6, #24
 8004ee2:	f106 0a1c 	add.w	sl, r6, #28
 8004ee6:	f106 0428 	add.w	r4, r6, #40	; 0x28
 8004eea:	f8c6 b018 	str.w	fp, [r6, #24]
 8004eee:	f8c6 a01c 	str.w	sl, [r6, #28]
 8004ef2:	f8c6 c020 	str.w	ip, [r6, #32]
 8004ef6:	f8c6 e024 	str.w	lr, [r6, #36]	; 0x24
 8004efa:	62b4      	str	r4, [r6, #40]	; 0x28
 8004efc:	60b0      	str	r0, [r6, #8]
  tqp->p_prev = (thread_t *)tqp;
 8004efe:	60f0      	str	r0, [r6, #12]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8004f00:	6131      	str	r1, [r6, #16]
  tqp->p_prev = (thread_t *)tqp;
 8004f02:	6171      	str	r1, [r6, #20]
void can_lld_init(void) {

#if STM32_CAN_USE_CAN1
  /* Driver initialization.*/
  canObjectInit(&CAND1);
  CAND1.can = CAN1;
 8004f04:	62f3      	str	r3, [r6, #44]	; 0x2c
  canp->config   = NULL;
 8004f06:	6075      	str	r5, [r6, #4]

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8004f08:	f648 4b9f 	movw	fp, #35999	; 0x8c9f
 * @notapi
 */
void sd_lld_init(void) {

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1, NULL, notify1);
 8004f0c:	f001 ff38 	bl	8006d80 <sdObjectInit.constprop.30>
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8004f10:	f64f 7cff 	movw	ip, #65535	; 0xffff
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 8004f14:	f64f 00ff 	movw	r0, #63743	; 0xf8ff

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8004f18:	f8d8 301c 	ldr.w	r3, [r8, #28]

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8004f1c:	f8df e194 	ldr.w	lr, [pc, #404]	; 80050b4 <main+0x354>

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8004f20:	f043 0301 	orr.w	r3, r3, #1
 8004f24:	f8c8 301c 	str.w	r3, [r8, #28]

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8004f28:	f8de 4004 	ldr.w	r4, [lr, #4]
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  STM32_ST_TIM->CCMR1  = 0;
  STM32_ST_TIM->CCR[0] = 0;
  STM32_ST_TIM->DIER   = 0;
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8004f2c:	9a02      	ldr	r2, [sp, #8]
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 8004f2e:	4953      	ldr	r1, [pc, #332]	; (800507c <main+0x31c>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8004f30:	f8df a184 	ldr.w	sl, [pc, #388]	; 80050b8 <main+0x358>

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8004f34:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8004f38:	f8ce 4004 	str.w	r4, [lr, #4]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8004f3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f40:	f04f 0e80 	mov.w	lr, #128	; 0x80
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004f44:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
 8004f48:	f8c3 b028 	str.w	fp, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8004f4c:	f8c3 c02c 	str.w	ip, [r3, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 8004f50:	619d      	str	r5, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8004f52:	635d      	str	r5, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8004f54:	60dd      	str	r5, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 8004f56:	605d      	str	r5, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8004f58:	615a      	str	r2, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8004f5a:	601a      	str	r2, [r3, #0]
 8004f5c:	9205      	str	r2, [sp, #20]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8004f5e:	f88a e31c 	strb.w	lr, [sl, #796]	; 0x31c
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004f62:	f8ca 4180 	str.w	r4, [sl, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8004f66:	f8ca 4000 	str.w	r4, [sl]
 8004f6a:	608d      	str	r5, [r1, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f6c:	68cc      	ldr	r4, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8004f6e:	4b44      	ldr	r3, [pc, #272]	; (8005080 <main+0x320>)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 8004f70:	4020      	ands	r0, r4
  reg_value  =  (reg_value                                   |
 8004f72:	4303      	orrs	r3, r0

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8004f74:	4c43      	ldr	r4, [pc, #268]	; (8005084 <main+0x324>)
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8004f76:	60cb      	str	r3, [r1, #12]
 8004f78:	68e3      	ldr	r3, [r4, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8004f7a:	4843      	ldr	r0, [pc, #268]	; (8005088 <main+0x328>)

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8004f7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f80:	60e3      	str	r3, [r4, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8004f82:	6803      	ldr	r3, [r0, #0]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8004f84:	4c41      	ldr	r4, [pc, #260]	; (800508c <main+0x32c>)
 8004f86:	f043 0301 	orr.w	r3, r3, #1
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 8004f8a:	f8a4 c024 	strh.w	ip, [r4, #36]	; 0x24
  tqp->p_prev = (thread_t *)tqp;
 8004f8e:	6064      	str	r4, [r4, #4]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 8004f90:	60a5      	str	r5, [r4, #8]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 8004f92:	6124      	str	r4, [r4, #16]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 8004f94:	6164      	str	r4, [r4, #20]
  SD1.usart = USART1;
 8004f96:	f8df b124 	ldr.w	fp, [pc, #292]	; 80050bc <main+0x35c>
 8004f9a:	6003      	str	r3, [r0, #0]
 8004f9c:	4a3c      	ldr	r2, [pc, #240]	; (8005090 <main+0x330>)
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)IRQn < 0) {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f9e:	2310      	movs	r3, #16
 8004fa0:	77cb      	strb	r3, [r1, #31]
 8004fa2:	f04f 0c20 	mov.w	ip, #32
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8004fa6:	f104 031c 	add.w	r3, r4, #28
 8004faa:	f881 c022 	strb.w	ip, [r1, #34]	; 0x22
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8004fae:	a806      	add	r0, sp, #24
 8004fb0:	f8cd c010 	str.w	ip, [sp, #16]
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8004fb4:	f04f 31ff 	mov.w	r1, #4294967295
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8004fb8:	6024      	str	r4, [r4, #0]
 8004fba:	61e3      	str	r3, [r4, #28]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 8004fbc:	6223      	str	r3, [r4, #32]
 8004fbe:	f8cb 22ac 	str.w	r2, [fp, #684]	; 0x2ac
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8004fca:	9106      	str	r1, [sp, #24]
  ch.vtlist.vt_delta = (systime_t)-1;
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = (systime_t)0;
 8004fcc:	84e5      	strh	r5, [r4, #38]	; 0x26
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 8004fce:	6725      	str	r5, [r4, #112]	; 0x70
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 8004fd0:	9507      	str	r5, [sp, #28]
  tmp->last       = (rtcnt_t)0;
 8004fd2:	9508      	str	r5, [sp, #32]
  tmp->n          = (ucnt_t)0;
 8004fd4:	9509      	str	r5, [sp, #36]	; 0x24
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8004fd6:	f001 fceb 	bl	80069b0 <chTMStartMeasurementX.constprop.78>
  chTMStopMeasurementX(&tm);
 8004fda:	a806      	add	r0, sp, #24
 8004fdc:	f7fb fb10 	bl	8000600 <chTMStopMeasurementX>
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8004fe0:	482c      	ldr	r0, [pc, #176]	; (8005094 <main+0x334>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8004fe2:	492d      	ldr	r1, [pc, #180]	; (8005098 <main+0x338>)
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8004fe4:	f020 0207 	bic.w	r2, r0, #7
  ch.tm.offset = tm.last;
 8004fe8:	9808      	ldr	r0, [sp, #32]
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 8004fea:	4b2c      	ldr	r3, [pc, #176]	; (800509c <main+0x33c>)
 8004fec:	6720      	str	r0, [r4, #112]	; 0x70
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8004fee:	6960      	ldr	r0, [r4, #20]
 8004ff0:	9202      	str	r2, [sp, #8]
 8004ff2:	6420      	str	r0, [r4, #64]	; 0x40
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8004ff4:	2040      	movs	r0, #64	; 0x40
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8004ff6:	9a05      	ldr	r2, [sp, #20]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8004ff8:	6360      	str	r0, [r4, #52]	; 0x34
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8004ffa:	66a0      	str	r0, [r4, #104]	; 0x68
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8004ffc:	f021 0107 	bic.w	r1, r1, #7
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8005000:	6960      	ldr	r0, [r4, #20]
 8005002:	f103 0e10 	add.w	lr, r3, #16
 8005006:	9103      	str	r1, [sp, #12]
 8005008:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 800500c:	f8c3 e010 	str.w	lr, [r3, #16]
  tqp->p_prev = (thread_t *)tqp;
 8005010:	f8c3 e014 	str.w	lr, [r3, #20]
 8005014:	619d      	str	r5, [r3, #24]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8005016:	f884 5049 	strb.w	r5, [r4, #73]	; 0x49
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 800501a:	6665      	str	r5, [r4, #100]	; 0x64
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 800501c:	6625      	str	r5, [r4, #96]	; 0x60
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 800501e:	f884 204a 	strb.w	r2, [r4, #74]	; 0x4a
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8005022:	6465      	str	r5, [r4, #68]	; 0x44
  REG_INSERT(tp);
 8005024:	63e4      	str	r4, [r4, #60]	; 0x3c
 8005026:	6101      	str	r1, [r0, #16]
 8005028:	481d      	ldr	r0, [pc, #116]	; (80050a0 <main+0x340>)
  default_heap.h_free.h.u.next = NULL;
 800502a:	609d      	str	r5, [r3, #8]
  default_heap.h_free.h.size = 0;
 800502c:	60dd      	str	r5, [r3, #12]
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 800502e:	6018      	str	r0, [r3, #0]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8005030:	f104 0354 	add.w	r3, r4, #84	; 0x54
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8005034:	f8df e088 	ldr.w	lr, [pc, #136]	; 80050c0 <main+0x360>
 8005038:	6563      	str	r3, [r4, #84]	; 0x54
  tqp->p_prev = (thread_t *)tqp;
 800503a:	65a3      	str	r3, [r4, #88]	; 0x58
 800503c:	9b02      	ldr	r3, [sp, #8]
 800503e:	6161      	str	r1, [r4, #20]
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8005040:	61a1      	str	r1, [r4, #24]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8005042:	f104 0150 	add.w	r1, r4, #80	; 0x50
 8005046:	6521      	str	r1, [r4, #80]	; 0x50
 8005048:	f8ce 3000 	str.w	r3, [lr]
 800504c:	e03a      	b.n	80050c4 <main+0x364>
 800504e:	bf00      	nop
 8005050:	40021000 	.word	0x40021000
 8005054:	40007000 	.word	0x40007000
 8005058:	20000ce8 	.word	0x20000ce8
 800505c:	40012400 	.word	0x40012400
 8005060:	40020000 	.word	0x40020000
 8005064:	40010c00 	.word	0x40010c00
 8005068:	40011000 	.word	0x40011000
 800506c:	40011400 	.word	0x40011400
 8005070:	200013c0 	.word	0x200013c0
 8005074:	200009c8 	.word	0x200009c8
 8005078:	40006400 	.word	0x40006400
 800507c:	e000ed00 	.word	0xe000ed00
 8005080:	05fa0300 	.word	0x05fa0300
 8005084:	e000edf0 	.word	0xe000edf0
 8005088:	e0001000 	.word	0xe0001000
 800508c:	200013f8 	.word	0x200013f8
 8005090:	40013800 	.word	0x40013800
 8005094:	20001887 	.word	0x20001887
 8005098:	20005000 	.word	0x20005000
 800509c:	200009f8 	.word	0x200009f8
 80050a0:	08000441 	.word	0x08000441
 80050a4:	08007df0 	.word	0x08007df0
 80050a8:	2000098c 	.word	0x2000098c
 80050ac:	888944b4 	.word	0x888944b4
 80050b0:	33333844 	.word	0x33333844
 80050b4:	e0042000 	.word	0xe0042000
 80050b8:	e000e100 	.word	0xe000e100
 80050bc:	20001560 	.word	0x20001560
 80050c0:	200013b8 	.word	0x200013b8
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 80050c4:	4997      	ldr	r1, [pc, #604]	; (8005324 <main+0x5c4>)
 80050c6:	9b03      	ldr	r3, [sp, #12]
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 80050c8:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
 80050cc:	600b      	str	r3, [r1, #0]
 80050ce:	f385 8811 	msr	BASEPRI, r5
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80050d2:	b662      	cpsie	i
 80050d4:	4994      	ldr	r1, [pc, #592]	; (8005328 <main+0x5c8>)
 80050d6:	69a3      	ldr	r3, [r4, #24]
#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
    thread_t *tp =  chThdCreateStatic(ch.idle_thread_wa,
 80050d8:	f104 0078 	add.w	r0, r4, #120	; 0x78
 80050dc:	6199      	str	r1, [r3, #24]
 80050de:	21d8      	movs	r1, #216	; 0xd8
 80050e0:	9500      	str	r5, [sp, #0]
 80050e2:	4b92      	ldr	r3, [pc, #584]	; (800532c <main+0x5cc>)
 80050e4:	f7fb fb64 	bl	80007b0 <chThdCreateStatic>
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 80050e8:	4b91      	ldr	r3, [pc, #580]	; (8005330 <main+0x5d0>)
 80050ea:	6183      	str	r3, [r0, #24]
 * @notapi
 */
void sd_lld_init(void) {

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1, NULL, notify1);
 80050ec:	f001 fe48 	bl	8006d80 <sdObjectInit.constprop.30>
  SD1.usart = USART1;
 80050f0:	4b90      	ldr	r3, [pc, #576]	; (8005334 <main+0x5d4>)

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80050f2:	f8dd c010 	ldr.w	ip, [sp, #16]
 80050f6:	f8cb 32ac 	str.w	r3, [fp, #684]	; 0x2ac
 80050fa:	f38c 8811 	msr	BASEPRI, ip
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 80050fe:	f89b 3008 	ldrb.w	r3, [fp, #8]
 8005102:	2b01      	cmp	r3, #1
 8005104:	f000 8100 	beq.w	8005308 <main+0x5a8>
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
#else
  if (sdp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / config->speed;
 8005108:	498b      	ldr	r1, [pc, #556]	; (8005338 <main+0x5d8>)
 800510a:	4a8c      	ldr	r2, [pc, #560]	; (800533c <main+0x5dc>)
 800510c:	6808      	ldr	r0, [r1, #0]
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] config    the architecture-dependent serial driver configuration
 */
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
  USART_TypeDef *u = sdp->usart;
 800510e:	f8db 32ac 	ldr.w	r3, [fp, #684]	; 0x2ac
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
#else
  if (sdp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / config->speed;
 8005112:	fbb2 f2f0 	udiv	r2, r2, r0
 8005116:	609a      	str	r2, [r3, #8]

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 8005118:	888a      	ldrh	r2, [r1, #4]
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800511a:	88c8      	ldrh	r0, [r1, #6]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 800511c:	8909      	ldrh	r1, [r1, #8]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 800511e:	f442 5204 	orr.w	r2, r2, #8448	; 0x2100
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8005122:	f040 0040 	orr.w	r0, r0, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 8005126:	f042 022c 	orr.w	r2, r2, #44	; 0x2c
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
 800512a:	f041 0101 	orr.w	r1, r1, #1
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800512e:	b280      	uxth	r0, r0
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 8005130:	b292      	uxth	r2, r2
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8005132:	b289      	uxth	r1, r1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->SR = 0;
 8005134:	2500      	movs	r5, #0
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8005136:	6118      	str	r0, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8005138:	6159      	str	r1, [r3, #20]

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
  sdp->state = SD_READY;
 800513a:	2002      	movs	r0, #2
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 800513c:	60da      	str	r2, [r3, #12]
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->SR = 0;
 800513e:	601d      	str	r5, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 8005140:	681a      	ldr	r2, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f88b 0008 	strb.w	r0, [fp, #8]
 8005148:	f385 8811 	msr	BASEPRI, r5
 800514c:	4b7c      	ldr	r3, [pc, #496]	; (8005340 <main+0x5e0>)
void consoleInit(void){
  sdInit();
  /* Shell initialization.*/
  sdStart(&SD1, &ser_cfg);
  shellInit();
  consoleThread = NULL;
 800514e:	4c7d      	ldr	r4, [pc, #500]	; (8005344 <main+0x5e4>)
   */
  halInit();
  chSysInit();

  consoleInit();
  chThdSleepMilliseconds(100);
 8005150:	20c8      	movs	r0, #200	; 0xc8
 8005152:	6025      	str	r5, [r4, #0]
 8005154:	601b      	str	r3, [r3, #0]
 8005156:	f7fc f94b 	bl	80013f0 <chThdSleep>
 800515a:	2320      	movs	r3, #32
 800515c:	f383 8811 	msr	BASEPRI, r3
 * @notapi
 */
void adc_lld_start(ADCDriver *adcp) {

  /* If in stopped state then enables the ADC and DMA clocks.*/
  if (adcp->state == ADC_STOP) {
 8005160:	783a      	ldrb	r2, [r7, #0]
  osalDbgCheck(adcp != NULL);

  osalSysLock();
  osalDbgAssert((adcp->state == ADC_STOP) || (adcp->state == ADC_READY),
                "invalid state");
  adcp->config = config;
 8005162:	607d      	str	r5, [r7, #4]
 8005164:	2a01      	cmp	r2, #1
 8005166:	4d78      	ldr	r5, [pc, #480]	; (8005348 <main+0x5e8>)
 8005168:	d078      	beq.n	800525c <main+0x4fc>
  adc_lld_start(adcp);
  adcp->state = ADC_READY;
 800516a:	f04f 0802 	mov.w	r8, #2
 800516e:	f887 8000 	strb.w	r8, [r7]
 8005172:	2300      	movs	r3, #0
 8005174:	f383 8811 	msr	BASEPRI, r3


  init_measures();
  palClearPad(GPIOB, GPIOB_LED3);
 8005178:	4d74      	ldr	r5, [pc, #464]	; (800534c <main+0x5ec>)


void init_measures()
{
  adcStart(&ADCD1, NULL);
  chThdCreateStatic(waSampleThread, sizeof(waSampleThread), NORMALPRIO, SampleThread, NULL);
 800517a:	9300      	str	r3, [sp, #0]
 800517c:	f44f 7132 	mov.w	r1, #712	; 0x2c8
 8005180:	2240      	movs	r2, #64	; 0x40
 8005182:	4b73      	ldr	r3, [pc, #460]	; (8005350 <main+0x5f0>)
 8005184:	4873      	ldr	r0, [pc, #460]	; (8005354 <main+0x5f4>)
 8005186:	f7fb fb13 	bl	80007b0 <chThdCreateStatic>
 800518a:	2720      	movs	r7, #32
  palClearPad(GPIOB, GPIOB_LED1);
 800518c:	2280      	movs	r2, #128	; 0x80
  palClearPad(GPIOB, GPIOB_LED2);
 800518e:	2340      	movs	r3, #64	; 0x40
  consoleInit();
  chThdSleepMilliseconds(100);


  init_measures();
  palClearPad(GPIOB, GPIOB_LED3);
 8005190:	616f      	str	r7, [r5, #20]
  palClearPad(GPIOB, GPIOB_LED1);
  palClearPad(GPIOB, GPIOB_LED2);

  chThdSleepMilliseconds(100);
 8005192:	20c8      	movs	r0, #200	; 0xc8
  chThdSleepMilliseconds(100);


  init_measures();
  palClearPad(GPIOB, GPIOB_LED3);
  palClearPad(GPIOB, GPIOB_LED1);
 8005194:	616a      	str	r2, [r5, #20]
  palClearPad(GPIOB, GPIOB_LED2);
 8005196:	616b      	str	r3, [r5, #20]

  chThdSleepMilliseconds(100);
 8005198:	f7fc f92a 	bl	80013f0 <chThdSleep>
  palSetPad(GPIOB, GPIOB_LED3);
 800519c:	612f      	str	r7, [r5, #16]
 800519e:	f387 8811 	msr	BASEPRI, r7

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80051a2:	4b6d      	ldr	r3, [pc, #436]	; (8005358 <main+0x5f8>)
 80051a4:	22b0      	movs	r2, #176	; 0xb0
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80051a6:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
 80051aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    nvicEnableVector(STM32_CAN1_TX_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
    nvicEnableVector(STM32_CAN1_RX0_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
    nvicEnableVector(STM32_CAN1_RX1_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
    nvicEnableVector(STM32_CAN1_SCE_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
#endif
    rccEnableCAN1(FALSE);
 80051ae:	486b      	ldr	r0, [pc, #428]	; (800535c <main+0x5fc>)
 80051b0:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
 80051b4:	f44f 1780 	mov.w	r7, #1048576	; 0x100000

  osalSysLock();
  osalDbgAssert(canp->state == CAN_STOP, "invalid state");

  /* Entering initialization mode. */
  canp->state = CAN_STARTING;
 80051b8:	f886 8000 	strb.w	r8, [r6]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80051bc:	f883 2313 	strb.w	r2, [r3, #787]	; 0x313
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80051c0:	f8c3 e180 	str.w	lr, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80051c4:	f8c3 e000 	str.w	lr, [r3]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80051c8:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80051cc:	f8c3 7180 	str.w	r7, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80051d0:	601f      	str	r7, [r3, #0]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80051d2:	f883 2315 	strb.w	r2, [r3, #789]	; 0x315
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80051d6:	f8c3 5180 	str.w	r5, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80051da:	601d      	str	r5, [r3, #0]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80051dc:	f883 2316 	strb.w	r2, [r3, #790]	; 0x316
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80051e0:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80051e4:	6019      	str	r1, [r3, #0]
 80051e6:	69c1      	ldr	r1, [r0, #28]
    rccEnableCAN2(FALSE);
  }
#endif

  /* Configuring CAN. */
  canp->can->MCR = CAN_MCR_INRQ;
 80051e8:	6af2      	ldr	r2, [r6, #44]	; 0x2c
  canp->config = config;
 80051ea:	4b5d      	ldr	r3, [pc, #372]	; (8005360 <main+0x600>)
    nvicEnableVector(STM32_CAN1_TX_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
    nvicEnableVector(STM32_CAN1_RX0_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
    nvicEnableVector(STM32_CAN1_RX1_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
    nvicEnableVector(STM32_CAN1_SCE_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
#endif
    rccEnableCAN1(FALSE);
 80051ec:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
    rccEnableCAN2(FALSE);
  }
#endif

  /* Configuring CAN. */
  canp->can->MCR = CAN_MCR_INRQ;
 80051f0:	2501      	movs	r5, #1
    nvicEnableVector(STM32_CAN1_TX_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
    nvicEnableVector(STM32_CAN1_RX0_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
    nvicEnableVector(STM32_CAN1_RX1_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
    nvicEnableVector(STM32_CAN1_SCE_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
#endif
    rccEnableCAN1(FALSE);
 80051f2:	61c1      	str	r1, [r0, #28]
 80051f4:	6073      	str	r3, [r6, #4]
    rccEnableCAN2(FALSE);
  }
#endif

  /* Configuring CAN. */
  canp->can->MCR = CAN_MCR_INRQ;
 80051f6:	6015      	str	r5, [r2, #0]
  while ((canp->can->MSR & CAN_MSR_INAK) == 0)
 80051f8:	6851      	ldr	r1, [r2, #4]
 80051fa:	07c8      	lsls	r0, r1, #31
 80051fc:	d409      	bmi.n	8005212 <main+0x4b2>
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 80051fe:	2101      	movs	r1, #1
 8005200:	2008      	movs	r0, #8
 8005202:	f7fb ffa5 	bl	8001150 <chSchGoSleepTimeoutS>
 8005206:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8005208:	4b56      	ldr	r3, [pc, #344]	; (8005364 <main+0x604>)
 800520a:	6851      	ldr	r1, [r2, #4]
 800520c:	07c9      	lsls	r1, r1, #31
 800520e:	d5f6      	bpl.n	80051fe <main+0x49e>
 8005210:	685b      	ldr	r3, [r3, #4]
  canp->can->IER = CAN_IER_TMEIE  | CAN_IER_FMPIE0 | CAN_IER_FMPIE1 |
                   CAN_IER_WKUIE  | CAN_IER_ERRIE  | CAN_IER_LECIE  |
                   CAN_IER_BOFIE  | CAN_IER_EPVIE  | CAN_IER_EWGIE  |
                   CAN_IER_FOVIE0 | CAN_IER_FOVIE1;
#else
  canp->can->IER = CAN_IER_TMEIE  | CAN_IER_FMPIE0 | CAN_IER_FMPIE1 |
 8005212:	4855      	ldr	r0, [pc, #340]	; (8005368 <main+0x608>)
  /* Low level initialization, could be a slow process and sleeps could
     be performed inside.*/
  can_lld_start(canp);

  /* The driver finally goes into the ready state.*/
  canp->state = CAN_READY;
 8005214:	2103      	movs	r1, #3
  /* Configuring CAN. */
  canp->can->MCR = CAN_MCR_INRQ;
  while ((canp->can->MSR & CAN_MSR_INAK) == 0)
    osalThreadSleepS(1);
  canp->can->BTR = canp->config->btr;
  canp->can->MCR = canp->config->mcr;
 8005216:	e893 00a0 	ldmia.w	r3, {r5, r7}
 800521a:	2300      	movs	r3, #0

  /* Configuring CAN. */
  canp->can->MCR = CAN_MCR_INRQ;
  while ((canp->can->MSR & CAN_MSR_INAK) == 0)
    osalThreadSleepS(1);
  canp->can->BTR = canp->config->btr;
 800521c:	61d7      	str	r7, [r2, #28]
  canp->can->MCR = canp->config->mcr;
 800521e:	6015      	str	r5, [r2, #0]
  canp->can->IER = CAN_IER_TMEIE  | CAN_IER_FMPIE0 | CAN_IER_FMPIE1 |
                   CAN_IER_WKUIE  | CAN_IER_ERRIE  | CAN_IER_LECIE  |
                   CAN_IER_BOFIE  | CAN_IER_EPVIE  | CAN_IER_EWGIE  |
                   CAN_IER_FOVIE0 | CAN_IER_FOVIE1;
#else
  canp->can->IER = CAN_IER_TMEIE  | CAN_IER_FMPIE0 | CAN_IER_FMPIE1 |
 8005220:	6150      	str	r0, [r2, #20]
 8005222:	7031      	strb	r1, [r6, #0]
 8005224:	f383 8811 	msr	BASEPRI, r3
 8005228:	4f50      	ldr	r7, [pc, #320]	; (800536c <main+0x60c>)
  if (!consoleThread) {
    consoleThread = shellCreate(&shCfg, SHELL_WA_SIZE, NORMALPRIO);
  }
  else if (chThdTerminatedX(consoleThread)) {
    chThdRelease(consoleThread);    /* Recovers memory of the previous shell.   */
    consoleThread = NULL;           /* Triggers spawning of a new shell.        */
 800522a:	461e      	mov	r6, r3
  shellInit();
  consoleThread = NULL;
}

void consoleStart(void){
  if (!consoleThread) {
 800522c:	4d45      	ldr	r5, [pc, #276]	; (8005344 <main+0x5e4>)
 800522e:	e003      	b.n	8005238 <main+0x4d8>
   * sleeping in a loop and check the button state, when the button is
   * pressed the test procedure is launched.
   */
  while (true) {
    consoleStart();
    chThdSleepMilliseconds(200);
 8005230:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8005234:	f7fc f8dc 	bl	80013f0 <chThdSleep>
 8005238:	6820      	ldr	r0, [r4, #0]
 800523a:	b130      	cbz	r0, 800524a <main+0x4ea>
    consoleThread = shellCreate(&shCfg, SHELL_WA_SIZE, NORMALPRIO);
  }
  else if (chThdTerminatedX(consoleThread)) {
 800523c:	7f03      	ldrb	r3, [r0, #28]
 800523e:	2b0f      	cmp	r3, #15
 8005240:	d1f6      	bne.n	8005230 <main+0x4d0>
    chThdRelease(consoleThread);    /* Recovers memory of the previous shell.   */
 8005242:	f7fb fd8d 	bl	8000d60 <chThdRelease>
    consoleThread = NULL;           /* Triggers spawning of a new shell.        */
 8005246:	602e      	str	r6, [r5, #0]
 8005248:	e7f2      	b.n	8005230 <main+0x4d0>
 * @api
 */
#if CH_CFG_USE_HEAP && CH_CFG_USE_DYNAMIC
thread_t *shellCreate(const ShellConfig *scp, size_t size, tprio_t prio) {

  return chThdCreateFromHeap(NULL, size, prio, shell_thread, (void *)scp);
 800524a:	9700      	str	r7, [sp, #0]
 800524c:	f640 01c8 	movw	r1, #2248	; 0x8c8
 8005250:	2240      	movs	r2, #64	; 0x40
 8005252:	4b47      	ldr	r3, [pc, #284]	; (8005370 <main+0x610>)
 8005254:	f7fb fe44 	bl	8000ee0 <chThdCreateFromHeap>
  consoleThread = NULL;
}

void consoleStart(void){
  if (!consoleThread) {
    consoleThread = shellCreate(&shCfg, SHELL_WA_SIZE, NORMALPRIO);
 8005258:	6028      	str	r0, [r5, #0]
 800525a:	e7e9      	b.n	8005230 <main+0x4d0>
#if STM32_ADC_USE_ADC1
    if (&ADCD1 == adcp) {
      bool b;
      b = dmaStreamAllocate(adcp->dmastp,
 800525c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
                       void *param) {

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
 800525e:	4945      	ldr	r1, [pc, #276]	; (8005374 <main+0x614>)
 8005260:	7c58      	ldrb	r0, [r3, #17]
 8005262:	6809      	ldr	r1, [r1, #0]
 8005264:	4082      	lsls	r2, r0
 8005266:	420a      	tst	r2, r1
 8005268:	d14c      	bne.n	8005304 <main+0x5a4>
    return true;

  /* Installs the DMA handler.*/
  _stm32_dma_isr_redir[dmastp->selfindex].dma_func  = func;
 800526a:	f8df e110 	ldr.w	lr, [pc, #272]	; 800537c <main+0x61c>
  _stm32_dma_isr_redir[dmastp->selfindex].dma_param = param;
 800526e:	eb09 02c0 	add.w	r2, r9, r0, lsl #3
 8005272:	6055      	str	r5, [r2, #4]

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 8005274:	064d      	lsls	r5, r1, #25
  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
    return true;

  /* Installs the DMA handler.*/
  _stm32_dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8005276:	f849 e030 	str.w	lr, [r9, r0, lsl #3]
  _stm32_dma_isr_redir[dmastp->selfindex].dma_param = param;

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 800527a:	d104      	bne.n	8005286 <main+0x526>
    rccEnableDMA1(false);
 800527c:	4837      	ldr	r0, [pc, #220]	; (800535c <main+0x5fc>)
 800527e:	6942      	ldr	r2, [r0, #20]
 8005280:	f042 0201 	orr.w	r2, r2, #1
 8005284:	6142      	str	r2, [r0, #20]
    rccEnableDMA2(false);
  }
#endif

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 8005286:	685a      	ldr	r2, [r3, #4]
 8005288:	f8d3 c000 	ldr.w	ip, [r3]
 800528c:	6815      	ldr	r5, [r2, #0]
 800528e:	200f      	movs	r0, #15
 8005290:	f025 050f 	bic.w	r5, r5, #15
 8005294:	6015      	str	r5, [r2, #0]
 8005296:	f893 e010 	ldrb.w	lr, [r3, #16]
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;

  /* Enables the associated IRQ vector if not alread enabled and if a
     callback is defined.*/
  if (((dma_streams_mask & dmastp->cmask) == 0U) &&
 800529a:	689d      	ldr	r5, [r3, #8]
    rccEnableDMA2(false);
  }
#endif

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 800529c:	fa00 f00e 	lsl.w	r0, r0, lr
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;

  /* Enables the associated IRQ vector if not alread enabled and if a
     callback is defined.*/
  if (((dma_streams_mask & dmastp->cmask) == 0U) &&
 80052a0:	4229      	tst	r1, r5
  }
#endif

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 80052a2:	f04f 0e00 	mov.w	lr, #0
    rccEnableDMA2(false);
  }
#endif

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 80052a6:	f8cc 0004 	str.w	r0, [ip, #4]
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 80052aa:	f8c2 e000 	str.w	lr, [r2]

  /* Enables the associated IRQ vector if not alread enabled and if a
     callback is defined.*/
  if (((dma_streams_mask & dmastp->cmask) == 0U) &&
 80052ae:	d117      	bne.n	80052e0 <main+0x580>
      (func != NULL)) {
    nvicEnableVector(dmastp->vector, priority);
 80052b0:	7c98      	ldrb	r0, [r3, #18]
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80052b2:	2501      	movs	r5, #1
 80052b4:	0942      	lsrs	r2, r0, #5
 80052b6:	0092      	lsls	r2, r2, #2

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80052b8:	f100 4e60 	add.w	lr, r0, #3758096384	; 0xe0000000
 80052bc:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80052c0:	f000 001f 	and.w	r0, r0, #31
 80052c4:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
 80052c8:	fa05 f000 	lsl.w	r0, r5, r0

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80052cc:	f50e 4e61 	add.w	lr, lr, #57600	; 0xe100
 80052d0:	f04f 0c60 	mov.w	ip, #96	; 0x60
 80052d4:	f88e c300 	strb.w	ip, [lr, #768]	; 0x300
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80052d8:	f8c2 0180 	str.w	r0, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80052dc:	6010      	str	r0, [r2, #0]
 80052de:	685a      	ldr	r2, [r3, #4]
  }

  /* Marks the stream as allocated.*/
  dma_streams_mask |= (1U << dmastp->selfindex);
 80052e0:	7c58      	ldrb	r0, [r3, #17]
 80052e2:	2301      	movs	r3, #1
 80052e4:	4083      	lsls	r3, r0
 80052e6:	4319      	orrs	r1, r3
 80052e8:	4b22      	ldr	r3, [pc, #136]	; (8005374 <main+0x614>)
 80052ea:	6019      	str	r1, [r3, #0]
                            STM32_ADC_ADC1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)adc_lld_serve_rx_interrupt,
                            (void *)adcp);
      osalDbgAssert(!b, "stream already allocated");
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
 80052ec:	4b22      	ldr	r3, [pc, #136]	; (8005378 <main+0x618>)
      rccEnableADC1(FALSE);
 80052ee:	481b      	ldr	r0, [pc, #108]	; (800535c <main+0x5fc>)
      b = dmaStreamAllocate(adcp->dmastp,
                            STM32_ADC_ADC1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)adc_lld_serve_rx_interrupt,
                            (void *)adcp);
      osalDbgAssert(!b, "stream already allocated");
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
 80052f0:	6093      	str	r3, [r2, #8]
      rccEnableADC1(FALSE);
 80052f2:	6983      	ldr	r3, [r0, #24]
    }
#endif

    /* ADC setup, the calibration procedure has already been performed
       during initialization.*/
    adcp->adc->CR1 = 0;
 80052f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052f6:	2100      	movs	r1, #0
                            STM32_ADC_ADC1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)adc_lld_serve_rx_interrupt,
                            (void *)adcp);
      osalDbgAssert(!b, "stream already allocated");
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
      rccEnableADC1(FALSE);
 80052f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052fc:	6183      	str	r3, [r0, #24]
    }
#endif

    /* ADC setup, the calibration procedure has already been performed
       during initialization.*/
    adcp->adc->CR1 = 0;
 80052fe:	6051      	str	r1, [r2, #4]
    adcp->adc->CR2 = 0;
 8005300:	6091      	str	r1, [r2, #8]
 8005302:	e732      	b.n	800516a <main+0x40a>
 8005304:	685a      	ldr	r2, [r3, #4]
 8005306:	e7f1      	b.n	80052ec <main+0x58c>
    config = &default_config;

  if (sdp->state == SD_STOP) {
#if STM32_SERIAL_USE_USART1
    if (&SD1 == sdp) {
      rccEnableUSART1(FALSE);
 8005308:	f8d8 3018 	ldr.w	r3, [r8, #24]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800530c:	22c0      	movs	r2, #192	; 0xc0
 800530e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005312:	f8c8 3018 	str.w	r3, [r8, #24]
 8005316:	f88a 2325 	strb.w	r2, [sl, #805]	; 0x325
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800531a:	f8ca c184 	str.w	ip, [sl, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800531e:	f8ca c004 	str.w	ip, [sl, #4]
 8005322:	e6f1      	b.n	8005108 <main+0x3a8>
 8005324:	200013bc 	.word	0x200013bc
 8005328:	08007c30 	.word	0x08007c30
 800532c:	080004f1 	.word	0x080004f1
 8005330:	08007dcc 	.word	0x08007dcc
 8005334:	40013800 	.word	0x40013800
 8005338:	20000838 	.word	0x20000838
 800533c:	02255100 	.word	0x02255100
 8005340:	20000a18 	.word	0x20000a18
 8005344:	200009c4 	.word	0x200009c4
 8005348:	200013c0 	.word	0x200013c0
 800534c:	40010c00 	.word	0x40010c00
 8005350:	08006701 	.word	0x08006701
 8005354:	20000a20 	.word	0x20000a20
 8005358:	e000e100 	.word	0xe000e100
 800535c:	40021000 	.word	0x40021000
 8005360:	08007c20 	.word	0x08007c20
 8005364:	200009c8 	.word	0x200009c8
 8005368:	0001875b 	.word	0x0001875b
 800536c:	08007c50 	.word	0x08007c50
 8005370:	08004b31 	.word	0x08004b31
 8005374:	20000ce8 	.word	0x20000ce8
 8005378:	4001244c 	.word	0x4001244c
 800537c:	08002891 	.word	0x08002891

08005380 <notify>:

#if CH_CFG_USE_QUEUES || defined(__DOXYGEN__)

#define TEST_QUEUES_SIZE 4

static void notify(io_queue_t *qp) {
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
	...

08005390 <queues2_setup.lto_priv.159>:
 * This test case tests synchronous and asynchronous operations on an
 * @p OutputQueue object including timeouts. The queue state must remain
 * consistent through the whole test.
 */

static void queues2_setup(void) {
 8005390:	b430      	push	{r4, r5}
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
 8005392:	4a08      	ldr	r2, [pc, #32]	; (80053b4 <queues2_setup.lto_priv.159+0x24>)
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8005394:	4b08      	ldr	r3, [pc, #32]	; (80053b8 <queues2_setup.lto_priv.159+0x28>)
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 8005396:	4809      	ldr	r0, [pc, #36]	; (80053bc <queues2_setup.lto_priv.159+0x2c>)
  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8005398:	1d15      	adds	r5, r2, #4
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 800539a:	2404      	movs	r4, #4
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
 800539c:	2100      	movs	r1, #0
  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 800539e:	611d      	str	r5, [r3, #16]
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 80053a0:	609c      	str	r4, [r3, #8]
 80053a2:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80053a4:	605b      	str	r3, [r3, #4]
  oqp->q_buffer  = bp;
 80053a6:	60da      	str	r2, [r3, #12]
  oqp->q_rdptr   = bp;
 80053a8:	619a      	str	r2, [r3, #24]
  oqp->q_wrptr   = bp;
 80053aa:	615a      	str	r2, [r3, #20]
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 80053ac:	61d8      	str	r0, [r3, #28]
  oqp->q_link    = link;
 80053ae:	6219      	str	r1, [r3, #32]

  chOQObjectInit(&oq, wa[0], TEST_QUEUES_SIZE, notify, NULL);
}
 80053b0:	bc30      	pop	{r4, r5}
 80053b2:	4770      	bx	lr
 80053b4:	20000d50 	.word	0x20000d50
 80053b8:	20000850 	.word	0x20000850
 80053bc:	08005381 	.word	0x08005381

080053c0 <queues1_setup.lto_priv.157>:
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 80053c0:	4a08      	ldr	r2, [pc, #32]	; (80053e4 <queues1_setup.lto_priv.157+0x24>)
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80053c2:	4b09      	ldr	r3, [pc, #36]	; (80053e8 <queues1_setup.lto_priv.157+0x28>)
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 80053c4:	4809      	ldr	r0, [pc, #36]	; (80053ec <queues1_setup.lto_priv.157+0x2c>)
 * This test case tests synchronous and asynchronous operations on an
 * @p InputQueue object including timeouts. The queue state must remain
 * consistent through the whole test.
 */

static void queues1_setup(void) {
 80053c6:	b410      	push	{r4}
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 80053c8:	2100      	movs	r1, #0
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 80053ca:	1d14      	adds	r4, r2, #4
 80053cc:	611c      	str	r4, [r3, #16]
 80053ce:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80053d0:	605b      	str	r3, [r3, #4]
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 80053d2:	60da      	str	r2, [r3, #12]
  iqp->q_rdptr   = bp;
 80053d4:	619a      	str	r2, [r3, #24]
  iqp->q_wrptr   = bp;
 80053d6:	615a      	str	r2, [r3, #20]
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 80053d8:	61d8      	str	r0, [r3, #28]
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 80053da:	6099      	str	r1, [r3, #8]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
  iqp->q_link    = link;
 80053dc:	6219      	str	r1, [r3, #32]

  chIQObjectInit(&iq, wa[0], TEST_QUEUES_SIZE, notify, NULL);
}
 80053de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053e2:	4770      	bx	lr
 80053e4:	20000d50 	.word	0x20000d50
 80053e8:	20000874 	.word	0x20000874
 80053ec:	08005381 	.word	0x08005381

080053f0 <dyn3_setup.lto_priv.155>:
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
  heapp->h_free.h.u.next = hp;
 80053f0:	4909      	ldr	r1, [pc, #36]	; (8005418 <dyn3_setup.lto_priv.155+0x28>)
    ftp = chRegNextThread(ftp);
  } while (ftp != NULL);
  return found;
}

static void dyn3_setup(void) {
 80053f2:	b410      	push	{r4}
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 80053f4:	2200      	movs	r2, #0
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 80053f6:	f44f 64cc 	mov.w	r4, #1632	; 0x660
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 80053fa:	4b08      	ldr	r3, [pc, #32]	; (800541c <dyn3_setup.lto_priv.155+0x2c>)
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 80053fc:	e881 0014 	stmia.w	r1, {r2, r4}
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8005400:	f103 0010 	add.w	r0, r3, #16

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
 8005404:	60da      	str	r2, [r3, #12]
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
  heapp->h_free.h.u.next = hp;
 8005406:	6099      	str	r1, [r3, #8]
 8005408:	6118      	str	r0, [r3, #16]
  tqp->p_prev = (thread_t *)tqp;
 800540a:	6158      	str	r0, [r3, #20]
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 800540c:	601a      	str	r2, [r3, #0]
 800540e:	619a      	str	r2, [r3, #24]

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}
 8005410:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	20000d50 	.word	0x20000d50
 800541c:	20000cf0 	.word	0x20000cf0

08005420 <dyn2_setup.lto_priv.153>:
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 8005420:	4b03      	ldr	r3, [pc, #12]	; (8005430 <dyn2_setup.lto_priv.153+0x10>)
 8005422:	2200      	movs	r2, #0
  mp->mp_object_size = size;
 8005424:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005428:	6059      	str	r1, [r3, #4]
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 800542a:	601a      	str	r2, [r3, #0]
  mp->mp_object_size = size;
  mp->mp_provider = provider;
 800542c:	609a      	str	r2, [r3, #8]
 800542e:	4770      	bx	lr
 8005430:	20001870 	.word	0x20001870
	...

08005440 <dyn1_setup.lto_priv.151>:
  heapp->h_free.h.u.next = hp;
 8005440:	4909      	ldr	r1, [pc, #36]	; (8005468 <dyn1_setup.lto_priv.151+0x28>)

  test_emit_token(*(char *)p);
}

#if CH_CFG_USE_HEAP || defined(__DOXYGEN__)
static void dyn1_setup(void) {
 8005442:	b410      	push	{r4}
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 8005444:	2200      	movs	r2, #0
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 8005446:	f44f 64cc 	mov.w	r4, #1632	; 0x660
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 800544a:	4b08      	ldr	r3, [pc, #32]	; (800546c <dyn1_setup.lto_priv.151+0x2c>)
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 800544c:	e881 0014 	stmia.w	r1, {r2, r4}
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8005450:	f103 0010 	add.w	r0, r3, #16

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
 8005454:	60da      	str	r2, [r3, #12]
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
  heapp->h_free.h.u.next = hp;
 8005456:	6099      	str	r1, [r3, #8]
 8005458:	6118      	str	r0, [r3, #16]
  tqp->p_prev = (thread_t *)tqp;
 800545a:	6158      	str	r0, [r3, #20]
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 800545c:	601a      	str	r2, [r3, #0]
 800545e:	619a      	str	r2, [r3, #24]

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}
 8005460:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	20000d50 	.word	0x20000d50
 800546c:	20000cf0 	.word	0x20000cf0

08005470 <thread2>:
}

static THD_FUNCTION(thread2, p) {

  (void)p;
  chOQPutTimeout(&oq, 0, MS2ST(200));
 8005470:	4802      	ldr	r0, [pc, #8]	; (800547c <thread2+0xc>)
 8005472:	2100      	movs	r1, #0
 8005474:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005478:	f7fb bf0a 	b.w	8001290 <chOQPutTimeout>
 800547c:	20000850 	.word	0x20000850

08005480 <thread.lto_priv.80>:
 * one to fail.
 */

static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
 8005480:	7800      	ldrb	r0, [r0, #0]
 8005482:	f7fd bb75 	b.w	8002b70 <test_emit_token>
 8005486:	bf00      	nop
	...

08005490 <queues2_execute.lto_priv.160>:
}

static void queues2_execute(void) {
 8005490:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005494:	2320      	movs	r3, #32
 8005496:	b083      	sub	sp, #12
 8005498:	f383 8811 	msr	BASEPRI, r3
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 800549c:	4b86      	ldr	r3, [pc, #536]	; (80056b8 <queues2_execute.lto_priv.160+0x228>)
 800549e:	6959      	ldr	r1, [r3, #20]
 80054a0:	699a      	ldr	r2, [r3, #24]
 80054a2:	4291      	cmp	r1, r2
 80054a4:	d05d      	beq.n	8005562 <queues2_execute.lto_priv.160+0xd2>
 80054a6:	2100      	movs	r1, #0
  unsigned i;
  size_t n;

  /* Initial empty state */
  test_assert_lock(1, chOQIsEmptyI(&oq), "not empty");
 80054a8:	2001      	movs	r0, #1
 80054aa:	f7fd fb49 	bl	8002b40 <_test_assert>
 80054ae:	bbb8      	cbnz	r0, 8005520 <queues2_execute.lto_priv.160+0x90>
 80054b0:	f380 8811 	msr	BASEPRI, r0
 80054b4:	2441      	movs	r4, #65	; 0x41
 *
 * @api
 */
static inline msg_t chOQPut(output_queue_t *oqp, uint8_t b) {

  return chOQPutTimeout(oqp, b, TIME_INFINITE);
 80054b6:	4d80      	ldr	r5, [pc, #512]	; (80056b8 <queues2_execute.lto_priv.160+0x228>)
 80054b8:	4621      	mov	r1, r4
 80054ba:	3401      	adds	r4, #1
 80054bc:	4628      	mov	r0, r5
 80054be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054c2:	b2e4      	uxtb	r4, r4
 80054c4:	f7fb fee4 	bl	8001290 <chOQPutTimeout>

  /* Queue filling */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 80054c8:	2c45      	cmp	r4, #69	; 0x45
 80054ca:	d1f4      	bne.n	80054b6 <queues2_execute.lto_priv.160+0x26>
 80054cc:	2620      	movs	r6, #32
 80054ce:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 80054d2:	68a9      	ldr	r1, [r5, #8]
    chOQPut(&oq, 'A' + i);
  test_assert_lock(2, chOQIsFullI(&oq), "still has space");
 80054d4:	2002      	movs	r0, #2
 80054d6:	fab1 f181 	clz	r1, r1
 80054da:	0949      	lsrs	r1, r1, #5
 80054dc:	f7fd fb30 	bl	8002b40 <_test_assert>
 80054e0:	4607      	mov	r7, r0
 80054e2:	b9e8      	cbnz	r0, 8005520 <queues2_execute.lto_priv.160+0x90>
 80054e4:	f380 8811 	msr	BASEPRI, r0
 80054e8:	4681      	mov	r9, r0
 80054ea:	2404      	movs	r4, #4
 80054ec:	f04f 0820 	mov.w	r8, #32
 80054f0:	f386 8811 	msr	BASEPRI, r6
  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++) {
    char c;

    chSysLock();
    c = chOQGetI(&oq);
 80054f4:	4d70      	ldr	r5, [pc, #448]	; (80056b8 <queues2_execute.lto_priv.160+0x228>)
 80054f6:	4628      	mov	r0, r5
 80054f8:	f7fb fa42 	bl	8000980 <chOQGetI>
 80054fc:	f389 8811 	msr	BASEPRI, r9
    chSysUnlock();
    test_emit_token(c);
 8005500:	b2c0      	uxtb	r0, r0
 8005502:	f7fd fb35 	bl	8002b70 <test_emit_token>
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chOQPut(&oq, 'A' + i);
  test_assert_lock(2, chOQIsFullI(&oq), "still has space");

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++) {
 8005506:	3c01      	subs	r4, #1
 8005508:	d1f0      	bne.n	80054ec <queues2_execute.lto_priv.160+0x5c>
 800550a:	f388 8811 	msr	BASEPRI, r8
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 800550e:	696a      	ldr	r2, [r5, #20]
 8005510:	69ab      	ldr	r3, [r5, #24]
 8005512:	429a      	cmp	r2, r3
 8005514:	d02a      	beq.n	800556c <queues2_execute.lto_priv.160+0xdc>
    chSysLock();
    c = chOQGetI(&oq);
    chSysUnlock();
    test_emit_token(c);
  }
  test_assert_lock(3, chOQIsEmptyI(&oq), "still full");
 8005516:	4639      	mov	r1, r7
 8005518:	2003      	movs	r0, #3
 800551a:	f7fd fb11 	bl	8002b40 <_test_assert>
 800551e:	b128      	cbz	r0, 800552c <queues2_execute.lto_priv.160+0x9c>
 8005520:	2300      	movs	r3, #0
 8005522:	f383 8811 	msr	BASEPRI, r3
  test_assert(11, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
  test_assert_lock(12, chOQIsFullI(&oq), "not full");

  /* Timeout */
  test_assert(13, chOQPutTimeout(&oq, 0, 10) == Q_TIMEOUT, "wrong timeout return");
}
 8005526:	b003      	add	sp, #12
 8005528:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800552c:	f380 8811 	msr	BASEPRI, r0
    c = chOQGetI(&oq);
    chSysUnlock();
    test_emit_token(c);
  }
  test_assert_lock(3, chOQIsEmptyI(&oq), "still full");
  test_assert_sequence(4, "ABCD");
 8005530:	2004      	movs	r0, #4
 8005532:	4962      	ldr	r1, [pc, #392]	; (80056bc <queues2_execute.lto_priv.160+0x22c>)
 8005534:	f7fd fadc 	bl	8002af0 <_test_assert_sequence>
 8005538:	4604      	mov	r4, r0
 800553a:	2800      	cmp	r0, #0
 800553c:	d1f3      	bne.n	8005526 <queues2_execute.lto_priv.160+0x96>
 800553e:	2620      	movs	r6, #32
 8005540:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(5, chOQGetI(&oq) == Q_EMPTY, "failed to report Q_EMPTY");
 8005544:	4d5c      	ldr	r5, [pc, #368]	; (80056b8 <queues2_execute.lto_priv.160+0x228>)
 8005546:	4628      	mov	r0, r5
 8005548:	f7fb fa1a 	bl	8000980 <chOQGetI>
 800554c:	3003      	adds	r0, #3
 800554e:	bf14      	ite	ne
 8005550:	2100      	movne	r1, #0
 8005552:	2101      	moveq	r1, #1
 8005554:	2005      	movs	r0, #5
 8005556:	f7fd faf3 	bl	8002b40 <_test_assert>
 800555a:	b160      	cbz	r0, 8005576 <queues2_execute.lto_priv.160+0xe6>
 800555c:	f384 8811 	msr	BASEPRI, r4
 8005560:	e7e1      	b.n	8005526 <queues2_execute.lto_priv.160+0x96>
 8005562:	6899      	ldr	r1, [r3, #8]
 8005564:	3100      	adds	r1, #0
 8005566:	bf18      	it	ne
 8005568:	2101      	movne	r1, #1
 800556a:	e79d      	b.n	80054a8 <queues2_execute.lto_priv.160+0x18>
 800556c:	68af      	ldr	r7, [r5, #8]
 800556e:	3700      	adds	r7, #0
 8005570:	bf18      	it	ne
 8005572:	2701      	movne	r7, #1
 8005574:	e7cf      	b.n	8005516 <queues2_execute.lto_priv.160+0x86>
 8005576:	f380 8811 	msr	BASEPRI, r0

  /* Writing the whole thing */
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE * 2, TIME_IMMEDIATE);
 800557a:	4951      	ldr	r1, [pc, #324]	; (80056c0 <queues2_execute.lto_priv.160+0x230>)
 800557c:	4603      	mov	r3, r0
 800557e:	2208      	movs	r2, #8
 8005580:	4628      	mov	r0, r5
 8005582:	f7fb fe45 	bl	8001210 <chOQWriteTimeout>
  test_assert(6, n == TEST_QUEUES_SIZE, "wrong returned size");
 8005586:	f1a0 0104 	sub.w	r1, r0, #4
 800558a:	fab1 f181 	clz	r1, r1
 800558e:	2006      	movs	r0, #6
 8005590:	0949      	lsrs	r1, r1, #5
 8005592:	f7fd fad5 	bl	8002b40 <_test_assert>
 8005596:	4604      	mov	r4, r0
 8005598:	2800      	cmp	r0, #0
 800559a:	d1c4      	bne.n	8005526 <queues2_execute.lto_priv.160+0x96>
 800559c:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 80055a0:	68a9      	ldr	r1, [r5, #8]
  test_assert_lock(7, chOQIsFullI(&oq), "not full");
 80055a2:	2007      	movs	r0, #7
 80055a4:	fab1 f181 	clz	r1, r1
 80055a8:	0949      	lsrs	r1, r1, #5
 80055aa:	f7fd fac9 	bl	8002b40 <_test_assert>
 80055ae:	4607      	mov	r7, r0
 80055b0:	2800      	cmp	r0, #0
 80055b2:	d1d3      	bne.n	800555c <queues2_execute.lto_priv.160+0xcc>
 80055b4:	f380 8811 	msr	BASEPRI, r0
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80055b8:	4b42      	ldr	r3, [pc, #264]	; (80056c4 <queues2_execute.lto_priv.160+0x234>)
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 80055ba:	f44f 71a4 	mov.w	r1, #328	; 0x148
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80055be:	699b      	ldr	r3, [r3, #24]
 80055c0:	4841      	ldr	r0, [pc, #260]	; (80056c8 <queues2_execute.lto_priv.160+0x238>)
 80055c2:	689a      	ldr	r2, [r3, #8]
 80055c4:	4b41      	ldr	r3, [pc, #260]	; (80056cc <queues2_execute.lto_priv.160+0x23c>)
 80055c6:	3201      	adds	r2, #1
 80055c8:	9700      	str	r7, [sp, #0]
 80055ca:	f7fb f8f1 	bl	80007b0 <chThdCreateStatic>
 80055ce:	4b40      	ldr	r3, [pc, #256]	; (80056d0 <queues2_execute.lto_priv.160+0x240>)
 80055d0:	6018      	str	r0, [r3, #0]
 80055d2:	f386 8811 	msr	BASEPRI, r6
 */
static inline size_t chOQGetFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeX(oqp) - chQSpaceI(oqp));
 80055d6:	68e9      	ldr	r1, [r5, #12]
 80055d8:	692b      	ldr	r3, [r5, #16]
 80055da:	68aa      	ldr	r2, [r5, #8]
 80055dc:	1a5b      	subs	r3, r3, r1
 80055de:	1a99      	subs	r1, r3, r2
  test_assert_lock(8, chOQGetFullI(&oq) == TEST_QUEUES_SIZE, "not empty");
 80055e0:	f1a1 0104 	sub.w	r1, r1, #4
 80055e4:	fab1 f181 	clz	r1, r1
 80055e8:	2008      	movs	r0, #8
 80055ea:	0949      	lsrs	r1, r1, #5
 80055ec:	f7fd faa8 	bl	8002b40 <_test_assert>
 80055f0:	4604      	mov	r4, r0
 80055f2:	b110      	cbz	r0, 80055fa <queues2_execute.lto_priv.160+0x16a>
 80055f4:	f387 8811 	msr	BASEPRI, r7
 80055f8:	e795      	b.n	8005526 <queues2_execute.lto_priv.160+0x96>
 80055fa:	f380 8811 	msr	BASEPRI, r0
  test_wait_threads();
 80055fe:	f7fd fa1f 	bl	8002a40 <test_wait_threads>
 8005602:	f386 8811 	msr	BASEPRI, r6
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
 8005606:	68ea      	ldr	r2, [r5, #12]
  oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeX(oqp);
 8005608:	692b      	ldr	r3, [r5, #16]
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 800560a:	4628      	mov	r0, r5

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
  oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeX(oqp);
 800560c:	1a9b      	subs	r3, r3, r2
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 800560e:	f06f 0101 	mvn.w	r1, #1
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
 8005612:	61aa      	str	r2, [r5, #24]
  oqp->q_wrptr = oqp->q_buffer;
 8005614:	616a      	str	r2, [r5, #20]
  oqp->q_counter = chQSizeX(oqp);
 8005616:	60ab      	str	r3, [r5, #8]
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 8005618:	f7fb fcda 	bl	8000fd0 <chThdDequeueAllI>
 800561c:	f384 8811 	msr	BASEPRI, r4
 8005620:	f386 8811 	msr	BASEPRI, r6
 8005624:	692b      	ldr	r3, [r5, #16]
 8005626:	68ea      	ldr	r2, [r5, #12]
 8005628:	68a9      	ldr	r1, [r5, #8]
 800562a:	1a9b      	subs	r3, r3, r2

  /* Testing reset */
  chSysLock();
  chOQResetI(&oq);
  chSysUnlock();
  test_assert_lock(9, chOQGetFullI(&oq) == 0, "still full");
 800562c:	1a59      	subs	r1, r3, r1
 800562e:	fab1 f181 	clz	r1, r1
 8005632:	2009      	movs	r0, #9
 8005634:	0949      	lsrs	r1, r1, #5
 8005636:	f7fd fa83 	bl	8002b40 <_test_assert>
 800563a:	4603      	mov	r3, r0
 800563c:	2800      	cmp	r0, #0
 800563e:	d18d      	bne.n	800555c <queues2_execute.lto_priv.160+0xcc>
 8005640:	f380 8811 	msr	BASEPRI, r0

  /* Partial writes */
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8005644:	491e      	ldr	r1, [pc, #120]	; (80056c0 <queues2_execute.lto_priv.160+0x230>)
 8005646:	2202      	movs	r2, #2
 8005648:	4628      	mov	r0, r5
 800564a:	f7fb fde1 	bl	8001210 <chOQWriteTimeout>
  test_assert(10, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 800564e:	3802      	subs	r0, #2
 8005650:	4241      	negs	r1, r0
 8005652:	4141      	adcs	r1, r0
 8005654:	200a      	movs	r0, #10
 8005656:	f7fd fa73 	bl	8002b40 <_test_assert>
 800565a:	4603      	mov	r3, r0
 800565c:	2800      	cmp	r0, #0
 800565e:	f47f af62 	bne.w	8005526 <queues2_execute.lto_priv.160+0x96>
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8005662:	4917      	ldr	r1, [pc, #92]	; (80056c0 <queues2_execute.lto_priv.160+0x230>)
 8005664:	2202      	movs	r2, #2
 8005666:	4628      	mov	r0, r5
 8005668:	f7fb fdd2 	bl	8001210 <chOQWriteTimeout>
  test_assert(11, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 800566c:	1e82      	subs	r2, r0, #2
 800566e:	4251      	negs	r1, r2
 8005670:	4151      	adcs	r1, r2
 8005672:	200b      	movs	r0, #11
 8005674:	f7fd fa64 	bl	8002b40 <_test_assert>
 8005678:	2800      	cmp	r0, #0
 800567a:	f47f af54 	bne.w	8005526 <queues2_execute.lto_priv.160+0x96>
 800567e:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 8005682:	68a9      	ldr	r1, [r5, #8]
  test_assert_lock(12, chOQIsFullI(&oq), "not full");
 8005684:	200c      	movs	r0, #12
 8005686:	fab1 f181 	clz	r1, r1
 800568a:	0949      	lsrs	r1, r1, #5
 800568c:	f7fd fa58 	bl	8002b40 <_test_assert>
 8005690:	2800      	cmp	r0, #0
 8005692:	f47f af45 	bne.w	8005520 <queues2_execute.lto_priv.160+0x90>
 8005696:	2100      	movs	r1, #0
 8005698:	f381 8811 	msr	BASEPRI, r1

  /* Timeout */
  test_assert(13, chOQPutTimeout(&oq, 0, 10) == Q_TIMEOUT, "wrong timeout return");
 800569c:	220a      	movs	r2, #10
 800569e:	4806      	ldr	r0, [pc, #24]	; (80056b8 <queues2_execute.lto_priv.160+0x228>)
 80056a0:	f7fb fdf6 	bl	8001290 <chOQPutTimeout>
 80056a4:	1c43      	adds	r3, r0, #1
 80056a6:	4259      	negs	r1, r3
 80056a8:	4159      	adcs	r1, r3
 80056aa:	200d      	movs	r0, #13
}
 80056ac:	b003      	add	sp, #12
 80056ae:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
  test_assert(11, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
  test_assert_lock(12, chOQIsFullI(&oq), "not full");

  /* Timeout */
  test_assert(13, chOQPutTimeout(&oq, 0, 10) == Q_TIMEOUT, "wrong timeout return");
 80056b2:	f7fd ba45 	b.w	8002b40 <_test_assert>
 80056b6:	bf00      	nop
 80056b8:	20000850 	.word	0x20000850
 80056bc:	08007eb0 	.word	0x08007eb0
 80056c0:	20000e98 	.word	0x20000e98
 80056c4:	200013f8 	.word	0x200013f8
 80056c8:	20000d50 	.word	0x20000d50
 80056cc:	08005471 	.word	0x08005471
 80056d0:	20000968 	.word	0x20000968
	...

080056e0 <thread1>:
}

static THD_FUNCTION(thread1, p) {

  (void)p;
  chIQGetTimeout(&iq, MS2ST(200));
 80056e0:	4802      	ldr	r0, [pc, #8]	; (80056ec <thread1+0xc>)
 80056e2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80056e6:	f7fb be43 	b.w	8001370 <chIQGetTimeout>
 80056ea:	bf00      	nop
 80056ec:	20000874 	.word	0x20000874

080056f0 <queues1_execute.lto_priv.158>:
}

static void queues1_execute(void) {
 80056f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056f2:	2420      	movs	r4, #32
 80056f4:	b083      	sub	sp, #12
 80056f6:	f384 8811 	msr	BASEPRI, r4
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 80056fa:	4b90      	ldr	r3, [pc, #576]	; (800593c <queues1_execute.lto_priv.158+0x24c>)
  unsigned i;
  size_t n;

  /* Initial empty state */
  test_assert_lock(1, chIQIsEmptyI(&iq), "not empty");
 80056fc:	2001      	movs	r0, #1
 80056fe:	6899      	ldr	r1, [r3, #8]
 8005700:	fab1 f181 	clz	r1, r1
 8005704:	0949      	lsrs	r1, r1, #5
 8005706:	f7fd fa1b 	bl	8002b40 <_test_assert>
 800570a:	4606      	mov	r6, r0
 800570c:	b9e8      	cbnz	r0, 800574a <queues1_execute.lto_priv.158+0x5a>
 800570e:	f380 8811 	msr	BASEPRI, r0
 8005712:	f384 8811 	msr	BASEPRI, r4
 8005716:	2441      	movs	r4, #65	; 0x41

  /* Queue filling */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
 8005718:	4d88      	ldr	r5, [pc, #544]	; (800593c <queues1_execute.lto_priv.158+0x24c>)
 800571a:	4621      	mov	r1, r4
 800571c:	3401      	adds	r4, #1
 800571e:	4628      	mov	r0, r5
 8005720:	b2e4      	uxtb	r4, r4
 8005722:	f7fb f8fd 	bl	8000920 <chIQPutI>
  /* Initial empty state */
  test_assert_lock(1, chIQIsEmptyI(&iq), "not empty");

  /* Queue filling */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 8005726:	2c45      	cmp	r4, #69	; 0x45
 8005728:	d1f6      	bne.n	8005718 <queues1_execute.lto_priv.158+0x28>
 800572a:	2300      	movs	r3, #0
 800572c:	f383 8811 	msr	BASEPRI, r3
 8005730:	2320      	movs	r3, #32
 8005732:	f383 8811 	msr	BASEPRI, r3
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 8005736:	69aa      	ldr	r2, [r5, #24]
 8005738:	696b      	ldr	r3, [r5, #20]
 800573a:	429a      	cmp	r2, r3
 800573c:	d038      	beq.n	80057b0 <queues1_execute.lto_priv.158+0xc0>
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();
  test_assert_lock(2, chIQIsFullI(&iq), "still has space");
 800573e:	4631      	mov	r1, r6
 8005740:	2002      	movs	r0, #2
 8005742:	f7fd f9fd 	bl	8002b40 <_test_assert>
 8005746:	4604      	mov	r4, r0
 8005748:	b120      	cbz	r0, 8005754 <queues1_execute.lto_priv.158+0x64>
 800574a:	2300      	movs	r3, #0
 800574c:	f383 8811 	msr	BASEPRI, r3
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
  test_wait_threads();

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
}
 8005750:	b003      	add	sp, #12
 8005752:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005754:	f380 8811 	msr	BASEPRI, r0
 8005758:	2320      	movs	r3, #32
 800575a:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();
  test_assert_lock(2, chIQIsFullI(&iq), "still has space");
  test_assert_lock(3, chIQPutI(&iq, 0) == Q_FULL, "failed to report Q_FULL");
 800575e:	4877      	ldr	r0, [pc, #476]	; (800593c <queues1_execute.lto_priv.158+0x24c>)
 8005760:	4621      	mov	r1, r4
 8005762:	f7fb f8dd 	bl	8000920 <chIQPutI>
 8005766:	3004      	adds	r0, #4
 8005768:	bf14      	ite	ne
 800576a:	2100      	movne	r1, #0
 800576c:	2101      	moveq	r1, #1
 800576e:	2003      	movs	r0, #3
 8005770:	f7fd f9e6 	bl	8002b40 <_test_assert>
 8005774:	b9c0      	cbnz	r0, 80057a8 <queues1_execute.lto_priv.158+0xb8>
 8005776:	f380 8811 	msr	BASEPRI, r0
 800577a:	2404      	movs	r4, #4
 *
 * @api
 */
static inline msg_t chIQGet(input_queue_t *iqp) {

  return chIQGetTimeout(iqp, TIME_INFINITE);
 800577c:	4d6f      	ldr	r5, [pc, #444]	; (800593c <queues1_execute.lto_priv.158+0x24c>)
 800577e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005782:	4628      	mov	r0, r5
 8005784:	f7fb fdf4 	bl	8001370 <chIQGetTimeout>

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    test_emit_token(chIQGet(&iq));
 8005788:	b2c0      	uxtb	r0, r0
 800578a:	f7fd f9f1 	bl	8002b70 <test_emit_token>
  chSysUnlock();
  test_assert_lock(2, chIQIsFullI(&iq), "still has space");
  test_assert_lock(3, chIQPutI(&iq, 0) == Q_FULL, "failed to report Q_FULL");

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 800578e:	3c01      	subs	r4, #1
 8005790:	d1f4      	bne.n	800577c <queues1_execute.lto_priv.158+0x8c>
 8005792:	2620      	movs	r6, #32
 8005794:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 8005798:	68a9      	ldr	r1, [r5, #8]
    test_emit_token(chIQGet(&iq));
  test_assert_lock(4, chIQIsEmptyI(&iq), "still full");
 800579a:	2004      	movs	r0, #4
 800579c:	fab1 f181 	clz	r1, r1
 80057a0:	0949      	lsrs	r1, r1, #5
 80057a2:	f7fd f9cd 	bl	8002b40 <_test_assert>
 80057a6:	b140      	cbz	r0, 80057ba <queues1_execute.lto_priv.158+0xca>
 80057a8:	f384 8811 	msr	BASEPRI, r4
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
  test_wait_threads();

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
}
 80057ac:	b003      	add	sp, #12
 80057ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 80057b0:	68ae      	ldr	r6, [r5, #8]
 80057b2:	3600      	adds	r6, #0
 80057b4:	bf18      	it	ne
 80057b6:	2601      	movne	r6, #1
 80057b8:	e7c1      	b.n	800573e <queues1_execute.lto_priv.158+0x4e>
 80057ba:	f384 8811 	msr	BASEPRI, r4

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    test_emit_token(chIQGet(&iq));
  test_assert_lock(4, chIQIsEmptyI(&iq), "still full");
  test_assert_sequence(5, "ABCD");
 80057be:	2005      	movs	r0, #5
 80057c0:	495f      	ldr	r1, [pc, #380]	; (8005940 <queues1_execute.lto_priv.158+0x250>)
 80057c2:	f7fd f995 	bl	8002af0 <_test_assert_sequence>
 80057c6:	2800      	cmp	r0, #0
 80057c8:	d1c2      	bne.n	8005750 <queues1_execute.lto_priv.158+0x60>
 80057ca:	f386 8811 	msr	BASEPRI, r6
 80057ce:	2441      	movs	r4, #65	; 0x41

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
 80057d0:	4d5a      	ldr	r5, [pc, #360]	; (800593c <queues1_execute.lto_priv.158+0x24c>)
 80057d2:	4621      	mov	r1, r4
 80057d4:	3401      	adds	r4, #1
 80057d6:	4628      	mov	r0, r5
 80057d8:	b2e4      	uxtb	r4, r4
 80057da:	f7fb f8a1 	bl	8000920 <chIQPutI>
  test_assert_lock(4, chIQIsEmptyI(&iq), "still full");
  test_assert_sequence(5, "ABCD");

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 80057de:	2c45      	cmp	r4, #69	; 0x45
 80057e0:	d1f6      	bne.n	80057d0 <queues1_execute.lto_priv.158+0xe0>
 80057e2:	2300      	movs	r3, #0
 80057e4:	f383 8811 	msr	BASEPRI, r3
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();

  /* Reading the whole thing */
  n = chIQReadTimeout(&iq, wa[1], TEST_QUEUES_SIZE * 2, TIME_IMMEDIATE);
 80057e8:	4956      	ldr	r1, [pc, #344]	; (8005944 <queues1_execute.lto_priv.158+0x254>)
 80057ea:	2208      	movs	r2, #8
 80057ec:	4628      	mov	r0, r5
 80057ee:	f7fb fd7f 	bl	80012f0 <chIQReadTimeout>
  test_assert(6, n == TEST_QUEUES_SIZE, "wrong returned size");
 80057f2:	f1a0 0104 	sub.w	r1, r0, #4
 80057f6:	fab1 f181 	clz	r1, r1
 80057fa:	2006      	movs	r0, #6
 80057fc:	0949      	lsrs	r1, r1, #5
 80057fe:	f7fd f99f 	bl	8002b40 <_test_assert>
 8005802:	4604      	mov	r4, r0
 8005804:	2800      	cmp	r0, #0
 8005806:	d1a3      	bne.n	8005750 <queues1_execute.lto_priv.158+0x60>
 8005808:	2620      	movs	r6, #32
 800580a:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 800580e:	68a9      	ldr	r1, [r5, #8]
  test_assert_lock(7, chIQIsEmptyI(&iq), "still full");
 8005810:	2007      	movs	r0, #7
 8005812:	fab1 f181 	clz	r1, r1
 8005816:	0949      	lsrs	r1, r1, #5
 8005818:	f7fd f992 	bl	8002b40 <_test_assert>
 800581c:	2800      	cmp	r0, #0
 800581e:	d1c3      	bne.n	80057a8 <queues1_execute.lto_priv.158+0xb8>
 8005820:	f380 8811 	msr	BASEPRI, r0
 8005824:	f386 8811 	msr	BASEPRI, r6
 8005828:	2441      	movs	r4, #65	; 0x41

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
 800582a:	4d44      	ldr	r5, [pc, #272]	; (800593c <queues1_execute.lto_priv.158+0x24c>)
 800582c:	4621      	mov	r1, r4
 800582e:	3401      	adds	r4, #1
 8005830:	4628      	mov	r0, r5
 8005832:	b2e4      	uxtb	r4, r4
 8005834:	f7fb f874 	bl	8000920 <chIQPutI>
  test_assert(6, n == TEST_QUEUES_SIZE, "wrong returned size");
  test_assert_lock(7, chIQIsEmptyI(&iq), "still full");

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 8005838:	2c45      	cmp	r4, #69	; 0x45
 800583a:	d1f6      	bne.n	800582a <queues1_execute.lto_priv.158+0x13a>
 800583c:	2300      	movs	r3, #0
 800583e:	f383 8811 	msr	BASEPRI, r3
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();

  /* Partial reads */
  n = chIQReadTimeout(&iq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8005842:	4940      	ldr	r1, [pc, #256]	; (8005944 <queues1_execute.lto_priv.158+0x254>)
 8005844:	4628      	mov	r0, r5
 8005846:	2202      	movs	r2, #2
 8005848:	f7fb fd52 	bl	80012f0 <chIQReadTimeout>
  test_assert(8, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 800584c:	f1a0 0102 	sub.w	r1, r0, #2
 8005850:	fab1 f181 	clz	r1, r1
 8005854:	2008      	movs	r0, #8
 8005856:	0949      	lsrs	r1, r1, #5
 8005858:	f7fd f972 	bl	8002b40 <_test_assert>
 800585c:	2800      	cmp	r0, #0
 800585e:	f47f af77 	bne.w	8005750 <queues1_execute.lto_priv.158+0x60>
  n = chIQReadTimeout(&iq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8005862:	4603      	mov	r3, r0
 8005864:	4937      	ldr	r1, [pc, #220]	; (8005944 <queues1_execute.lto_priv.158+0x254>)
 8005866:	2202      	movs	r2, #2
 8005868:	4628      	mov	r0, r5
 800586a:	f7fb fd41 	bl	80012f0 <chIQReadTimeout>
  test_assert(9, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 800586e:	f1a0 0102 	sub.w	r1, r0, #2
 8005872:	fab1 f181 	clz	r1, r1
 8005876:	2009      	movs	r0, #9
 8005878:	0949      	lsrs	r1, r1, #5
 800587a:	f7fd f961 	bl	8002b40 <_test_assert>
 800587e:	4606      	mov	r6, r0
 8005880:	2800      	cmp	r0, #0
 8005882:	f47f af65 	bne.w	8005750 <queues1_execute.lto_priv.158+0x60>
 8005886:	2720      	movs	r7, #32
 8005888:	f387 8811 	msr	BASEPRI, r7
 800588c:	68a9      	ldr	r1, [r5, #8]
  test_assert_lock(10, chIQIsEmptyI(&iq), "still full");
 800588e:	200a      	movs	r0, #10
 8005890:	fab1 f181 	clz	r1, r1
 8005894:	0949      	lsrs	r1, r1, #5
 8005896:	f7fd f953 	bl	8002b40 <_test_assert>
 800589a:	4604      	mov	r4, r0
 800589c:	b110      	cbz	r0, 80058a4 <queues1_execute.lto_priv.158+0x1b4>
 800589e:	f386 8811 	msr	BASEPRI, r6
 80058a2:	e755      	b.n	8005750 <queues1_execute.lto_priv.158+0x60>
 80058a4:	f380 8811 	msr	BASEPRI, r0
 80058a8:	f387 8811 	msr	BASEPRI, r7

  /* Testing reset */
  chSysLock();
  chIQPutI(&iq, 0);
 80058ac:	4621      	mov	r1, r4
 80058ae:	4628      	mov	r0, r5
 80058b0:	f7fb f836 	bl	8000920 <chIQPutI>
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
 80058b4:	68eb      	ldr	r3, [r5, #12]
  iqp->q_wrptr = iqp->q_buffer;
  iqp->q_counter = 0;
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 80058b6:	4628      	mov	r0, r5
 80058b8:	f06f 0101 	mvn.w	r1, #1

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
  iqp->q_wrptr = iqp->q_buffer;
  iqp->q_counter = 0;
 80058bc:	60ac      	str	r4, [r5, #8]
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
 80058be:	61ab      	str	r3, [r5, #24]
  iqp->q_wrptr = iqp->q_buffer;
 80058c0:	616b      	str	r3, [r5, #20]
  iqp->q_counter = 0;
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 80058c2:	f7fb fb85 	bl	8000fd0 <chThdDequeueAllI>
 80058c6:	f384 8811 	msr	BASEPRI, r4
 80058ca:	f387 8811 	msr	BASEPRI, r7
 */
static inline size_t chIQGetFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (size_t)chQSpaceI(iqp);
 80058ce:	68a9      	ldr	r1, [r5, #8]
  chIQResetI(&iq);
  chSysUnlock();
  test_assert_lock(11, chIQGetFullI(&iq) == 0, "still full");
 80058d0:	200b      	movs	r0, #11
 80058d2:	fab1 f181 	clz	r1, r1
 80058d6:	0949      	lsrs	r1, r1, #5
 80058d8:	f7fd f932 	bl	8002b40 <_test_assert>
 80058dc:	4606      	mov	r6, r0
 80058de:	2800      	cmp	r0, #0
 80058e0:	f47f af62 	bne.w	80057a8 <queues1_execute.lto_priv.158+0xb8>
 80058e4:	f380 8811 	msr	BASEPRI, r0
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80058e8:	4b17      	ldr	r3, [pc, #92]	; (8005948 <queues1_execute.lto_priv.158+0x258>)
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, NULL);
 80058ea:	f44f 71a4 	mov.w	r1, #328	; 0x148
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	4816      	ldr	r0, [pc, #88]	; (800594c <queues1_execute.lto_priv.158+0x25c>)
 80058f2:	689a      	ldr	r2, [r3, #8]
 80058f4:	4b16      	ldr	r3, [pc, #88]	; (8005950 <queues1_execute.lto_priv.158+0x260>)
 80058f6:	3201      	adds	r2, #1
 80058f8:	9600      	str	r6, [sp, #0]
 80058fa:	f7fa ff59 	bl	80007b0 <chThdCreateStatic>
 80058fe:	4b15      	ldr	r3, [pc, #84]	; (8005954 <queues1_execute.lto_priv.158+0x264>)
 8005900:	6018      	str	r0, [r3, #0]
 8005902:	f387 8811 	msr	BASEPRI, r7
 8005906:	68a9      	ldr	r1, [r5, #8]
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
 8005908:	200c      	movs	r0, #12
 800590a:	fab1 f181 	clz	r1, r1
 800590e:	0949      	lsrs	r1, r1, #5
 8005910:	f7fd f916 	bl	8002b40 <_test_assert>
 8005914:	2800      	cmp	r0, #0
 8005916:	d1c2      	bne.n	800589e <queues1_execute.lto_priv.158+0x1ae>
 8005918:	f380 8811 	msr	BASEPRI, r0
  test_wait_threads();
 800591c:	f7fd f890 	bl	8002a40 <test_wait_threads>

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
 8005920:	4628      	mov	r0, r5
 8005922:	210a      	movs	r1, #10
 8005924:	f7fb fd24 	bl	8001370 <chIQGetTimeout>
 8005928:	1c43      	adds	r3, r0, #1
 800592a:	4259      	negs	r1, r3
 800592c:	4159      	adcs	r1, r3
 800592e:	200d      	movs	r0, #13
}
 8005930:	b003      	add	sp, #12
 8005932:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, NULL);
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
  test_wait_threads();

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
 8005936:	f7fd b903 	b.w	8002b40 <_test_assert>
 800593a:	bf00      	nop
 800593c:	20000874 	.word	0x20000874
 8005940:	08007eb0 	.word	0x08007eb0
 8005944:	20000e98 	.word	0x20000e98
 8005948:	200013f8 	.word	0x200013f8
 800594c:	20000d50 	.word	0x20000d50
 8005950:	080056e1 	.word	0x080056e1
 8005954:	20000968 	.word	0x20000968
	...

08005960 <regfind>:
 * <h2>Description</h2>
 * Registry and Thread References APIs are tested for functionality and
 * coverage.
 */

static bool regfind(thread_t *tp) {
 8005960:	b538      	push	{r3, r4, r5, lr}
 8005962:	4605      	mov	r5, r0
 8005964:	2320      	movs	r3, #32
 8005966:	f383 8811 	msr	BASEPRI, r3
 */
thread_t *chRegFirstThread(void) {
  thread_t *tp;

  chSysLock();
  tp = ch.rlist.r_newer;
 800596a:	4b0a      	ldr	r3, [pc, #40]	; (8005994 <regfind+0x34>)
 800596c:	2400      	movs	r4, #0
 800596e:	691b      	ldr	r3, [r3, #16]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs++;
 8005970:	7f9a      	ldrb	r2, [r3, #30]
 8005972:	3201      	adds	r2, #1
 8005974:	779a      	strb	r2, [r3, #30]
 8005976:	f384 8811 	msr	BASEPRI, r4
  bool found = false;

  ftp = chRegFirstThread();
  do {
    found |= ftp == tp;
    ftp = chRegNextThread(ftp);
 800597a:	4618      	mov	r0, r3
  thread_t *ftp;
  bool found = false;

  ftp = chRegFirstThread();
  do {
    found |= ftp == tp;
 800597c:	42ab      	cmp	r3, r5
 800597e:	bf08      	it	eq
 8005980:	f044 0401 	orreq.w	r4, r4, #1
    ftp = chRegNextThread(ftp);
 8005984:	f7fb fa2c 	bl	8000de0 <chRegNextThread>
  } while (ftp != NULL);
 8005988:	4603      	mov	r3, r0
 800598a:	2800      	cmp	r0, #0
 800598c:	d1f5      	bne.n	800597a <regfind+0x1a>
  return found;
}
 800598e:	4620      	mov	r0, r4
 8005990:	bd38      	pop	{r3, r4, r5, pc}
 8005992:	bf00      	nop
 8005994:	200013f8 	.word	0x200013f8
	...

080059a0 <dyn3_execute.lto_priv.156>:
static void dyn3_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}

static void dyn3_execute(void) {
 80059a0:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80059a2:	4a4a      	ldr	r2, [pc, #296]	; (8005acc <dyn3_execute.lto_priv.156+0x12c>)
  thread_t *tp;
  tprio_t prio = chThdGetPriorityX();

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
 80059a4:	4b4a      	ldr	r3, [pc, #296]	; (8005ad0 <dyn3_execute.lto_priv.156+0x130>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80059a6:	6992      	ldr	r2, [r2, #24]
static void dyn3_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}

static void dyn3_execute(void) {
 80059a8:	b082      	sub	sp, #8
  thread_t *tp;
  tprio_t prio = chThdGetPriorityX();

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
 80059aa:	6892      	ldr	r2, [r2, #8]
 80059ac:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80059b0:	9300      	str	r3, [sp, #0]
 80059b2:	4848      	ldr	r0, [pc, #288]	; (8005ad4 <dyn3_execute.lto_priv.156+0x134>)
 80059b4:	3a01      	subs	r2, #1
 80059b6:	4b48      	ldr	r3, [pc, #288]	; (8005ad8 <dyn3_execute.lto_priv.156+0x138>)
 80059b8:	f7fb fa92 	bl	8000ee0 <chThdCreateFromHeap>
  test_assert(1, tp->p_refs == 1, "wrong initial reference counter");
 80059bc:	7f81      	ldrb	r1, [r0, #30]
static void dyn3_execute(void) {
  thread_t *tp;
  tprio_t prio = chThdGetPriorityX();

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
 80059be:	4604      	mov	r4, r0
  test_assert(1, tp->p_refs == 1, "wrong initial reference counter");
 80059c0:	2001      	movs	r0, #1
 80059c2:	1a09      	subs	r1, r1, r0
 80059c4:	fab1 f181 	clz	r1, r1
 80059c8:	0949      	lsrs	r1, r1, #5
 80059ca:	f7fd f8b9 	bl	8002b40 <_test_assert>
 80059ce:	b108      	cbz	r0, 80059d4 <dyn3_execute.lto_priv.156+0x34>
  test_assert(10, tp->p_state == CH_STATE_FINAL, "invalid state");

  /* Clearing the zombie by scanning the registry.*/
  test_assert(11, regfind(tp), "thread disappeared");
  test_assert(12, !regfind(tp), "thread still in registry");
}
 80059d0:	b002      	add	sp, #8
 80059d2:	bd10      	pop	{r4, pc}
 80059d4:	2320      	movs	r3, #32
 80059d6:	f383 8811 	msr	BASEPRI, r3
 */
thread_t *chThdAddRef(thread_t *tp) {

  chSysLock();
  chDbgAssert(tp->p_refs < (trefs_t)255, "too many references");
  tp->p_refs++;
 80059da:	7fa3      	ldrb	r3, [r4, #30]
 80059dc:	3301      	adds	r3, #1
 80059de:	77a3      	strb	r3, [r4, #30]
 80059e0:	f380 8811 	msr	BASEPRI, r0

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
  test_assert(1, tp->p_refs == 1, "wrong initial reference counter");
  chThdAddRef(tp);
  test_assert(2, tp->p_refs == 2, "references increase failure");
 80059e4:	7fa1      	ldrb	r1, [r4, #30]
 80059e6:	2002      	movs	r0, #2
 80059e8:	1a09      	subs	r1, r1, r0
 80059ea:	fab1 f181 	clz	r1, r1
 80059ee:	0949      	lsrs	r1, r1, #5
 80059f0:	f7fd f8a6 	bl	8002b40 <_test_assert>
 80059f4:	2800      	cmp	r0, #0
 80059f6:	d1eb      	bne.n	80059d0 <dyn3_execute.lto_priv.156+0x30>
  chThdRelease(tp);
 80059f8:	4620      	mov	r0, r4
 80059fa:	f7fb f9b1 	bl	8000d60 <chThdRelease>
  test_assert(3, tp->p_refs == 1, "references decrease failure");
 80059fe:	7fa1      	ldrb	r1, [r4, #30]
 8005a00:	2003      	movs	r0, #3
 8005a02:	f1a1 0101 	sub.w	r1, r1, #1
 8005a06:	fab1 f181 	clz	r1, r1
 8005a0a:	0949      	lsrs	r1, r1, #5
 8005a0c:	f7fd f898 	bl	8002b40 <_test_assert>
 8005a10:	2800      	cmp	r0, #0
 8005a12:	d1dd      	bne.n	80059d0 <dyn3_execute.lto_priv.156+0x30>

  /* Verify the new threads count.*/
  test_assert(4, regfind(tp), "thread missing from registry");
 8005a14:	4620      	mov	r0, r4
 8005a16:	f7ff ffa3 	bl	8005960 <regfind>
 8005a1a:	4601      	mov	r1, r0
 8005a1c:	2004      	movs	r0, #4
 8005a1e:	f7fd f88f 	bl	8002b40 <_test_assert>
 8005a22:	2800      	cmp	r0, #0
 8005a24:	d1d4      	bne.n	80059d0 <dyn3_execute.lto_priv.156+0x30>
  test_assert(5, regfind(tp), "thread disappeared");
 8005a26:	4620      	mov	r0, r4
 8005a28:	f7ff ff9a 	bl	8005960 <regfind>
 8005a2c:	4601      	mov	r1, r0
 8005a2e:	2005      	movs	r0, #5
 8005a30:	f7fd f886 	bl	8002b40 <_test_assert>
 8005a34:	2800      	cmp	r0, #0
 8005a36:	d1cb      	bne.n	80059d0 <dyn3_execute.lto_priv.156+0x30>

  /* Detach and let the thread execute and terminate.*/
  chThdRelease(tp);
 8005a38:	4620      	mov	r0, r4
 8005a3a:	f7fb f991 	bl	8000d60 <chThdRelease>
  test_assert(6, tp->p_refs == 0, "detach failure");
 8005a3e:	7fa1      	ldrb	r1, [r4, #30]
 8005a40:	2006      	movs	r0, #6
 8005a42:	fab1 f181 	clz	r1, r1
 8005a46:	0949      	lsrs	r1, r1, #5
 8005a48:	f7fd f87a 	bl	8002b40 <_test_assert>
 8005a4c:	2800      	cmp	r0, #0
 8005a4e:	d1bf      	bne.n	80059d0 <dyn3_execute.lto_priv.156+0x30>
  test_assert(7, tp->p_state == CH_STATE_READY, "invalid state");
 8005a50:	7f21      	ldrb	r1, [r4, #28]
 8005a52:	2007      	movs	r0, #7
 8005a54:	fab1 f181 	clz	r1, r1
 8005a58:	0949      	lsrs	r1, r1, #5
 8005a5a:	f7fd f871 	bl	8002b40 <_test_assert>
 8005a5e:	2800      	cmp	r0, #0
 8005a60:	d1b6      	bne.n	80059d0 <dyn3_execute.lto_priv.156+0x30>
  test_assert(8, regfind(tp), "thread disappeared");
 8005a62:	4620      	mov	r0, r4
 8005a64:	f7ff ff7c 	bl	8005960 <regfind>
 8005a68:	4601      	mov	r1, r0
 8005a6a:	2008      	movs	r0, #8
 8005a6c:	f7fd f868 	bl	8002b40 <_test_assert>
 8005a70:	2800      	cmp	r0, #0
 8005a72:	d1ad      	bne.n	80059d0 <dyn3_execute.lto_priv.156+0x30>
  test_assert(9, regfind(tp), "thread disappeared");
 8005a74:	4620      	mov	r0, r4
 8005a76:	f7ff ff73 	bl	8005960 <regfind>
 8005a7a:	4601      	mov	r1, r0
 8005a7c:	2009      	movs	r0, #9
 8005a7e:	f7fd f85f 	bl	8002b40 <_test_assert>
 8005a82:	2800      	cmp	r0, #0
 8005a84:	d1a4      	bne.n	80059d0 <dyn3_execute.lto_priv.156+0x30>
  chThdSleepMilliseconds(50);           /* The thread just terminates.      */
 8005a86:	2064      	movs	r0, #100	; 0x64
 8005a88:	f7fb fcb2 	bl	80013f0 <chThdSleep>
  test_assert(10, tp->p_state == CH_STATE_FINAL, "invalid state");
 8005a8c:	7f21      	ldrb	r1, [r4, #28]
 8005a8e:	200a      	movs	r0, #10
 8005a90:	f1a1 030f 	sub.w	r3, r1, #15
 8005a94:	4259      	negs	r1, r3
 8005a96:	4159      	adcs	r1, r3
 8005a98:	f7fd f852 	bl	8002b40 <_test_assert>
 8005a9c:	2800      	cmp	r0, #0
 8005a9e:	d197      	bne.n	80059d0 <dyn3_execute.lto_priv.156+0x30>

  /* Clearing the zombie by scanning the registry.*/
  test_assert(11, regfind(tp), "thread disappeared");
 8005aa0:	4620      	mov	r0, r4
 8005aa2:	f7ff ff5d 	bl	8005960 <regfind>
 8005aa6:	4601      	mov	r1, r0
 8005aa8:	200b      	movs	r0, #11
 8005aaa:	f7fd f849 	bl	8002b40 <_test_assert>
 8005aae:	2800      	cmp	r0, #0
 8005ab0:	d18e      	bne.n	80059d0 <dyn3_execute.lto_priv.156+0x30>
  test_assert(12, !regfind(tp), "thread still in registry");
 8005ab2:	4620      	mov	r0, r4
 8005ab4:	f7ff ff54 	bl	8005960 <regfind>
 8005ab8:	f080 0101 	eor.w	r1, r0, #1
 8005abc:	b2c9      	uxtb	r1, r1
 8005abe:	200c      	movs	r0, #12
}
 8005ac0:	b002      	add	sp, #8
 8005ac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chThdSleepMilliseconds(50);           /* The thread just terminates.      */
  test_assert(10, tp->p_state == CH_STATE_FINAL, "invalid state");

  /* Clearing the zombie by scanning the registry.*/
  test_assert(11, regfind(tp), "thread disappeared");
  test_assert(12, !regfind(tp), "thread still in registry");
 8005ac6:	f7fd b83b 	b.w	8002b40 <_test_assert>
 8005aca:	bf00      	nop
 8005acc:	200013f8 	.word	0x200013f8
 8005ad0:	08006fd4 	.word	0x08006fd4
 8005ad4:	20000cf0 	.word	0x20000cf0
 8005ad8:	08005481 	.word	0x08005481
 8005adc:	00000000 	.word	0x00000000

08005ae0 <pools1_execute.lto_priv.150>:
static void pools1_setup(void) {

  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}

static void pools1_execute(void) {
 8005ae0:	b570      	push	{r4, r5, r6, lr}
 8005ae2:	4b2f      	ldr	r3, [pc, #188]	; (8005ba0 <pools1_execute.lto_priv.150+0xc0>)
 8005ae4:	4c2f      	ldr	r4, [pc, #188]	; (8005ba4 <pools1_execute.lto_priv.150+0xc4>)
 8005ae6:	2205      	movs	r2, #5
 8005ae8:	2520      	movs	r5, #32
 8005aea:	2000      	movs	r0, #0
 8005aec:	f385 8811 	msr	BASEPRI, r5
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8005af0:	6821      	ldr	r1, [r4, #0]
  mp->mp_next = php;
 8005af2:	6023      	str	r3, [r4, #0]
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8005af4:	6019      	str	r1, [r3, #0]
 8005af6:	f380 8811 	msr	BASEPRI, r0
  chDbgCheck((mp != NULL) && (n != 0U));

  while (n != 0U) {
    chPoolAdd(mp, p);
    /*lint -save -e9087 [11.3] Safe cast.*/
    p = (void *)(((uint8_t *)p) + mp->mp_object_size);
 8005afa:	6861      	ldr	r1, [r4, #4]
 */
void chPoolLoadArray(memory_pool_t *mp, void *p, size_t n) {

  chDbgCheck((mp != NULL) && (n != 0U));

  while (n != 0U) {
 8005afc:	3a01      	subs	r2, #1
    chPoolAdd(mp, p);
    /*lint -save -e9087 [11.3] Safe cast.*/
    p = (void *)(((uint8_t *)p) + mp->mp_object_size);
 8005afe:	440b      	add	r3, r1
 */
void chPoolLoadArray(memory_pool_t *mp, void *p, size_t n) {

  chDbgCheck((mp != NULL) && (n != 0U));

  while (n != 0U) {
 8005b00:	d1f4      	bne.n	8005aec <pools1_execute.lto_priv.150+0xc>
 8005b02:	2505      	movs	r5, #5
  /* Adding the WAs to the pool.*/
  chPoolLoadArray(&mp1, wa[0], MAX_THREADS);

  /* Emptying the pool.*/
  for (i = 0; i < MAX_THREADS; i++)
    test_assert(1, chPoolAlloc(&mp1) != NULL, "list empty");
 8005b04:	4827      	ldr	r0, [pc, #156]	; (8005ba4 <pools1_execute.lto_priv.150+0xc4>)
 8005b06:	f7fa fd4b 	bl	80005a0 <chPoolAlloc>
 8005b0a:	1c01      	adds	r1, r0, #0
 8005b0c:	bf18      	it	ne
 8005b0e:	2101      	movne	r1, #1
 8005b10:	2001      	movs	r0, #1
 8005b12:	f7fd f815 	bl	8002b40 <_test_assert>
 8005b16:	bb90      	cbnz	r0, 8005b7e <pools1_execute.lto_priv.150+0x9e>

  /* Adding the WAs to the pool.*/
  chPoolLoadArray(&mp1, wa[0], MAX_THREADS);

  /* Emptying the pool.*/
  for (i = 0; i < MAX_THREADS; i++)
 8005b18:	3d01      	subs	r5, #1
 8005b1a:	d1f3      	bne.n	8005b04 <pools1_execute.lto_priv.150+0x24>
    test_assert(1, chPoolAlloc(&mp1) != NULL, "list empty");

  /* Now must be empty.*/
  test_assert(2, chPoolAlloc(&mp1) == NULL, "list not empty");
 8005b1c:	4821      	ldr	r0, [pc, #132]	; (8005ba4 <pools1_execute.lto_priv.150+0xc4>)
 8005b1e:	f7fa fd3f 	bl	80005a0 <chPoolAlloc>
 8005b22:	fab0 f180 	clz	r1, r0
 8005b26:	2002      	movs	r0, #2
 8005b28:	0949      	lsrs	r1, r1, #5
 8005b2a:	f7fd f809 	bl	8002b40 <_test_assert>
 8005b2e:	bb30      	cbnz	r0, 8005b7e <pools1_execute.lto_priv.150+0x9e>
 8005b30:	4b1d      	ldr	r3, [pc, #116]	; (8005ba8 <pools1_execute.lto_priv.150+0xc8>)
 8005b32:	2620      	movs	r6, #32
 8005b34:	f103 0014 	add.w	r0, r3, #20

  /* Adding the WAs to the pool, one by one this time.*/
  for (i = 0; i < MAX_THREADS; i++)
    chPoolFree(&mp1, wa[i]);
 8005b38:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b3c:	f386 8811 	msr	BASEPRI, r6
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8005b40:	6821      	ldr	r1, [r4, #0]
 8005b42:	6011      	str	r1, [r2, #0]
  mp->mp_next = php;
 8005b44:	6022      	str	r2, [r4, #0]
 8005b46:	f385 8811 	msr	BASEPRI, r5

  /* Now must be empty.*/
  test_assert(2, chPoolAlloc(&mp1) == NULL, "list not empty");

  /* Adding the WAs to the pool, one by one this time.*/
  for (i = 0; i < MAX_THREADS; i++)
 8005b4a:	4283      	cmp	r3, r0
 8005b4c:	d1f4      	bne.n	8005b38 <pools1_execute.lto_priv.150+0x58>
 8005b4e:	2405      	movs	r4, #5
    chPoolFree(&mp1, wa[i]);

  /* Emptying the pool again.*/
  for (i = 0; i < MAX_THREADS; i++)
    test_assert(3, chPoolAlloc(&mp1) != NULL, "list empty");
 8005b50:	4d14      	ldr	r5, [pc, #80]	; (8005ba4 <pools1_execute.lto_priv.150+0xc4>)
 8005b52:	4628      	mov	r0, r5
 8005b54:	f7fa fd24 	bl	80005a0 <chPoolAlloc>
 8005b58:	1c01      	adds	r1, r0, #0
 8005b5a:	bf18      	it	ne
 8005b5c:	2101      	movne	r1, #1
 8005b5e:	2003      	movs	r0, #3
 8005b60:	f7fc ffee 	bl	8002b40 <_test_assert>
 8005b64:	b958      	cbnz	r0, 8005b7e <pools1_execute.lto_priv.150+0x9e>
  /* Adding the WAs to the pool, one by one this time.*/
  for (i = 0; i < MAX_THREADS; i++)
    chPoolFree(&mp1, wa[i]);

  /* Emptying the pool again.*/
  for (i = 0; i < MAX_THREADS; i++)
 8005b66:	3c01      	subs	r4, #1
 8005b68:	d1f2      	bne.n	8005b50 <pools1_execute.lto_priv.150+0x70>
    test_assert(3, chPoolAlloc(&mp1) != NULL, "list empty");

  /* Now must be empty again.*/
  test_assert(4, chPoolAlloc(&mp1) == NULL, "list not empty");
 8005b6a:	4628      	mov	r0, r5
 8005b6c:	f7fa fd18 	bl	80005a0 <chPoolAlloc>
 8005b70:	fab0 f180 	clz	r1, r0
 8005b74:	2004      	movs	r0, #4
 8005b76:	0949      	lsrs	r1, r1, #5
 8005b78:	f7fc ffe2 	bl	8002b40 <_test_assert>
 8005b7c:	b100      	cbz	r0, 8005b80 <pools1_execute.lto_priv.150+0xa0>
 8005b7e:	bd70      	pop	{r4, r5, r6, pc}

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
  mp->mp_object_size = size;
  mp->mp_provider = provider;
 8005b80:	4a0a      	ldr	r2, [pc, #40]	; (8005bac <pools1_execute.lto_priv.150+0xcc>)
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
  mp->mp_object_size = size;
 8005b82:	2310      	movs	r3, #16

  /* Covering the case where a provider is unable to return more memory.*/
  chPoolObjectInit(&mp1, 16, null_provider);
  test_assert(5, chPoolAlloc(&mp1) == NULL, "provider returned memory");
 8005b84:	4628      	mov	r0, r5
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 8005b86:	602c      	str	r4, [r5, #0]
  mp->mp_object_size = size;
  mp->mp_provider = provider;
 8005b88:	60aa      	str	r2, [r5, #8]
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
  mp->mp_object_size = size;
 8005b8a:	606b      	str	r3, [r5, #4]
 8005b8c:	f7fa fd08 	bl	80005a0 <chPoolAlloc>
}
 8005b90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  /* Now must be empty again.*/
  test_assert(4, chPoolAlloc(&mp1) == NULL, "list not empty");

  /* Covering the case where a provider is unable to return more memory.*/
  chPoolObjectInit(&mp1, 16, null_provider);
  test_assert(5, chPoolAlloc(&mp1) == NULL, "provider returned memory");
 8005b94:	fab0 f180 	clz	r1, r0
 8005b98:	2005      	movs	r0, #5
 8005b9a:	0949      	lsrs	r1, r1, #5
 8005b9c:	f7fc bfd0 	b.w	8002b40 <_test_assert>
 8005ba0:	20000d50 	.word	0x20000d50
 8005ba4:	20000844 	.word	0x20000844
 8005ba8:	08007ad0 	.word	0x08007ad0
 8005bac:	08005dc1 	.word	0x08005dc1

08005bb0 <dyn2_execute.lto_priv.154>:
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005bb0:	4a2f      	ldr	r2, [pc, #188]	; (8005c70 <dyn2_execute.lto_priv.154+0xc0>)
static void dyn2_setup(void) {

  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}

static void dyn2_execute(void) {
 8005bb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005bb4:	6992      	ldr	r2, [r2, #24]
 8005bb6:	4b2f      	ldr	r3, [pc, #188]	; (8005c74 <dyn2_execute.lto_priv.154+0xc4>)
 8005bb8:	492f      	ldr	r1, [pc, #188]	; (8005c78 <dyn2_execute.lto_priv.154+0xc8>)
 8005bba:	6895      	ldr	r5, [r2, #8]
 8005bbc:	f103 0710 	add.w	r7, r3, #16
 8005bc0:	2620      	movs	r6, #32
 8005bc2:	2400      	movs	r4, #0
  int i;
  tprio_t prio = chThdGetPriorityX();

  /* Adding the WAs to the pool. */
  for (i = 0; i < 4; i++)
    chPoolFree(&mp1, wa[i]);
 8005bc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bc8:	f386 8811 	msr	BASEPRI, r6
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8005bcc:	6808      	ldr	r0, [r1, #0]
 8005bce:	6010      	str	r0, [r2, #0]
  mp->mp_next = php;
 8005bd0:	600a      	str	r2, [r1, #0]
 8005bd2:	f384 8811 	msr	BASEPRI, r4
static void dyn2_execute(void) {
  int i;
  tprio_t prio = chThdGetPriorityX();

  /* Adding the WAs to the pool. */
  for (i = 0; i < 4; i++)
 8005bd6:	42bb      	cmp	r3, r7
 8005bd8:	d1f4      	bne.n	8005bc4 <dyn2_execute.lto_priv.154+0x14>
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
 8005bda:	4928      	ldr	r1, [pc, #160]	; (8005c7c <dyn2_execute.lto_priv.154+0xcc>)
 8005bdc:	1e68      	subs	r0, r5, #1
 8005bde:	f000 feef 	bl	80069c0 <chThdCreateFromMemoryPool.constprop.76>
 8005be2:	4c27      	ldr	r4, [pc, #156]	; (8005c80 <dyn2_execute.lto_priv.154+0xd0>)
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
 8005be4:	4927      	ldr	r1, [pc, #156]	; (8005c84 <dyn2_execute.lto_priv.154+0xd4>)
  /* Adding the WAs to the pool. */
  for (i = 0; i < 4; i++)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
 8005be6:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
 8005be8:	1ea8      	subs	r0, r5, #2
 8005bea:	f000 fee9 	bl	80069c0 <chThdCreateFromMemoryPool.constprop.76>
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
 8005bee:	4926      	ldr	r1, [pc, #152]	; (8005c88 <dyn2_execute.lto_priv.154+0xd8>)
  for (i = 0; i < 4; i++)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
 8005bf0:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
 8005bf2:	1ee8      	subs	r0, r5, #3
 8005bf4:	f000 fee4 	bl	80069c0 <chThdCreateFromMemoryPool.constprop.76>
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
 8005bf8:	4924      	ldr	r1, [pc, #144]	; (8005c8c <dyn2_execute.lto_priv.154+0xdc>)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
 8005bfa:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
 8005bfc:	1f28      	subs	r0, r5, #4
 8005bfe:	f000 fedf 	bl	80069c0 <chThdCreateFromMemoryPool.constprop.76>
  threads[4] = chThdCreateFromMemoryPool(&mp1, prio-5, thread, "E");
 8005c02:	4923      	ldr	r1, [pc, #140]	; (8005c90 <dyn2_execute.lto_priv.154+0xe0>)

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
 8005c04:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateFromMemoryPool(&mp1, prio-5, thread, "E");
 8005c06:	1f68      	subs	r0, r5, #5
 8005c08:	f000 feda 	bl	80069c0 <chThdCreateFromMemoryPool.constprop.76>

  test_assert(1, (threads[0] != NULL) &&
 8005c0c:	6821      	ldr	r1, [r4, #0]
  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
  threads[4] = chThdCreateFromMemoryPool(&mp1, prio-5, thread, "E");
 8005c0e:	6120      	str	r0, [r4, #16]

  test_assert(1, (threads[0] != NULL) &&
 8005c10:	b141      	cbz	r1, 8005c24 <dyn2_execute.lto_priv.154+0x74>
 8005c12:	6861      	ldr	r1, [r4, #4]
 8005c14:	b131      	cbz	r1, 8005c24 <dyn2_execute.lto_priv.154+0x74>
 8005c16:	68a1      	ldr	r1, [r4, #8]
 8005c18:	b121      	cbz	r1, 8005c24 <dyn2_execute.lto_priv.154+0x74>
 8005c1a:	68e1      	ldr	r1, [r4, #12]
 8005c1c:	b111      	cbz	r1, 8005c24 <dyn2_execute.lto_priv.154+0x74>
 8005c1e:	fab0 f180 	clz	r1, r0
 8005c22:	0949      	lsrs	r1, r1, #5
 8005c24:	2001      	movs	r0, #1
 8005c26:	f7fc ff8b 	bl	8002b40 <_test_assert>
 8005c2a:	b100      	cbz	r0, 8005c2e <dyn2_execute.lto_priv.154+0x7e>
 8005c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                 (threads[3] != NULL) &&
                 (threads[4] == NULL),
                 "thread creation failed");

  /* Claiming the memory from terminated threads. */
  test_wait_threads();
 8005c2e:	f7fc ff07 	bl	8002a40 <test_wait_threads>
  test_assert_sequence(2, "ABCD");
 8005c32:	2002      	movs	r0, #2
 8005c34:	4917      	ldr	r1, [pc, #92]	; (8005c94 <dyn2_execute.lto_priv.154+0xe4>)
 8005c36:	f7fc ff5b 	bl	8002af0 <_test_assert_sequence>
 8005c3a:	2800      	cmp	r0, #0
 8005c3c:	d1f6      	bne.n	8005c2c <dyn2_execute.lto_priv.154+0x7c>
 8005c3e:	2404      	movs	r4, #4

  /* Now the pool must be full again. */
  for (i = 0; i < 4; i++)
    test_assert(3, chPoolAlloc(&mp1) != NULL, "pool list empty");
 8005c40:	480d      	ldr	r0, [pc, #52]	; (8005c78 <dyn2_execute.lto_priv.154+0xc8>)
 8005c42:	f7fa fcad 	bl	80005a0 <chPoolAlloc>
 8005c46:	1c01      	adds	r1, r0, #0
 8005c48:	bf18      	it	ne
 8005c4a:	2101      	movne	r1, #1
 8005c4c:	2003      	movs	r0, #3
 8005c4e:	f7fc ff77 	bl	8002b40 <_test_assert>
 8005c52:	2800      	cmp	r0, #0
 8005c54:	d1ea      	bne.n	8005c2c <dyn2_execute.lto_priv.154+0x7c>
  /* Claiming the memory from terminated threads. */
  test_wait_threads();
  test_assert_sequence(2, "ABCD");

  /* Now the pool must be full again. */
  for (i = 0; i < 4; i++)
 8005c56:	3c01      	subs	r4, #1
 8005c58:	d1f2      	bne.n	8005c40 <dyn2_execute.lto_priv.154+0x90>
    test_assert(3, chPoolAlloc(&mp1) != NULL, "pool list empty");
  test_assert(4, chPoolAlloc(&mp1) == NULL, "pool list not empty");
 8005c5a:	4807      	ldr	r0, [pc, #28]	; (8005c78 <dyn2_execute.lto_priv.154+0xc8>)
 8005c5c:	f7fa fca0 	bl	80005a0 <chPoolAlloc>
}
 8005c60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  test_assert_sequence(2, "ABCD");

  /* Now the pool must be full again. */
  for (i = 0; i < 4; i++)
    test_assert(3, chPoolAlloc(&mp1) != NULL, "pool list empty");
  test_assert(4, chPoolAlloc(&mp1) == NULL, "pool list not empty");
 8005c64:	fab0 f180 	clz	r1, r0
 8005c68:	2004      	movs	r0, #4
 8005c6a:	0949      	lsrs	r1, r1, #5
 8005c6c:	f7fc bf68 	b.w	8002b40 <_test_assert>
 8005c70:	200013f8 	.word	0x200013f8
 8005c74:	08007ad0 	.word	0x08007ad0
 8005c78:	20001870 	.word	0x20001870
 8005c7c:	08006fd4 	.word	0x08006fd4
 8005c80:	20000968 	.word	0x20000968
 8005c84:	08006fd0 	.word	0x08006fd0
 8005c88:	08006fd8 	.word	0x08006fd8
 8005c8c:	080080f8 	.word	0x080080f8
 8005c90:	08006fe0 	.word	0x08006fe0
 8005c94:	08007eb0 	.word	0x08007eb0
	...

08005ca0 <dyn1_execute.lto_priv.152>:
static void dyn1_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}

static void dyn1_execute(void) {
 8005ca0:	b570      	push	{r4, r5, r6, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005ca2:	4b34      	ldr	r3, [pc, #208]	; (8005d74 <dyn1_execute.lto_priv.152+0xd4>)
 8005ca4:	b084      	sub	sp, #16
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005ca6:	699b      	ldr	r3, [r3, #24]
  size_t n, sz;
  void *p1;
  tprio_t prio = chThdGetPriorityX();

  (void)chHeapStatus(&heap1, &sz);
 8005ca8:	a903      	add	r1, sp, #12
 8005caa:	4833      	ldr	r0, [pc, #204]	; (8005d78 <dyn1_execute.lto_priv.152+0xd8>)
 8005cac:	689d      	ldr	r5, [r3, #8]
 8005cae:	f7fa ffe7 	bl	8000c80 <chHeapStatus>
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
 8005cb2:	4b32      	ldr	r3, [pc, #200]	; (8005d7c <dyn1_execute.lto_priv.152+0xdc>)
 8005cb4:	1e6a      	subs	r2, r5, #1
 8005cb6:	9300      	str	r3, [sp, #0]
 8005cb8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005cbc:	4b30      	ldr	r3, [pc, #192]	; (8005d80 <dyn1_execute.lto_priv.152+0xe0>)
 8005cbe:	482e      	ldr	r0, [pc, #184]	; (8005d78 <dyn1_execute.lto_priv.152+0xd8>)
 8005cc0:	f7fb f90e 	bl	8000ee0 <chThdCreateFromHeap>
 8005cc4:	4c2f      	ldr	r4, [pc, #188]	; (8005d84 <dyn1_execute.lto_priv.152+0xe4>)
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-1, thread, "A");
  threads[1] = chThdCreateFromHeap(&heap1,
 8005cc6:	4b30      	ldr	r3, [pc, #192]	; (8005d88 <dyn1_execute.lto_priv.152+0xe8>)
 8005cc8:	1eaa      	subs	r2, r5, #2
  void *p1;
  tprio_t prio = chThdGetPriorityX();

  (void)chHeapStatus(&heap1, &sz);
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
 8005cca:	6020      	str	r0, [r4, #0]
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-1, thread, "A");
  threads[1] = chThdCreateFromHeap(&heap1,
 8005ccc:	9300      	str	r3, [sp, #0]
 8005cce:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005cd2:	4b2b      	ldr	r3, [pc, #172]	; (8005d80 <dyn1_execute.lto_priv.152+0xe0>)
 8005cd4:	4828      	ldr	r0, [pc, #160]	; (8005d78 <dyn1_execute.lto_priv.152+0xd8>)
 8005cd6:	f7fb f903 	bl	8000ee0 <chThdCreateFromHeap>
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-2, thread, "B");
  /* Allocating the whole heap in order to make the thread creation fail.*/
  (void)chHeapStatus(&heap1, &n);
 8005cda:	a902      	add	r1, sp, #8
  (void)chHeapStatus(&heap1, &sz);
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-1, thread, "A");
  threads[1] = chThdCreateFromHeap(&heap1,
 8005cdc:	6060      	str	r0, [r4, #4]
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-2, thread, "B");
  /* Allocating the whole heap in order to make the thread creation fail.*/
  (void)chHeapStatus(&heap1, &n);
 8005cde:	4826      	ldr	r0, [pc, #152]	; (8005d78 <dyn1_execute.lto_priv.152+0xd8>)
 8005ce0:	f7fa ffce 	bl	8000c80 <chHeapStatus>
  p1 = chHeapAlloc(&heap1, n);
 8005ce4:	9902      	ldr	r1, [sp, #8]
 8005ce6:	4824      	ldr	r0, [pc, #144]	; (8005d78 <dyn1_execute.lto_priv.152+0xd8>)
 8005ce8:	f7fb f8b2 	bl	8000e50 <chHeapAlloc>
  threads[2] = chThdCreateFromHeap(&heap1,
 8005cec:	4b27      	ldr	r3, [pc, #156]	; (8005d8c <dyn1_execute.lto_priv.152+0xec>)
 8005cee:	f44f 71a4 	mov.w	r1, #328	; 0x148
  threads[1] = chThdCreateFromHeap(&heap1,
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-2, thread, "B");
  /* Allocating the whole heap in order to make the thread creation fail.*/
  (void)chHeapStatus(&heap1, &n);
  p1 = chHeapAlloc(&heap1, n);
 8005cf2:	4606      	mov	r6, r0
  threads[2] = chThdCreateFromHeap(&heap1,
 8005cf4:	1eea      	subs	r2, r5, #3
 8005cf6:	9300      	str	r3, [sp, #0]
 8005cf8:	481f      	ldr	r0, [pc, #124]	; (8005d78 <dyn1_execute.lto_priv.152+0xd8>)
 8005cfa:	4b21      	ldr	r3, [pc, #132]	; (8005d80 <dyn1_execute.lto_priv.152+0xe0>)
 8005cfc:	f7fb f8f0 	bl	8000ee0 <chThdCreateFromHeap>
 8005d00:	60a0      	str	r0, [r4, #8]
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-3, thread, "C");
  chHeapFree(p1);
 8005d02:	4630      	mov	r0, r6
 8005d04:	f7fa ffe4 	bl	8000cd0 <chHeapFree>

  test_assert(1, (threads[0] != NULL) &&
 8005d08:	6821      	ldr	r1, [r4, #0]
 8005d0a:	b121      	cbz	r1, 8005d16 <dyn1_execute.lto_priv.152+0x76>
 8005d0c:	6861      	ldr	r1, [r4, #4]
 8005d0e:	b111      	cbz	r1, 8005d16 <dyn1_execute.lto_priv.152+0x76>
 8005d10:	68a1      	ldr	r1, [r4, #8]
 8005d12:	b331      	cbz	r1, 8005d62 <dyn1_execute.lto_priv.152+0xc2>
 8005d14:	2100      	movs	r1, #0
 8005d16:	2001      	movs	r0, #1
 8005d18:	f7fc ff12 	bl	8002b40 <_test_assert>
 8005d1c:	b108      	cbz	r0, 8005d22 <dyn1_execute.lto_priv.152+0x82>
  test_assert_sequence(2, "AB");

  /* Heap status checked again.*/
  test_assert(3, chHeapStatus(&heap1, &n) == 1, "heap fragmented");
  test_assert(4, n == sz, "heap size changed");
}
 8005d1e:	b004      	add	sp, #16
 8005d20:	bd70      	pop	{r4, r5, r6, pc}
                 (threads[3] == NULL) &&
                 (threads[4] == NULL),
                 "thread creation failed");

  /* Claiming the memory from terminated threads. */
  test_wait_threads();
 8005d22:	f7fc fe8d 	bl	8002a40 <test_wait_threads>
  test_assert_sequence(2, "AB");
 8005d26:	2002      	movs	r0, #2
 8005d28:	4919      	ldr	r1, [pc, #100]	; (8005d90 <dyn1_execute.lto_priv.152+0xf0>)
 8005d2a:	f7fc fee1 	bl	8002af0 <_test_assert_sequence>
 8005d2e:	2800      	cmp	r0, #0
 8005d30:	d1f5      	bne.n	8005d1e <dyn1_execute.lto_priv.152+0x7e>

  /* Heap status checked again.*/
  test_assert(3, chHeapStatus(&heap1, &n) == 1, "heap fragmented");
 8005d32:	a902      	add	r1, sp, #8
 8005d34:	4810      	ldr	r0, [pc, #64]	; (8005d78 <dyn1_execute.lto_priv.152+0xd8>)
 8005d36:	f7fa ffa3 	bl	8000c80 <chHeapStatus>
 8005d3a:	f1a0 0101 	sub.w	r1, r0, #1
 8005d3e:	fab1 f181 	clz	r1, r1
 8005d42:	2003      	movs	r0, #3
 8005d44:	0949      	lsrs	r1, r1, #5
 8005d46:	f7fc fefb 	bl	8002b40 <_test_assert>
 8005d4a:	2800      	cmp	r0, #0
 8005d4c:	d1e7      	bne.n	8005d1e <dyn1_execute.lto_priv.152+0x7e>
  test_assert(4, n == sz, "heap size changed");
 8005d4e:	9902      	ldr	r1, [sp, #8]
 8005d50:	9b03      	ldr	r3, [sp, #12]
 8005d52:	2004      	movs	r0, #4
 8005d54:	1ac9      	subs	r1, r1, r3
 8005d56:	fab1 f181 	clz	r1, r1
 8005d5a:	0949      	lsrs	r1, r1, #5
 8005d5c:	f7fc fef0 	bl	8002b40 <_test_assert>
 8005d60:	e7dd      	b.n	8005d1e <dyn1_execute.lto_priv.152+0x7e>
  threads[2] = chThdCreateFromHeap(&heap1,
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-3, thread, "C");
  chHeapFree(p1);

  test_assert(1, (threads[0] != NULL) &&
 8005d62:	68e3      	ldr	r3, [r4, #12]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1d6      	bne.n	8005d16 <dyn1_execute.lto_priv.152+0x76>
 8005d68:	6921      	ldr	r1, [r4, #16]
 8005d6a:	fab1 f181 	clz	r1, r1
 8005d6e:	0949      	lsrs	r1, r1, #5
 8005d70:	e7d1      	b.n	8005d16 <dyn1_execute.lto_priv.152+0x76>
 8005d72:	bf00      	nop
 8005d74:	200013f8 	.word	0x200013f8
 8005d78:	20000cf0 	.word	0x20000cf0
 8005d7c:	08006fd4 	.word	0x08006fd4
 8005d80:	08005481 	.word	0x08005481
 8005d84:	20000968 	.word	0x20000968
 8005d88:	08006fd0 	.word	0x08006fd0
 8005d8c:	08006fd8 	.word	0x08006fd8
 8005d90:	08007eb8 	.word	0x08007eb8
	...

08005da0 <pools1_setup.lto_priv.149>:
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 8005da0:	4b03      	ldr	r3, [pc, #12]	; (8005db0 <pools1_setup.lto_priv.149+0x10>)
 8005da2:	2200      	movs	r2, #0
  mp->mp_object_size = size;
 8005da4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005da8:	6059      	str	r1, [r3, #4]
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 8005daa:	601a      	str	r2, [r3, #0]
  mp->mp_object_size = size;
  mp->mp_provider = provider;
 8005dac:	609a      	str	r2, [r3, #8]
 8005dae:	4770      	bx	lr
 8005db0:	20000844 	.word	0x20000844
	...

08005dc0 <null_provider.lto_priv.103>:

static void *null_provider(size_t size) {

  (void)size;
  return NULL;
}
 8005dc0:	2000      	movs	r0, #0
 8005dc2:	4770      	bx	lr
	...

08005dd0 <heap1_setup.lto_priv.147>:
  heapp->h_free.h.u.next = hp;
 8005dd0:	4909      	ldr	r1, [pc, #36]	; (8005df8 <heap1_setup.lto_priv.147+0x28>)
 * allocator.<br>
 * The test expects to find the heap back to the initial status after each
 * sequence.
 */

static void heap1_setup(void) {
 8005dd2:	b410      	push	{r4}
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 8005dd4:	2200      	movs	r2, #0
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 8005dd6:	f44f 64cc 	mov.w	r4, #1632	; 0x660
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 8005dda:	4b08      	ldr	r3, [pc, #32]	; (8005dfc <heap1_setup.lto_priv.147+0x2c>)
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 8005ddc:	e881 0014 	stmia.w	r1, {r2, r4}
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8005de0:	f103 0010 	add.w	r0, r3, #16

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
 8005de4:	60da      	str	r2, [r3, #12]
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
  heapp->h_free.h.u.next = hp;
 8005de6:	6099      	str	r1, [r3, #8]
 8005de8:	6118      	str	r0, [r3, #16]
  tqp->p_prev = (thread_t *)tqp;
 8005dea:	6158      	str	r0, [r3, #20]
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 8005dec:	601a      	str	r2, [r3, #0]
 8005dee:	619a      	str	r2, [r3, #24]

  chHeapObjectInit(&test_heap, test.buffer, sizeof(union test_buffers));
}
 8005df0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop
 8005df8:	20000d50 	.word	0x20000d50
 8005dfc:	20000d10 	.word	0x20000d10

08005e00 <heap1_execute.lto_priv.148>:

static void heap1_execute(void) {
 8005e00:	b570      	push	{r4, r5, r6, lr}
 8005e02:	b082      	sub	sp, #8

  /*
   * Test on the default heap in order to cover the core allocator at
   * least one time.
   */
  (void)chHeapStatus(NULL, &sz);
 8005e04:	a901      	add	r1, sp, #4
 8005e06:	2000      	movs	r0, #0
 8005e08:	f7fa ff3a 	bl	8000c80 <chHeapStatus>
  p1 = chHeapAlloc(NULL, SIZE);
 8005e0c:	2110      	movs	r1, #16
 8005e0e:	2000      	movs	r0, #0
 8005e10:	f7fb f81e 	bl	8000e50 <chHeapAlloc>
  test_assert(1, p1 != NULL, "allocation failed");
 8005e14:	1c01      	adds	r1, r0, #0
 8005e16:	4605      	mov	r5, r0
 8005e18:	bf18      	it	ne
 8005e1a:	2101      	movne	r1, #1
 8005e1c:	2001      	movs	r0, #1
 8005e1e:	f7fc fe8f 	bl	8002b40 <_test_assert>
 8005e22:	4604      	mov	r4, r0
 8005e24:	b108      	cbz	r0, 8005e2a <heap1_execute.lto_priv.148+0x2a>
  test_assert(10, chHeapStatus(&test_heap, &n) == 0, "not empty");
  chHeapFree(p1);

  test_assert(11, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
  test_assert(12, n == sz, "size changed");
}
 8005e26:	b002      	add	sp, #8
 8005e28:	bd70      	pop	{r4, r5, r6, pc}
   * least one time.
   */
  (void)chHeapStatus(NULL, &sz);
  p1 = chHeapAlloc(NULL, SIZE);
  test_assert(1, p1 != NULL, "allocation failed");
  chHeapFree(p1);
 8005e2a:	4628      	mov	r0, r5
 8005e2c:	f7fa ff50 	bl	8000cd0 <chHeapFree>
  p1 = chHeapAlloc(NULL, (size_t)-256);
 8005e30:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 8005e34:	4620      	mov	r0, r4
 8005e36:	f7fb f80b 	bl	8000e50 <chHeapAlloc>
  test_assert(2, p1 == NULL, "allocation not failed");
 8005e3a:	fab0 f180 	clz	r1, r0
 8005e3e:	2002      	movs	r0, #2
 8005e40:	0949      	lsrs	r1, r1, #5
 8005e42:	f7fc fe7d 	bl	8002b40 <_test_assert>
 8005e46:	2800      	cmp	r0, #0
 8005e48:	d1ed      	bne.n	8005e26 <heap1_execute.lto_priv.148+0x26>

  /* Initial local heap state.*/
  (void)chHeapStatus(&test_heap, &sz);
 8005e4a:	a901      	add	r1, sp, #4
 8005e4c:	487b      	ldr	r0, [pc, #492]	; (800603c <heap1_execute.lto_priv.148+0x23c>)
 8005e4e:	f7fa ff17 	bl	8000c80 <chHeapStatus>

  /* Same order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8005e52:	2110      	movs	r1, #16
 8005e54:	4879      	ldr	r0, [pc, #484]	; (800603c <heap1_execute.lto_priv.148+0x23c>)
 8005e56:	f7fa fffb 	bl	8000e50 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 8005e5a:	2110      	movs	r1, #16

  /* Initial local heap state.*/
  (void)chHeapStatus(&test_heap, &sz);

  /* Same order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8005e5c:	4606      	mov	r6, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 8005e5e:	4877      	ldr	r0, [pc, #476]	; (800603c <heap1_execute.lto_priv.148+0x23c>)
 8005e60:	f7fa fff6 	bl	8000e50 <chHeapAlloc>
  p3 = chHeapAlloc(&test_heap, SIZE);
 8005e64:	2110      	movs	r1, #16
  /* Initial local heap state.*/
  (void)chHeapStatus(&test_heap, &sz);

  /* Same order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
  p2 = chHeapAlloc(&test_heap, SIZE);
 8005e66:	4605      	mov	r5, r0
  p3 = chHeapAlloc(&test_heap, SIZE);
 8005e68:	4874      	ldr	r0, [pc, #464]	; (800603c <heap1_execute.lto_priv.148+0x23c>)
 8005e6a:	f7fa fff1 	bl	8000e50 <chHeapAlloc>
 8005e6e:	4604      	mov	r4, r0
  chHeapFree(p1);                               /* Does not merge.*/
 8005e70:	4630      	mov	r0, r6
 8005e72:	f7fa ff2d 	bl	8000cd0 <chHeapFree>
  chHeapFree(p2);                               /* Merges backward.*/
 8005e76:	4628      	mov	r0, r5
 8005e78:	f7fa ff2a 	bl	8000cd0 <chHeapFree>
  chHeapFree(p3);                               /* Merges both sides.*/
 8005e7c:	4620      	mov	r0, r4
 8005e7e:	f7fa ff27 	bl	8000cd0 <chHeapFree>
  test_assert(3, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 8005e82:	4669      	mov	r1, sp
 8005e84:	486d      	ldr	r0, [pc, #436]	; (800603c <heap1_execute.lto_priv.148+0x23c>)
 8005e86:	f7fa fefb 	bl	8000c80 <chHeapStatus>
 8005e8a:	f1a0 0101 	sub.w	r1, r0, #1
 8005e8e:	fab1 f181 	clz	r1, r1
 8005e92:	2003      	movs	r0, #3
 8005e94:	0949      	lsrs	r1, r1, #5
 8005e96:	f7fc fe53 	bl	8002b40 <_test_assert>
 8005e9a:	2800      	cmp	r0, #0
 8005e9c:	d1c3      	bne.n	8005e26 <heap1_execute.lto_priv.148+0x26>

  /* Reverse order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8005e9e:	2110      	movs	r1, #16
 8005ea0:	4866      	ldr	r0, [pc, #408]	; (800603c <heap1_execute.lto_priv.148+0x23c>)
 8005ea2:	f7fa ffd5 	bl	8000e50 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 8005ea6:	2110      	movs	r1, #16
  chHeapFree(p2);                               /* Merges backward.*/
  chHeapFree(p3);                               /* Merges both sides.*/
  test_assert(3, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Reverse order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8005ea8:	4604      	mov	r4, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 8005eaa:	4864      	ldr	r0, [pc, #400]	; (800603c <heap1_execute.lto_priv.148+0x23c>)
 8005eac:	f7fa ffd0 	bl	8000e50 <chHeapAlloc>
 8005eb0:	4605      	mov	r5, r0
  p3 = chHeapAlloc(&test_heap, SIZE);
 8005eb2:	2110      	movs	r1, #16
 8005eb4:	4861      	ldr	r0, [pc, #388]	; (800603c <heap1_execute.lto_priv.148+0x23c>)
 8005eb6:	f7fa ffcb 	bl	8000e50 <chHeapAlloc>
  chHeapFree(p3);                               /* Merges forward.*/
 8005eba:	f7fa ff09 	bl	8000cd0 <chHeapFree>
  chHeapFree(p2);                               /* Merges forward.*/
 8005ebe:	4628      	mov	r0, r5
 8005ec0:	f7fa ff06 	bl	8000cd0 <chHeapFree>
  chHeapFree(p1);                               /* Merges forward.*/
 8005ec4:	4620      	mov	r0, r4
 8005ec6:	f7fa ff03 	bl	8000cd0 <chHeapFree>
  test_assert(4, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 8005eca:	4669      	mov	r1, sp
 8005ecc:	485b      	ldr	r0, [pc, #364]	; (800603c <heap1_execute.lto_priv.148+0x23c>)
 8005ece:	f7fa fed7 	bl	8000c80 <chHeapStatus>
 8005ed2:	f1a0 0101 	sub.w	r1, r0, #1
 8005ed6:	fab1 f181 	clz	r1, r1
 8005eda:	2004      	movs	r0, #4
 8005edc:	0949      	lsrs	r1, r1, #5
 8005ede:	f7fc fe2f 	bl	8002b40 <_test_assert>
 8005ee2:	2800      	cmp	r0, #0
 8005ee4:	d19f      	bne.n	8005e26 <heap1_execute.lto_priv.148+0x26>

  /* Small fragments handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE + 1);
 8005ee6:	2111      	movs	r1, #17
 8005ee8:	4854      	ldr	r0, [pc, #336]	; (800603c <heap1_execute.lto_priv.148+0x23c>)
 8005eea:	f7fa ffb1 	bl	8000e50 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 8005eee:	2110      	movs	r1, #16
  chHeapFree(p2);                               /* Merges forward.*/
  chHeapFree(p1);                               /* Merges forward.*/
  test_assert(4, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Small fragments handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE + 1);
 8005ef0:	4604      	mov	r4, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 8005ef2:	4852      	ldr	r0, [pc, #328]	; (800603c <heap1_execute.lto_priv.148+0x23c>)
 8005ef4:	f7fa ffac 	bl	8000e50 <chHeapAlloc>
 8005ef8:	4605      	mov	r5, r0
  chHeapFree(p1);
 8005efa:	4620      	mov	r0, r4
 8005efc:	f7fa fee8 	bl	8000cd0 <chHeapFree>
  test_assert(5, chHeapStatus(&test_heap, &n) == 2, "invalid state");
 8005f00:	4669      	mov	r1, sp
 8005f02:	484e      	ldr	r0, [pc, #312]	; (800603c <heap1_execute.lto_priv.148+0x23c>)
 8005f04:	f7fa febc 	bl	8000c80 <chHeapStatus>
 8005f08:	f1a0 0102 	sub.w	r1, r0, #2
 8005f0c:	fab1 f181 	clz	r1, r1
 8005f10:	2005      	movs	r0, #5
 8005f12:	0949      	lsrs	r1, r1, #5
 8005f14:	f7fc fe14 	bl	8002b40 <_test_assert>
 8005f18:	2800      	cmp	r0, #0
 8005f1a:	d184      	bne.n	8005e26 <heap1_execute.lto_priv.148+0x26>
  p1 = chHeapAlloc(&test_heap, SIZE);
 8005f1c:	2110      	movs	r1, #16
 8005f1e:	4847      	ldr	r0, [pc, #284]	; (800603c <heap1_execute.lto_priv.148+0x23c>)
 8005f20:	f7fa ff96 	bl	8000e50 <chHeapAlloc>
  /* Note, the first situation happens when the alignment size is smaller
     than the header size, the second in the other cases.*/
  test_assert(6, (chHeapStatus(&test_heap, &n) == 1) ||
 8005f24:	4669      	mov	r1, sp
  /* Small fragments handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE + 1);
  p2 = chHeapAlloc(&test_heap, SIZE);
  chHeapFree(p1);
  test_assert(5, chHeapStatus(&test_heap, &n) == 2, "invalid state");
  p1 = chHeapAlloc(&test_heap, SIZE);
 8005f26:	4604      	mov	r4, r0
  /* Note, the first situation happens when the alignment size is smaller
     than the header size, the second in the other cases.*/
  test_assert(6, (chHeapStatus(&test_heap, &n) == 1) ||
 8005f28:	4844      	ldr	r0, [pc, #272]	; (800603c <heap1_execute.lto_priv.148+0x23c>)
 8005f2a:	f7fa fea9 	bl	8000c80 <chHeapStatus>
 8005f2e:	2801      	cmp	r0, #1
 8005f30:	f000 8081 	beq.w	8006036 <heap1_execute.lto_priv.148+0x236>
 8005f34:	4669      	mov	r1, sp
 8005f36:	4841      	ldr	r0, [pc, #260]	; (800603c <heap1_execute.lto_priv.148+0x23c>)
 8005f38:	f7fa fea2 	bl	8000c80 <chHeapStatus>
 8005f3c:	f1a0 0102 	sub.w	r1, r0, #2
 8005f40:	fab1 f181 	clz	r1, r1
 8005f44:	0949      	lsrs	r1, r1, #5
 8005f46:	2006      	movs	r0, #6
 8005f48:	f7fc fdfa 	bl	8002b40 <_test_assert>
 8005f4c:	2800      	cmp	r0, #0
 8005f4e:	f47f af6a 	bne.w	8005e26 <heap1_execute.lto_priv.148+0x26>
                 (chHeapStatus(&test_heap, &n) == 2), "heap fragmented");
  chHeapFree(p2);
 8005f52:	4628      	mov	r0, r5
 8005f54:	f7fa febc 	bl	8000cd0 <chHeapFree>
  chHeapFree(p1);
 8005f58:	4620      	mov	r0, r4
 8005f5a:	f7fa feb9 	bl	8000cd0 <chHeapFree>
  test_assert(7, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 8005f5e:	4669      	mov	r1, sp
 8005f60:	4836      	ldr	r0, [pc, #216]	; (800603c <heap1_execute.lto_priv.148+0x23c>)
 8005f62:	f7fa fe8d 	bl	8000c80 <chHeapStatus>
 8005f66:	1e46      	subs	r6, r0, #1
 8005f68:	4271      	negs	r1, r6
 8005f6a:	4171      	adcs	r1, r6
 8005f6c:	2007      	movs	r0, #7
 8005f6e:	f7fc fde7 	bl	8002b40 <_test_assert>
 8005f72:	2800      	cmp	r0, #0
 8005f74:	f47f af57 	bne.w	8005e26 <heap1_execute.lto_priv.148+0x26>

  /* Skip fragment handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8005f78:	2110      	movs	r1, #16
 8005f7a:	4830      	ldr	r0, [pc, #192]	; (800603c <heap1_execute.lto_priv.148+0x23c>)
 8005f7c:	f7fa ff68 	bl	8000e50 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 8005f80:	2110      	movs	r1, #16
  chHeapFree(p2);
  chHeapFree(p1);
  test_assert(7, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Skip fragment handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8005f82:	4605      	mov	r5, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 8005f84:	482d      	ldr	r0, [pc, #180]	; (800603c <heap1_execute.lto_priv.148+0x23c>)
 8005f86:	f7fa ff63 	bl	8000e50 <chHeapAlloc>
 8005f8a:	4604      	mov	r4, r0
  chHeapFree(p1);
 8005f8c:	4628      	mov	r0, r5
 8005f8e:	f7fa fe9f 	bl	8000cd0 <chHeapFree>
  test_assert(8, chHeapStatus(&test_heap, &n) == 2, "invalid state");
 8005f92:	4669      	mov	r1, sp
 8005f94:	4829      	ldr	r0, [pc, #164]	; (800603c <heap1_execute.lto_priv.148+0x23c>)
 8005f96:	f7fa fe73 	bl	8000c80 <chHeapStatus>
 8005f9a:	1e85      	subs	r5, r0, #2
 8005f9c:	4269      	negs	r1, r5
 8005f9e:	4169      	adcs	r1, r5
 8005fa0:	2008      	movs	r0, #8
 8005fa2:	f7fc fdcd 	bl	8002b40 <_test_assert>
 8005fa6:	2800      	cmp	r0, #0
 8005fa8:	f47f af3d 	bne.w	8005e26 <heap1_execute.lto_priv.148+0x26>
  p1 = chHeapAlloc(&test_heap, SIZE * 2);       /* Skips first fragment.*/
 8005fac:	2120      	movs	r1, #32
 8005fae:	4823      	ldr	r0, [pc, #140]	; (800603c <heap1_execute.lto_priv.148+0x23c>)
 8005fb0:	f7fa ff4e 	bl	8000e50 <chHeapAlloc>
  chHeapFree(p1);
 8005fb4:	f7fa fe8c 	bl	8000cd0 <chHeapFree>
  chHeapFree(p2);
 8005fb8:	4620      	mov	r0, r4
 8005fba:	f7fa fe89 	bl	8000cd0 <chHeapFree>
  test_assert(9, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 8005fbe:	4669      	mov	r1, sp
 8005fc0:	481e      	ldr	r0, [pc, #120]	; (800603c <heap1_execute.lto_priv.148+0x23c>)
 8005fc2:	f7fa fe5d 	bl	8000c80 <chHeapStatus>
 8005fc6:	3801      	subs	r0, #1
 8005fc8:	4241      	negs	r1, r0
 8005fca:	4141      	adcs	r1, r0
 8005fcc:	2009      	movs	r0, #9
 8005fce:	f7fc fdb7 	bl	8002b40 <_test_assert>
 8005fd2:	2800      	cmp	r0, #0
 8005fd4:	f47f af27 	bne.w	8005e26 <heap1_execute.lto_priv.148+0x26>

  /* Allocate all handling.*/
  (void)chHeapStatus(&test_heap, &n);
 8005fd8:	4669      	mov	r1, sp
 8005fda:	4818      	ldr	r0, [pc, #96]	; (800603c <heap1_execute.lto_priv.148+0x23c>)
 8005fdc:	f7fa fe50 	bl	8000c80 <chHeapStatus>
  p1 = chHeapAlloc(&test_heap, n);
 8005fe0:	9900      	ldr	r1, [sp, #0]
 8005fe2:	4816      	ldr	r0, [pc, #88]	; (800603c <heap1_execute.lto_priv.148+0x23c>)
 8005fe4:	f7fa ff34 	bl	8000e50 <chHeapAlloc>
  test_assert(10, chHeapStatus(&test_heap, &n) == 0, "not empty");
 8005fe8:	4669      	mov	r1, sp
  chHeapFree(p2);
  test_assert(9, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Allocate all handling.*/
  (void)chHeapStatus(&test_heap, &n);
  p1 = chHeapAlloc(&test_heap, n);
 8005fea:	4604      	mov	r4, r0
  test_assert(10, chHeapStatus(&test_heap, &n) == 0, "not empty");
 8005fec:	4813      	ldr	r0, [pc, #76]	; (800603c <heap1_execute.lto_priv.148+0x23c>)
 8005fee:	f7fa fe47 	bl	8000c80 <chHeapStatus>
 8005ff2:	fab0 f180 	clz	r1, r0
 8005ff6:	200a      	movs	r0, #10
 8005ff8:	0949      	lsrs	r1, r1, #5
 8005ffa:	f7fc fda1 	bl	8002b40 <_test_assert>
 8005ffe:	2800      	cmp	r0, #0
 8006000:	f47f af11 	bne.w	8005e26 <heap1_execute.lto_priv.148+0x26>
  chHeapFree(p1);
 8006004:	4620      	mov	r0, r4
 8006006:	f7fa fe63 	bl	8000cd0 <chHeapFree>

  test_assert(11, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 800600a:	4669      	mov	r1, sp
 800600c:	480b      	ldr	r0, [pc, #44]	; (800603c <heap1_execute.lto_priv.148+0x23c>)
 800600e:	f7fa fe37 	bl	8000c80 <chHeapStatus>
 8006012:	1e42      	subs	r2, r0, #1
 8006014:	4251      	negs	r1, r2
 8006016:	4151      	adcs	r1, r2
 8006018:	200b      	movs	r0, #11
 800601a:	f7fc fd91 	bl	8002b40 <_test_assert>
 800601e:	2800      	cmp	r0, #0
 8006020:	f47f af01 	bne.w	8005e26 <heap1_execute.lto_priv.148+0x26>
  test_assert(12, n == sz, "size changed");
 8006024:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8006028:	1acb      	subs	r3, r1, r3
 800602a:	4259      	negs	r1, r3
 800602c:	4159      	adcs	r1, r3
 800602e:	200c      	movs	r0, #12
 8006030:	f7fc fd86 	bl	8002b40 <_test_assert>
 8006034:	e6f7      	b.n	8005e26 <heap1_execute.lto_priv.148+0x26>
  chHeapFree(p1);
  test_assert(5, chHeapStatus(&test_heap, &n) == 2, "invalid state");
  p1 = chHeapAlloc(&test_heap, SIZE);
  /* Note, the first situation happens when the alignment size is smaller
     than the header size, the second in the other cases.*/
  test_assert(6, (chHeapStatus(&test_heap, &n) == 1) ||
 8006036:	4601      	mov	r1, r0
 8006038:	e785      	b.n	8005f46 <heap1_execute.lto_priv.148+0x146>
 800603a:	bf00      	nop
 800603c:	20000d10 	.word	0x20000d10

08006040 <evt3_execute.lto_priv.146>:
static void evt3_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void evt3_execute(void) {
 8006040:	b570      	push	{r4, r5, r6, lr}
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8006042:	4c55      	ldr	r4, [pc, #340]	; (8006198 <evt3_execute.lto_priv.146+0x158>)
 8006044:	2320      	movs	r3, #32
 8006046:	69a2      	ldr	r2, [r4, #24]
 8006048:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 800604c:	6b53      	ldr	r3, [r2, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800604e:	b93b      	cbnz	r3, 8006060 <evt3_execute.lto_priv.146+0x20>
 8006050:	f383 8811 	msr	BASEPRI, r3
 8006054:	2101      	movs	r1, #1

  /*
   * Tests various timeout situations.
   */
  m = chEvtWaitOneTimeout(ALL_EVENTS, TIME_IMMEDIATE);
  test_assert(1, m == 0, "spurious event");
 8006056:	2001      	movs	r0, #1
 8006058:	f7fc fd72 	bl	8002b40 <_test_assert>
 800605c:	b180      	cbz	r0, 8006080 <evt3_execute.lto_priv.146+0x40>
 800605e:	bd70      	pop	{r4, r5, r6, pc}
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
  }
  m ^= m & (m - (eventmask_t)1);
 8006060:	4259      	negs	r1, r3
 8006062:	4019      	ands	r1, r3
  ctp->p_epending &= ~m;
 8006064:	ea23 0301 	bic.w	r3, r3, r1
 8006068:	6353      	str	r3, [r2, #52]	; 0x34
 800606a:	2300      	movs	r3, #0
 800606c:	f383 8811 	msr	BASEPRI, r3
 8006070:	fab1 f181 	clz	r1, r1
 8006074:	2001      	movs	r0, #1
 8006076:	0949      	lsrs	r1, r1, #5
 8006078:	f7fc fd62 	bl	8002b40 <_test_assert>
 800607c:	2800      	cmp	r0, #0
 800607e:	d1ee      	bne.n	800605e <evt3_execute.lto_priv.146+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8006080:	69a3      	ldr	r3, [r4, #24]
 8006082:	2220      	movs	r2, #32
 8006084:	f382 8811 	msr	BASEPRI, r2
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
  if (m == (eventmask_t)0) {
 8006088:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800608a:	2a00      	cmp	r2, #0
 800608c:	d06f      	beq.n	800616e <evt3_execute.lto_priv.146+0x12e>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
  }
  ctp->p_epending &= ~m;
 800608e:	6358      	str	r0, [r3, #52]	; 0x34
 8006090:	f380 8811 	msr	BASEPRI, r0
  m = chEvtWaitAnyTimeout(ALL_EVENTS, TIME_IMMEDIATE);
  test_assert(2, m == 0, "spurious event");
 8006094:	4601      	mov	r1, r0
 8006096:	2002      	movs	r0, #2
 8006098:	f7fc fd52 	bl	8002b40 <_test_assert>
 800609c:	2800      	cmp	r0, #0
 800609e:	d1de      	bne.n	800605e <evt3_execute.lto_priv.146+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 80060a0:	69a3      	ldr	r3, [r4, #24]
 80060a2:	2220      	movs	r2, #32
 80060a4:	f382 8811 	msr	BASEPRI, r2

  chSysLock();
  if ((ctp->p_epending & events) != events) {
 80060a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060aa:	3201      	adds	r2, #1
 80060ac:	d063      	beq.n	8006176 <evt3_execute.lto_priv.146+0x136>
 80060ae:	f380 8811 	msr	BASEPRI, r0
 80060b2:	2001      	movs	r0, #1
  m = chEvtWaitAllTimeout(ALL_EVENTS, TIME_IMMEDIATE);
  test_assert(3, m == 0, "spurious event");
 80060b4:	4601      	mov	r1, r0
 80060b6:	2003      	movs	r0, #3
 80060b8:	f7fc fd42 	bl	8002b40 <_test_assert>
 80060bc:	2800      	cmp	r0, #0
 80060be:	d1ce      	bne.n	800605e <evt3_execute.lto_priv.146+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 80060c0:	69a6      	ldr	r6, [r4, #24]
 80060c2:	2320      	movs	r3, #32
 80060c4:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 80060c8:	6b75      	ldr	r5, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
 80060ca:	b94d      	cbnz	r5, 80060e0 <evt3_execute.lto_priv.146+0xa0>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 80060cc:	f04f 33ff 	mov.w	r3, #4294967295
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 80060d0:	200a      	movs	r0, #10
  if (m == (eventmask_t)0) {
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 80060d2:	6233      	str	r3, [r6, #32]
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 80060d4:	4601      	mov	r1, r0
 80060d6:	f7fb f83b 	bl	8001150 <chSchGoSleepTimeoutS>
 80060da:	2800      	cmp	r0, #0
 80060dc:	db4f      	blt.n	800617e <evt3_execute.lto_priv.146+0x13e>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
 80060de:	6b75      	ldr	r5, [r6, #52]	; 0x34
  }
  m ^= m & (m - (eventmask_t)1);
 80060e0:	4269      	negs	r1, r5
 80060e2:	4029      	ands	r1, r5
  ctp->p_epending &= ~m;
 80060e4:	ea25 0501 	bic.w	r5, r5, r1
 80060e8:	6375      	str	r5, [r6, #52]	; 0x34
 80060ea:	2300      	movs	r3, #0
 80060ec:	f383 8811 	msr	BASEPRI, r3
 80060f0:	fab1 f181 	clz	r1, r1
 80060f4:	0949      	lsrs	r1, r1, #5
  m = chEvtWaitOneTimeout(ALL_EVENTS, 10);
  test_assert(4, m == 0, "spurious event");
 80060f6:	2004      	movs	r0, #4
 80060f8:	f7fc fd22 	bl	8002b40 <_test_assert>
 80060fc:	2800      	cmp	r0, #0
 80060fe:	d1ae      	bne.n	800605e <evt3_execute.lto_priv.146+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8006100:	69a6      	ldr	r6, [r4, #24]
 8006102:	2320      	movs	r3, #32
 8006104:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 8006108:	6b75      	ldr	r5, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800610a:	b94d      	cbnz	r5, 8006120 <evt3_execute.lto_priv.146+0xe0>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 800610c:	f04f 33ff 	mov.w	r3, #4294967295
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8006110:	200a      	movs	r0, #10
  if (m == (eventmask_t)0) {
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 8006112:	6233      	str	r3, [r6, #32]
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8006114:	4601      	mov	r1, r0
 8006116:	f7fb f81b 	bl	8001150 <chSchGoSleepTimeoutS>
 800611a:	2800      	cmp	r0, #0
 800611c:	db33      	blt.n	8006186 <evt3_execute.lto_priv.146+0x146>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
 800611e:	6b75      	ldr	r5, [r6, #52]	; 0x34
  }
  ctp->p_epending &= ~m;
 8006120:	2300      	movs	r3, #0
 8006122:	6373      	str	r3, [r6, #52]	; 0x34
 8006124:	f383 8811 	msr	BASEPRI, r3
 8006128:	fab5 f185 	clz	r1, r5
 800612c:	0949      	lsrs	r1, r1, #5
  m = chEvtWaitAnyTimeout(ALL_EVENTS, 10);
  test_assert(5, m == 0, "spurious event");
 800612e:	2005      	movs	r0, #5
 8006130:	f7fc fd06 	bl	8002b40 <_test_assert>
 8006134:	4605      	mov	r5, r0
 8006136:	2800      	cmp	r0, #0
 8006138:	d191      	bne.n	800605e <evt3_execute.lto_priv.146+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 800613a:	69a4      	ldr	r4, [r4, #24]
 800613c:	2320      	movs	r3, #32
 800613e:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if ((ctp->p_epending & events) != events) {
 8006142:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006144:	3301      	adds	r3, #1
 8006146:	d008      	beq.n	800615a <evt3_execute.lto_priv.146+0x11a>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 8006148:	f04f 33ff 	mov.w	r3, #4294967295
 800614c:	6223      	str	r3, [r4, #32]
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, time) < MSG_OK) {
 800614e:	200b      	movs	r0, #11
 8006150:	210a      	movs	r1, #10
 8006152:	f7fa fffd 	bl	8001150 <chSchGoSleepTimeoutS>
 8006156:	2800      	cmp	r0, #0
 8006158:	db19      	blt.n	800618e <evt3_execute.lto_priv.146+0x14e>
      chSysUnlock();
      return (eventmask_t)0;
    }
  }
  ctp->p_epending &= ~events;
 800615a:	2300      	movs	r3, #0
 800615c:	6363      	str	r3, [r4, #52]	; 0x34
 800615e:	f383 8811 	msr	BASEPRI, r3
  m = chEvtWaitAllTimeout(ALL_EVENTS, 10);
  test_assert(6, m == 0, "spurious event");
 8006162:	4629      	mov	r1, r5
}
 8006164:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  m = chEvtWaitOneTimeout(ALL_EVENTS, 10);
  test_assert(4, m == 0, "spurious event");
  m = chEvtWaitAnyTimeout(ALL_EVENTS, 10);
  test_assert(5, m == 0, "spurious event");
  m = chEvtWaitAllTimeout(ALL_EVENTS, 10);
  test_assert(6, m == 0, "spurious event");
 8006168:	2006      	movs	r0, #6
 800616a:	f7fc bce9 	b.w	8002b40 <_test_assert>
 800616e:	f380 8811 	msr	BASEPRI, r0
 8006172:	2001      	movs	r0, #1
 8006174:	e78e      	b.n	8006094 <evt3_execute.lto_priv.146+0x54>
 8006176:	6358      	str	r0, [r3, #52]	; 0x34
 8006178:	f380 8811 	msr	BASEPRI, r0
 800617c:	e79a      	b.n	80060b4 <evt3_execute.lto_priv.146+0x74>
 800617e:	f385 8811 	msr	BASEPRI, r5
 8006182:	2101      	movs	r1, #1
 8006184:	e7b7      	b.n	80060f6 <evt3_execute.lto_priv.146+0xb6>
 8006186:	f385 8811 	msr	BASEPRI, r5
 800618a:	2101      	movs	r1, #1
 800618c:	e7cf      	b.n	800612e <evt3_execute.lto_priv.146+0xee>
 800618e:	f385 8811 	msr	BASEPRI, r5
 8006192:	2501      	movs	r5, #1
 8006194:	e7e5      	b.n	8006162 <evt3_execute.lto_priv.146+0x122>
 8006196:	bf00      	nop
 8006198:	200013f8 	.word	0x200013f8
 800619c:	00000000 	.word	0x00000000

080061a0 <evt3_setup.lto_priv.145>:
 * After each test phase the test verifies that there are no stuck event flags.
 */

static void evt3_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
 80061a0:	f000 bcc6 	b.w	8006b30 <chEvtGetAndClearEvents.constprop.59>
	...

080061b0 <evt2_setup.lto_priv.143>:
 * the expected time and that there are no stuck event flags.
 */

static void evt2_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
 80061b0:	f000 bcbe 	b.w	8006b30 <chEvtGetAndClearEvents.constprop.59>
	...

080061c0 <evt1_setup.lto_priv.141>:
 * the associated event handlers are invoked in LSb-first order.
 */

static void evt1_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
 80061c0:	f000 bcb6 	b.w	8006b30 <chEvtGetAndClearEvents.constprop.59>
	...

080061d0 <evt2_execute.lto_priv.144>:
  chEvtBroadcast(&es1);
  chThdSleepMilliseconds(50);
  chEvtBroadcast(&es2);
}

static void evt2_execute(void) {
 80061d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061d4:	2520      	movs	r5, #32
 80061d6:	b08d      	sub	sp, #52	; 0x34
 80061d8:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
eventmask_t chEvtAddEvents(eventmask_t events) {

  chSysLock();
  currp->p_epending |= events;
 80061dc:	4cad      	ldr	r4, [pc, #692]	; (8006494 <evt2_execute.lto_priv.144+0x2c4>)
 80061de:	2100      	movs	r1, #0
 80061e0:	69a2      	ldr	r2, [r4, #24]
 80061e2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80061e4:	f043 0307 	orr.w	r3, r3, #7
 80061e8:	6353      	str	r3, [r2, #52]	; 0x34
 80061ea:	f381 8811 	msr	BASEPRI, r1

  /*
   * Test on chEvtWaitOne() without wait.
   */
  chEvtAddEvents(7);
  m = chEvtWaitOne(ALL_EVENTS);
 80061ee:	f000 fcaf 	bl	8006b50 <chEvtWaitOne.constprop.55>
  test_assert(1, m == 1, "single event error");
 80061f2:	f1a0 0101 	sub.w	r1, r0, #1
 80061f6:	fab1 f181 	clz	r1, r1
 80061fa:	2001      	movs	r0, #1
 80061fc:	0949      	lsrs	r1, r1, #5
 80061fe:	f7fc fc9f 	bl	8002b40 <_test_assert>
 8006202:	b110      	cbz	r0, 800620a <evt2_execute.lto_priv.144+0x3a>
  test_wait_threads();
  chEvtUnregister(&es1, &el1);
  chEvtUnregister(&es2, &el2);
  test_assert(15, !chEvtIsListeningI(&es1), "stuck listener");
  test_assert(16, !chEvtIsListeningI(&es2), "stuck listener");
}
 8006204:	b00d      	add	sp, #52	; 0x34
 8006206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   * Test on chEvtWaitOne() without wait.
   */
  chEvtAddEvents(7);
  m = chEvtWaitOne(ALL_EVENTS);
  test_assert(1, m == 1, "single event error");
  m = chEvtWaitOne(ALL_EVENTS);
 800620a:	f000 fca1 	bl	8006b50 <chEvtWaitOne.constprop.55>
  test_assert(2, m == 2, "single event error");
 800620e:	f1a0 0102 	sub.w	r1, r0, #2
 8006212:	fab1 f181 	clz	r1, r1
 8006216:	2002      	movs	r0, #2
 8006218:	0949      	lsrs	r1, r1, #5
 800621a:	f7fc fc91 	bl	8002b40 <_test_assert>
 800621e:	2800      	cmp	r0, #0
 8006220:	d1f0      	bne.n	8006204 <evt2_execute.lto_priv.144+0x34>
  m = chEvtWaitOne(ALL_EVENTS);
 8006222:	f000 fc95 	bl	8006b50 <chEvtWaitOne.constprop.55>
  test_assert(3, m == 4, "single event error");
 8006226:	f1a0 0104 	sub.w	r1, r0, #4
 800622a:	fab1 f181 	clz	r1, r1
 800622e:	2003      	movs	r0, #3
 8006230:	0949      	lsrs	r1, r1, #5
 8006232:	f7fc fc85 	bl	8002b40 <_test_assert>
 8006236:	2800      	cmp	r0, #0
 8006238:	d1e4      	bne.n	8006204 <evt2_execute.lto_priv.144+0x34>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 800623a:	f000 fc79 	bl	8006b30 <chEvtGetAndClearEvents.constprop.59>
  test_assert(4, m == 0, "stuck event");
 800623e:	fab0 f180 	clz	r1, r0
 8006242:	2004      	movs	r0, #4
 8006244:	0949      	lsrs	r1, r1, #5
 8006246:	f7fc fc7b 	bl	8002b40 <_test_assert>
 800624a:	4606      	mov	r6, r0
 800624c:	2800      	cmp	r0, #0
 800624e:	d1d9      	bne.n	8006204 <evt2_execute.lto_priv.144+0x34>

  /*
   * Test on chEvtWaitOne() with wait.
   */
  test_wait_tick();
 8006250:	f7fc fbe6 	bl	8002a20 <test_wait_tick>
 8006254:	f385 8811 	msr	BASEPRI, r5
 8006258:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 800625c:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
 8006260:	b2bf      	uxth	r7, r7
 8006262:	f386 8811 	msr	BASEPRI, r6
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8006266:	69a3      	ldr	r3, [r4, #24]
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8006268:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800626c:	689a      	ldr	r2, [r3, #8]
 800626e:	488a      	ldr	r0, [pc, #552]	; (8006498 <evt2_execute.lto_priv.144+0x2c8>)
 8006270:	3a01      	subs	r2, #1
 8006272:	9300      	str	r3, [sp, #0]
 8006274:	4b89      	ldr	r3, [pc, #548]	; (800649c <evt2_execute.lto_priv.144+0x2cc>)
 8006276:	f7fa fa9b 	bl	80007b0 <chThdCreateStatic>
 800627a:	4e89      	ldr	r6, [pc, #548]	; (80064a0 <evt2_execute.lto_priv.144+0x2d0>)
 800627c:	6030      	str	r0, [r6, #0]
                                 thread1, chThdGetSelfX());
  m = chEvtWaitOne(ALL_EVENTS);
 800627e:	f000 fc67 	bl	8006b50 <chEvtWaitOne.constprop.55>

  /*
   * Test on chEvtWaitOne() with wait.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
 8006282:	f107 0164 	add.w	r1, r7, #100	; 0x64
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitOne(ALL_EVENTS);
  test_assert_time_window(5, target_time, target_time + ALLOWED_DELAY);
 8006286:	f107 026e 	add.w	r2, r7, #110	; 0x6e
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitOne(ALL_EVENTS);
 800628a:	4681      	mov	r9, r0
  test_assert_time_window(5, target_time, target_time + ALLOWED_DELAY);
 800628c:	b289      	uxth	r1, r1
 800628e:	b292      	uxth	r2, r2
 8006290:	2005      	movs	r0, #5
 8006292:	f7fc fc05 	bl	8002aa0 <_test_assert_time_window>
 8006296:	2800      	cmp	r0, #0
 8006298:	d1b4      	bne.n	8006204 <evt2_execute.lto_priv.144+0x34>
  test_assert(6, m == 1, "single event error");
 800629a:	f1a9 0101 	sub.w	r1, r9, #1
 800629e:	fab1 f181 	clz	r1, r1
 80062a2:	2006      	movs	r0, #6
 80062a4:	0949      	lsrs	r1, r1, #5
 80062a6:	f7fc fc4b 	bl	8002b40 <_test_assert>
 80062aa:	2800      	cmp	r0, #0
 80062ac:	d1aa      	bne.n	8006204 <evt2_execute.lto_priv.144+0x34>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 80062ae:	f000 fc3f 	bl	8006b30 <chEvtGetAndClearEvents.constprop.59>
  test_assert(7, m == 0, "stuck event");
 80062b2:	fab0 f180 	clz	r1, r0
 80062b6:	2007      	movs	r0, #7
 80062b8:	0949      	lsrs	r1, r1, #5
 80062ba:	f7fc fc41 	bl	8002b40 <_test_assert>
 80062be:	4607      	mov	r7, r0
 80062c0:	2800      	cmp	r0, #0
 80062c2:	d19f      	bne.n	8006204 <evt2_execute.lto_priv.144+0x34>
  test_wait_threads();
 80062c4:	f7fc fbbc 	bl	8002a40 <test_wait_threads>
 80062c8:	f385 8811 	msr	BASEPRI, r5
 80062cc:	69a2      	ldr	r2, [r4, #24]
 80062ce:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80062d0:	f043 0305 	orr.w	r3, r3, #5
 80062d4:	6353      	str	r3, [r2, #52]	; 0x34
 80062d6:	f387 8811 	msr	BASEPRI, r7

  /*
   * Test on chEvtWaitAny() without wait.
   */
  chEvtAddEvents(5);
  m = chEvtWaitAny(ALL_EVENTS);
 80062da:	f000 fc59 	bl	8006b90 <chEvtWaitAny.constprop.54>
  test_assert(8, m == 5, "unexpected pending bit");
 80062de:	1f47      	subs	r7, r0, #5
 80062e0:	4279      	negs	r1, r7
 80062e2:	4179      	adcs	r1, r7
 80062e4:	2008      	movs	r0, #8
 80062e6:	f7fc fc2b 	bl	8002b40 <_test_assert>
 80062ea:	2800      	cmp	r0, #0
 80062ec:	d18a      	bne.n	8006204 <evt2_execute.lto_priv.144+0x34>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 80062ee:	f000 fc1f 	bl	8006b30 <chEvtGetAndClearEvents.constprop.59>
  test_assert(9, m == 0, "stuck event");
 80062f2:	fab0 f180 	clz	r1, r0
 80062f6:	2009      	movs	r0, #9
 80062f8:	0949      	lsrs	r1, r1, #5
 80062fa:	f7fc fc21 	bl	8002b40 <_test_assert>
 80062fe:	4607      	mov	r7, r0
 8006300:	2800      	cmp	r0, #0
 8006302:	f47f af7f 	bne.w	8006204 <evt2_execute.lto_priv.144+0x34>

  /*
   * Test on chEvtWaitAny() with wait.
   */
  test_wait_tick();
 8006306:	f7fc fb8b 	bl	8002a20 <test_wait_tick>
 800630a:	f385 8811 	msr	BASEPRI, r5
 800630e:	f8d8 5024 	ldr.w	r5, [r8, #36]	; 0x24
 8006312:	b2ad      	uxth	r5, r5
 8006314:	f387 8811 	msr	BASEPRI, r7
 8006318:	69a3      	ldr	r3, [r4, #24]
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800631a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800631e:	689a      	ldr	r2, [r3, #8]
 8006320:	485d      	ldr	r0, [pc, #372]	; (8006498 <evt2_execute.lto_priv.144+0x2c8>)
 8006322:	3a01      	subs	r2, #1
 8006324:	9300      	str	r3, [sp, #0]
 8006326:	4b5d      	ldr	r3, [pc, #372]	; (800649c <evt2_execute.lto_priv.144+0x2cc>)
 8006328:	f7fa fa42 	bl	80007b0 <chThdCreateStatic>
 800632c:	6030      	str	r0, [r6, #0]
                                 thread1, chThdGetSelfX());
  m = chEvtWaitAny(ALL_EVENTS);
 800632e:	f000 fc2f 	bl	8006b90 <chEvtWaitAny.constprop.54>

  /*
   * Test on chEvtWaitAny() with wait.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
 8006332:	f105 0164 	add.w	r1, r5, #100	; 0x64
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitAny(ALL_EVENTS);
  test_assert_time_window(10, target_time, target_time + ALLOWED_DELAY);
 8006336:	f105 026e 	add.w	r2, r5, #110	; 0x6e
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitAny(ALL_EVENTS);
 800633a:	4607      	mov	r7, r0
  test_assert_time_window(10, target_time, target_time + ALLOWED_DELAY);
 800633c:	b289      	uxth	r1, r1
 800633e:	b292      	uxth	r2, r2
 8006340:	200a      	movs	r0, #10
 8006342:	f7fc fbad 	bl	8002aa0 <_test_assert_time_window>
 8006346:	2800      	cmp	r0, #0
 8006348:	f47f af5c 	bne.w	8006204 <evt2_execute.lto_priv.144+0x34>
  test_assert(11, m == 1, "single event error");
 800634c:	1e78      	subs	r0, r7, #1
 800634e:	4241      	negs	r1, r0
 8006350:	4141      	adcs	r1, r0
 8006352:	200b      	movs	r0, #11
 8006354:	f7fc fbf4 	bl	8002b40 <_test_assert>
 8006358:	2800      	cmp	r0, #0
 800635a:	f47f af53 	bne.w	8006204 <evt2_execute.lto_priv.144+0x34>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 800635e:	f000 fbe7 	bl	8006b30 <chEvtGetAndClearEvents.constprop.59>
  test_assert(12, m == 0, "stuck event");
 8006362:	fab0 f180 	clz	r1, r0
 8006366:	200c      	movs	r0, #12
 8006368:	0949      	lsrs	r1, r1, #5
 800636a:	f7fc fbe9 	bl	8002b40 <_test_assert>
 800636e:	4680      	mov	r8, r0
 8006370:	2800      	cmp	r0, #0
 8006372:	f47f af47 	bne.w	8006204 <evt2_execute.lto_priv.144+0x34>
  test_wait_threads();
 8006376:	f7fc fb63 	bl	8002a40 <test_wait_threads>
 800637a:	4d4a      	ldr	r5, [pc, #296]	; (80064a4 <evt2_execute.lto_priv.144+0x2d4>)
 800637c:	4b4a      	ldr	r3, [pc, #296]	; (80064a8 <evt2_execute.lto_priv.144+0x2d8>)
 800637e:	602d      	str	r5, [r5, #0]
 8006380:	601b      	str	r3, [r3, #0]
 8006382:	f04f 0b20 	mov.w	fp, #32
 8006386:	f38b 8811 	msr	BASEPRI, fp
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 800638a:	6829      	ldr	r1, [r5, #0]
 800638c:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
  esp->es_next     = elp;
  elp->el_listener = currp;
 8006390:	69a2      	ldr	r2, [r4, #24]
  elp->el_events   = events;
 8006392:	2701      	movs	r7, #1
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8006394:	f84a 1d28 	str.w	r1, [sl, #-40]!
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = (eventflags_t)0;
  elp->el_wflags   = wflags;
 8006398:	f04f 30ff 	mov.w	r0, #4294967295
  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = (eventflags_t)0;
 800639c:	f8cd 8014 	str.w	r8, [sp, #20]
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 80063a0:	9203      	str	r2, [sp, #12]
  elp->el_events   = events;
 80063a2:	9704      	str	r7, [sp, #16]

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 80063a4:	f8c5 a000 	str.w	sl, [r5]
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = (eventflags_t)0;
  elp->el_wflags   = wflags;
 80063a8:	9006      	str	r0, [sp, #24]
 80063aa:	f388 8811 	msr	BASEPRI, r8
 80063ae:	f38b 8811 	msr	BASEPRI, fp
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 80063b2:	6819      	ldr	r1, [r3, #0]
 80063b4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
  esp->es_next     = elp;
  elp->el_listener = currp;
 80063b8:	69a2      	ldr	r2, [r4, #24]
  elp->el_events   = events;
 80063ba:	2704      	movs	r7, #4
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 80063bc:	f849 1d14 	str.w	r1, [r9, #-20]!
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = (eventflags_t)0;
 80063c0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  elp->el_wflags   = wflags;
 80063c4:	900b      	str	r0, [sp, #44]	; 0x2c
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 80063c6:	9208      	str	r2, [sp, #32]
  elp->el_events   = events;
 80063c8:	9709      	str	r7, [sp, #36]	; 0x24

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 80063ca:	f8c3 9000 	str.w	r9, [r3]
 80063ce:	f388 8811 	msr	BASEPRI, r8
   */
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es2, &el2, 4);
  test_wait_tick();
 80063d2:	f7fc fb25 	bl	8002a20 <test_wait_tick>
 80063d6:	f38b 8811 	msr	BASEPRI, fp
 80063da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80063de:	6a5f      	ldr	r7, [r3, #36]	; 0x24
 80063e0:	b2bf      	uxth	r7, r7
 80063e2:	f388 8811 	msr	BASEPRI, r8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80063e6:	69a2      	ldr	r2, [r4, #24]
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80063e8:	4b30      	ldr	r3, [pc, #192]	; (80064ac <evt2_execute.lto_priv.144+0x2dc>)
 80063ea:	6892      	ldr	r2, [r2, #8]
 80063ec:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	3a01      	subs	r2, #1
 80063f4:	4b2e      	ldr	r3, [pc, #184]	; (80064b0 <evt2_execute.lto_priv.144+0x2e0>)
 80063f6:	4828      	ldr	r0, [pc, #160]	; (8006498 <evt2_execute.lto_priv.144+0x2c8>)
 80063f8:	f7fa f9da 	bl	80007b0 <chThdCreateStatic>
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es2, &el2, 4);
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
 80063fc:	f107 0864 	add.w	r8, r7, #100	; 0x64
 8006400:	fa1f f888 	uxth.w	r8, r8
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAll(eventmask_t events) {
  thread_t *ctp = currp;
 8006404:	69a4      	ldr	r4, [r4, #24]
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8006406:	6030      	str	r0, [r6, #0]
 8006408:	f38b 8811 	msr	BASEPRI, fp

  chSysLock();
  if ((ctp->p_epending & events) != events) {
 800640c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800640e:	f003 0205 	and.w	r2, r3, #5
 8006412:	2a05      	cmp	r2, #5
 8006414:	d005      	beq.n	8006422 <evt2_execute.lto_priv.144+0x252>
    ctp->p_u.ewmask = events;
 8006416:	2305      	movs	r3, #5
 8006418:	6223      	str	r3, [r4, #32]
    chSchGoSleepS(CH_STATE_WTANDEVT);
 800641a:	200b      	movs	r0, #11
 800641c:	f7fa fa08 	bl	8000830 <chSchGoSleepS>
 8006420:	6b63      	ldr	r3, [r4, #52]	; 0x34
  }
  ctp->p_epending &= ~events;
 8006422:	f023 0305 	bic.w	r3, r3, #5
 8006426:	6363      	str	r3, [r4, #52]	; 0x34
 8006428:	2300      	movs	r3, #0
 800642a:	f383 8811 	msr	BASEPRI, r3
                                 thread2, "A");
  m = chEvtWaitAll(5);
  test_assert_time_window(13, target_time, target_time + ALLOWED_DELAY);
 800642e:	f107 026e 	add.w	r2, r7, #110	; 0x6e
 8006432:	b292      	uxth	r2, r2
 8006434:	4641      	mov	r1, r8
 8006436:	200d      	movs	r0, #13
 8006438:	f7fc fb32 	bl	8002aa0 <_test_assert_time_window>
 800643c:	2800      	cmp	r0, #0
 800643e:	f47f aee1 	bne.w	8006204 <evt2_execute.lto_priv.144+0x34>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 8006442:	f000 fb75 	bl	8006b30 <chEvtGetAndClearEvents.constprop.59>
  test_assert(14, m == 0, "stuck event");
 8006446:	fab0 f180 	clz	r1, r0
 800644a:	200e      	movs	r0, #14
 800644c:	0949      	lsrs	r1, r1, #5
 800644e:	f7fc fb77 	bl	8002b40 <_test_assert>
 8006452:	2800      	cmp	r0, #0
 8006454:	f47f aed6 	bne.w	8006204 <evt2_execute.lto_priv.144+0x34>
  test_wait_threads();
  chEvtUnregister(&es1, &el1);
  chEvtUnregister(&es2, &el2);
 8006458:	4c13      	ldr	r4, [pc, #76]	; (80064a8 <evt2_execute.lto_priv.144+0x2d8>)
                                 thread2, "A");
  m = chEvtWaitAll(5);
  test_assert_time_window(13, target_time, target_time + ALLOWED_DELAY);
  m = chEvtGetAndClearEvents(ALL_EVENTS);
  test_assert(14, m == 0, "stuck event");
  test_wait_threads();
 800645a:	f7fc faf1 	bl	8002a40 <test_wait_threads>
  chEvtUnregister(&es1, &el1);
 800645e:	4651      	mov	r1, sl
 8006460:	4810      	ldr	r0, [pc, #64]	; (80064a4 <evt2_execute.lto_priv.144+0x2d4>)
 8006462:	f7fa f8b5 	bl	80005d0 <chEvtUnregister>
  chEvtUnregister(&es2, &el2);
 8006466:	4649      	mov	r1, r9
 8006468:	4620      	mov	r0, r4
 800646a:	f7fa f8b1 	bl	80005d0 <chEvtUnregister>
  test_assert(15, !chEvtIsListeningI(&es1), "stuck listener");
 800646e:	6829      	ldr	r1, [r5, #0]
 8006470:	200f      	movs	r0, #15
 8006472:	1b4a      	subs	r2, r1, r5
 8006474:	4251      	negs	r1, r2
 8006476:	4151      	adcs	r1, r2
 8006478:	f7fc fb62 	bl	8002b40 <_test_assert>
 800647c:	2800      	cmp	r0, #0
 800647e:	f47f aec1 	bne.w	8006204 <evt2_execute.lto_priv.144+0x34>
  test_assert(16, !chEvtIsListeningI(&es2), "stuck listener");
 8006482:	6821      	ldr	r1, [r4, #0]
 8006484:	2010      	movs	r0, #16
 8006486:	1b0b      	subs	r3, r1, r4
 8006488:	4259      	negs	r1, r3
 800648a:	4159      	adcs	r1, r3
 800648c:	f7fc fb58 	bl	8002b40 <_test_assert>
 8006490:	e6b8      	b.n	8006204 <evt2_execute.lto_priv.144+0x34>
 8006492:	bf00      	nop
 8006494:	200013f8 	.word	0x200013f8
 8006498:	20000d50 	.word	0x20000d50
 800649c:	08006501 	.word	0x08006501
 80064a0:	20000968 	.word	0x20000968
 80064a4:	20000898 	.word	0x20000898
 80064a8:	2000089c 	.word	0x2000089c
 80064ac:	08006fd4 	.word	0x08006fd4
 80064b0:	080064c1 	.word	0x080064c1
	...

080064c0 <thread2>:

  chThdSleepMilliseconds(50);
  chEvtSignal((thread_t *)p, 1);
}

static THD_FUNCTION(thread2, p) {
 80064c0:	b538      	push	{r3, r4, r5, lr}
 80064c2:	2520      	movs	r5, #32
 80064c4:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags) {

  chSysLock();
  chEvtBroadcastFlagsI(esp, flags);
 80064c8:	480b      	ldr	r0, [pc, #44]	; (80064f8 <thread2+0x38>)
 80064ca:	2100      	movs	r1, #0
 80064cc:	f7fa fab8 	bl	8000a40 <chEvtBroadcastFlagsI>
 80064d0:	2400      	movs	r4, #0
  chSchRescheduleS();
 80064d2:	f7fa f8f5 	bl	80006c0 <chSchRescheduleS>
 80064d6:	f384 8811 	msr	BASEPRI, r4

  (void)p;
  chEvtBroadcast(&es1);
  chThdSleepMilliseconds(50);
 80064da:	2064      	movs	r0, #100	; 0x64
 80064dc:	f7fa ff88 	bl	80013f0 <chThdSleep>
 80064e0:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags) {

  chSysLock();
  chEvtBroadcastFlagsI(esp, flags);
 80064e4:	4805      	ldr	r0, [pc, #20]	; (80064fc <thread2+0x3c>)
 80064e6:	4621      	mov	r1, r4
 80064e8:	f7fa faaa 	bl	8000a40 <chEvtBroadcastFlagsI>
  chSchRescheduleS();
 80064ec:	f7fa f8e8 	bl	80006c0 <chSchRescheduleS>
 80064f0:	f384 8811 	msr	BASEPRI, r4
 80064f4:	bd38      	pop	{r3, r4, r5, pc}
 80064f6:	bf00      	nop
 80064f8:	20000898 	.word	0x20000898
 80064fc:	2000089c 	.word	0x2000089c

08006500 <thread1>:
static void evt2_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static THD_FUNCTION(thread1, p) {
 8006500:	b510      	push	{r4, lr}
 8006502:	4604      	mov	r4, r0

  chThdSleepMilliseconds(50);
 8006504:	2064      	movs	r0, #100	; 0x64
 8006506:	f7fa ff73 	bl	80013f0 <chThdSleep>
 800650a:	2320      	movs	r3, #32
 800650c:	f383 8811 	msr	BASEPRI, r3
void chEvtSignal(thread_t *tp, eventmask_t events) {

  chDbgCheck(tp != NULL);

  chSysLock();
  chEvtSignalI(tp, events);
 8006510:	2101      	movs	r1, #1
 8006512:	4620      	mov	r0, r4
 8006514:	f7fa fa7c 	bl	8000a10 <chEvtSignalI>
  chSchRescheduleS();
 8006518:	f7fa f8d2 	bl	80006c0 <chSchRescheduleS>
 800651c:	2300      	movs	r3, #0
 800651e:	f383 8811 	msr	BASEPRI, r3
 8006522:	bd10      	pop	{r4, pc}
	...

08006530 <evt1_execute.lto_priv.142>:
static void h1(eventid_t id) {(void)id;test_emit_token('A');}
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
static ROMCONST evhandler_t evhndl[] = {h1, h2, h3};

static void evt1_execute(void) {
 8006530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006534:	4c32      	ldr	r4, [pc, #200]	; (8006600 <evt1_execute.lto_priv.142+0xd0>)
 8006536:	b08a      	sub	sp, #40	; 0x28
 8006538:	2020      	movs	r0, #32
 800653a:	6024      	str	r4, [r4, #0]
 800653c:	f380 8811 	msr	BASEPRI, r0
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 8006540:	4930      	ldr	r1, [pc, #192]	; (8006604 <evt1_execute.lto_priv.142+0xd4>)
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8006542:	6823      	ldr	r3, [r4, #0]
 8006544:	ad0a      	add	r5, sp, #40	; 0x28
  esp->es_next     = elp;
  elp->el_listener = currp;
 8006546:	698e      	ldr	r6, [r1, #24]
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8006548:	f845 3d28 	str.w	r3, [r5, #-40]!
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
 800654c:	2701      	movs	r7, #1
  elp->el_flags    = (eventflags_t)0;
 800654e:	2300      	movs	r3, #0
  elp->el_wflags   = wflags;
 8006550:	f04f 32ff 	mov.w	r2, #4294967295
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 8006554:	9601      	str	r6, [sp, #4]

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 8006556:	6025      	str	r5, [r4, #0]
  elp->el_listener = currp;
  elp->el_events   = events;
 8006558:	9702      	str	r7, [sp, #8]
  elp->el_flags    = (eventflags_t)0;
 800655a:	9303      	str	r3, [sp, #12]
  elp->el_wflags   = wflags;
 800655c:	9204      	str	r2, [sp, #16]
 800655e:	f383 8811 	msr	BASEPRI, r3
 8006562:	f380 8811 	msr	BASEPRI, r0
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8006566:	6820      	ldr	r0, [r4, #0]
 8006568:	ae0a      	add	r6, sp, #40	; 0x28
  esp->es_next     = elp;
  elp->el_listener = currp;
 800656a:	6989      	ldr	r1, [r1, #24]
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 800656c:	f846 0d14 	str.w	r0, [r6, #-20]!
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
 8006570:	f04f 0802 	mov.w	r8, #2
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 8006574:	9106      	str	r1, [sp, #24]
  elp->el_events   = events;
  elp->el_flags    = (eventflags_t)0;
 8006576:	9308      	str	r3, [sp, #32]
  elp->el_wflags   = wflags;
 8006578:	9209      	str	r2, [sp, #36]	; 0x24

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 800657a:	6026      	str	r6, [r4, #0]
  elp->el_listener = currp;
  elp->el_events   = events;
 800657c:	f8cd 801c 	str.w	r8, [sp, #28]
 8006580:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline bool chEvtIsListeningI(event_source_t *esp) {

  return (bool)(esp != (event_source_t *)esp->es_next);
 8006584:	6821      	ldr	r1, [r4, #0]
   * Testing chEvtRegisterMask() and chEvtUnregister().
   */
  chEvtObjectInit(&es1);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es1, &el2, 2);
  test_assert(1, chEvtIsListeningI(&es1), "no listener");
 8006586:	4638      	mov	r0, r7
 8006588:	1b09      	subs	r1, r1, r4
 800658a:	bf18      	it	ne
 800658c:	2101      	movne	r1, #1
 800658e:	f7fc fad7 	bl	8002b40 <_test_assert>
 8006592:	b110      	cbz	r0, 800659a <evt1_execute.lto_priv.142+0x6a>
  /*
   * Testing chEvtDispatch().
   */
  chEvtDispatch(evhndl, 7);
  test_assert_sequence(4, "ABC");
}
 8006594:	b00a      	add	sp, #40	; 0x28
 8006596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   */
  chEvtObjectInit(&es1);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es1, &el2, 2);
  test_assert(1, chEvtIsListeningI(&es1), "no listener");
  chEvtUnregister(&es1, &el1);
 800659a:	4629      	mov	r1, r5
 800659c:	4620      	mov	r0, r4
 800659e:	f7fa f817 	bl	80005d0 <chEvtUnregister>
 80065a2:	6821      	ldr	r1, [r4, #0]
  test_assert(2, chEvtIsListeningI(&es1), "no listener");
 80065a4:	4640      	mov	r0, r8
 80065a6:	1b09      	subs	r1, r1, r4
 80065a8:	bf18      	it	ne
 80065aa:	2101      	movne	r1, #1
 80065ac:	f7fc fac8 	bl	8002b40 <_test_assert>
 80065b0:	2800      	cmp	r0, #0
 80065b2:	d1ef      	bne.n	8006594 <evt1_execute.lto_priv.142+0x64>
  chEvtUnregister(&es1, &el2);
 80065b4:	4631      	mov	r1, r6
 80065b6:	4620      	mov	r0, r4
 80065b8:	f7fa f80a 	bl	80005d0 <chEvtUnregister>
  test_assert(3, !chEvtIsListeningI(&es1), "stuck listener");
 80065bc:	6821      	ldr	r1, [r4, #0]
 80065be:	2003      	movs	r0, #3
 80065c0:	1b09      	subs	r1, r1, r4
 80065c2:	fab1 f181 	clz	r1, r1
 80065c6:	0949      	lsrs	r1, r1, #5
 80065c8:	f7fc faba 	bl	8002b40 <_test_assert>
 80065cc:	2800      	cmp	r0, #0
 80065ce:	d1e1      	bne.n	8006594 <evt1_execute.lto_priv.142+0x64>
 80065d0:	4604      	mov	r4, r0
  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
      handlers[eid](eid);
 80065d2:	4e0d      	ldr	r6, [pc, #52]	; (8006608 <evt1_execute.lto_priv.142+0xd8>)
 80065d4:	2507      	movs	r5, #7
 80065d6:	e001      	b.n	80065dc <evt1_execute.lto_priv.142+0xac>
    }
    eid++;
 80065d8:	3401      	adds	r4, #1
  eventid_t eid;

  chDbgCheck(handlers != NULL);

  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
 80065da:	b165      	cbz	r5, 80065f6 <evt1_execute.lto_priv.142+0xc6>
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 80065dc:	fa25 f304 	lsr.w	r3, r5, r4
 80065e0:	07db      	lsls	r3, r3, #31
 80065e2:	d5f9      	bpl.n	80065d8 <evt1_execute.lto_priv.142+0xa8>
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
 80065e4:	fa07 f304 	lsl.w	r3, r7, r4
      handlers[eid](eid);
 80065e8:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80065ec:	4620      	mov	r0, r4

  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
 80065ee:	ea25 0503 	bic.w	r5, r5, r3
      handlers[eid](eid);
 80065f2:	4790      	blx	r2
 80065f4:	e7f0      	b.n	80065d8 <evt1_execute.lto_priv.142+0xa8>

  /*
   * Testing chEvtDispatch().
   */
  chEvtDispatch(evhndl, 7);
  test_assert_sequence(4, "ABC");
 80065f6:	4905      	ldr	r1, [pc, #20]	; (800660c <evt1_execute.lto_priv.142+0xdc>)
 80065f8:	2004      	movs	r0, #4
 80065fa:	f7fc fa79 	bl	8002af0 <_test_assert_sequence>
 80065fe:	e7c9      	b.n	8006594 <evt1_execute.lto_priv.142+0x64>
 8006600:	20000898 	.word	0x20000898
 8006604:	200013f8 	.word	0x200013f8
 8006608:	08007ec0 	.word	0x08007ec0
 800660c:	08007ac0 	.word	0x08007ac0

08006610 <h3>:
  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
 8006610:	2043      	movs	r0, #67	; 0x43
 8006612:	f7fc baad 	b.w	8002b70 <test_emit_token>
 8006616:	bf00      	nop
	...

08006620 <h2>:

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
 8006620:	2042      	movs	r0, #66	; 0x42
 8006622:	f7fc baa5 	b.w	8002b70 <test_emit_token>
 8006626:	bf00      	nop
	...

08006630 <h1>:
static void evt1_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
 8006630:	2041      	movs	r0, #65	; 0x41
 8006632:	f7fc ba9d 	b.w	8002b70 <test_emit_token>
 8006636:	bf00      	nop
	...

08006640 <cmd_getAdcValues>:
}

void cmd_getAdcValues(BaseSequentialStream *chp, int argc, char *argv[]) {
 8006640:	b538      	push	{r3, r4, r5, lr}
 8006642:	4604      	mov	r4, r0

  (void)argc;
  (void)argv;
  chprintf(chp, "\x1B\x63");
 8006644:	4923      	ldr	r1, [pc, #140]	; (80066d4 <cmd_getAdcValues+0x94>)
 8006646:	f7fe f85b 	bl	8004700 <chprintf>
  chprintf(chp, "\x1B[2J");
 800664a:	4620      	mov	r0, r4
 800664c:	4922      	ldr	r1, [pc, #136]	; (80066d8 <cmd_getAdcValues+0x98>)
 800664e:	f7fe f857 	bl	8004700 <chprintf>
 8006652:	e034      	b.n	80066be <cmd_getAdcValues+0x7e>
  while (chnGetTimeout((BaseChannel *)chp, TIME_IMMEDIATE) == Q_TIMEOUT) {
    chprintf(chp, "\x1B\x63");
 8006654:	4620      	mov	r0, r4
 8006656:	f7fe f853 	bl	8004700 <chprintf>
    chprintf(chp, "\x1B[2J");
 800665a:	491f      	ldr	r1, [pc, #124]	; (80066d8 <cmd_getAdcValues+0x98>)
 800665c:	4620      	mov	r0, r4
 800665e:	f7fe f84f 	bl	8004700 <chprintf>

    chprintf(chp, "CHANNELS: %d, BUFFER: %d\r\n", MEAS_NUM_CH, ADC_GRP1_BUF_DEPTH);
 8006662:	2308      	movs	r3, #8
 8006664:	491d      	ldr	r1, [pc, #116]	; (80066dc <cmd_getAdcValues+0x9c>)
 8006666:	2206      	movs	r2, #6
 8006668:	4620      	mov	r0, r4
 800666a:	f7fe f849 	bl	8004700 <chprintf>
    chprintf(chp, "NTC1: %d\r\n", measGetValue(MEAS_NTC1));
 800666e:	491c      	ldr	r1, [pc, #112]	; (80066e0 <cmd_getAdcValues+0xa0>)
 8006670:	f9b5 2000 	ldrsh.w	r2, [r5]
 8006674:	4620      	mov	r0, r4
 8006676:	f7fe f843 	bl	8004700 <chprintf>
    chprintf(chp, "NTC2: %d\r\n", measGetValue(MEAS_NTC2));
 800667a:	491a      	ldr	r1, [pc, #104]	; (80066e4 <cmd_getAdcValues+0xa4>)
 800667c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8006680:	4620      	mov	r0, r4
 8006682:	f7fe f83d 	bl	8004700 <chprintf>
    chprintf(chp, "NTC3: %d\r\n", measGetValue(MEAS_NTC3));
 8006686:	4918      	ldr	r1, [pc, #96]	; (80066e8 <cmd_getAdcValues+0xa8>)
 8006688:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 800668c:	4620      	mov	r0, r4
 800668e:	f7fe f837 	bl	8004700 <chprintf>
    chprintf(chp, "CURR1: %d\r\n", measGetValue(MEAS_CURR1));
 8006692:	4916      	ldr	r1, [pc, #88]	; (80066ec <cmd_getAdcValues+0xac>)
 8006694:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
 8006698:	4620      	mov	r0, r4
 800669a:	f7fe f831 	bl	8004700 <chprintf>
    chprintf(chp, "CURR2: %d\r\n", measGetValue(MEAS_CURR2));
 800669e:	4914      	ldr	r1, [pc, #80]	; (80066f0 <cmd_getAdcValues+0xb0>)
 80066a0:	f9b5 2010 	ldrsh.w	r2, [r5, #16]
 80066a4:	4620      	mov	r0, r4
 80066a6:	f7fe f82b 	bl	8004700 <chprintf>
    chprintf(chp, "CURR3: %d\r\n", measGetValue(MEAS_CURR3));
 80066aa:	4620      	mov	r0, r4
 80066ac:	f9b5 2014 	ldrsh.w	r2, [r5, #20]
 80066b0:	4910      	ldr	r1, [pc, #64]	; (80066f4 <cmd_getAdcValues+0xb4>)
 80066b2:	f7fe f825 	bl	8004700 <chprintf>

    chThdSleepMilliseconds(200);
 80066b6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80066ba:	f7fa fe99 	bl	80013f0 <chThdSleep>

  (void)argc;
  (void)argv;
  chprintf(chp, "\x1B\x63");
  chprintf(chp, "\x1B[2J");
  while (chnGetTimeout((BaseChannel *)chp, TIME_IMMEDIATE) == Q_TIMEOUT) {
 80066be:	6823      	ldr	r3, [r4, #0]
 80066c0:	2100      	movs	r1, #0
 80066c2:	4620      	mov	r0, r4
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	4798      	blx	r3
 80066c8:	3001      	adds	r0, #1
    chprintf(chp, "\x1B\x63");
 80066ca:	4902      	ldr	r1, [pc, #8]	; (80066d4 <cmd_getAdcValues+0x94>)
  }
}


int16_t measGetValue(enum measChannels ch){
      return measValue[ch];
 80066cc:	4d0a      	ldr	r5, [pc, #40]	; (80066f8 <cmd_getAdcValues+0xb8>)

  (void)argc;
  (void)argv;
  chprintf(chp, "\x1B\x63");
  chprintf(chp, "\x1B[2J");
  while (chnGetTimeout((BaseChannel *)chp, TIME_IMMEDIATE) == Q_TIMEOUT) {
 80066ce:	d0c1      	beq.n	8006654 <cmd_getAdcValues+0x14>
    chprintf(chp, "CURR3: %d\r\n", measGetValue(MEAS_CURR3));

    chThdSleepMilliseconds(200);
  }

}
 80066d0:	bd38      	pop	{r3, r4, r5, pc}
 80066d2:	bf00      	nop
 80066d4:	08007f70 	.word	0x08007f70
 80066d8:	08007f74 	.word	0x08007f74
 80066dc:	08007f7c 	.word	0x08007f7c
 80066e0:	08007f98 	.word	0x08007f98
 80066e4:	08007fa4 	.word	0x08007fa4
 80066e8:	08007fb0 	.word	0x08007fb0
 80066ec:	08007fbc 	.word	0x08007fbc
 80066f0:	08007fc8 	.word	0x08007fc8
 80066f4:	08007fd4 	.word	0x08007fd4
 80066f8:	20000d30 	.word	0x20000d30
 80066fc:	00000000 	.word	0x00000000

08006700 <SampleThread.lto_priv.91>:
  return value;
}


static THD_WORKING_AREA(waSampleThread, 512);
static THD_FUNCTION(SampleThread, arg) {
 8006700:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 8006704:	4b51      	ldr	r3, [pc, #324]	; (800684c <SampleThread.lto_priv.91+0x14c>)
 8006706:	4952      	ldr	r1, [pc, #328]	; (8006850 <SampleThread.lto_priv.91+0x150>)
 8006708:	699a      	ldr	r2, [r3, #24]
 800670a:	2320      	movs	r3, #32
 800670c:	6191      	str	r1, [r2, #24]
 800670e:	f383 8811 	msr	BASEPRI, r3
 8006712:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006716:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8006718:	f04f 0800 	mov.w	r8, #0
 800671c:	b2b6      	uxth	r6, r6
 800671e:	f388 8811 	msr	BASEPRI, r8
 8006722:	4c4c      	ldr	r4, [pc, #304]	; (8006854 <SampleThread.lto_priv.91+0x154>)
 8006724:	f8df 9144 	ldr.w	r9, [pc, #324]	; 800686c <SampleThread.lto_priv.91+0x16c>
  chRegSetThreadName("SampleThread");
  systime_t time;
  time = chVTGetSystemTime();
  while(true)
  {
    time += MS2ST(SAMPLE_FREQUENCY_MS);
 8006728:	3664      	adds	r6, #100	; 0x64
 800672a:	b2b6      	uxth	r6, r6
 800672c:	2320      	movs	r3, #32
 800672e:	f383 8811 	msr	BASEPRI, r3
  /* ADC setup.*/
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_SCAN;
  cr2 = grpp->cr2 | ADC_CR2_DMA | ADC_CR2_ADON;
  if ((cr2 & (ADC_CR2_EXTTRIG | ADC_CR2_JEXTTRIG)) == 0)
    cr2 |= ADC_CR2_CONT;
  adcp->adc->CR2   = grpp->cr2 | cr2;
 8006732:	f240 1503 	movw	r5, #259	; 0x103
      /* If circular buffer depth > 1, then the half transfer interrupt
         is enabled in order to allow streaming processing.*/
      mode |= STM32_DMA_CR_HTIE;
    }
  }
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 8006736:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
                (adcp->state == ADC_ERROR),
                "not ready");

  adcp->samples  = samples;
  adcp->depth    = depth;
  adcp->grpp     = grpp;
 800673a:	4f47      	ldr	r7, [pc, #284]	; (8006858 <SampleThread.lto_priv.91+0x158>)
 800673c:	6852      	ldr	r2, [r2, #4]
void adc_lld_start_conversion(ADCDriver *adcp) {
  uint32_t mode, cr2;
  const ADCConversionGroup *grpp = adcp->grpp;

  /* DMA setup.*/
  mode = adcp->dmamode;
 800673e:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 8006742:	f8c9 7010 	str.w	r7, [r9, #16]
                (adcp->state == ADC_COMPLETE) ||
                (adcp->state == ADC_ERROR),
                "not ready");

  adcp->samples  = samples;
  adcp->depth    = depth;
 8006746:	2008      	movs	r0, #8
      /* If circular buffer depth > 1, then the half transfer interrupt
         is enabled in order to allow streaming processing.*/
      mode |= STM32_DMA_CR_HTIE;
    }
  }
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 8006748:	4f42      	ldr	r7, [pc, #264]	; (8006854 <SampleThread.lto_priv.91+0x154>)
 800674a:	f8c9 000c 	str.w	r0, [r9, #12]
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
 800674e:	2130      	movs	r1, #48	; 0x30
  adcp->grpp     = grpp;
  adcp->state    = ADC_ACTIVE;
 8006750:	2003      	movs	r0, #3
      /* If circular buffer depth > 1, then the half transfer interrupt
         is enabled in order to allow streaming processing.*/
      mode |= STM32_DMA_CR_HTIE;
    }
  }
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 8006752:	60d7      	str	r7, [r2, #12]
  osalDbgAssert((adcp->state == ADC_READY) ||
                (adcp->state == ADC_COMPLETE) ||
                (adcp->state == ADC_ERROR),
                "not ready");

  adcp->samples  = samples;
 8006754:	f8c9 4008 	str.w	r4, [r9, #8]
  adcp->depth    = depth;
  adcp->grpp     = grpp;
  adcp->state    = ADC_ACTIVE;
 8006758:	f889 0000 	strb.w	r0, [r9]
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
 800675c:	6051      	str	r1, [r2, #4]
                                            (uint32_t)adcp->depth);
  dmaStreamSetMode(adcp->dmastp, mode);
 800675e:	6013      	str	r3, [r2, #0]
  dmaStreamEnable(adcp->dmastp);
 8006760:	6811      	ldr	r1, [r2, #0]

  /* ADC setup.*/
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_SCAN;
 8006762:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
  }
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
                                            (uint32_t)adcp->depth);
  dmaStreamSetMode(adcp->dmastp, mode);
  dmaStreamEnable(adcp->dmastp);
 8006766:	f041 0101 	orr.w	r1, r1, #1
 800676a:	6011      	str	r1, [r2, #0]
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 800676c:	4a37      	ldr	r2, [pc, #220]	; (800684c <SampleThread.lto_priv.91+0x14c>)

  /* ADC setup.*/
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_SCAN;
 800676e:	f44f 7180 	mov.w	r1, #256	; 0x100
  cr2 = grpp->cr2 | ADC_CR2_DMA | ADC_CR2_ADON;
  if ((cr2 & (ADC_CR2_EXTTRIG | ADC_CR2_JEXTTRIG)) == 0)
    cr2 |= ADC_CR2_CONT;
  adcp->adc->CR2   = grpp->cr2 | cr2;
  adcp->adc->SMPR1 = grpp->smpr1;
  adcp->adc->SMPR2 = grpp->smpr2;
 8006772:	4f3a      	ldr	r7, [pc, #232]	; (800685c <SampleThread.lto_priv.91+0x15c>)
 8006774:	6992      	ldr	r2, [r2, #24]
                                            (uint32_t)adcp->depth);
  dmaStreamSetMode(adcp->dmastp, mode);
  dmaStreamEnable(adcp->dmastp);

  /* ADC setup.*/
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_SCAN;
 8006776:	6059      	str	r1, [r3, #4]
  if ((cr2 & (ADC_CR2_EXTTRIG | ADC_CR2_JEXTTRIG)) == 0)
    cr2 |= ADC_CR2_CONT;
  adcp->adc->CR2   = grpp->cr2 | cr2;
  adcp->adc->SMPR1 = grpp->smpr1;
  adcp->adc->SMPR2 = grpp->smpr2;
  adcp->adc->SQR1  = grpp->sqr1;
 8006778:	f44f 01a0 	mov.w	r1, #5242880	; 0x500000
  /* ADC setup.*/
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_SCAN;
  cr2 = grpp->cr2 | ADC_CR2_DMA | ADC_CR2_ADON;
  if ((cr2 & (ADC_CR2_EXTTRIG | ADC_CR2_JEXTTRIG)) == 0)
    cr2 |= ADC_CR2_CONT;
  adcp->adc->CR2   = grpp->cr2 | cr2;
 800677c:	609d      	str	r5, [r3, #8]
  adcp->adc->SMPR1 = grpp->smpr1;
 800677e:	f8c3 800c 	str.w	r8, [r3, #12]
  adcp->adc->SMPR2 = grpp->smpr2;
 8006782:	611f      	str	r7, [r3, #16]
  adcp->adc->SQR1  = grpp->sqr1;
 8006784:	62d9      	str	r1, [r3, #44]	; 0x2c
  adcp->adc->SQR2  = grpp->sqr2;
  adcp->adc->SQR3  = grpp->sqr3;
 8006786:	4936      	ldr	r1, [pc, #216]	; (8006860 <SampleThread.lto_priv.91+0x160>)
    cr2 |= ADC_CR2_CONT;
  adcp->adc->CR2   = grpp->cr2 | cr2;
  adcp->adc->SMPR1 = grpp->smpr1;
  adcp->adc->SMPR2 = grpp->smpr2;
  adcp->adc->SQR1  = grpp->sqr1;
  adcp->adc->SQR2  = grpp->sqr2;
 8006788:	f8c3 8030 	str.w	r8, [r3, #48]	; 0x30
  adcp->adc->SQR3  = grpp->sqr3;
 800678c:	6359      	str	r1, [r3, #52]	; 0x34

  /* ADC start by writing ADC_CR2_ADON a second time.*/
  adcp->adc->CR2   = cr2;
 800678e:	609d      	str	r5, [r3, #8]
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
  tp->p_u.wttrp = trp;
 8006790:	4b34      	ldr	r3, [pc, #208]	; (8006864 <SampleThread.lto_priv.91+0x164>)
msg_t chThdSuspendS(thread_reference_t *trp) {
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
 8006792:	f8c9 2014 	str.w	r2, [r9, #20]
  tp->p_u.wttrp = trp;
 8006796:	6213      	str	r3, [r2, #32]
  chSchGoSleepS(CH_STATE_SUSPENDED);
 8006798:	f7fa f84a 	bl	8000830 <chSchGoSleepS>
 800679c:	f388 8811 	msr	BASEPRI, r8
int16_t measInterpolateNTC(adcsample_t rawvalue){
  int16_t value = 0;
  adcsample_t left, right;
  int i;

  if(rawvalue >= measNTCcalib[0]){
 80067a0:	f640 75d5 	movw	r5, #4053	; 0xfd5
  }
  else {
    i = 0;
    left = measNTCcalib[i];
    right = measNTCcalib[i + 1];
    while(rawvalue < right && i < MEAS_NTCCAL_NUM - 1){
 80067a4:	f640 7ec3 	movw	lr, #4035	; 0xfc3
 80067a8:	482f      	ldr	r0, [pc, #188]	; (8006868 <SampleThread.lto_priv.91+0x168>)
    int avg, ch, i;
    double temp = 0;

    adcConvert(&ADCD1, &adcgrpcfg, samples, ADC_GRP1_BUF_DEPTH);

    for(ch = 0; ch < MEAS_NUM_CH; ch++) {
 80067aa:	2100      	movs	r1, #0
  return value;
}


static THD_WORKING_AREA(waSampleThread, 512);
static THD_FUNCTION(SampleThread, arg) {
 80067ac:	2300      	movs	r3, #0
 80067ae:	461a      	mov	r2, r3
 80067b0:	ea4f 0a41 	mov.w	sl, r1, lsl #1
 80067b4:	eb04 0c03 	add.w	ip, r4, r3
    adcConvert(&ADCD1, &adcgrpcfg, samples, ADC_GRP1_BUF_DEPTH);

    for(ch = 0; ch < MEAS_NUM_CH; ch++) {
      avg = 0;
      for(i = 0; i < ADC_GRP1_BUF_DEPTH; i++) {
        avg += samples[ch + MEAS_NUM_CH * i];
 80067b8:	f83c c00a 	ldrh.w	ip, [ip, sl]
 80067bc:	330c      	adds	r3, #12

    adcConvert(&ADCD1, &adcgrpcfg, samples, ADC_GRP1_BUF_DEPTH);

    for(ch = 0; ch < MEAS_NUM_CH; ch++) {
      avg = 0;
      for(i = 0; i < ADC_GRP1_BUF_DEPTH; i++) {
 80067be:	2b60      	cmp	r3, #96	; 0x60
        avg += samples[ch + MEAS_NUM_CH * i];
 80067c0:	4462      	add	r2, ip

    adcConvert(&ADCD1, &adcgrpcfg, samples, ADC_GRP1_BUF_DEPTH);

    for(ch = 0; ch < MEAS_NUM_CH; ch++) {
      avg = 0;
      for(i = 0; i < ADC_GRP1_BUF_DEPTH; i++) {
 80067c2:	d1f7      	bne.n	80067b4 <SampleThread.lto_priv.91+0xb4>
        avg += samples[ch + MEAS_NUM_CH * i];
      }
      avg /= ADC_GRP1_BUF_DEPTH;

      switch(ch)
 80067c4:	2902      	cmp	r1, #2
    for(ch = 0; ch < MEAS_NUM_CH; ch++) {
      avg = 0;
      for(i = 0; i < ADC_GRP1_BUF_DEPTH; i++) {
        avg += samples[ch + MEAS_NUM_CH * i];
      }
      avg /= ADC_GRP1_BUF_DEPTH;
 80067c6:	ea4f 02e2 	mov.w	r2, r2, asr #3

      switch(ch)
 80067ca:	d823      	bhi.n	8006814 <SampleThread.lto_priv.91+0x114>
      {
        case MEAS_NTC1:
        case MEAS_NTC2:
        case MEAS_NTC3:
          avg = measInterpolateNTC(avg);
 80067cc:	b292      	uxth	r2, r2
int16_t measInterpolateNTC(adcsample_t rawvalue){
  int16_t value = 0;
  adcsample_t left, right;
  int i;

  if(rawvalue >= measNTCcalib[0]){
 80067ce:	42aa      	cmp	r2, r5
 80067d0:	d82f      	bhi.n	8006832 <SampleThread.lto_priv.91+0x132>
    value = MEAS_NTCCAL_START;
  }
  else if(rawvalue < measNTCcalib[MEAS_NTCCAL_NUM - 1]){
 80067d2:	2a41      	cmp	r2, #65	; 0x41
 80067d4:	d930      	bls.n	8006838 <SampleThread.lto_priv.91+0x138>
  }
  else {
    i = 0;
    left = measNTCcalib[i];
    right = measNTCcalib[i + 1];
    while(rawvalue < right && i < MEAS_NTCCAL_NUM - 1){
 80067d6:	4572      	cmp	r2, lr
 80067d8:	d830      	bhi.n	800683c <SampleThread.lto_priv.91+0x13c>
 80067da:	f8df b094 	ldr.w	fp, [pc, #148]	; 8006870 <SampleThread.lto_priv.91+0x170>
 80067de:	f640 73c4 	movw	r3, #4036	; 0xfc4
 80067e2:	f04f 0c00 	mov.w	ip, #0
 80067e6:	e000      	b.n	80067ea <SampleThread.lto_priv.91+0xea>
 80067e8:	4653      	mov	r3, sl
      i++;
      left = right;
      right = measNTCcalib[i + 1];
 80067ea:	f83b af02 	ldrh.w	sl, [fp, #2]!
  else {
    i = 0;
    left = measNTCcalib[i];
    right = measNTCcalib[i + 1];
    while(rawvalue < right && i < MEAS_NTCCAL_NUM - 1){
      i++;
 80067ee:	f10c 0c01 	add.w	ip, ip, #1
  }
  else {
    i = 0;
    left = measNTCcalib[i];
    right = measNTCcalib[i + 1];
    while(rawvalue < right && i < MEAS_NTCCAL_NUM - 1){
 80067f2:	4552      	cmp	r2, sl
 80067f4:	d3f8      	bcc.n	80067e8 <SampleThread.lto_priv.91+0xe8>
 80067f6:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80067fa:	f1ac 0c37 	sub.w	ip, ip, #55	; 0x37
 80067fe:	fa1f fc8c 	uxth.w	ip, ip
 8006802:	ebca 0a03 	rsb	sl, sl, r3
      left = right;
      right = measNTCcalib[i + 1];
    }
    value = MEAS_NTCCAL_START +
            i * MEAS_NTCCAL_STEP +
            (MEAS_NTCCAL_STEP * (left - rawvalue)) / (left - right);
 8006806:	1a9b      	subs	r3, r3, r2
 8006808:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800680c:	fb93 f3fa 	sdiv	r3, r3, sl
    while(rawvalue < right && i < MEAS_NTCCAL_NUM - 1){
      i++;
      left = right;
      right = measNTCcalib[i + 1];
    }
    value = MEAS_NTCCAL_START +
 8006810:	eb0c 0203 	add.w	r2, ip, r3
 8006814:	b212      	sxth	r2, r2
 8006816:	2320      	movs	r3, #32
 8006818:	f383 8811 	msr	BASEPRI, r3
        case MEAS_NTC3:
          avg = measInterpolateNTC(avg);
        break;
      }
      chSysLock();
      measValue[ch] = (int16_t)avg;
 800681c:	f840 2b04 	str.w	r2, [r0], #4
 8006820:	f388 8811 	msr	BASEPRI, r8
    int avg, ch, i;
    double temp = 0;

    adcConvert(&ADCD1, &adcgrpcfg, samples, ADC_GRP1_BUF_DEPTH);

    for(ch = 0; ch < MEAS_NUM_CH; ch++) {
 8006824:	3101      	adds	r1, #1
 8006826:	2906      	cmp	r1, #6
 8006828:	d1c0      	bne.n	80067ac <SampleThread.lto_priv.91+0xac>
      }
      chSysLock();
      measValue[ch] = (int16_t)avg;
      chSysUnlock();
    }
    chThdSleepUntil(time);
 800682a:	4630      	mov	r0, r6
 800682c:	f7fa fdc8 	bl	80013c0 <chThdSleepUntil>
 8006830:	e77a      	b.n	8006728 <SampleThread.lto_priv.91+0x28>
int16_t measInterpolateNTC(adcsample_t rawvalue){
  int16_t value = 0;
  adcsample_t left, right;
  int i;

  if(rawvalue >= measNTCcalib[0]){
 8006832:	f06f 0236 	mvn.w	r2, #54	; 0x36
 8006836:	e7ee      	b.n	8006816 <SampleThread.lto_priv.91+0x116>
    value = MEAS_NTCCAL_START;
  }
  else if(rawvalue < measNTCcalib[MEAS_NTCCAL_NUM - 1]){
 8006838:	229b      	movs	r2, #155	; 0x9b
 800683a:	e7ec      	b.n	8006816 <SampleThread.lto_priv.91+0x116>
  }
  else {
    i = 0;
    left = measNTCcalib[i];
    right = measNTCcalib[i + 1];
    while(rawvalue < right && i < MEAS_NTCCAL_NUM - 1){
 800683c:	f640 73d6 	movw	r3, #4054	; 0xfd6
 8006840:	f64f 7cc9 	movw	ip, #65481	; 0xffc9
 8006844:	f04f 0a12 	mov.w	sl, #18
 8006848:	e7dd      	b.n	8006806 <SampleThread.lto_priv.91+0x106>
 800684a:	bf00      	nop
 800684c:	200013f8 	.word	0x200013f8
 8006850:	08007fe0 	.word	0x08007fe0
 8006854:	20001810 	.word	0x20001810
 8006858:	08008170 	.word	0x08008170
 800685c:	00012492 	.word	0x00012492
 8006860:	0a418820 	.word	0x0a418820
 8006864:	200013d4 	.word	0x200013d4
 8006868:	20000d30 	.word	0x20000d30
 800686c:	200013c0 	.word	0x200013c0
 8006870:	08007ed2 	.word	0x08007ed2
	...

08006880 <cmd_test.lto_priv.98>:
}

static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
  thread_t *tp;

  palSetPad(GPIOB, GPIOB_LED1);
 8006880:	4b10      	ldr	r3, [pc, #64]	; (80068c4 <cmd_test.lto_priv.98+0x44>)
 8006882:	2280      	movs	r2, #128	; 0x80
  (void)argv;
  if (argc > 0) {
 8006884:	2900      	cmp	r1, #0
}

static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
  thread_t *tp;

  palSetPad(GPIOB, GPIOB_LED1);
 8006886:	611a      	str	r2, [r3, #16]
  (void)argv;
  if (argc > 0) {
 8006888:	dd02      	ble.n	8006890 <cmd_test.lto_priv.98+0x10>
    chprintf(chp, "Usage: test\r\n");
 800688a:	490f      	ldr	r1, [pc, #60]	; (80068c8 <cmd_test.lto_priv.98+0x48>)
 800688c:	f7fd bf38 	b.w	8004700 <chprintf>
             states[tp->p_state]);
    tp = chRegNextThread(tp);
  } while (tp != NULL);
}

static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 8006890:	b510      	push	{r4, lr}
 8006892:	4604      	mov	r4, r0
 8006894:	4b0d      	ldr	r3, [pc, #52]	; (80068cc <cmd_test.lto_priv.98+0x4c>)
 8006896:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8006898:	699b      	ldr	r3, [r3, #24]
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: test\r\n");
    return;
  }
  tp = chThdCreateFromHeap(NULL, TEST_WA_SIZE, chThdGetPriorityX(),
 800689a:	2000      	movs	r0, #0
 800689c:	689a      	ldr	r2, [r3, #8]
 800689e:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 80068a2:	4b0b      	ldr	r3, [pc, #44]	; (80068d0 <cmd_test.lto_priv.98+0x50>)
 80068a4:	9400      	str	r4, [sp, #0]
 80068a6:	f7fa fb1b 	bl	8000ee0 <chThdCreateFromHeap>
                           TestThread, chp);
  if (tp == NULL) {
 80068aa:	b120      	cbz	r0, 80068b6 <cmd_test.lto_priv.98+0x36>
    chprintf(chp, "out of memory\r\n");
    return;
  }
  chThdWait(tp);
}
 80068ac:	b002      	add	sp, #8
 80068ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                           TestThread, chp);
  if (tp == NULL) {
    chprintf(chp, "out of memory\r\n");
    return;
  }
  chThdWait(tp);
 80068b2:	f7fa baad 	b.w	8000e10 <chThdWait>
    return;
  }
  tp = chThdCreateFromHeap(NULL, TEST_WA_SIZE, chThdGetPriorityX(),
                           TestThread, chp);
  if (tp == NULL) {
    chprintf(chp, "out of memory\r\n");
 80068b6:	4620      	mov	r0, r4
 80068b8:	4906      	ldr	r1, [pc, #24]	; (80068d4 <cmd_test.lto_priv.98+0x54>)
    return;
  }
  chThdWait(tp);
}
 80068ba:	b002      	add	sp, #8
 80068bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return;
  }
  tp = chThdCreateFromHeap(NULL, TEST_WA_SIZE, chThdGetPriorityX(),
                           TestThread, chp);
  if (tp == NULL) {
    chprintf(chp, "out of memory\r\n");
 80068c0:	f7fd bf1e 	b.w	8004700 <chprintf>
 80068c4:	40010c00 	.word	0x40010c00
 80068c8:	08007ff0 	.word	0x08007ff0
 80068cc:	200013f8 	.word	0x200013f8
 80068d0:	08002c61 	.word	0x08002c61
 80068d4:	08008000 	.word	0x08008000
	...

080068e0 <cmd_threads.lto_priv.97>:
static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
  static const char *states[] = {CH_STATE_NAMES};
  thread_t *tp;

  (void)argv;
  if (argc > 0) {
 80068e0:	2900      	cmp	r1, #0
 80068e2:	dd02      	ble.n	80068ea <cmd_threads.lto_priv.97+0xa>
    chprintf(chp, "Usage: threads\r\n");
 80068e4:	4915      	ldr	r1, [pc, #84]	; (800693c <cmd_threads.lto_priv.97+0x5c>)
 80068e6:	f7fd bf0b 	b.w	8004700 <chprintf>
  chprintf(chp, "core free memory : %u bytes\r\n", chCoreGetStatusX());
  chprintf(chp, "heap fragments   : %u\r\n", n);
  chprintf(chp, "heap free total  : %u bytes\r\n", size);
}

static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 80068ea:	b570      	push	{r4, r5, r6, lr}
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: threads\r\n");
    return;
  }
  chprintf(chp, "    addr    stack prio refs     state\r\n");
 80068ec:	4914      	ldr	r1, [pc, #80]	; (8006940 <cmd_threads.lto_priv.97+0x60>)
  chprintf(chp, "core free memory : %u bytes\r\n", chCoreGetStatusX());
  chprintf(chp, "heap fragments   : %u\r\n", n);
  chprintf(chp, "heap free total  : %u bytes\r\n", size);
}

static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 80068ee:	b084      	sub	sp, #16
 80068f0:	4605      	mov	r5, r0
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: threads\r\n");
    return;
  }
  chprintf(chp, "    addr    stack prio refs     state\r\n");
 80068f2:	f7fd ff05 	bl	8004700 <chprintf>
 80068f6:	2320      	movs	r3, #32
 80068f8:	f383 8811 	msr	BASEPRI, r3
 */
thread_t *chRegFirstThread(void) {
  thread_t *tp;

  chSysLock();
  tp = ch.rlist.r_newer;
 80068fc:	4b11      	ldr	r3, [pc, #68]	; (8006944 <cmd_threads.lto_priv.97+0x64>)
 80068fe:	2200      	movs	r2, #0
 8006900:	691c      	ldr	r4, [r3, #16]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs++;
 8006902:	7fa3      	ldrb	r3, [r4, #30]
 8006904:	3301      	adds	r3, #1
 8006906:	77a3      	strb	r3, [r4, #30]
 8006908:	f382 8811 	msr	BASEPRI, r2
 800690c:	4e0e      	ldr	r6, [pc, #56]	; (8006948 <cmd_threads.lto_priv.97+0x68>)
  tp = chRegFirstThread();
  do {
    chprintf(chp, "%08lx %08lx %4lu %4lu %9s %lu\r\n",
 800690e:	68a2      	ldr	r2, [r4, #8]
 8006910:	68e3      	ldr	r3, [r4, #12]
 8006912:	9200      	str	r2, [sp, #0]
             (uint32_t)tp, (uint32_t)tp->p_ctx.r13,
             (uint32_t)tp->p_prio, (uint32_t)(tp->p_refs - 1),
 8006914:	7fa2      	ldrb	r2, [r4, #30]
    return;
  }
  chprintf(chp, "    addr    stack prio refs     state\r\n");
  tp = chRegFirstThread();
  do {
    chprintf(chp, "%08lx %08lx %4lu %4lu %9s %lu\r\n",
 8006916:	490d      	ldr	r1, [pc, #52]	; (800694c <cmd_threads.lto_priv.97+0x6c>)
             (uint32_t)tp, (uint32_t)tp->p_ctx.r13,
             (uint32_t)tp->p_prio, (uint32_t)(tp->p_refs - 1),
 8006918:	3a01      	subs	r2, #1
    return;
  }
  chprintf(chp, "    addr    stack prio refs     state\r\n");
  tp = chRegFirstThread();
  do {
    chprintf(chp, "%08lx %08lx %4lu %4lu %9s %lu\r\n",
 800691a:	9201      	str	r2, [sp, #4]
 800691c:	7f22      	ldrb	r2, [r4, #28]
 800691e:	4628      	mov	r0, r5
 8006920:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8006924:	9202      	str	r2, [sp, #8]
 8006926:	4622      	mov	r2, r4
 8006928:	f7fd feea 	bl	8004700 <chprintf>
             (uint32_t)tp, (uint32_t)tp->p_ctx.r13,
             (uint32_t)tp->p_prio, (uint32_t)(tp->p_refs - 1),
             states[tp->p_state]);
    tp = chRegNextThread(tp);
 800692c:	4620      	mov	r0, r4
 800692e:	f7fa fa57 	bl	8000de0 <chRegNextThread>
  } while (tp != NULL);
 8006932:	4604      	mov	r4, r0
 8006934:	2800      	cmp	r0, #0
 8006936:	d1ea      	bne.n	800690e <cmd_threads.lto_priv.97+0x2e>
}
 8006938:	b004      	add	sp, #16
 800693a:	bd70      	pop	{r4, r5, r6, pc}
 800693c:	08008010 	.word	0x08008010
 8006940:	08008024 	.word	0x08008024
 8006944:	200013f8 	.word	0x200013f8
 8006948:	08007f30 	.word	0x08007f30
 800694c:	0800804c 	.word	0x0800804c

08006950 <cmd_mem.lto_priv.96>:
/*===========================================================================*/

#define SHELL_WA_SIZE   THD_WORKING_AREA_SIZE(2048)
#define TEST_WA_SIZE    THD_WORKING_AREA_SIZE(256)

static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
 8006950:	b530      	push	{r4, r5, lr}
  size_t n, size;

  (void)argv;
  if (argc > 0) {
 8006952:	2900      	cmp	r1, #0
/*===========================================================================*/

#define SHELL_WA_SIZE   THD_WORKING_AREA_SIZE(2048)
#define TEST_WA_SIZE    THD_WORKING_AREA_SIZE(256)

static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
 8006954:	b083      	sub	sp, #12
  size_t n, size;

  (void)argv;
  if (argc > 0) {
 8006956:	dd04      	ble.n	8006962 <cmd_mem.lto_priv.96+0x12>
    chprintf(chp, "Usage: mem\r\n");
 8006958:	490f      	ldr	r1, [pc, #60]	; (8006998 <cmd_mem.lto_priv.96+0x48>)
 800695a:	f7fd fed1 	bl	8004700 <chprintf>
  }
  n = chHeapStatus(NULL, &size);
  chprintf(chp, "core free memory : %u bytes\r\n", chCoreGetStatusX());
  chprintf(chp, "heap fragments   : %u\r\n", n);
  chprintf(chp, "heap free total  : %u bytes\r\n", size);
}
 800695e:	b003      	add	sp, #12
 8006960:	bd30      	pop	{r4, r5, pc}
 8006962:	4604      	mov	r4, r0
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: mem\r\n");
    return;
  }
  n = chHeapStatus(NULL, &size);
 8006964:	a901      	add	r1, sp, #4
 8006966:	2000      	movs	r0, #0
 8006968:	f7fa f98a 	bl	8000c80 <chHeapStatus>
 800696c:	4605      	mov	r5, r0
 * @xclass
 */
size_t chCoreGetStatusX(void) {

  /*lint -save -e9033 [10.8] The cast is safe.*/
  return (size_t)(endmem - nextmem);
 800696e:	4a0b      	ldr	r2, [pc, #44]	; (800699c <cmd_mem.lto_priv.96+0x4c>)
 8006970:	4b0b      	ldr	r3, [pc, #44]	; (80069a0 <cmd_mem.lto_priv.96+0x50>)
 8006972:	6812      	ldr	r2, [r2, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
  chprintf(chp, "core free memory : %u bytes\r\n", chCoreGetStatusX());
 8006976:	4620      	mov	r0, r4
 8006978:	1ad2      	subs	r2, r2, r3
 800697a:	490a      	ldr	r1, [pc, #40]	; (80069a4 <cmd_mem.lto_priv.96+0x54>)
 800697c:	f7fd fec0 	bl	8004700 <chprintf>
  chprintf(chp, "heap fragments   : %u\r\n", n);
 8006980:	462a      	mov	r2, r5
 8006982:	4620      	mov	r0, r4
 8006984:	4908      	ldr	r1, [pc, #32]	; (80069a8 <cmd_mem.lto_priv.96+0x58>)
 8006986:	f7fd febb 	bl	8004700 <chprintf>
  chprintf(chp, "heap free total  : %u bytes\r\n", size);
 800698a:	4620      	mov	r0, r4
 800698c:	4907      	ldr	r1, [pc, #28]	; (80069ac <cmd_mem.lto_priv.96+0x5c>)
 800698e:	9a01      	ldr	r2, [sp, #4]
 8006990:	f7fd feb6 	bl	8004700 <chprintf>
}
 8006994:	b003      	add	sp, #12
 8006996:	bd30      	pop	{r4, r5, pc}
 8006998:	0800806c 	.word	0x0800806c
 800699c:	200013bc 	.word	0x200013bc
 80069a0:	200013b8 	.word	0x200013b8
 80069a4:	0800807c 	.word	0x0800807c
 80069a8:	0800809c 	.word	0x0800809c
 80069ac:	080080b4 	.word	0x080080b4

080069b0 <chTMStartMeasurementX.constprop.78>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 80069b0:	4b01      	ldr	r3, [pc, #4]	; (80069b8 <chTMStartMeasurementX.constprop.78+0x8>)
 80069b2:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 80069b4:	6083      	str	r3, [r0, #8]
 80069b6:	4770      	bx	lr
 80069b8:	e0001000 	.word	0xe0001000
 80069bc:	00000000 	.word	0x00000000

080069c0 <chThdCreateFromMemoryPool.constprop.76>:
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, tprio_t prio,
 80069c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  void *wsp;
  thread_t *tp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 80069c4:	4e21      	ldr	r6, [pc, #132]	; (8006a4c <chThdCreateFromMemoryPool.constprop.76+0x8c>)
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, tprio_t prio,
 80069c6:	4680      	mov	r8, r0
  void *wsp;
  thread_t *tp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 80069c8:	4630      	mov	r0, r6
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, tprio_t prio,
 80069ca:	4689      	mov	r9, r1
  void *wsp;
  thread_t *tp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 80069cc:	f7f9 fde8 	bl	80005a0 <chPoolAlloc>
  if (wsp == NULL) {
 80069d0:	4604      	mov	r4, r0
 80069d2:	2800      	cmp	r0, #0
 80069d4:	d037      	beq.n	8006a46 <chThdCreateFromMemoryPool.constprop.76+0x86>
 80069d6:	2320      	movs	r3, #32
 80069d8:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80069dc:	6873      	ldr	r3, [r6, #4]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80069de:	4a1c      	ldr	r2, [pc, #112]	; (8006a50 <chThdCreateFromMemoryPool.constprop.76+0x90>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80069e0:	3b24      	subs	r3, #36	; 0x24
 80069e2:	4d1c      	ldr	r5, [pc, #112]	; (8006a54 <chThdCreateFromMemoryPool.constprop.76+0x94>)
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80069e4:	f8d2 a014 	ldr.w	sl, [r2, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80069e8:	eb00 0e03 	add.w	lr, r0, r3
 80069ec:	491a      	ldr	r1, [pc, #104]	; (8006a58 <chThdCreateFromMemoryPool.constprop.76+0x98>)
 80069ee:	f8c0 e00c 	str.w	lr, [r0, #12]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80069f2:	f04f 0c02 	mov.w	ip, #2

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80069f6:	50c5      	str	r5, [r0, r3]
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 80069f8:	f100 0724 	add.w	r7, r0, #36	; 0x24
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 80069fc:	2500      	movs	r5, #0
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 80069fe:	f100 0328 	add.w	r3, r0, #40	; 0x28
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8006a02:	f04f 0b01 	mov.w	fp, #1

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8006a06:	f8ce 9004 	str.w	r9, [lr, #4]
 8006a0a:	f8ce 1020 	str.w	r1, [lr, #32]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8006a0e:	f8c0 8008 	str.w	r8, [r0, #8]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8006a12:	6102      	str	r2, [r0, #16]
 8006a14:	f8c0 a014 	str.w	sl, [r0, #20]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8006a18:	f8c0 803c 	str.w	r8, [r0, #60]	; 0x3c
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8006a1c:	f880 b01e 	strb.w	fp, [r0, #30]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8006a20:	f880 c01c 	strb.w	ip, [r0, #28]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8006a24:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8006a26:	6345      	str	r5, [r0, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8006a28:	6185      	str	r5, [r0, #24]

  chSysLock();
  tp = chThdCreateI(wsp, mp->mp_object_size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_MPOOL;
  tp->p_mpool = mp;
  chSchWakeupS(tp, MSG_OK);
 8006a2a:	4629      	mov	r1, r5
  REG_INSERT(tp);
 8006a2c:	f8ca 0010 	str.w	r0, [sl, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8006a30:	6247      	str	r7, [r0, #36]	; 0x24
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, mp->mp_object_size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_MPOOL;
 8006a32:	f880 c01d 	strb.w	ip, [r0, #29]
  tp->p_mpool = mp;
 8006a36:	6406      	str	r6, [r0, #64]	; 0x40
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8006a38:	6283      	str	r3, [r0, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 8006a3a:	62c3      	str	r3, [r0, #44]	; 0x2c
 8006a3c:	6150      	str	r0, [r2, #20]
  chSchWakeupS(tp, MSG_OK);
 8006a3e:	f7f9 fe67 	bl	8000710 <chSchWakeupS>
 8006a42:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  return tp;
}
 8006a46:	4620      	mov	r0, r4
 8006a48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a4c:	20001870 	.word	0x20001870
 8006a50:	200013f8 	.word	0x200013f8
 8006a54:	08005481 	.word	0x08005481
 8006a58:	08000241 	.word	0x08000241
 8006a5c:	00000000 	.word	0x00000000

08006a60 <chSemSignalWait.constprop.72>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw) {
 8006a60:	b510      	push	{r4, lr}
 8006a62:	2320      	movs	r3, #32
 8006a64:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert(((spw->s_cnt >= (cnt_t)0) && queue_isempty(&spw->s_queue)) ||
              ((spw->s_cnt < (cnt_t)0) && queue_notempty(&spw->s_queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sps->s_cnt <= (cnt_t)0) {
 8006a68:	4c15      	ldr	r4, [pc, #84]	; (8006ac0 <chSemSignalWait.constprop.72+0x60>)
 8006a6a:	68a3      	ldr	r3, [r4, #8]
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	60a3      	str	r3, [r4, #8]
 8006a72:	dd1b      	ble.n	8006aac <chSemSignalWait.constprop.72+0x4c>
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
  }
  if (--spw->s_cnt < (cnt_t)0) {
 8006a74:	3b01      	subs	r3, #1
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	60a3      	str	r3, [r4, #8]
 8006a7a:	4a11      	ldr	r2, [pc, #68]	; (8006ac0 <chSemSignalWait.constprop.72+0x60>)
 8006a7c:	db06      	blt.n	8006a8c <chSemSignalWait.constprop.72+0x2c>
    ctp->p_u.wtsemp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
    msg = ctp->p_u.rdymsg;
  }
  else {
    chSchRescheduleS();
 8006a7e:	f7f9 fe1f 	bl	80006c0 <chSchRescheduleS>
    msg = MSG_OK;
 8006a82:	2000      	movs	r0, #0
 8006a84:	2300      	movs	r3, #0
 8006a86:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return msg;
}
 8006a8a:	bd10      	pop	{r4, pc}
  chSysLock();
  if (++sps->s_cnt <= (cnt_t)0) {
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
  }
  if (--spw->s_cnt < (cnt_t)0) {
    thread_t *ctp = currp;
 8006a8c:	490d      	ldr	r1, [pc, #52]	; (8006ac4 <chSemSignalWait.constprop.72+0x64>)
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8006a8e:	6853      	ldr	r3, [r2, #4]
 8006a90:	698c      	ldr	r4, [r1, #24]
    sem_insert(ctp, &spw->s_queue);
    ctp->p_u.wtsemp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
 8006a92:	2005      	movs	r0, #5
 8006a94:	e884 000c 	stmia.w	r4, {r2, r3}
  tp->p_prev->p_next = tp;
 8006a98:	601c      	str	r4, [r3, #0]
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
  }
  if (--spw->s_cnt < (cnt_t)0) {
    thread_t *ctp = currp;
    sem_insert(ctp, &spw->s_queue);
    ctp->p_u.wtsemp = spw;
 8006a9a:	6222      	str	r2, [r4, #32]
  tqp->p_prev = tp;
 8006a9c:	6054      	str	r4, [r2, #4]
    chSchGoSleepS(CH_STATE_WTSEM);
 8006a9e:	f7f9 fec7 	bl	8000830 <chSchGoSleepS>
    msg = ctp->p_u.rdymsg;
 8006aa2:	6a20      	ldr	r0, [r4, #32]
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	f383 8811 	msr	BASEPRI, r3
    msg = MSG_OK;
  }
  chSysUnlock();

  return msg;
}
 8006aaa:	bd10      	pop	{r4, pc}
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8006aac:	6820      	ldr	r0, [r4, #0]

  tqp->p_next = tp->p_next;
 8006aae:	6803      	ldr	r3, [r0, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8006ab0:	605c      	str	r4, [r3, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8006ab2:	6023      	str	r3, [r4, #0]
              ((spw->s_cnt < (cnt_t)0) && queue_notempty(&spw->s_queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sps->s_cnt <= (cnt_t)0) {
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
 8006ab4:	f7f9 ff1c 	bl	80008f0 <chSchReadyI>
 8006ab8:	2200      	movs	r2, #0
 8006aba:	68a3      	ldr	r3, [r4, #8]
 8006abc:	6202      	str	r2, [r0, #32]
 8006abe:	e7d9      	b.n	8006a74 <chSemSignalWait.constprop.72+0x14>
 8006ac0:	200008a0 	.word	0x200008a0
 8006ac4:	200013f8 	.word	0x200013f8
	...

08006ad0 <chCondSignal.constprop.68>:
 *
 * @param[in] cp        pointer to the @p condition_variable_t structure
 *
 * @api
 */
void chCondSignal(condition_variable_t *cp) {
 8006ad0:	b508      	push	{r3, lr}
 8006ad2:	2320      	movs	r3, #32
 8006ad4:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8006ad8:	4b06      	ldr	r3, [pc, #24]	; (8006af4 <chCondSignal.constprop.68+0x24>)
 8006ada:	6818      	ldr	r0, [r3, #0]

  chDbgCheck(cp != NULL);

  chSysLock();
  if (queue_notempty(&cp->c_queue)) {
 8006adc:	4298      	cmp	r0, r3
 8006ade:	d005      	beq.n	8006aec <chCondSignal.constprop.68+0x1c>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8006ae0:	6802      	ldr	r2, [r0, #0]
    chSchWakeupS(queue_fifo_remove(&cp->c_queue), MSG_OK);
 8006ae2:	2100      	movs	r1, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 8006ae4:	6053      	str	r3, [r2, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8006ae6:	601a      	str	r2, [r3, #0]
 8006ae8:	f7f9 fe12 	bl	8000710 <chSchWakeupS>
 8006aec:	2300      	movs	r3, #0
 8006aee:	f383 8811 	msr	BASEPRI, r3
 8006af2:	bd08      	pop	{r3, pc}
 8006af4:	200008d4 	.word	0x200008d4
	...

08006b00 <chCondSignalI.constprop.67>:
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8006b00:	4b07      	ldr	r3, [pc, #28]	; (8006b20 <chCondSignalI.constprop.67+0x20>)
 8006b02:	681a      	ldr	r2, [r3, #0]
void chCondSignalI(condition_variable_t *cp) {

  chDbgCheckClassI();
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->c_queue)) {
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d00a      	beq.n	8006b1e <chCondSignalI.constprop.67+0x1e>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8006b08:	6811      	ldr	r1, [r2, #0]
 *
 * @param[in] cp        pointer to the @p condition_variable_t structure
 *
 * @iclass
 */
void chCondSignalI(condition_variable_t *cp) {
 8006b0a:	b410      	push	{r4}
  chDbgCheckClassI();
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->c_queue)) {
    thread_t *tp = queue_fifo_remove(&cp->c_queue);
    tp->p_u.rdymsg = MSG_OK;
 8006b0c:	2400      	movs	r4, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 8006b0e:	604b      	str	r3, [r1, #4]
 8006b10:	6214      	str	r4, [r2, #32]
    (void) chSchReadyI(tp);
 8006b12:	4610      	mov	r0, r2
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8006b14:	6019      	str	r1, [r3, #0]
  }
}
 8006b16:	f85d 4b04 	ldr.w	r4, [sp], #4
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->c_queue)) {
    thread_t *tp = queue_fifo_remove(&cp->c_queue);
    tp->p_u.rdymsg = MSG_OK;
    (void) chSchReadyI(tp);
 8006b1a:	f7f9 bee9 	b.w	80008f0 <chSchReadyI>
 8006b1e:	4770      	bx	lr
 8006b20:	200008d4 	.word	0x200008d4
	...

08006b30 <chEvtGetAndClearEvents.constprop.59>:
 8006b30:	2320      	movs	r3, #32
 8006b32:	f383 8811 	msr	BASEPRI, r3
 */
eventmask_t chEvtGetAndClearEvents(eventmask_t events) {
  eventmask_t m;

  chSysLock();
  m = currp->p_epending & events;
 8006b36:	4a04      	ldr	r2, [pc, #16]	; (8006b48 <chEvtGetAndClearEvents.constprop.59+0x18>)
  currp->p_epending &= ~events;
 8006b38:	2300      	movs	r3, #0
 */
eventmask_t chEvtGetAndClearEvents(eventmask_t events) {
  eventmask_t m;

  chSysLock();
  m = currp->p_epending & events;
 8006b3a:	6992      	ldr	r2, [r2, #24]
 8006b3c:	6b50      	ldr	r0, [r2, #52]	; 0x34
  currp->p_epending &= ~events;
 8006b3e:	6353      	str	r3, [r2, #52]	; 0x34
 8006b40:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop
 8006b48:	200013f8 	.word	0x200013f8
 8006b4c:	00000000 	.word	0x00000000

08006b50 <chEvtWaitOne.constprop.55>:
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
  thread_t *ctp = currp;
 8006b50:	4a0b      	ldr	r2, [pc, #44]	; (8006b80 <chEvtWaitOne.constprop.55+0x30>)
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
 8006b52:	b510      	push	{r4, lr}
 8006b54:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8006b56:	6994      	ldr	r4, [r2, #24]
 8006b58:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 8006b5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8006b5e:	b933      	cbnz	r3, 8006b6e <chEvtWaitOne.constprop.55+0x1e>
    ctp->p_u.ewmask = events;
 8006b60:	f04f 33ff 	mov.w	r3, #4294967295
 8006b64:	6223      	str	r3, [r4, #32]
    chSchGoSleepS(CH_STATE_WTOREVT);
 8006b66:	200a      	movs	r0, #10
 8006b68:	f7f9 fe62 	bl	8000830 <chSchGoSleepS>
    m = ctp->p_epending & events;
 8006b6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
  }
  m ^= m & (m - (eventmask_t)1);
 8006b6e:	4258      	negs	r0, r3
 8006b70:	4018      	ands	r0, r3
  ctp->p_epending &= ~m;
 8006b72:	ea23 0300 	bic.w	r3, r3, r0
 8006b76:	6363      	str	r3, [r4, #52]	; 0x34
 8006b78:	2300      	movs	r3, #0
 8006b7a:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 8006b7e:	bd10      	pop	{r4, pc}
 8006b80:	200013f8 	.word	0x200013f8
	...

08006b90 <chEvtWaitAny.constprop.54>:
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
  thread_t *ctp = currp;
 8006b90:	4a0b      	ldr	r2, [pc, #44]	; (8006bc0 <chEvtWaitAny.constprop.54+0x30>)
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
 8006b92:	b510      	push	{r4, lr}
 8006b94:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8006b96:	6994      	ldr	r4, [r2, #24]
 8006b98:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 8006b9c:	6b60      	ldr	r0, [r4, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8006b9e:	b930      	cbnz	r0, 8006bae <chEvtWaitAny.constprop.54+0x1e>
    ctp->p_u.ewmask = events;
 8006ba0:	f04f 33ff 	mov.w	r3, #4294967295
    chSchGoSleepS(CH_STATE_WTOREVT);
 8006ba4:	200a      	movs	r0, #10
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
  if (m == (eventmask_t)0) {
    ctp->p_u.ewmask = events;
 8006ba6:	6223      	str	r3, [r4, #32]
    chSchGoSleepS(CH_STATE_WTOREVT);
 8006ba8:	f7f9 fe42 	bl	8000830 <chSchGoSleepS>
    m = ctp->p_epending & events;
 8006bac:	6b60      	ldr	r0, [r4, #52]	; 0x34
  }
  ctp->p_epending &= ~m;
 8006bae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	ea23 0300 	bic.w	r3, r3, r0
 8006bb6:	6363      	str	r3, [r4, #52]	; 0x34
 8006bb8:	f382 8811 	msr	BASEPRI, r2
  chSysUnlock();

  return m;
}
 8006bbc:	bd10      	pop	{r4, pc}
 8006bbe:	bf00      	nop
 8006bc0:	200013f8 	.word	0x200013f8
	...

08006bd0 <chMBPost.constprop.40>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBPost(mailbox_t *mbp, msg_t msg, systime_t timeout) {
 8006bd0:	b570      	push	{r4, r5, r6, lr}
 8006bd2:	2320      	movs	r3, #32
 8006bd4:	4606      	mov	r6, r0
 8006bd6:	f383 8811 	msr	BASEPRI, r3
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
 8006bda:	4c0d      	ldr	r4, [pc, #52]	; (8006c10 <chMBPost.constprop.40+0x40>)
 8006bdc:	f104 001c 	add.w	r0, r4, #28
 8006be0:	f7fa fade 	bl	80011a0 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8006be4:	4605      	mov	r5, r0
 8006be6:	b970      	cbnz	r0, 8006c06 <chMBPost.constprop.40+0x36>
    *mbp->mb_wrptr++ = msg;
 8006be8:	68a2      	ldr	r2, [r4, #8]
    if (mbp->mb_wrptr >= mbp->mb_top) {
 8006bea:	6861      	ldr	r1, [r4, #4]
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8006bec:	1d13      	adds	r3, r2, #4
    if (mbp->mb_wrptr >= mbp->mb_top) {
 8006bee:	428b      	cmp	r3, r1
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8006bf0:	60a3      	str	r3, [r4, #8]
    if (mbp->mb_wrptr >= mbp->mb_top) {
      mbp->mb_wrptr = mbp->mb_buffer;
 8006bf2:	bf28      	it	cs
 8006bf4:	6823      	ldrcs	r3, [r4, #0]
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8006bf6:	6016      	str	r6, [r2, #0]
    if (mbp->mb_wrptr >= mbp->mb_top) {
      mbp->mb_wrptr = mbp->mb_buffer;
    }
    chSemSignalI(&mbp->mb_fullsem);
 8006bf8:	4806      	ldr	r0, [pc, #24]	; (8006c14 <chMBPost.constprop.40+0x44>)

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
    if (mbp->mb_wrptr >= mbp->mb_top) {
      mbp->mb_wrptr = mbp->mb_buffer;
 8006bfa:	bf28      	it	cs
 8006bfc:	60a3      	strcs	r3, [r4, #8]
    }
    chSemSignalI(&mbp->mb_fullsem);
 8006bfe:	f7fa f9b7 	bl	8000f70 <chSemSignalI>
    chSchRescheduleS();
 8006c02:	f7f9 fd5d 	bl	80006c0 <chSchRescheduleS>
 8006c06:	2300      	movs	r3, #0
 8006c08:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  rdymsg = chMBPostS(mbp, msg, timeout);
  chSysUnlock();

  return rdymsg;
}
 8006c0c:	4628      	mov	r0, r5
 8006c0e:	bd70      	pop	{r4, r5, r6, pc}
 8006c10:	200008ac 	.word	0x200008ac
 8006c14:	200008bc 	.word	0x200008bc
	...

08006c20 <chMBPostI.constprop.39>:
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {
 8006c20:	b538      	push	{r3, r4, r5, lr}
 8006c22:	4b0c      	ldr	r3, [pc, #48]	; (8006c54 <chMBPostI.constprop.39+0x34>)
 8006c24:	6a5a      	ldr	r2, [r3, #36]	; 0x24

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
 8006c26:	2a00      	cmp	r2, #0
 8006c28:	dd10      	ble.n	8006c4c <chMBPostI.constprop.39+0x2c>
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 8006c2a:	689c      	ldr	r4, [r3, #8]
  if (mbp->mb_wrptr >= mbp->mb_top) {
 8006c2c:	685d      	ldr	r5, [r3, #4]
  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 8006c2e:	1d21      	adds	r1, r4, #4
 */
static inline void chSemFastWaitI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt--;
 8006c30:	3a01      	subs	r2, #1
  if (mbp->mb_wrptr >= mbp->mb_top) {
 8006c32:	42a9      	cmp	r1, r5
 8006c34:	625a      	str	r2, [r3, #36]	; 0x24
     mbp->mb_wrptr = mbp->mb_buffer;
 8006c36:	bf28      	it	cs
 8006c38:	681a      	ldrcs	r2, [r3, #0]
  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 8006c3a:	6099      	str	r1, [r3, #8]
 8006c3c:	6020      	str	r0, [r4, #0]
  if (mbp->mb_wrptr >= mbp->mb_top) {
     mbp->mb_wrptr = mbp->mb_buffer;
  }
  chSemSignalI(&mbp->mb_fullsem);
 8006c3e:	4806      	ldr	r0, [pc, #24]	; (8006c58 <chMBPostI.constprop.39+0x38>)
  }

  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
  if (mbp->mb_wrptr >= mbp->mb_top) {
     mbp->mb_wrptr = mbp->mb_buffer;
 8006c40:	bf28      	it	cs
 8006c42:	609a      	strcs	r2, [r3, #8]
  }
  chSemSignalI(&mbp->mb_fullsem);
 8006c44:	f7fa f994 	bl	8000f70 <chSemSignalI>

  return MSG_OK;
 8006c48:	2000      	movs	r0, #0
 8006c4a:	bd38      	pop	{r3, r4, r5, pc}

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
 8006c4c:	f04f 30ff 	mov.w	r0, #4294967295
     mbp->mb_wrptr = mbp->mb_buffer;
  }
  chSemSignalI(&mbp->mb_fullsem);

  return MSG_OK;
}
 8006c50:	bd38      	pop	{r3, r4, r5, pc}
 8006c52:	bf00      	nop
 8006c54:	200008ac 	.word	0x200008ac
 8006c58:	200008bc 	.word	0x200008bc
 8006c5c:	00000000 	.word	0x00000000

08006c60 <chMBPostAhead.constprop.38>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBPostAhead(mailbox_t *mbp, msg_t msg, systime_t timeout) {
 8006c60:	b570      	push	{r4, r5, r6, lr}
 8006c62:	2320      	movs	r3, #32
 8006c64:	4606      	mov	r6, r0
 8006c66:	f383 8811 	msr	BASEPRI, r3
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
 8006c6a:	4c0e      	ldr	r4, [pc, #56]	; (8006ca4 <chMBPostAhead.constprop.38+0x44>)
 8006c6c:	f104 001c 	add.w	r0, r4, #28
 8006c70:	f7fa fa96 	bl	80011a0 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8006c74:	4605      	mov	r5, r0
 8006c76:	b958      	cbnz	r0, 8006c90 <chMBPostAhead.constprop.38+0x30>
    if (--mbp->mb_rdptr < mbp->mb_buffer) {
 8006c78:	68e3      	ldr	r3, [r4, #12]
 8006c7a:	6822      	ldr	r2, [r4, #0]
 8006c7c:	3b04      	subs	r3, #4
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	60e3      	str	r3, [r4, #12]
 8006c82:	d30a      	bcc.n	8006c9a <chMBPostAhead.constprop.38+0x3a>
      mbp->mb_rdptr = mbp->mb_top - 1;
    }
    *mbp->mb_rdptr = msg;
 8006c84:	601e      	str	r6, [r3, #0]
    chSemSignalI(&mbp->mb_fullsem);
 8006c86:	4808      	ldr	r0, [pc, #32]	; (8006ca8 <chMBPostAhead.constprop.38+0x48>)
 8006c88:	f7fa f972 	bl	8000f70 <chSemSignalI>
    chSchRescheduleS();
 8006c8c:	f7f9 fd18 	bl	80006c0 <chSchRescheduleS>
 8006c90:	2300      	movs	r3, #0
 8006c92:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  rdymsg = chMBPostAheadS(mbp, msg, timeout);
  chSysUnlock();

  return rdymsg;
}
 8006c96:	4628      	mov	r0, r5
 8006c98:	bd70      	pop	{r4, r5, r6, pc}
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
    if (--mbp->mb_rdptr < mbp->mb_buffer) {
      mbp->mb_rdptr = mbp->mb_top - 1;
 8006c9a:	6863      	ldr	r3, [r4, #4]
 8006c9c:	3b04      	subs	r3, #4
 8006c9e:	60e3      	str	r3, [r4, #12]
 8006ca0:	e7f0      	b.n	8006c84 <chMBPostAhead.constprop.38+0x24>
 8006ca2:	bf00      	nop
 8006ca4:	200008ac 	.word	0x200008ac
 8006ca8:	200008bc 	.word	0x200008bc
 8006cac:	00000000 	.word	0x00000000

08006cb0 <chMBPostAheadI.constprop.37>:
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 8006cb0:	4a0c      	ldr	r2, [pc, #48]	; (8006ce4 <chMBPostAheadI.constprop.37+0x34>)
 8006cb2:	6a51      	ldr	r1, [r2, #36]	; 0x24

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
 8006cb4:	2900      	cmp	r1, #0
 8006cb6:	dd11      	ble.n	8006cdc <chMBPostAheadI.constprop.37+0x2c>
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_emptysem);
  if (--mbp->mb_rdptr < mbp->mb_buffer) {
 8006cb8:	68d3      	ldr	r3, [r2, #12]
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 8006cba:	b510      	push	{r4, lr}

  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_emptysem);
  if (--mbp->mb_rdptr < mbp->mb_buffer) {
 8006cbc:	6814      	ldr	r4, [r2, #0]
 8006cbe:	3b04      	subs	r3, #4
 8006cc0:	3901      	subs	r1, #1
 8006cc2:	42a3      	cmp	r3, r4
 8006cc4:	6251      	str	r1, [r2, #36]	; 0x24
 8006cc6:	60d3      	str	r3, [r2, #12]
 8006cc8:	d202      	bcs.n	8006cd0 <chMBPostAheadI.constprop.37+0x20>
    mbp->mb_rdptr = mbp->mb_top - 1;
 8006cca:	6853      	ldr	r3, [r2, #4]
 8006ccc:	3b04      	subs	r3, #4
 8006cce:	60d3      	str	r3, [r2, #12]
  }
  *mbp->mb_rdptr = msg;
 8006cd0:	6018      	str	r0, [r3, #0]
  chSemSignalI(&mbp->mb_fullsem);
 8006cd2:	4805      	ldr	r0, [pc, #20]	; (8006ce8 <chMBPostAheadI.constprop.37+0x38>)
 8006cd4:	f7fa f94c 	bl	8000f70 <chSemSignalI>

  return MSG_OK;
 8006cd8:	2000      	movs	r0, #0
 8006cda:	bd10      	pop	{r4, pc}

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
 8006cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	200008ac 	.word	0x200008ac
 8006ce8:	200008bc 	.word	0x200008bc
 8006cec:	00000000 	.word	0x00000000

08006cf0 <chMBFetch.constprop.36>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBFetch(mailbox_t *mbp, msg_t *msgp, systime_t timeout) {
 8006cf0:	b570      	push	{r4, r5, r6, lr}
 8006cf2:	2320      	movs	r3, #32
 8006cf4:	4606      	mov	r6, r0
 8006cf6:	f383 8811 	msr	BASEPRI, r3
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, timeout);
 8006cfa:	4c0e      	ldr	r4, [pc, #56]	; (8006d34 <chMBFetch.constprop.36+0x44>)
 8006cfc:	f104 0010 	add.w	r0, r4, #16
 8006d00:	f7fa fa4e 	bl	80011a0 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8006d04:	4605      	mov	r5, r0
 8006d06:	b978      	cbnz	r0, 8006d28 <chMBFetch.constprop.36+0x38>
    *msgp = *mbp->mb_rdptr++;
 8006d08:	68e3      	ldr	r3, [r4, #12]
    if (mbp->mb_rdptr >= mbp->mb_top) {
 8006d0a:	6862      	ldr	r2, [r4, #4]
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, timeout);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
 8006d0c:	6819      	ldr	r1, [r3, #0]
 8006d0e:	3304      	adds	r3, #4
    if (mbp->mb_rdptr >= mbp->mb_top) {
 8006d10:	4293      	cmp	r3, r2
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, timeout);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
 8006d12:	60e3      	str	r3, [r4, #12]
    if (mbp->mb_rdptr >= mbp->mb_top) {
      mbp->mb_rdptr = mbp->mb_buffer;
 8006d14:	bf28      	it	cs
 8006d16:	6823      	ldrcs	r3, [r4, #0]
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, timeout);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
 8006d18:	6031      	str	r1, [r6, #0]
    if (mbp->mb_rdptr >= mbp->mb_top) {
      mbp->mb_rdptr = mbp->mb_buffer;
    }
    chSemSignalI(&mbp->mb_emptysem);
 8006d1a:	4807      	ldr	r0, [pc, #28]	; (8006d38 <chMBFetch.constprop.36+0x48>)

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, timeout);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
    if (mbp->mb_rdptr >= mbp->mb_top) {
      mbp->mb_rdptr = mbp->mb_buffer;
 8006d1c:	bf28      	it	cs
 8006d1e:	60e3      	strcs	r3, [r4, #12]
    }
    chSemSignalI(&mbp->mb_emptysem);
 8006d20:	f7fa f926 	bl	8000f70 <chSemSignalI>
    chSchRescheduleS();
 8006d24:	f7f9 fccc 	bl	80006c0 <chSchRescheduleS>
 8006d28:	2300      	movs	r3, #0
 8006d2a:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  rdymsg = chMBFetchS(mbp, msgp, timeout);
  chSysUnlock();

  return rdymsg;
}
 8006d2e:	4628      	mov	r0, r5
 8006d30:	bd70      	pop	{r4, r5, r6, pc}
 8006d32:	bf00      	nop
 8006d34:	200008ac 	.word	0x200008ac
 8006d38:	200008c8 	.word	0x200008c8
 8006d3c:	00000000 	.word	0x00000000

08006d40 <chMBFetchI.constprop.35>:
 * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 *                      fetched.
 *
 * @iclass
 */
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 8006d40:	4b0c      	ldr	r3, [pc, #48]	; (8006d74 <chMBFetchI.constprop.35+0x34>)
 8006d42:	699a      	ldr	r2, [r3, #24]

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
 8006d44:	2a00      	cmp	r2, #0
 8006d46:	dd12      	ble.n	8006d6e <chMBFetchI.constprop.35+0x2e>
 8006d48:	1e51      	subs	r1, r2, #1
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 8006d4a:	68da      	ldr	r2, [r3, #12]
 * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 *                      fetched.
 *
 * @iclass
 */
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 8006d4c:	b510      	push	{r4, lr}
 8006d4e:	6199      	str	r1, [r3, #24]
  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
  if (mbp->mb_rdptr >= mbp->mb_top) {
 8006d50:	6859      	ldr	r1, [r3, #4]

  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 8006d52:	6814      	ldr	r4, [r2, #0]
 8006d54:	3204      	adds	r2, #4
  if (mbp->mb_rdptr >= mbp->mb_top) {
 8006d56:	428a      	cmp	r2, r1

  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 8006d58:	60da      	str	r2, [r3, #12]
  if (mbp->mb_rdptr >= mbp->mb_top) {
    mbp->mb_rdptr = mbp->mb_buffer;
 8006d5a:	bf28      	it	cs
 8006d5c:	681a      	ldrcs	r2, [r3, #0]

  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 8006d5e:	6004      	str	r4, [r0, #0]
  if (mbp->mb_rdptr >= mbp->mb_top) {
    mbp->mb_rdptr = mbp->mb_buffer;
  }
  chSemSignalI(&mbp->mb_emptysem);
 8006d60:	4805      	ldr	r0, [pc, #20]	; (8006d78 <chMBFetchI.constprop.35+0x38>)
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
  if (mbp->mb_rdptr >= mbp->mb_top) {
    mbp->mb_rdptr = mbp->mb_buffer;
 8006d62:	bf28      	it	cs
 8006d64:	60da      	strcs	r2, [r3, #12]
  }
  chSemSignalI(&mbp->mb_emptysem);
 8006d66:	f7fa f903 	bl	8000f70 <chSemSignalI>

  return MSG_OK;
 8006d6a:	2000      	movs	r0, #0
 8006d6c:	bd10      	pop	{r4, pc}

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
 8006d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d72:	4770      	bx	lr
 8006d74:	200008ac 	.word	0x200008ac
 8006d78:	200008c8 	.word	0x200008c8
 8006d7c:	00000000 	.word	0x00000000

08006d80 <sdObjectInit.constprop.30>:
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
 8006d80:	4b17      	ldr	r3, [pc, #92]	; (8006de0 <sdObjectInit.constprop.30+0x60>)
 *                      some data is written in the Queue. The value can be
 *                      @p NULL.
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8006d82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  sdp->vmt = &vmt;
 8006d86:	4618      	mov	r0, r3
 8006d88:	4a16      	ldr	r2, [pc, #88]	; (8006de4 <sdObjectInit.constprop.30+0x64>)
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 8006d8a:	4f17      	ldr	r7, [pc, #92]	; (8006de8 <sdObjectInit.constprop.30+0x68>)
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 8006d8c:	f103 0154 	add.w	r1, r3, #84	; 0x54
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8006d90:	2600      	movs	r6, #0
 8006d92:	f840 2b04 	str.w	r2, [r0], #4
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8006d96:	f103 050c 	add.w	r5, r3, #12
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 8006d9a:	f503 72c0 	add.w	r2, r3, #384	; 0x180
 8006d9e:	f103 0430 	add.w	r4, r3, #48	; 0x30
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 8006da2:	f04f 0801 	mov.w	r8, #1
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8006da6:	f44f 7c96 	mov.w	ip, #300	; 0x12c
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8006daa:	f503 7e2b 	add.w	lr, r3, #684	; 0x2ac
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8006dae:	615e      	str	r6, [r3, #20]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
  iqp->q_link    = link;
 8006db0:	62db      	str	r3, [r3, #44]	; 0x2c
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
 8006db2:	651b      	str	r3, [r3, #80]	; 0x50
 8006db4:	f883 8008 	strb.w	r8, [r3, #8]
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 8006db8:	629e      	str	r6, [r3, #40]	; 0x28
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8006dba:	f8c3 c038 	str.w	ip, [r3, #56]	; 0x38
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8006dbe:	f8c3 e040 	str.w	lr, [r3, #64]	; 0x40
  oqp->q_notify  = onfy;
 8006dc2:	64df      	str	r7, [r3, #76]	; 0x4c
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 8006dc4:	6058      	str	r0, [r3, #4]
 8006dc6:	60dd      	str	r5, [r3, #12]
  tqp->p_prev = (thread_t *)tqp;
 8006dc8:	611d      	str	r5, [r3, #16]
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 8006dca:	6199      	str	r1, [r3, #24]
  iqp->q_rdptr   = bp;
 8006dcc:	6259      	str	r1, [r3, #36]	; 0x24
  iqp->q_wrptr   = bp;
 8006dce:	6219      	str	r1, [r3, #32]
  iqp->q_top     = bp + size;
 8006dd0:	61da      	str	r2, [r3, #28]
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
 8006dd2:	63da      	str	r2, [r3, #60]	; 0x3c
  oqp->q_rdptr   = bp;
 8006dd4:	649a      	str	r2, [r3, #72]	; 0x48
  oqp->q_wrptr   = bp;
 8006dd6:	645a      	str	r2, [r3, #68]	; 0x44
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8006dd8:	631c      	str	r4, [r3, #48]	; 0x30
  tqp->p_prev = (thread_t *)tqp;
 8006dda:	635c      	str	r4, [r3, #52]	; 0x34
 8006ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006de0:	20001560 	.word	0x20001560
 8006de4:	080081a0 	.word	0x080081a0
 8006de8:	08002391 	.word	0x08002391
 8006dec:	00000000 	.word	0x00000000

08006df0 <test_start_timer.constprop.6>:
/**
 * @brief   Starts the test timer.
 *
 * @param[in] ms        time in milliseconds
 */
void test_start_timer(unsigned ms) {
 8006df0:	b508      	push	{r3, lr}

  systime_t duration = MS2ST(ms);
  test_timer_done = FALSE;
 8006df2:	4b0b      	ldr	r3, [pc, #44]	; (8006e20 <test_start_timer.constprop.6+0x30>)
 8006df4:	2200      	movs	r2, #0
 8006df6:	701a      	strb	r2, [r3, #0]
 8006df8:	2320      	movs	r3, #32
 8006dfa:	f383 8811 	msr	BASEPRI, r3
 8006dfe:	4809      	ldr	r0, [pc, #36]	; (8006e24 <test_start_timer.constprop.6+0x34>)
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 8006e00:	68c3      	ldr	r3, [r0, #12]
 8006e02:	b10b      	cbz	r3, 8006e08 <test_start_timer.constprop.6+0x18>
    chVTDoResetI(vtp);
 8006e04:	f7fa f924 	bl	8001050 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, systime_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 8006e08:	4806      	ldr	r0, [pc, #24]	; (8006e24 <test_start_timer.constprop.6+0x34>)
 8006e0a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006e0e:	4a06      	ldr	r2, [pc, #24]	; (8006e28 <test_start_timer.constprop.6+0x38>)
 8006e10:	2300      	movs	r3, #0
 8006e12:	f7fa f95d 	bl	80010d0 <chVTDoSetI>
 8006e16:	2300      	movs	r3, #0
 8006e18:	f383 8811 	msr	BASEPRI, r3
 8006e1c:	bd08      	pop	{r3, pc}
 8006e1e:	bf00      	nop
 8006e20:	20001548 	.word	0x20001548
 8006e24:	2000154c 	.word	0x2000154c
 8006e28:	08002381 	.word	0x08002381
 8006e2c:	00000000 	.word	0x00000000

08006e30 <long_to_string_with_divisor.constprop.4>:
#include "memstreams.h"

#define MAX_FILLER 11
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
 8006e30:	b4f0      	push	{r4, r5, r6, r7}
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 8006e32:	f100 070b 	add.w	r7, r0, #11
 8006e36:	463c      	mov	r4, r7
 8006e38:	460d      	mov	r5, r1
  do {
    i = (int)(l % radix);
 8006e3a:	fbb1 f6f2 	udiv	r6, r1, r2
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    l /= radix;
  } while ((ll /= radix) != 0);
 8006e3e:	fbb5 f5f2 	udiv	r5, r5, r2
    ll = divisor;
  }

  q = p + MAX_FILLER;
  do {
    i = (int)(l % radix);
 8006e42:	fb02 1116 	mls	r1, r2, r6, r1
    i += '0';
 8006e46:	f101 0330 	add.w	r3, r1, #48	; 0x30
    if (i > '9')
 8006e4a:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
 8006e4c:	bfc8      	it	gt
 8006e4e:	f101 0337 	addgt.w	r3, r1, #55	; 0x37
    *--q = i;
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	f804 3d01 	strb.w	r3, [r4, #-1]!
    l /= radix;
 8006e58:	4631      	mov	r1, r6
  } while ((ll /= radix) != 0);
 8006e5a:	2d00      	cmp	r5, #0
 8006e5c:	d1ed      	bne.n	8006e3a <long_to_string_with_divisor.constprop.4+0xa>

  i = (int)(p + MAX_FILLER - q);
 8006e5e:	1b3a      	subs	r2, r7, r4
 8006e60:	4402      	add	r2, r0
 8006e62:	e001      	b.n	8006e68 <long_to_string_with_divisor.constprop.4+0x38>
 8006e64:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  do
    *p++ = *q++;
 8006e68:	f800 3b01 	strb.w	r3, [r0], #1
  while (--i);
 8006e6c:	4290      	cmp	r0, r2
 8006e6e:	d1f9      	bne.n	8006e64 <long_to_string_with_divisor.constprop.4+0x34>

  return p;
}
 8006e70:	bcf0      	pop	{r4, r5, r6, r7}
 8006e72:	4770      	bx	lr
	...

08006e80 <_strtok.constprop.3>:
/**
 * @brief   Shell termination event source.
 */
event_source_t shell_terminated;

static char *_strtok(char *str, const char *delim, char **saveptr) {
 8006e80:	b538      	push	{r3, r4, r5, lr}
 8006e82:	460d      	mov	r5, r1
  char *token;
  if (str)
 8006e84:	4604      	mov	r4, r0
 8006e86:	b190      	cbz	r0, 8006eae <_strtok.constprop.3+0x2e>
    *saveptr = str;
 8006e88:	6028      	str	r0, [r5, #0]
  token = *saveptr;

  if (!token)
    return NULL;

  token += strspn(token, delim);
 8006e8a:	4620      	mov	r0, r4
 8006e8c:	490b      	ldr	r1, [pc, #44]	; (8006ebc <_strtok.constprop.3+0x3c>)
 8006e8e:	f000 f83f 	bl	8006f10 <strspn>
 8006e92:	4404      	add	r4, r0
  *saveptr = strpbrk(token, delim);
 8006e94:	4620      	mov	r0, r4
 8006e96:	4909      	ldr	r1, [pc, #36]	; (8006ebc <_strtok.constprop.3+0x3c>)
 8006e98:	f000 f812 	bl	8006ec0 <strpbrk>
  if (*saveptr)
 8006e9c:	b160      	cbz	r0, 8006eb8 <_strtok.constprop.3+0x38>
    *(*saveptr)++ = '\0';
 8006e9e:	1c42      	adds	r2, r0, #1
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	602a      	str	r2, [r5, #0]
 8006ea4:	7003      	strb	r3, [r0, #0]

  return *token ? token : NULL;
 8006ea6:	7823      	ldrb	r3, [r4, #0]
 8006ea8:	b123      	cbz	r3, 8006eb4 <_strtok.constprop.3+0x34>
 8006eaa:	4620      	mov	r0, r4
}
 8006eac:	bd38      	pop	{r3, r4, r5, pc}

static char *_strtok(char *str, const char *delim, char **saveptr) {
  char *token;
  if (str)
    *saveptr = str;
  token = *saveptr;
 8006eae:	680c      	ldr	r4, [r1, #0]

  if (!token)
 8006eb0:	2c00      	cmp	r4, #0
 8006eb2:	d1ea      	bne.n	8006e8a <_strtok.constprop.3+0xa>
    return NULL;
 8006eb4:	2000      	movs	r0, #0
 8006eb6:	bd38      	pop	{r3, r4, r5, pc}

  token += strspn(token, delim);
  *saveptr = strpbrk(token, delim);
 8006eb8:	6028      	str	r0, [r5, #0]
 8006eba:	e7f4      	b.n	8006ea6 <_strtok.constprop.3+0x26>
 8006ebc:	080080d4 	.word	0x080080d4

08006ec0 <strpbrk>:
 8006ec0:	b430      	push	{r4, r5}
 8006ec2:	7804      	ldrb	r4, [r0, #0]
 8006ec4:	b1ec      	cbz	r4, 8006f02 <strpbrk+0x42>
 8006ec6:	780d      	ldrb	r5, [r1, #0]
 8006ec8:	b1ad      	cbz	r5, 8006ef6 <strpbrk+0x36>
 8006eca:	42ac      	cmp	r4, r5
 8006ecc:	d00e      	beq.n	8006eec <strpbrk+0x2c>
 8006ece:	460a      	mov	r2, r1
 8006ed0:	e001      	b.n	8006ed6 <strpbrk+0x16>
 8006ed2:	429c      	cmp	r4, r3
 8006ed4:	d009      	beq.n	8006eea <strpbrk+0x2a>
 8006ed6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1f9      	bne.n	8006ed2 <strpbrk+0x12>
 8006ede:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8006ee2:	2c00      	cmp	r4, #0
 8006ee4:	d1f0      	bne.n	8006ec8 <strpbrk+0x8>
 8006ee6:	7815      	ldrb	r5, [r2, #0]
 8006ee8:	e000      	b.n	8006eec <strpbrk+0x2c>
 8006eea:	4625      	mov	r5, r4
 8006eec:	2d00      	cmp	r5, #0
 8006eee:	bf08      	it	eq
 8006ef0:	2000      	moveq	r0, #0
 8006ef2:	bc30      	pop	{r4, r5}
 8006ef4:	4770      	bx	lr
 8006ef6:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8006efa:	460a      	mov	r2, r1
 8006efc:	2c00      	cmp	r4, #0
 8006efe:	d1e3      	bne.n	8006ec8 <strpbrk+0x8>
 8006f00:	e7f1      	b.n	8006ee6 <strpbrk+0x26>
 8006f02:	4620      	mov	r0, r4
 8006f04:	bc30      	pop	{r4, r5}
 8006f06:	4770      	bx	lr
	...

08006f10 <strspn>:
 8006f10:	b470      	push	{r4, r5, r6}
 8006f12:	7804      	ldrb	r4, [r0, #0]
 8006f14:	b1a4      	cbz	r4, 8006f40 <strspn+0x30>
 8006f16:	4605      	mov	r5, r0
 8006f18:	780e      	ldrb	r6, [r1, #0]
 8006f1a:	b14e      	cbz	r6, 8006f30 <strspn+0x20>
 8006f1c:	42b4      	cmp	r4, r6
 8006f1e:	d00a      	beq.n	8006f36 <strspn+0x26>
 8006f20:	460a      	mov	r2, r1
 8006f22:	e001      	b.n	8006f28 <strspn+0x18>
 8006f24:	429c      	cmp	r4, r3
 8006f26:	d006      	beq.n	8006f36 <strspn+0x26>
 8006f28:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1f9      	bne.n	8006f24 <strspn+0x14>
 8006f30:	1a28      	subs	r0, r5, r0
 8006f32:	bc70      	pop	{r4, r5, r6}
 8006f34:	4770      	bx	lr
 8006f36:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8006f3a:	2c00      	cmp	r4, #0
 8006f3c:	d1ed      	bne.n	8006f1a <strspn+0xa>
 8006f3e:	e7f7      	b.n	8006f30 <strspn+0x20>
 8006f40:	4620      	mov	r0, r4
 8006f42:	e7f6      	b.n	8006f32 <strspn+0x22>
	...

08006f50 <ram_areas>:
 8006f50:	829c 0800 187c 2000 187c 2000 187c 2000     ....|.. |.. |.. 
 8006f60:	829c 0800 0000 0000 0000 0000 0000 0000     ................
 8006f70:	829c 0800 0000 0000 0000 0000 0000 0000     ................
 8006f80:	829c 0800 0000 0000 0000 0000 0000 0000     ................
 8006f90:	829c 0800 0000 0000 0000 0000 0000 0000     ................
 8006fa0:	829c 0800 0000 0000 0000 0000 0000 0000     ................
 8006fb0:	829c 0800 0000 0000 0000 0000 0000 0000     ................
 8006fc0:	829c 0800 0000 0000 0000 0000 0000 0000     ................
 8006fd0:	0042 0000 0041 0000 0043 0000 4241 4443     B...A...C...ABCD
 8006fe0:	0045 0000 0000 0000 0000 0000 0000 0000     E...............

08006ff0 <testmtx4>:
 8006ff0:	793c 0800 15b1 0800 0000 0000 1611 0800     <y..............

08007000 <testmtx5>:
 8007000:	792c 0800 15a1 0800 0000 0000 3ad1 0800     ,y...........:..

08007010 <testmtx6>:
 8007010:	7914 0800 30a1 0800 0000 0000 39f1 0800     .y...0.......9..

08007020 <testmtx7>:
 8007020:	78fc 0800 3081 0800 0000 0000 3901 0800     .x...0.......9..

08007030 <testmtx8>:
 8007030:	78e8 0800 3051 0800 0000 0000 3751 0800     .x..Q0......Q7..

08007040 <patternmsg>:
 8007040:	72a0 0800 0000 0000 0000 0000 0000 0000     .r..............

08007050 <testbmk11>:
 8007050:	7608 0800 3be1 0800 0000 0000 3d91 0800     .v...;.......=..

08007060 <testbmk13>:
 8007060:	75cc 0800 0000 0000 0000 0000 3c31 0800     .u..........1<..

08007070 <testevt2>:
 8007070:	7878 0800 61b1 0800 0000 0000 61d1 0800     xx...a.......a..

08007080 <patterndyn>:
 8007080:	7250 0800 7260 0800 7270 0800 0000 0000     Pr..`r..pr......

08007090 <testsys1>:
 8007090:	7a80 0800 0000 0000 0000 0000 4611 0800     .z...........F..

080070a0 <testsem1>:
 80070a0:	79d4 0800 1601 0800 0000 0000 1ea1 0800     .y..............

080070b0 <testsem2>:
 80070b0:	79c0 0800 15f1 0800 0000 0000 1d21 0800     .y..........!...

080070c0 <testsem3>:
 80070c0:	79a0 0800 15e1 0800 0000 0000 1c71 0800     .y..........q...

080070d0 <testsem4>:
 80070d0:	797c 0800 0000 0000 0000 0000 1b11 0800     |y..............

080070e0 <testsys2>:
 80070e0:	7a64 0800 0000 0000 0000 0000 3c11 0800     dz...........<..

080070f0 <testsys3>:
 80070f0:	7a50 0800 0000 0000 0000 0000 4581 0800     Pz...........E..

08007100 <testbmk10>:
 8007100:	762c 0800 0000 0000 0000 0000 3e31 0800     ,v..........1>..

08007110 <testbmk7>:
 8007110:	76a0 0800 3c01 0800 0000 0000 40e1 0800     .v...<.......@..

08007120 <testbmk12>:
 8007120:	75e8 0800 3bd1 0800 0000 0000 3d21 0800     .u...;......!=..

08007130 <testbmk8>:
 8007130:	7674 0800 0000 0000 0000 0000 3f61 0800     tv..........a?..

08007140 <testbmk1>:
 8007140:	7754 0800 0000 0000 0000 0000 4511 0800     Tw...........E..

08007150 <testbmk2>:
 8007150:	773c 0800 0000 0000 0000 0000 44a1 0800     <w...........D..

08007160 <testbmk3>:
 8007160:	7724 0800 0000 0000 0000 0000 43c1 0800     $w...........C..

08007170 <testbmk4>:
 8007170:	7708 0800 0000 0000 0000 0000 4281 0800     .w...........B..

08007180 <testbmk5>:
 8007180:	76e8 0800 0000 0000 0000 0000 4211 0800     .v...........B..

08007190 <testbmk6>:
 8007190:	76c8 0800 0000 0000 0000 0000 4041 0800     .v..........A@..

080071a0 <patternsys>:
 80071a0:	7090 0800 70e0 0800 70f0 0800 0000 0000     .p...p...p......

080071b0 <testpools1>:
 80071b0:	7820 0800 5da1 0800 0000 0000 5ae1 0800      x...].......Z..

080071c0 <testbmk9>:
 80071c0:	7650 0800 0000 0000 0000 0000 3eb1 0800     Pv...........>..

080071d0 <patternbmk>:
 80071d0:	7140 0800 7150 0800 7160 0800 7170 0800     @q..Pq..`q..pq..
 80071e0:	7180 0800 7190 0800 7110 0800 7130 0800     .q...q...q..0q..
 80071f0:	71c0 0800 7100 0800 7050 0800 7120 0800     .q...q..Pp.. q..
 8007200:	7060 0800 0000 0000 0000 0000 0000 0000     `p..............

08007210 <patterns>:
 8007210:	71a0 0800 72b0 0800 7340 0800 73b0 0800     .q...r..@s...s..
 8007220:	7040 0800 72f0 0800 7370 0800 7290 0800     @p...r..ps...r..
 8007230:	7ab0 0800 7080 0800 7360 0800 71d0 0800     .z...p..`s...q..
	...

08007250 <testdyn1>:
 8007250:	77f4 0800 5441 0800 0000 0000 5ca1 0800     .w..AT.......\..

08007260 <testdyn2>:
 8007260:	77c4 0800 5421 0800 0000 0000 5bb1 0800     .w..!T.......[..

08007270 <testdyn3>:
 8007270:	779c 0800 53f1 0800 0000 0000 59a1 0800     .w...S.......Y..

08007280 <testmbox1>:
 8007280:	78b8 0800 3011 0800 0000 0000 30c1 0800     .x...0.......0..

08007290 <patternheap>:
 8007290:	7390 0800 0000 0000 0000 0000 0000 0000     .s..............

080072a0 <testmsg1>:
 80072a0:	78d8 0800 0000 0000 0000 0000 36b1 0800     .x...........6..

080072b0 <patternthd>:
 80072b0:	7300 0800 7310 0800 7320 0800 7330 0800     .s...s.. s..0s..
	...

080072d0 <testqueues1>:
 80072d0:	7784 0800 53c1 0800 0000 0000 56f1 0800     .w...S.......V..

080072e0 <testqueues2>:
 80072e0:	776c 0800 5391 0800 0000 0000 5491 0800     lw...S.......T..

080072f0 <patternmbox>:
 80072f0:	7280 0800 0000 0000 0000 0000 0000 0000     .r..............

08007300 <testthd1>:
 8007300:	7a34 0800 0000 0000 0000 0000 1991 0800     4z..............

08007310 <testthd2>:
 8007310:	7a18 0800 0000 0000 0000 0000 2011 0800     .z........... ..

08007320 <testthd3>:
 8007320:	79fc 0800 0000 0000 0000 0000 2221 0800     .y..........!"..

08007330 <testthd4>:
 8007330:	79ec 0800 0000 0000 0000 0000 2161 0800     .y..........a!..

08007340 <patternsem>:
 8007340:	70a0 0800 70b0 0800 70c0 0800 70d0 0800     .p...p...p...p..
	...

08007360 <patternqueues>:
 8007360:	72d0 0800 72e0 0800 0000 0000 0000 0000     .r...r..........

08007370 <patternevt>:
 8007370:	7380 0800 7070 0800 73a0 0800 0000 0000     .s..pp...s......

08007380 <testevt1>:
 8007380:	7894 0800 61c1 0800 0000 0000 6531 0800     .x...a......1e..

08007390 <testheap1>:
 8007390:	783c 0800 5dd1 0800 0000 0000 5e01 0800     <x...].......^..

080073a0 <testevt3>:
 80073a0:	7864 0800 61a1 0800 0000 0000 6041 0800     dx...a......A`..

080073b0 <patternmtx>:
 80073b0:	7aa0 0800 6ff0 0800 7000 0800 7010 0800     .z...o...p...p..
 80073c0:	7020 0800 7030 0800 0000 0000 0000 0000      p..0p..........
 80073d0:	2a2a 202a 654b 6e72 6c65 203a 2020 2020     *** Kernel:     
 80073e0:	2020 0000 2a2a 202a 6f43 706d 6c69 6465       ..*** Compiled
 80073f0:	203a 2020 2020 0000 2a2a 202a 6f43 706d     :     ..*** Comp
 8007400:	6c69 7265 203a 2020 2020 0000 2a2a 202a     iler:     ..*** 
 8007410:	7241 6863 7469 6365 7574 6572 203a 0000     Architecture: ..
 8007420:	2a2a 202a 6f43 6572 5620 7261 6169 746e     *** Core Variant
 8007430:	203a 0000 2a2a 202a 6f50 7472 4920 666e     : ..*** Port Inf
 8007440:	3a6f 2020 2020 0000 2a2a 202a 6c50 7461     o:    ..*** Plat
 8007450:	6f66 6d72 203a 2020 2020 0000 2a2a 202a     form:     ..*** 
 8007460:	6554 7473 4220 616f 6472 203a 2020 0000     Test Board:   ..
 8007470:	2d2d 202d 6554 7473 4320 7361 2065 0000     --- Test Case ..
 8007480:	2820 0000 2d2d 202d 6552 7573 746c 203a      (..--- Result: 
 8007490:	4146 4c49 5255 2045 2328 0000 5b20 0000     FAILURE (#.. [..
 80074a0:	6946 616e 206c 6572 7573 746c 203a 0000     Final result: ..
 80074b0:	2a2a 202a 6843 6269 4f69 2f53 5452 7420     *** ChibiOS/RT t
 80074c0:	7365 2074 7573 7469 0065 0000 2a2a 002a     est suite...***.
 80074d0:	0029 0000 295d 0000 2d2d 202d 6552 7573     )...])..--- Resu
 80074e0:	746c 203a 5553 4343 5345 0053 4146 4c49     lt: SUCCESS.FAIL
 80074f0:	5255 0045 2e33 2e31 0033 0000 754a 206c     URE.3.1.3...Jul 
 8007500:	3420 3220 3130 2036 202d 3731 303a 3a32      4 2016 - 17:02:
 8007510:	3530 0000 4347 2043 2e34 2e39 2033 3032     05..GCC 4.9.3 20
 8007520:	3531 3530 3932 2820 6572 656c 7361 2965     150529 (release)
 8007530:	5b20 5241 2f4d 6d65 6562 6464 6465 342d      [ARM/embedded-4
 8007540:	395f 622d 6172 636e 2068 6572 6976 6973     _9-branch revisi
 8007550:	6e6f 3220 3732 3739 5d37 0000 5241 764d     on 227977]..ARMv
 8007560:	2d37 004d 6f43 7472 7865 4d2d 0033 0000     7-M.Cortex-M3...
 8007570:	6441 6176 636e 6465 6b20 7265 656e 206c     Advanced kernel 
 8007580:	6f6d 6564 0000 0000 5453 334d 4632 3031     mode....STM32F10
 8007590:	2078 6550 6672 726f 616d 636e 2065 694c     x Performance Li
 80075a0:	656e 4d20 6465 7569 206d 6544 736e 7469     ne Medium Densit
 80075b0:	0079 0000 6843 7261 6567 6f43 746e 6f72     y...ChargeContro
 80075c0:	6c6c 7265 6f4d 7564 656c 0000 6542 636e     llerModule..Benc
 80075d0:	6d68 7261 2c6b 5220 4d41 6620 6f6f 7074     hmark, RAM footp
 80075e0:	6972 746e 0000 0000 6542 636e 6d68 7261     rint....Benchmar
 80075f0:	2c6b 6d20 7475 7865 7365 6c20 636f 2f6b     k, mutexes lock/
 8007600:	6e75 6f6c 6b63 0000 6542 636e 6d68 7261     unlock..Benchmar
 8007610:	2c6b 7320 6d65 7061 6f68 6572 2073 6177     k, semaphores wa
 8007620:	7469 732f 6769 616e 006c 0000 6542 636e     it/signal...Benc
 8007630:	6d68 7261 2c6b 7620 7269 7574 6c61 7420     hmark, virtual t
 8007640:	6d69 7265 2073 6573 2f74 6572 6573 0074     imers set/reset.
 8007650:	6542 636e 6d68 7261 2c6b 4920 4f2f 5120     Benchmark, I/O Q
 8007660:	6575 6575 2073 6874 6f72 6775 7068 7475     ueues throughput
 8007670:	0000 0000 6542 636e 6d68 7261 2c6b 7220     ....Benchmark, r
 8007680:	756f 646e 7220 626f 6e69 6320 6e6f 6574     ound robin conte
 8007690:	7478 7320 6977 6374 6968 676e 0000 0000     xt switching....
 80076a0:	6542 636e 6d68 7261 2c6b 6d20 7361 2073     Benchmark, mass 
 80076b0:	6572 6373 6568 7564 656c 202c 2035 6874     reschedule, 5 th
 80076c0:	6572 6461 0073 0000 6542 636e 6d68 7261     reads...Benchmar
 80076d0:	2c6b 7420 7268 6165 7364 202c 7263 6165     k, threads, crea
 80076e0:	6574 6f20 6c6e 0079 6542 636e 6d68 7261     te only.Benchmar
 80076f0:	2c6b 7420 7268 6165 7364 202c 7566 6c6c     k, threads, full
 8007700:	6320 6379 656c 0000 6542 636e 6d68 7261      cycle..Benchmar
 8007710:	2c6b 6320 6e6f 6574 7478 7320 6977 6374     k, context switc
 8007720:	0068 0000 6542 636e 6d68 7261 2c6b 6d20     h...Benchmark, m
 8007730:	7365 6173 6567 2073 3323 0000 6542 636e     essages #3..Benc
 8007740:	6d68 7261 2c6b 6d20 7365 6173 6567 2073     hmark, messages 
 8007750:	3223 0000 6542 636e 6d68 7261 2c6b 6d20     #2..Benchmark, m
 8007760:	7365 6173 6567 2073 3123 0000 7551 7565     essages #1..Queu
 8007770:	7365 202c 756f 7074 7475 7120 6575 6575     es, output queue
 8007780:	0073 0000 7551 7565 7365 202c 6e69 7570     s...Queues, inpu
 8007790:	2074 7571 7565 7365 0000 0000 7944 616e     t queues....Dyna
 80077a0:	696d 2063 5041 7349 202c 6572 6967 7473     mic APIs, regist
 80077b0:	7972 6120 646e 7220 6665 7265 6e65 6563     ry and reference
 80077c0:	0073 0000 7944 616e 696d 2063 5041 7349     s...Dynamic APIs
 80077d0:	202c 6874 6572 6461 2073 7263 6165 6974     , threads creati
 80077e0:	6e6f 6620 6f72 206d 656d 6f6d 7972 7020     on from memory p
 80077f0:	6f6f 006c 7944 616e 696d 2063 5041 7349     ool.Dynamic APIs
 8007800:	202c 6874 6572 6461 2073 7263 6165 6974     , threads creati
 8007810:	6e6f 6620 6f72 206d 6568 7061 0000 0000     on from heap....
 8007820:	654d 6f6d 7972 5020 6f6f 736c 202c 7571     Memory Pools, qu
 8007830:	7565 2f65 6564 7571 7565 0065 6548 7061     eue/dequeue.Heap
 8007840:	202c 6c61 6f6c 6163 6974 6e6f 6120 646e     , allocation and
 8007850:	6620 6172 6d67 6e65 6174 6974 6e6f 7420      fragmentation t
 8007860:	7365 0074 7645 6e65 7374 202c 6974 656d     est.Events, time
 8007870:	756f 7374 0000 0000 7645 6e65 7374 202c     outs....Events, 
 8007880:	6177 7469 6120 646e 6220 6f72 6461 6163     wait and broadca
 8007890:	7473 0000 7645 6e65 7374 202c 6572 6967     st..Events, regi
 80078a0:	7473 6172 6974 6e6f 6120 646e 6420 7369     stration and dis
 80078b0:	6170 6374 0068 0000 614d 6c69 6f62 6578     patch...Mailboxe
 80078c0:	2c73 7120 6575 6975 676e 6120 646e 7420     s, queuing and t
 80078d0:	6d69 6f65 7475 0073 654d 7373 6761 7365     imeouts.Messages
 80078e0:	202c 6f6c 706f 0000 6f43 646e 6156 2c72     , loop..CondVar,
 80078f0:	6220 6f6f 7473 7420 7365 0074 6f43 646e      boost test.Cond
 8007900:	6156 2c72 6220 6f72 6461 6163 7473 7420     Var, broadcast t
 8007910:	7365 0074 6f43 646e 6156 2c72 7320 6769     est.CondVar, sig
 8007920:	616e 206c 6574 7473 0000 0000 754d 6574     nal test....Mute
 8007930:	6578 2c73 7320 6174 7574 0073 754d 6574     xes, status.Mute
 8007940:	6578 2c73 7020 6972 726f 7469 2079 6572     xes, priority re
 8007950:	7574 6e72 0000 0000 754d 6574 6578 2c73     turn....Mutexes,
 8007960:	7020 6972 726f 7469 2079 6e65 7571 7565      priority enqueu
 8007970:	6e69 2067 6574 7473 0000 0000 6942 616e     ing test....Bina
 8007980:	7972 5320 6d65 7061 6f68 6572 2c73 6620     ry Semaphores, f
 8007990:	6e75 7463 6f69 616e 696c 7974 0000 0000     unctionality....
 80079a0:	6553 616d 6870 726f 7365 202c 7461 6d6f     Semaphores, atom
 80079b0:	6369 7320 6769 616e 2d6c 6177 7469 0000     ic signal-wait..
 80079c0:	6553 616d 6870 726f 7365 202c 6974 656d     Semaphores, time
 80079d0:	756f 0074 6553 616d 6870 726f 7365 202c     out.Semaphores, 
 80079e0:	6e65 7571 7565 6e69 0067 0000 6854 6572     enqueuing...Thre
 80079f0:	6461 2c73 6420 6c65 7961 0073 6854 6572     ads, delays.Thre
 8007a00:	6461 2c73 7020 6972 726f 7469 2079 6863     ads, priority ch
 8007a10:	6e61 6567 0000 0000 6854 6572 6461 2c73     ange....Threads,
 8007a20:	6520 716e 6575 6975 676e 7420 7365 2074      enqueuing test 
 8007a30:	3223 0000 6854 6572 6461 2c73 6520 716e     #2..Threads, enq
 8007a40:	6575 6975 676e 7420 7365 2074 3123 0000     ueuing test #1..
 8007a50:	7953 7473 6d65 202c 6e69 6574 7267 7469     System, integrit
 8007a60:	0079 0000 7953 7473 6d65 202c 6e69 6574     y...System, inte
 8007a70:	7272 7075 7374 6820 6e61 6c64 6e69 0067     rrupts handling.
 8007a80:	7953 7473 6d65 202c 7263 7469 6369 6c61     System, critical
 8007a90:	7a20 6e6f 7365 0000 0000 0000 0000 0000      zones..........

08007aa0 <testmtx1>:
 8007aa0:	7958 0800 15d1 0800 0000 0000 18a1 0800     Xy..............

08007ab0 <patternpools>:
 8007ab0:	71b0 0800 0000 0000 0000 0000 0000 0000     .q..............
 8007ac0:	4241 0043 0000 0000 0000 0000 0000 0000     ABC.............

08007ad0 <wa>:
 8007ad0:	0d50 2000 0e98 2000 0fe0 2000 1128 2000     P.. ... ... (.. 
 8007ae0:	1270 2000 0000 0000 0000 0000 0000 0000     p.. ............
 8007af0:	2d2d 202d 7953 7473 6d65 203a 0000 0000     --- System: ....
 8007b00:	6220 7479 7365 0000 2d2d 202d 6854 6572      bytes..--- Thre
 8007b10:	6461 203a 0000 0000 2d2d 202d 6954 656d     ad: ....--- Time
 8007b20:	2072 203a 0000 0000 2d2d 202d 6553 616d     r : ....--- Sema
 8007b30:	6870 203a 0000 0000 2d2d 202d 7645 6e65     ph: ....--- Even
 8007b40:	5374 203a 0000 0000 2d2d 202d 7645 6e65     tS: ....--- Even
 8007b50:	4c74 203a 0000 0000 2d2d 202d 754d 6574     tL: ....--- Mute
 8007b60:	2078 203a 0000 0000 2d2d 202d 6f43 646e     x : ....--- Cond
 8007b70:	2e56 203a 0000 0000 2d2d 202d 7551 7565     V.: ....--- Queu
 8007b80:	2065 203a 0000 0000 2d2d 202d 614d 6c69     e : ....--- Mail
 8007b90:	2e42 203a 0000 0000 2d2d 202d 6353 726f     B.: ....--- Scor
 8007ba0:	2065 203a 0000 0000 6c20 636f 2b6b 6e75     e : .... lock+un
 8007bb0:	6f6c 6b63 532f 0000 7720 6961 2b74 6973     lock/S.. wait+si
 8007bc0:	6e67 6c61 532f 0000 7420 6d69 7265 2f73     gnal/S.. timers/
 8007bd0:	0053 0000 6220 7479 7365 532f 0000 0000     S... bytes/S....
 8007be0:	6320 7874 7773 2f63 0053 0000 7420 7268      ctxswc/S... thr
 8007bf0:	6165 7364 532f 0000 7220 7365 6863 6465     eads/S.. resched
 8007c00:	6c75 7365 532f 202c 0000 0000 6d20 6773     ules/S, .... msg
 8007c10:	2f73 2c53 0020 0000 6e28 6c75 296c 0000     s/S, ...(null)..

08007c20 <cancfg>:
 8007c20:	0040 0000 000b 0018 0000 0000 0000 0000     @...............

08007c30 <ch_debug>:
 8007c30:	616d 6e69 1600 1843 0204 0844 100c 1814     main..C...D.....
 8007c40:	1c00 1e1d 0000 0000 0000 0000 0000 0000     ................

08007c50 <shCfg>:
 8007c50:	1560 2000 7e80 0800 0000 0000 0000 0000     `.. .~..........
 8007c60:	7355 6761 3a65 2520 0d73 000a 7973 7473     Usage: %s...syst
 8007c70:	6d69 0065 6c25 0d75 000a 0000 6e69 6f66     ime.%lu.....info
 8007c80:	0000 0000 654b 6e72 6c65 203a 2020 2020     ....Kernel:     
 8007c90:	2020 7325 0a0d 0000 6f43 706d 6c69 7265       %s....Compiler
 8007ca0:	203a 2020 2020 7325 0a0d 0000 7241 6863     :     %s....Arch
 8007cb0:	7469 6365 7574 6572 203a 7325 0a0d 0000     itecture: %s....
 8007cc0:	6f43 6572 5620 7261 6169 746e 203a 7325     Core Variant: %s
 8007cd0:	0a0d 0000 6f50 7472 4920 666e 3a6f 2020     ....Port Info:  
 8007ce0:	2020 7325 0a0d 0000 6c50 7461 6f66 6d72       %s....Platform
 8007cf0:	203a 2020 2020 7325 0a0d 0000 6f42 7261     :     %s....Boar
 8007d00:	3a64 2020 2020 2020 2020 7325 0a0d 0000     d:        %s....
 8007d10:	7542 6c69 2064 6974 656d 203a 2020 7325     Build time:   %s
 8007d20:	7325 7325 0a0d 0000 754a 206c 3420 3220     %s%s....Jul  4 2
 8007d30:	3130 0036 2d20 0020 3731 303a 3a32 3730     016. - .17:02:07
 8007d40:	0000 0000 6873 6c65 006c 0000 0a0d 6843     ....shell.....Ch
 8007d50:	6269 4f69 2f53 5452 5320 6568 6c6c 0a0d     ibiOS/RT Shell..
 8007d60:	0000 0000 6863 203e 0000 0000 445e 0000     ....ch> ....^D..
 8007d70:	6f74 206f 616d 796e 6120 6772 6d75 6e65     too many argumen
 8007d80:	7374 0a0d 0000 0000 7865 7469 0000 0000     ts......exit....
 8007d90:	6568 706c 0000 0000 6f43 6d6d 6e61 7364     help....Commands
 8007da0:	203a 6568 706c 6520 6978 2074 0000 0000     : help exit ....
 8007db0:	7325 0020 7325 0000 3f20 0a0d 0000 0000     %s .%s.. ?......
 8007dc0:	0a0d 6f6c 6f67 7475 0000 0000 6469 656c     ..logout....idle
 8007dd0:	0000 0000 656d 006d 6874 6572 6461 0073     ....mem.threads.
 8007de0:	6461 7663 6c61 6575 0073 0000 0000 0000     adcvalues.......

08007df0 <_stm32_dma_streams>:
 8007df0:	0000 4002 0008 4002 0001 0000 0000 0000     ...@...@........
 8007e00:	0000 000b 0000 4002 001c 4002 0002 0000     .......@...@....
 8007e10:	0000 0000 0104 000c 0000 4002 0030 4002     ...........@0..@
 8007e20:	0004 0000 0000 0000 0208 000d 0000 4002     ...............@
 8007e30:	0044 4002 0008 0000 0000 0000 030c 000e     D..@............
 8007e40:	0000 4002 0058 4002 0010 0000 0000 0000     ...@X..@........
 8007e50:	0410 000f 0000 4002 006c 4002 0020 0000     .......@l..@ ...
 8007e60:	0000 0000 0514 0010 0000 4002 0080 4002     ...........@...@
 8007e70:	0040 0000 0000 0000 0618 0011 0000 0000     @...............

08007e80 <commands>:
 8007e80:	7dd4 0800 6951 0800 7dd8 0800 68e1 0800     .}..Qi...}...h..
 8007e90:	7974 0800 6881 0800 7de0 0800 6641 0800     ty...h...}..Af..
	...
 8007eb0:	4241 4443 0000 0000 4241 0000 0000 0000     ABCD....AB......

08007ec0 <evhndl>:
 8007ec0:	6631 0800 6621 0800 6611 0800 0000 0000     1f..!f...f......

08007ed0 <measNTCcalib>:
 8007ed0:	0fd6 0fc4 0fab 0f8a 0f5e 0f25 0edc 0e81     ........^.%.....
 8007ee0:	0e12 0d8d 0cf1 0c40 0b7b 0aa6 09c7 08e3     ......@.{.......
 8007ef0:	0800 0724 0652 0590 04dd 043d 03ae 0330     ..$.R.....=...0.
 8007f00:	02c2 0263 0210 01ca 018d 0158 012c 0105     ..c.......X.,...
 8007f10:	00e4 00c7 00af 0099 0087 0078 006a 005e     ..........x.j.^.
 8007f20:	0053 004a 0042 0000 0000 0000 0000 0000     S.J.B...........

08007f30 <states.7658>:
 8007f30:	80d8 0800 80e0 0800 80e8 0800 80f0 0800     ................
 8007f40:	80fc 0800 8104 0800 810c 0800 8114 0800     ................
 8007f50:	811c 0800 8128 0800 8130 0800 8138 0800     ....(...0...8...
 8007f60:	8144 0800 814c 0800 8154 0800 815c 0800     D...L...T...\...
 8007f70:	631b 0000 5b1b 4a32 0000 0000 4843 4e41     .c...[2J....CHAN
 8007f80:	454e 534c 203a 6425 202c 5542 4646 5245     NELS: %d, BUFFER
 8007f90:	203a 6425 0a0d 0000 544e 3143 203a 6425     : %d....NTC1: %d
 8007fa0:	0a0d 0000 544e 3243 203a 6425 0a0d 0000     ....NTC2: %d....
 8007fb0:	544e 3343 203a 6425 0a0d 0000 5543 5252     NTC3: %d....CURR
 8007fc0:	3a31 2520 0d64 000a 5543 5252 3a32 2520     1: %d...CURR2: %
 8007fd0:	0d64 000a 5543 5252 3a33 2520 0d64 000a     d...CURR3: %d...
 8007fe0:	6153 706d 656c 6854 6572 6461 0000 0000     SampleThread....
 8007ff0:	7355 6761 3a65 7420 7365 0d74 000a 0000     Usage: test.....
 8008000:	756f 2074 666f 6d20 6d65 726f 0d79 000a     out of memory...
 8008010:	7355 6761 3a65 7420 7268 6165 7364 0a0d     Usage: threads..
 8008020:	0000 0000 2020 2020 6461 7264 2020 2020     ....    addr    
 8008030:	7473 6361 206b 7270 6f69 7220 6665 2073     stack prio refs 
 8008040:	2020 2020 7473 7461 0d65 000a 3025 6c38         state...%08l
 8008050:	2078 3025 6c38 2078 3425 756c 2520 6c34     x %08lx %4lu %4l
 8008060:	2075 3925 2073 6c25 0d75 000a 7355 6761     u %9s %lu...Usag
 8008070:	3a65 6d20 6d65 0a0d 0000 0000 6f63 6572     e: mem......core
 8008080:	6620 6572 2065 656d 6f6d 7972 3a20 2520      free memory : %
 8008090:	2075 7962 6574 0d73 000a 0000 6568 7061     u bytes.....heap
 80080a0:	6620 6172 6d67 6e65 7374 2020 3a20 2520      fragments   : %
 80080b0:	0d75 000a 6568 7061 6620 6572 2065 6f74     u...heap free to
 80080c0:	6174 206c 3a20 2520 2075 7962 6574 0d73     tal  : %u bytes.
 80080d0:	000a 0000 0920 0000 4552 4441 0059 0000     .... ...READY...
 80080e0:	5543 5252 4e45 0054 5457 5453 5241 0054     CURRENT.WTSTART.
 80080f0:	5553 5053 4e45 4544 0044 0000 5551 5545     SUSPENDED...QUEU
 8008100:	4445 0000 5457 4553 004d 0000 5457 544d     ED..WTSEM...WTMT
 8008110:	0058 0000 5457 4f43 444e 0000 4c53 4545     X...WTCOND..SLEE
 8008120:	4950 474e 0000 0000 5457 5845 5449 0000     PING....WTEXIT..
 8008130:	5457 524f 5645 0054 5457 4e41 4544 5456     WTOREVT.WTANDEVT
 8008140:	0000 0000 4e53 4d44 4753 0051 4e53 4d44     ....SNDMSGQ.SNDM
 8008150:	4753 0000 5457 534d 0047 0000 4946 414e     SG..WTMSG...FINA
 8008160:	004c 0000 0000 0000 0000 0000 0000 0000     L...............

08008170 <adcgrpcfg>:
 8008170:	0000 0006 0000 0000 0000 0000 0000 0000     ................
	...
 8008188:	2492 0001 0000 0050 0000 0000 8820 0a41     .$....P..... .A.
	...

080081a0 <vmt>:
 80081a0:	29d1 0800 29b1 0800 2a11 0800 29f1 0800     .)...)...*...)..
 80081b0:	2a01 0800 29e1 0800 29c1 0800 29a1 0800     .*...)...)...)..
