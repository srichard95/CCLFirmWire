
build/CCLFirmWire.elf:     file format elf32-littlearm


Disassembly of section .text:

08000160 <Reset_Handler>:
 8000160:	b672      	cpsid	i
 8000162:	4822      	ldr	r0, [pc, #136]	; (80001ec <endfiniloop+0x4>)
 8000164:	f380 8809 	msr	PSP, r0
 8000168:	2002      	movs	r0, #2
 800016a:	f380 8814 	msr	CONTROL, r0
 800016e:	f3bf 8f6f 	isb	sy
 8000172:	f001 fe05 	bl	8001d80 <__core_init>
 8000176:	f003 fafb 	bl	8003770 <__early_init>
 800017a:	481d      	ldr	r0, [pc, #116]	; (80001f0 <endfiniloop+0x8>)
 800017c:	491d      	ldr	r1, [pc, #116]	; (80001f4 <endfiniloop+0xc>)
 800017e:	4a1e      	ldr	r2, [pc, #120]	; (80001f8 <endfiniloop+0x10>)

08000180 <msloop>:
 8000180:	4291      	cmp	r1, r2
 8000182:	bf3c      	itt	cc
 8000184:	f841 0b04 	strcc.w	r0, [r1], #4
 8000188:	e7fa      	bcc.n	8000180 <msloop>
 800018a:	491c      	ldr	r1, [pc, #112]	; (80001fc <endfiniloop+0x14>)
 800018c:	4a17      	ldr	r2, [pc, #92]	; (80001ec <endfiniloop+0x4>)

0800018e <psloop>:
 800018e:	4291      	cmp	r1, r2
 8000190:	bf3c      	itt	cc
 8000192:	f841 0b04 	strcc.w	r0, [r1], #4
 8000196:	e7fa      	bcc.n	800018e <psloop>
 8000198:	4919      	ldr	r1, [pc, #100]	; (8000200 <endfiniloop+0x18>)
 800019a:	4a1a      	ldr	r2, [pc, #104]	; (8000204 <endfiniloop+0x1c>)
 800019c:	4b1a      	ldr	r3, [pc, #104]	; (8000208 <endfiniloop+0x20>)

0800019e <dloop>:
 800019e:	429a      	cmp	r2, r3
 80001a0:	bf3e      	ittt	cc
 80001a2:	f851 0b04 	ldrcc.w	r0, [r1], #4
 80001a6:	f842 0b04 	strcc.w	r0, [r2], #4
 80001aa:	e7f8      	bcc.n	800019e <dloop>
 80001ac:	2000      	movs	r0, #0
 80001ae:	4917      	ldr	r1, [pc, #92]	; (800020c <endfiniloop+0x24>)
 80001b0:	4a17      	ldr	r2, [pc, #92]	; (8000210 <endfiniloop+0x28>)

080001b2 <bloop>:
 80001b2:	4291      	cmp	r1, r2
 80001b4:	bf3c      	itt	cc
 80001b6:	f841 0b04 	strcc.w	r0, [r1], #4
 80001ba:	e7fa      	bcc.n	80001b2 <bloop>
 80001bc:	f001 fda8 	bl	8001d10 <__init_ram_areas>
 80001c0:	f001 fdd6 	bl	8001d70 <__late_init>
 80001c4:	4c13      	ldr	r4, [pc, #76]	; (8000214 <endfiniloop+0x2c>)
 80001c6:	4d14      	ldr	r5, [pc, #80]	; (8000218 <endfiniloop+0x30>)

080001c8 <initloop>:
 80001c8:	42ac      	cmp	r4, r5
 80001ca:	da03      	bge.n	80001d4 <endinitloop>
 80001cc:	f854 1b04 	ldr.w	r1, [r4], #4
 80001d0:	4788      	blx	r1
 80001d2:	e7f9      	b.n	80001c8 <initloop>

080001d4 <endinitloop>:
 80001d4:	f005 fa24 	bl	8005620 <main>
 80001d8:	4c10      	ldr	r4, [pc, #64]	; (800021c <endfiniloop+0x34>)
 80001da:	4d11      	ldr	r5, [pc, #68]	; (8000220 <endfiniloop+0x38>)

080001dc <finiloop>:
 80001dc:	42ac      	cmp	r4, r5
 80001de:	da03      	bge.n	80001e8 <endfiniloop>
 80001e0:	f854 1b04 	ldr.w	r1, [r4], #4
 80001e4:	4788      	blx	r1
 80001e6:	e7f9      	b.n	80001dc <finiloop>

080001e8 <endfiniloop>:
 80001e8:	f001 bdba 	b.w	8001d60 <__default_exit>
 80001ec:	20000800 	.word	0x20000800
 80001f0:	55555555 	.word	0x55555555
 80001f4:	20000000 	.word	0x20000000
 80001f8:	20000400 	.word	0x20000400
 80001fc:	20000400 	.word	0x20000400
 8000200:	08008a90 	.word	0x08008a90
 8000204:	20000800 	.word	0x20000800
 8000208:	200008dc 	.word	0x200008dc
 800020c:	200008e0 	.word	0x200008e0
 8000210:	20001878 	.word	0x20001878
 8000214:	08000160 	.word	0x08000160
 8000218:	08000160 	.word	0x08000160
 800021c:	08000160 	.word	0x08000160
 8000220:	08000160 	.word	0x08000160
	...

08000230 <_port_switch>:
 8000230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000234:	f8c1 d00c 	str.w	sp, [r1, #12]
 8000238:	68c3      	ldr	r3, [r0, #12]
 800023a:	469d      	mov	sp, r3
 800023c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000240 <_port_thread_start>:
 8000240:	2300      	movs	r3, #0
 8000242:	f383 8811 	msr	BASEPRI, r3
 8000246:	4628      	mov	r0, r5
 8000248:	47a0      	blx	r4
 800024a:	2000      	movs	r0, #0
 800024c:	f001 faf0 	bl	8001830 <chThdExit>

08000250 <_port_switch_from_isr>:
 8000250:	f000 fe26 	bl	8000ea0 <chSchDoReschedule>

08000254 <_port_exit_from_isr>:
 8000254:	df00      	svc	0
 8000256:	e7fe      	b.n	8000256 <_port_exit_from_isr+0x2>
	...

08000260 <__aeabi_drsub>:
 8000260:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000264:	e002      	b.n	800026c <__adddf3>
 8000266:	bf00      	nop

08000268 <__aeabi_dsub>:
 8000268:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800026c <__adddf3>:
 800026c:	b530      	push	{r4, r5, lr}
 800026e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000272:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000276:	ea94 0f05 	teq	r4, r5
 800027a:	bf08      	it	eq
 800027c:	ea90 0f02 	teqeq	r0, r2
 8000280:	bf1f      	itttt	ne
 8000282:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000286:	ea55 0c02 	orrsne.w	ip, r5, r2
 800028a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800028e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000292:	f000 80e2 	beq.w	800045a <__adddf3+0x1ee>
 8000296:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800029a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800029e:	bfb8      	it	lt
 80002a0:	426d      	neglt	r5, r5
 80002a2:	dd0c      	ble.n	80002be <__adddf3+0x52>
 80002a4:	442c      	add	r4, r5
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	ea82 0000 	eor.w	r0, r2, r0
 80002b2:	ea83 0101 	eor.w	r1, r3, r1
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	2d36      	cmp	r5, #54	; 0x36
 80002c0:	bf88      	it	hi
 80002c2:	bd30      	pophi	{r4, r5, pc}
 80002c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002d4:	d002      	beq.n	80002dc <__adddf3+0x70>
 80002d6:	4240      	negs	r0, r0
 80002d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002e8:	d002      	beq.n	80002f0 <__adddf3+0x84>
 80002ea:	4252      	negs	r2, r2
 80002ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002f0:	ea94 0f05 	teq	r4, r5
 80002f4:	f000 80a7 	beq.w	8000446 <__adddf3+0x1da>
 80002f8:	f1a4 0401 	sub.w	r4, r4, #1
 80002fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000300:	db0d      	blt.n	800031e <__adddf3+0xb2>
 8000302:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000306:	fa22 f205 	lsr.w	r2, r2, r5
 800030a:	1880      	adds	r0, r0, r2
 800030c:	f141 0100 	adc.w	r1, r1, #0
 8000310:	fa03 f20e 	lsl.w	r2, r3, lr
 8000314:	1880      	adds	r0, r0, r2
 8000316:	fa43 f305 	asr.w	r3, r3, r5
 800031a:	4159      	adcs	r1, r3
 800031c:	e00e      	b.n	800033c <__adddf3+0xd0>
 800031e:	f1a5 0520 	sub.w	r5, r5, #32
 8000322:	f10e 0e20 	add.w	lr, lr, #32
 8000326:	2a01      	cmp	r2, #1
 8000328:	fa03 fc0e 	lsl.w	ip, r3, lr
 800032c:	bf28      	it	cs
 800032e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000332:	fa43 f305 	asr.w	r3, r3, r5
 8000336:	18c0      	adds	r0, r0, r3
 8000338:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800033c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000340:	d507      	bpl.n	8000352 <__adddf3+0xe6>
 8000342:	f04f 0e00 	mov.w	lr, #0
 8000346:	f1dc 0c00 	rsbs	ip, ip, #0
 800034a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800034e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000352:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000356:	d31b      	bcc.n	8000390 <__adddf3+0x124>
 8000358:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800035c:	d30c      	bcc.n	8000378 <__adddf3+0x10c>
 800035e:	0849      	lsrs	r1, r1, #1
 8000360:	ea5f 0030 	movs.w	r0, r0, rrx
 8000364:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000368:	f104 0401 	add.w	r4, r4, #1
 800036c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000370:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000374:	f080 809a 	bcs.w	80004ac <__adddf3+0x240>
 8000378:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800037c:	bf08      	it	eq
 800037e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000382:	f150 0000 	adcs.w	r0, r0, #0
 8000386:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800038a:	ea41 0105 	orr.w	r1, r1, r5
 800038e:	bd30      	pop	{r4, r5, pc}
 8000390:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000394:	4140      	adcs	r0, r0
 8000396:	eb41 0101 	adc.w	r1, r1, r1
 800039a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800039e:	f1a4 0401 	sub.w	r4, r4, #1
 80003a2:	d1e9      	bne.n	8000378 <__adddf3+0x10c>
 80003a4:	f091 0f00 	teq	r1, #0
 80003a8:	bf04      	itt	eq
 80003aa:	4601      	moveq	r1, r0
 80003ac:	2000      	moveq	r0, #0
 80003ae:	fab1 f381 	clz	r3, r1
 80003b2:	bf08      	it	eq
 80003b4:	3320      	addeq	r3, #32
 80003b6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ba:	f1b3 0220 	subs.w	r2, r3, #32
 80003be:	da0c      	bge.n	80003da <__adddf3+0x16e>
 80003c0:	320c      	adds	r2, #12
 80003c2:	dd08      	ble.n	80003d6 <__adddf3+0x16a>
 80003c4:	f102 0c14 	add.w	ip, r2, #20
 80003c8:	f1c2 020c 	rsb	r2, r2, #12
 80003cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003d0:	fa21 f102 	lsr.w	r1, r1, r2
 80003d4:	e00c      	b.n	80003f0 <__adddf3+0x184>
 80003d6:	f102 0214 	add.w	r2, r2, #20
 80003da:	bfd8      	it	le
 80003dc:	f1c2 0c20 	rsble	ip, r2, #32
 80003e0:	fa01 f102 	lsl.w	r1, r1, r2
 80003e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003e8:	bfdc      	itt	le
 80003ea:	ea41 010c 	orrle.w	r1, r1, ip
 80003ee:	4090      	lslle	r0, r2
 80003f0:	1ae4      	subs	r4, r4, r3
 80003f2:	bfa2      	ittt	ge
 80003f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003f8:	4329      	orrge	r1, r5
 80003fa:	bd30      	popge	{r4, r5, pc}
 80003fc:	ea6f 0404 	mvn.w	r4, r4
 8000400:	3c1f      	subs	r4, #31
 8000402:	da1c      	bge.n	800043e <__adddf3+0x1d2>
 8000404:	340c      	adds	r4, #12
 8000406:	dc0e      	bgt.n	8000426 <__adddf3+0x1ba>
 8000408:	f104 0414 	add.w	r4, r4, #20
 800040c:	f1c4 0220 	rsb	r2, r4, #32
 8000410:	fa20 f004 	lsr.w	r0, r0, r4
 8000414:	fa01 f302 	lsl.w	r3, r1, r2
 8000418:	ea40 0003 	orr.w	r0, r0, r3
 800041c:	fa21 f304 	lsr.w	r3, r1, r4
 8000420:	ea45 0103 	orr.w	r1, r5, r3
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f1c4 040c 	rsb	r4, r4, #12
 800042a:	f1c4 0220 	rsb	r2, r4, #32
 800042e:	fa20 f002 	lsr.w	r0, r0, r2
 8000432:	fa01 f304 	lsl.w	r3, r1, r4
 8000436:	ea40 0003 	orr.w	r0, r0, r3
 800043a:	4629      	mov	r1, r5
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	fa21 f004 	lsr.w	r0, r1, r4
 8000442:	4629      	mov	r1, r5
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f094 0f00 	teq	r4, #0
 800044a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800044e:	bf06      	itte	eq
 8000450:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000454:	3401      	addeq	r4, #1
 8000456:	3d01      	subne	r5, #1
 8000458:	e74e      	b.n	80002f8 <__adddf3+0x8c>
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf18      	it	ne
 8000460:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000464:	d029      	beq.n	80004ba <__adddf3+0x24e>
 8000466:	ea94 0f05 	teq	r4, r5
 800046a:	bf08      	it	eq
 800046c:	ea90 0f02 	teqeq	r0, r2
 8000470:	d005      	beq.n	800047e <__adddf3+0x212>
 8000472:	ea54 0c00 	orrs.w	ip, r4, r0
 8000476:	bf04      	itt	eq
 8000478:	4619      	moveq	r1, r3
 800047a:	4610      	moveq	r0, r2
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	ea91 0f03 	teq	r1, r3
 8000482:	bf1e      	ittt	ne
 8000484:	2100      	movne	r1, #0
 8000486:	2000      	movne	r0, #0
 8000488:	bd30      	popne	{r4, r5, pc}
 800048a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800048e:	d105      	bne.n	800049c <__adddf3+0x230>
 8000490:	0040      	lsls	r0, r0, #1
 8000492:	4149      	adcs	r1, r1
 8000494:	bf28      	it	cs
 8000496:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800049a:	bd30      	pop	{r4, r5, pc}
 800049c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004a0:	bf3c      	itt	cc
 80004a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004a6:	bd30      	popcc	{r4, r5, pc}
 80004a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf1a      	itte	ne
 80004c0:	4619      	movne	r1, r3
 80004c2:	4610      	movne	r0, r2
 80004c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004c8:	bf1c      	itt	ne
 80004ca:	460b      	movne	r3, r1
 80004cc:	4602      	movne	r2, r0
 80004ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004d2:	bf06      	itte	eq
 80004d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004d8:	ea91 0f03 	teqeq	r1, r3
 80004dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	bf00      	nop

080004e4 <__aeabi_ui2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f8:	f04f 0500 	mov.w	r5, #0
 80004fc:	f04f 0100 	mov.w	r1, #0
 8000500:	e750      	b.n	80003a4 <__adddf3+0x138>
 8000502:	bf00      	nop

08000504 <__aeabi_i2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800051c:	bf48      	it	mi
 800051e:	4240      	negmi	r0, r0
 8000520:	f04f 0100 	mov.w	r1, #0
 8000524:	e73e      	b.n	80003a4 <__adddf3+0x138>
 8000526:	bf00      	nop

08000528 <__aeabi_f2d>:
 8000528:	0042      	lsls	r2, r0, #1
 800052a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800052e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000532:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000536:	bf1f      	itttt	ne
 8000538:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800053c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000540:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000544:	4770      	bxne	lr
 8000546:	f092 0f00 	teq	r2, #0
 800054a:	bf14      	ite	ne
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	4770      	bxeq	lr
 8000552:	b530      	push	{r4, r5, lr}
 8000554:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000560:	e720      	b.n	80003a4 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_ul2d>:
 8000564:	ea50 0201 	orrs.w	r2, r0, r1
 8000568:	bf08      	it	eq
 800056a:	4770      	bxeq	lr
 800056c:	b530      	push	{r4, r5, lr}
 800056e:	f04f 0500 	mov.w	r5, #0
 8000572:	e00a      	b.n	800058a <__aeabi_l2d+0x16>

08000574 <__aeabi_l2d>:
 8000574:	ea50 0201 	orrs.w	r2, r0, r1
 8000578:	bf08      	it	eq
 800057a:	4770      	bxeq	lr
 800057c:	b530      	push	{r4, r5, lr}
 800057e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000582:	d502      	bpl.n	800058a <__aeabi_l2d+0x16>
 8000584:	4240      	negs	r0, r0
 8000586:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800058a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800058e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000592:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000596:	f43f aedc 	beq.w	8000352 <__adddf3+0xe6>
 800059a:	f04f 0203 	mov.w	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005aa:	bf18      	it	ne
 80005ac:	3203      	addne	r2, #3
 80005ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005b2:	f1c2 0320 	rsb	r3, r2, #32
 80005b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ba:	fa20 f002 	lsr.w	r0, r0, r2
 80005be:	fa01 fe03 	lsl.w	lr, r1, r3
 80005c2:	ea40 000e 	orr.w	r0, r0, lr
 80005c6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ca:	4414      	add	r4, r2
 80005cc:	e6c1      	b.n	8000352 <__adddf3+0xe6>
 80005ce:	bf00      	nop

080005d0 <__aeabi_dmul>:
 80005d0:	b570      	push	{r4, r5, r6, lr}
 80005d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005de:	bf1d      	ittte	ne
 80005e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005e4:	ea94 0f0c 	teqne	r4, ip
 80005e8:	ea95 0f0c 	teqne	r5, ip
 80005ec:	f000 f8de 	bleq	80007ac <__aeabi_dmul+0x1dc>
 80005f0:	442c      	add	r4, r5
 80005f2:	ea81 0603 	eor.w	r6, r1, r3
 80005f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000602:	bf18      	it	ne
 8000604:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000608:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800060c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000610:	d038      	beq.n	8000684 <__aeabi_dmul+0xb4>
 8000612:	fba0 ce02 	umull	ip, lr, r0, r2
 8000616:	f04f 0500 	mov.w	r5, #0
 800061a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800061e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000622:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000626:	f04f 0600 	mov.w	r6, #0
 800062a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800062e:	f09c 0f00 	teq	ip, #0
 8000632:	bf18      	it	ne
 8000634:	f04e 0e01 	orrne.w	lr, lr, #1
 8000638:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800063c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000640:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000644:	d204      	bcs.n	8000650 <__aeabi_dmul+0x80>
 8000646:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800064a:	416d      	adcs	r5, r5
 800064c:	eb46 0606 	adc.w	r6, r6, r6
 8000650:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000654:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000658:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800065c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000660:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000664:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000668:	bf88      	it	hi
 800066a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800066e:	d81e      	bhi.n	80006ae <__aeabi_dmul+0xde>
 8000670:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000674:	bf08      	it	eq
 8000676:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800067a:	f150 0000 	adcs.w	r0, r0, #0
 800067e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000688:	ea46 0101 	orr.w	r1, r6, r1
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	ea81 0103 	eor.w	r1, r1, r3
 8000694:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000698:	bfc2      	ittt	gt
 800069a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800069e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	popgt	{r4, r5, r6, pc}
 80006a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a8:	f04f 0e00 	mov.w	lr, #0
 80006ac:	3c01      	subs	r4, #1
 80006ae:	f300 80ab 	bgt.w	8000808 <__aeabi_dmul+0x238>
 80006b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006b6:	bfde      	ittt	le
 80006b8:	2000      	movle	r0, #0
 80006ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006be:	bd70      	pople	{r4, r5, r6, pc}
 80006c0:	f1c4 0400 	rsb	r4, r4, #0
 80006c4:	3c20      	subs	r4, #32
 80006c6:	da35      	bge.n	8000734 <__aeabi_dmul+0x164>
 80006c8:	340c      	adds	r4, #12
 80006ca:	dc1b      	bgt.n	8000704 <__aeabi_dmul+0x134>
 80006cc:	f104 0414 	add.w	r4, r4, #20
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f305 	lsl.w	r3, r0, r5
 80006d8:	fa20 f004 	lsr.w	r0, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f0:	fa21 f604 	lsr.w	r6, r1, r4
 80006f4:	eb42 0106 	adc.w	r1, r2, r6
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 040c 	rsb	r4, r4, #12
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f304 	lsl.w	r3, r0, r4
 8000710:	fa20 f005 	lsr.w	r0, r0, r5
 8000714:	fa01 f204 	lsl.w	r2, r1, r4
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000720:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000724:	f141 0100 	adc.w	r1, r1, #0
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 0520 	rsb	r5, r4, #32
 8000738:	fa00 f205 	lsl.w	r2, r0, r5
 800073c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000740:	fa20 f304 	lsr.w	r3, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea43 0302 	orr.w	r3, r3, r2
 800074c:	fa21 f004 	lsr.w	r0, r1, r4
 8000750:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000754:	fa21 f204 	lsr.w	r2, r1, r4
 8000758:	ea20 0002 	bic.w	r0, r0, r2
 800075c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f094 0f00 	teq	r4, #0
 8000770:	d10f      	bne.n	8000792 <__aeabi_dmul+0x1c2>
 8000772:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000776:	0040      	lsls	r0, r0, #1
 8000778:	eb41 0101 	adc.w	r1, r1, r1
 800077c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3c01      	subeq	r4, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1a6>
 8000786:	ea41 0106 	orr.w	r1, r1, r6
 800078a:	f095 0f00 	teq	r5, #0
 800078e:	bf18      	it	ne
 8000790:	4770      	bxne	lr
 8000792:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000796:	0052      	lsls	r2, r2, #1
 8000798:	eb43 0303 	adc.w	r3, r3, r3
 800079c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3d01      	subeq	r5, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1c6>
 80007a6:	ea43 0306 	orr.w	r3, r3, r6
 80007aa:	4770      	bx	lr
 80007ac:	ea94 0f0c 	teq	r4, ip
 80007b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007b4:	bf18      	it	ne
 80007b6:	ea95 0f0c 	teqne	r5, ip
 80007ba:	d00c      	beq.n	80007d6 <__aeabi_dmul+0x206>
 80007bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c0:	bf18      	it	ne
 80007c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c6:	d1d1      	bne.n	800076c <__aeabi_dmul+0x19c>
 80007c8:	ea81 0103 	eor.w	r1, r1, r3
 80007cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d0:	f04f 0000 	mov.w	r0, #0
 80007d4:	bd70      	pop	{r4, r5, r6, pc}
 80007d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007da:	bf06      	itte	eq
 80007dc:	4610      	moveq	r0, r2
 80007de:	4619      	moveq	r1, r3
 80007e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e4:	d019      	beq.n	800081a <__aeabi_dmul+0x24a>
 80007e6:	ea94 0f0c 	teq	r4, ip
 80007ea:	d102      	bne.n	80007f2 <__aeabi_dmul+0x222>
 80007ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007f0:	d113      	bne.n	800081a <__aeabi_dmul+0x24a>
 80007f2:	ea95 0f0c 	teq	r5, ip
 80007f6:	d105      	bne.n	8000804 <__aeabi_dmul+0x234>
 80007f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007fc:	bf1c      	itt	ne
 80007fe:	4610      	movne	r0, r2
 8000800:	4619      	movne	r1, r3
 8000802:	d10a      	bne.n	800081a <__aeabi_dmul+0x24a>
 8000804:	ea81 0103 	eor.w	r1, r1, r3
 8000808:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800080c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000810:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000814:	f04f 0000 	mov.w	r0, #0
 8000818:	bd70      	pop	{r4, r5, r6, pc}
 800081a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800081e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000822:	bd70      	pop	{r4, r5, r6, pc}

08000824 <__aeabi_ddiv>:
 8000824:	b570      	push	{r4, r5, r6, lr}
 8000826:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800082a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800082e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000832:	bf1d      	ittte	ne
 8000834:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000838:	ea94 0f0c 	teqne	r4, ip
 800083c:	ea95 0f0c 	teqne	r5, ip
 8000840:	f000 f8a7 	bleq	8000992 <__aeabi_ddiv+0x16e>
 8000844:	eba4 0405 	sub.w	r4, r4, r5
 8000848:	ea81 0e03 	eor.w	lr, r1, r3
 800084c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000850:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000854:	f000 8088 	beq.w	8000968 <__aeabi_ddiv+0x144>
 8000858:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800085c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000860:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000864:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000868:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800086c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000870:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000874:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000878:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800087c:	429d      	cmp	r5, r3
 800087e:	bf08      	it	eq
 8000880:	4296      	cmpeq	r6, r2
 8000882:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000886:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800088a:	d202      	bcs.n	8000892 <__aeabi_ddiv+0x6e>
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	1ab6      	subs	r6, r6, r2
 8000894:	eb65 0503 	sbc.w	r5, r5, r3
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000900:	ea55 0e06 	orrs.w	lr, r5, r6
 8000904:	d018      	beq.n	8000938 <__aeabi_ddiv+0x114>
 8000906:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800090a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800090e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000912:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000916:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800091a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800091e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000922:	d1c0      	bne.n	80008a6 <__aeabi_ddiv+0x82>
 8000924:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000928:	d10b      	bne.n	8000942 <__aeabi_ddiv+0x11e>
 800092a:	ea41 0100 	orr.w	r1, r1, r0
 800092e:	f04f 0000 	mov.w	r0, #0
 8000932:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000936:	e7b6      	b.n	80008a6 <__aeabi_ddiv+0x82>
 8000938:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800093c:	bf04      	itt	eq
 800093e:	4301      	orreq	r1, r0
 8000940:	2000      	moveq	r0, #0
 8000942:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000946:	bf88      	it	hi
 8000948:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800094c:	f63f aeaf 	bhi.w	80006ae <__aeabi_dmul+0xde>
 8000950:	ebb5 0c03 	subs.w	ip, r5, r3
 8000954:	bf04      	itt	eq
 8000956:	ebb6 0c02 	subseq.w	ip, r6, r2
 800095a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800095e:	f150 0000 	adcs.w	r0, r0, #0
 8000962:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000966:	bd70      	pop	{r4, r5, r6, pc}
 8000968:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800096c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000970:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000974:	bfc2      	ittt	gt
 8000976:	ebd4 050c 	rsbsgt	r5, r4, ip
 800097a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800097e:	bd70      	popgt	{r4, r5, r6, pc}
 8000980:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000984:	f04f 0e00 	mov.w	lr, #0
 8000988:	3c01      	subs	r4, #1
 800098a:	e690      	b.n	80006ae <__aeabi_dmul+0xde>
 800098c:	ea45 0e06 	orr.w	lr, r5, r6
 8000990:	e68d      	b.n	80006ae <__aeabi_dmul+0xde>
 8000992:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000996:	ea94 0f0c 	teq	r4, ip
 800099a:	bf08      	it	eq
 800099c:	ea95 0f0c 	teqeq	r5, ip
 80009a0:	f43f af3b 	beq.w	800081a <__aeabi_dmul+0x24a>
 80009a4:	ea94 0f0c 	teq	r4, ip
 80009a8:	d10a      	bne.n	80009c0 <__aeabi_ddiv+0x19c>
 80009aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ae:	f47f af34 	bne.w	800081a <__aeabi_dmul+0x24a>
 80009b2:	ea95 0f0c 	teq	r5, ip
 80009b6:	f47f af25 	bne.w	8000804 <__aeabi_dmul+0x234>
 80009ba:	4610      	mov	r0, r2
 80009bc:	4619      	mov	r1, r3
 80009be:	e72c      	b.n	800081a <__aeabi_dmul+0x24a>
 80009c0:	ea95 0f0c 	teq	r5, ip
 80009c4:	d106      	bne.n	80009d4 <__aeabi_ddiv+0x1b0>
 80009c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ca:	f43f aefd 	beq.w	80007c8 <__aeabi_dmul+0x1f8>
 80009ce:	4610      	mov	r0, r2
 80009d0:	4619      	mov	r1, r3
 80009d2:	e722      	b.n	800081a <__aeabi_dmul+0x24a>
 80009d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009de:	f47f aec5 	bne.w	800076c <__aeabi_dmul+0x19c>
 80009e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009e6:	f47f af0d 	bne.w	8000804 <__aeabi_dmul+0x234>
 80009ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ee:	f47f aeeb 	bne.w	80007c8 <__aeabi_dmul+0x1f8>
 80009f2:	e712      	b.n	800081a <__aeabi_dmul+0x24a>
	...

08000a00 <__aeabi_d2iz>:
 8000a00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a08:	d215      	bcs.n	8000a36 <__aeabi_d2iz+0x36>
 8000a0a:	d511      	bpl.n	8000a30 <__aeabi_d2iz+0x30>
 8000a0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a14:	d912      	bls.n	8000a3c <__aeabi_d2iz+0x3c>
 8000a16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a22:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a26:	fa23 f002 	lsr.w	r0, r3, r2
 8000a2a:	bf18      	it	ne
 8000a2c:	4240      	negne	r0, r0
 8000a2e:	4770      	bx	lr
 8000a30:	f04f 0000 	mov.w	r0, #0
 8000a34:	4770      	bx	lr
 8000a36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3a:	d105      	bne.n	8000a48 <__aeabi_d2iz+0x48>
 8000a3c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a40:	bf08      	it	eq
 8000a42:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a46:	4770      	bx	lr
 8000a48:	f04f 0000 	mov.w	r0, #0
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <strcmp>:
 8000a50:	ea80 0c01 	eor.w	ip, r0, r1
 8000a54:	f01c 0f03 	tst.w	ip, #3
 8000a58:	d137      	bne.n	8000aca <strcmp+0x7a>
 8000a5a:	f010 0c03 	ands.w	ip, r0, #3
 8000a5e:	f020 0003 	bic.w	r0, r0, #3
 8000a62:	f021 0103 	bic.w	r1, r1, #3
 8000a66:	f850 2b04 	ldr.w	r2, [r0], #4
 8000a6a:	bf08      	it	eq
 8000a6c:	f851 3b04 	ldreq.w	r3, [r1], #4
 8000a70:	d00e      	beq.n	8000a90 <strcmp+0x40>
 8000a72:	f08c 0c03 	eor.w	ip, ip, #3
 8000a76:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8000a7a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8000a7e:	fa23 fc0c 	lsr.w	ip, r3, ip
 8000a82:	f851 3b04 	ldr.w	r3, [r1], #4
 8000a86:	ea42 020c 	orr.w	r2, r2, ip
 8000a8a:	ea43 030c 	orr.w	r3, r3, ip
 8000a8e:	bf00      	nop
 8000a90:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 8000a94:	429a      	cmp	r2, r3
 8000a96:	bf01      	itttt	eq
 8000a98:	ea2c 0c02 	biceq.w	ip, ip, r2
 8000a9c:	f01c 3f80 	tsteq.w	ip, #2155905152	; 0x80808080
 8000aa0:	f850 2b04 	ldreq.w	r2, [r0], #4
 8000aa4:	f851 3b04 	ldreq.w	r3, [r1], #4
 8000aa8:	d0f2      	beq.n	8000a90 <strcmp+0x40>
 8000aaa:	ea4f 6002 	mov.w	r0, r2, lsl #24
 8000aae:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8000ab2:	2801      	cmp	r0, #1
 8000ab4:	bf28      	it	cs
 8000ab6:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
 8000aba:	bf08      	it	eq
 8000abc:	0a1b      	lsreq	r3, r3, #8
 8000abe:	d0f4      	beq.n	8000aaa <strcmp+0x5a>
 8000ac0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8000ac4:	0e00      	lsrs	r0, r0, #24
 8000ac6:	1ac0      	subs	r0, r0, r3
 8000ac8:	4770      	bx	lr
 8000aca:	f010 0f03 	tst.w	r0, #3
 8000ace:	d00a      	beq.n	8000ae6 <strcmp+0x96>
 8000ad0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000ad4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000ad8:	2a01      	cmp	r2, #1
 8000ada:	bf28      	it	cs
 8000adc:	429a      	cmpcs	r2, r3
 8000ade:	d0f4      	beq.n	8000aca <strcmp+0x7a>
 8000ae0:	eba2 0003 	sub.w	r0, r2, r3
 8000ae4:	4770      	bx	lr
 8000ae6:	f84d 5d04 	str.w	r5, [sp, #-4]!
 8000aea:	f850 2b04 	ldr.w	r2, [r0], #4
 8000aee:	f001 0503 	and.w	r5, r1, #3
 8000af2:	f021 0103 	bic.w	r1, r1, #3
 8000af6:	f851 3b04 	ldr.w	r3, [r1], #4
 8000afa:	2d02      	cmp	r5, #2
 8000afc:	d026      	beq.n	8000b4c <strcmp+0xfc>
 8000afe:	d84d      	bhi.n	8000b9c <strcmp+0x14c>
 8000b00:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
 8000b04:	ebb5 2f13 	cmp.w	r5, r3, lsr #8
 8000b08:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 8000b0c:	ea2c 0c02 	bic.w	ip, ip, r2
 8000b10:	d10d      	bne.n	8000b2e <strcmp+0xde>
 8000b12:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
 8000b16:	bf08      	it	eq
 8000b18:	f851 3b04 	ldreq.w	r3, [r1], #4
 8000b1c:	d10a      	bne.n	8000b34 <strcmp+0xe4>
 8000b1e:	ea85 0502 	eor.w	r5, r5, r2
 8000b22:	ebb5 6f03 	cmp.w	r5, r3, lsl #24
 8000b26:	d10c      	bne.n	8000b42 <strcmp+0xf2>
 8000b28:	f850 2b04 	ldr.w	r2, [r0], #4
 8000b2c:	e7e8      	b.n	8000b00 <strcmp+0xb0>
 8000b2e:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8000b32:	e05b      	b.n	8000bec <strcmp+0x19c>
 8000b34:	f03c 4c7f 	bics.w	ip, ip, #4278190080	; 0xff000000
 8000b38:	d154      	bne.n	8000be4 <strcmp+0x194>
 8000b3a:	780b      	ldrb	r3, [r1, #0]
 8000b3c:	ea4f 6512 	mov.w	r5, r2, lsr #24
 8000b40:	e054      	b.n	8000bec <strcmp+0x19c>
 8000b42:	ea4f 6512 	mov.w	r5, r2, lsr #24
 8000b46:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8000b4a:	e04f      	b.n	8000bec <strcmp+0x19c>
 8000b4c:	ea4f 4502 	mov.w	r5, r2, lsl #16
 8000b50:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 8000b54:	ea4f 4515 	mov.w	r5, r5, lsr #16
 8000b58:	ea2c 0c02 	bic.w	ip, ip, r2
 8000b5c:	ebb5 4f13 	cmp.w	r5, r3, lsr #16
 8000b60:	d118      	bne.n	8000b94 <strcmp+0x144>
 8000b62:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
 8000b66:	bf08      	it	eq
 8000b68:	f851 3b04 	ldreq.w	r3, [r1], #4
 8000b6c:	d107      	bne.n	8000b7e <strcmp+0x12e>
 8000b6e:	ea85 0502 	eor.w	r5, r5, r2
 8000b72:	ebb5 4f03 	cmp.w	r5, r3, lsl #16
 8000b76:	d109      	bne.n	8000b8c <strcmp+0x13c>
 8000b78:	f850 2b04 	ldr.w	r2, [r0], #4
 8000b7c:	e7e6      	b.n	8000b4c <strcmp+0xfc>
 8000b7e:	ea5f 4c0c 	movs.w	ip, ip, lsl #16
 8000b82:	d12f      	bne.n	8000be4 <strcmp+0x194>
 8000b84:	880b      	ldrh	r3, [r1, #0]
 8000b86:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8000b8a:	e02f      	b.n	8000bec <strcmp+0x19c>
 8000b8c:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8000b90:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8000b94:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8000b98:	e028      	b.n	8000bec <strcmp+0x19c>
 8000b9a:	bf00      	nop
 8000b9c:	f002 05ff 	and.w	r5, r2, #255	; 0xff
 8000ba0:	ebb5 6f13 	cmp.w	r5, r3, lsr #24
 8000ba4:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 8000ba8:	ea2c 0c02 	bic.w	ip, ip, r2
 8000bac:	d10d      	bne.n	8000bca <strcmp+0x17a>
 8000bae:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
 8000bb2:	bf08      	it	eq
 8000bb4:	f851 3b04 	ldreq.w	r3, [r1], #4
 8000bb8:	d10a      	bne.n	8000bd0 <strcmp+0x180>
 8000bba:	ea85 0502 	eor.w	r5, r5, r2
 8000bbe:	ebb5 2f03 	cmp.w	r5, r3, lsl #8
 8000bc2:	d10a      	bne.n	8000bda <strcmp+0x18a>
 8000bc4:	f850 2b04 	ldr.w	r2, [r0], #4
 8000bc8:	e7e8      	b.n	8000b9c <strcmp+0x14c>
 8000bca:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8000bce:	e00d      	b.n	8000bec <strcmp+0x19c>
 8000bd0:	f012 0fff 	tst.w	r2, #255	; 0xff
 8000bd4:	d006      	beq.n	8000be4 <strcmp+0x194>
 8000bd6:	f851 3b04 	ldr.w	r3, [r1], #4
 8000bda:	ea4f 2512 	mov.w	r5, r2, lsr #8
 8000bde:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000be2:	e003      	b.n	8000bec <strcmp+0x19c>
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	bc20      	pop	{r5}
 8000bea:	4770      	bx	lr
 8000bec:	f005 02ff 	and.w	r2, r5, #255	; 0xff
 8000bf0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8000bf4:	2801      	cmp	r0, #1
 8000bf6:	bf28      	it	cs
 8000bf8:	4290      	cmpcs	r0, r2
 8000bfa:	bf04      	itt	eq
 8000bfc:	0a2d      	lsreq	r5, r5, #8
 8000bfe:	0a1b      	lsreq	r3, r3, #8
 8000c00:	d0f4      	beq.n	8000bec <strcmp+0x19c>
 8000c02:	eba2 0000 	sub.w	r0, r2, r0
 8000c06:	bc20      	pop	{r5}
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	0000      	movs	r0, r0
	...

08000c10 <SVC_Handler>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8000c10:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 8000c14:	3320      	adds	r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8000c16:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	f383 8811 	msr	BASEPRI, r3
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
	...

08000c30 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 8000c30:	b410      	push	{r4}
 8000c32:	2320      	movs	r3, #32
 8000c34:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8000c38:	4c09      	ldr	r4, [pc, #36]	; (8000c60 <chCoreAlloc+0x30>)
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <chCoreAlloc+0x34>)
 8000c3c:	6822      	ldr	r2, [r4, #0]
 8000c3e:	6819      	ldr	r1, [r3, #0]
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
 8000c40:	1dc3      	adds	r3, r0, #7
 8000c42:	f023 0307 	bic.w	r3, r3, #7
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8000c46:	1a89      	subs	r1, r1, r2
 8000c48:	428b      	cmp	r3, r1
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 8000c4a:	bf9d      	ittte	ls
 8000c4c:	189b      	addls	r3, r3, r2
 8000c4e:	6023      	strls	r3, [r4, #0]

  return p;
 8000c50:	4610      	movls	r0, r2

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
  /*lint -restore*/
    return NULL;
 8000c52:	2000      	movhi	r0, #0
 8000c54:	2300      	movs	r3, #0
 8000c56:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocI(size);
  chSysUnlock();

  return p;
}
 8000c5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	20000a1c 	.word	0x20000a1c
 8000c64:	20000a20 	.word	0x20000a20
	...

08000c70 <wakeup.lto_priv.104>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 8000c70:	b410      	push	{r4}
 8000c72:	2320      	movs	r3, #32
 8000c74:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 8000c78:	7f03      	ldrb	r3, [r0, #28]
 8000c7a:	2b07      	cmp	r3, #7
 8000c7c:	d80e      	bhi.n	8000c9c <wakeup.lto_priv.104+0x2c>
 8000c7e:	e8df f003 	tbb	[pc, r3]
 8000c82:	0d27      	.short	0x0d27
 8000c84:	0408230d 	.word	0x0408230d
 8000c88:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 8000c8a:	6a02      	ldr	r2, [r0, #32]
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 8000c8c:	6893      	ldr	r3, [r2, #8]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8000c92:	e890 000c 	ldmia.w	r0, {r2, r3}
 8000c96:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 8000c98:	6802      	ldr	r2, [r0, #0]
 8000c9a:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 8000c9c:	f04f 34ff 	mov.w	r4, #4294967295
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8000ca4:	4b0d      	ldr	r3, [pc, #52]	; (8000cdc <wakeup.lto_priv.104+0x6c>)
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 8000ca6:	6204      	str	r4, [r0, #32]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000ca8:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8000caa:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8000cac:	689a      	ldr	r2, [r3, #8]
 8000cae:	428a      	cmp	r2, r1
 8000cb0:	d2fb      	bcs.n	8000caa <wakeup.lto_priv.104+0x3a>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8000cb2:	685a      	ldr	r2, [r3, #4]
 8000cb4:	2100      	movs	r1, #0
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8000cb6:	6003      	str	r3, [r0, #0]
  tp->p_prev = cp->p_prev;
 8000cb8:	6042      	str	r2, [r0, #4]
  tp->p_prev->p_next = tp;
 8000cba:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 8000cbc:	6058      	str	r0, [r3, #4]
 8000cbe:	f381 8811 	msr	BASEPRI, r1
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8000cc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000cc6:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
 8000cc8:	6a03      	ldr	r3, [r0, #32]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	e7e5      	b.n	8000c9c <wakeup.lto_priv.104+0x2c>
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	f383 8811 	msr	BASEPRI, r3
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8000cd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	20001040 	.word	0x20001040

08000ce0 <_idle_thread.lto_priv.93>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8000ce0:	e7fe      	b.n	8000ce0 <_idle_thread.lto_priv.93>
 8000ce2:	bf00      	nop
	...

08000cf0 <chSchDoRescheduleAhead>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 8000cf0:	4a0d      	ldr	r2, [pc, #52]	; (8000d28 <chSchDoRescheduleAhead+0x38>)
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 8000cf2:	b4f0      	push	{r4, r5, r6, r7}
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8000cf4:	6810      	ldr	r0, [r2, #0]
  thread_t *otp, *cp;

  otp = currp;
 8000cf6:	6994      	ldr	r4, [r2, #24]

  tqp->p_next = tp->p_next;
 8000cf8:	6805      	ldr	r5, [r0, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8000cfa:	2701      	movs	r7, #1

  otp->p_state = CH_STATE_READY;
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	68a1      	ldr	r1, [r4, #8]
 8000d00:	462b      	mov	r3, r5
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000d02:	606a      	str	r2, [r5, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8000d04:	6015      	str	r5, [r2, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8000d06:	7707      	strb	r7, [r0, #28]
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8000d08:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 8000d0a:	7726      	strb	r6, [r4, #28]
 8000d0c:	e000      	b.n	8000d10 <chSchDoRescheduleAhead+0x20>
 8000d0e:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 8000d10:	689a      	ldr	r2, [r3, #8]
 8000d12:	428a      	cmp	r2, r1
 8000d14:	d8fb      	bhi.n	8000d0e <chSchDoRescheduleAhead+0x1e>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 8000d16:	685a      	ldr	r2, [r3, #4]
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 8000d18:	4621      	mov	r1, r4
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 8000d1a:	6023      	str	r3, [r4, #0]
  otp->p_prev = cp->p_prev;
 8000d1c:	6062      	str	r2, [r4, #4]
  otp->p_prev->p_next = otp;
 8000d1e:	6014      	str	r4, [r2, #0]
  cp->p_prev = otp;
 8000d20:	605c      	str	r4, [r3, #4]

  chSysSwitch(currp, otp);
}
 8000d22:	bcf0      	pop	{r4, r5, r6, r7}
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 8000d24:	f7ff ba84 	b.w	8000230 <_port_switch>
 8000d28:	20001040 	.word	0x20001040
 8000d2c:	00000000 	.word	0x00000000

08000d30 <_port_irq_epilogue>:
 8000d30:	2320      	movs	r3, #32
 8000d32:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8000d36:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <_port_irq_epilogue+0x44>)
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8000d3e:	d102      	bne.n	8000d46 <_port_irq_epilogue+0x16>
 8000d40:	f383 8811 	msr	BASEPRI, r3
 8000d44:	4770      	bx	lr
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8000d46:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 8000d4a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000d4e:	f843 2c04 	str.w	r2, [r3, #-4]
    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 8000d52:	f1a3 0220 	sub.w	r2, r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8000d56:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 8000d5a:	4a07      	ldr	r2, [pc, #28]	; (8000d78 <_port_irq_epilogue+0x48>)
 8000d5c:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->p_prio;
 8000d5e:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8000d60:	6889      	ldr	r1, [r1, #8]
 8000d62:	6892      	ldr	r2, [r2, #8]
 8000d64:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8000d66:	bf8c      	ite	hi
 8000d68:	4a04      	ldrhi	r2, [pc, #16]	; (8000d7c <_port_irq_epilogue+0x4c>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8000d6a:	4a05      	ldrls	r2, [pc, #20]	; (8000d80 <_port_irq_epilogue+0x50>)
 8000d6c:	f843 2c08 	str.w	r2, [r3, #-8]
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000ed00 	.word	0xe000ed00
 8000d78:	20001040 	.word	0x20001040
 8000d7c:	08000251 	.word	0x08000251
 8000d80:	08000254 	.word	0x08000254
	...

08000d90 <chPoolAlloc>:
 * @return              The pointer to the allocated object.
 * @retval NULL         if pool is empty.
 *
 * @api
 */
void *chPoolAlloc(memory_pool_t *mp) {
 8000d90:	b508      	push	{r3, lr}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000d92:	2220      	movs	r2, #32
 8000d94:	4603      	mov	r3, r0
 8000d96:	f382 8811 	msr	BASEPRI, r2
  void *objp;

  chDbgCheckClassI();
  chDbgCheck(mp != NULL);

  objp = mp->mp_next;
 8000d9a:	6800      	ldr	r0, [r0, #0]
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (objp != NULL) {
 8000d9c:	b128      	cbz	r0, 8000daa <chPoolAlloc+0x1a>
    mp->mp_next = mp->mp_next->ph_next;
 8000d9e:	6802      	ldr	r2, [r0, #0]
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	2300      	movs	r3, #0
 8000da4:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  objp = chPoolAllocI(mp);
  chSysUnlock();

  return objp;
}
 8000da8:	bd08      	pop	{r3, pc}
  objp = mp->mp_next;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (objp != NULL) {
    mp->mp_next = mp->mp_next->ph_next;
  }
  else if (mp->mp_provider != NULL) {
 8000daa:	689a      	ldr	r2, [r3, #8]
 8000dac:	2a00      	cmp	r2, #0
 8000dae:	d0f8      	beq.n	8000da2 <chPoolAlloc+0x12>
    objp = mp->mp_provider(mp->mp_object_size);
 8000db0:	6858      	ldr	r0, [r3, #4]
 8000db2:	4790      	blx	r2
 8000db4:	2300      	movs	r3, #0
 8000db6:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  objp = chPoolAllocI(mp);
  chSysUnlock();

  return objp;
}
 8000dba:	bd08      	pop	{r3, pc}
 8000dbc:	0000      	movs	r0, r0
	...

08000dc0 <chEvtUnregister>:
 8000dc0:	2320      	movs	r3, #32
 8000dc2:	f383 8811 	msr	BASEPRI, r3
  event_listener_t *p;

  chDbgCheck((esp != NULL) && (elp != NULL));

  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  p = (event_listener_t *)esp;
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	e002      	b.n	8000dd0 <chEvtUnregister+0x10>
  /*lint -restore*/
  chSysLock();
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (p->el_next != (event_listener_t *)esp) {
  /*lint -restore*/
    if (p->el_next == elp) {
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d007      	beq.n	8000dde <chEvtUnregister+0x1e>
 8000dce:	461a      	mov	r2, r3
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  p = (event_listener_t *)esp;
  /*lint -restore*/
  chSysLock();
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (p->el_next != (event_listener_t *)esp) {
 8000dd0:	6813      	ldr	r3, [r2, #0]
 8000dd2:	4283      	cmp	r3, r0
 8000dd4:	d1f9      	bne.n	8000dca <chEvtUnregister+0xa>
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f383 8811 	msr	BASEPRI, r3
 8000ddc:	4770      	bx	lr
  /*lint -restore*/
    if (p->el_next == elp) {
      p->el_next = elp->el_next;
 8000dde:	680b      	ldr	r3, [r1, #0]
 8000de0:	6013      	str	r3, [r2, #0]
 8000de2:	2300      	movs	r3, #0
 8000de4:	f383 8811 	msr	BASEPRI, r3
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	0000      	movs	r0, r0
	...

08000df0 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8000df0:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000df2:	490f      	ldr	r1, [pc, #60]	; (8000e30 <chTMStopMeasurementX+0x40>)
 8000df4:	685a      	ldr	r2, [r3, #4]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8000df6:	6883      	ldr	r3, [r0, #8]
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000df8:	6f09      	ldr	r1, [r1, #112]	; 0x70
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8000dfa:	1ad3      	subs	r3, r2, r3

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8000dfc:	68c2      	ldr	r2, [r0, #12]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8000dfe:	b430      	push	{r4, r5}
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8000e00:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8000e04:	1a5b      	subs	r3, r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8000e06:	3201      	adds	r2, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
 8000e08:	6841      	ldr	r1, [r0, #4]
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8000e0a:	18e4      	adds	r4, r4, r3

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8000e0c:	60c2      	str	r2, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
 8000e0e:	6802      	ldr	r2, [r0, #0]
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8000e10:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 8000e14:	428b      	cmp	r3, r1
    tmp->worst = tmp->last;
 8000e16:	bf88      	it	hi
 8000e18:	6043      	strhi	r3, [r0, #4]
  }
  if (tmp->last < tmp->best) {
 8000e1a:	4293      	cmp	r3, r2
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8000e1c:	e9c0 4504 	strd	r4, r5, [r0, #16]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 8000e20:	bc30      	pop	{r4, r5}
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8000e22:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
    tmp->best = tmp->last;
 8000e24:	bf38      	it	cc
 8000e26:	6003      	strcc	r3, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e0001000 	.word	0xe0001000
 8000e30:	20001040 	.word	0x20001040
	...

08000e40 <chThdYield>:
 * @details Yields the CPU control to the next thread in the ready list with
 *          equal priority, if any.
 *
 * @api
 */
void chThdYield(void) {
 8000e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e42:	2320      	movs	r3, #32
 8000e44:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.r_queue) >= currp->p_prio;
 8000e48:	4a12      	ldr	r2, [pc, #72]	; (8000e94 <chThdYield+0x54>)
 8000e4a:	6810      	ldr	r0, [r2, #0]
 8000e4c:	6994      	ldr	r4, [r2, #24]
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();

  if (chSchCanYieldS()) {
 8000e4e:	6883      	ldr	r3, [r0, #8]
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.r_queue) >= currp->p_prio;
 8000e50:	68a1      	ldr	r1, [r4, #8]
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();

  if (chSchCanYieldS()) {
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d203      	bcs.n	8000e5e <chThdYield+0x1e>
 8000e56:	2300      	movs	r3, #0
 8000e58:	f383 8811 	msr	BASEPRI, r3
 8000e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8000e5e:	6805      	ldr	r5, [r0, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8000e60:	2701      	movs	r7, #1
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000e62:	2600      	movs	r6, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000e64:	606a      	str	r2, [r5, #4]
 8000e66:	462b      	mov	r3, r5
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8000e68:	7707      	strb	r7, [r0, #28]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8000e6a:	6015      	str	r5, [r2, #0]
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8000e6c:	6190      	str	r0, [r2, #24]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000e6e:	7726      	strb	r6, [r4, #28]
 8000e70:	e000      	b.n	8000e74 <chThdYield+0x34>
 8000e72:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
 8000e74:	689a      	ldr	r2, [r3, #8]
 8000e76:	4291      	cmp	r1, r2
 8000e78:	d9fb      	bls.n	8000e72 <chThdYield+0x32>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8000e7a:	685a      	ldr	r2, [r3, #4]
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
 8000e7c:	4621      	mov	r1, r4
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8000e7e:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 8000e80:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 8000e82:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8000e84:	605c      	str	r4, [r3, #4]
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
 8000e86:	f7ff f9d3 	bl	8000230 <_port_switch>
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	f383 8811 	msr	BASEPRI, r3
 8000e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20001040 	.word	0x20001040
	...

08000ea0 <chSchDoReschedule>:
    chSchDoRescheduleAhead();
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
 8000ea0:	f7ff bf26 	b.w	8000cf0 <chSchDoRescheduleAhead>
	...

08000eb0 <chSchRescheduleS>:
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.r_queue) > currp->p_prio;
 8000eb0:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <chSchRescheduleS+0x14>)
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	699b      	ldr	r3, [r3, #24]
 */
void chSchRescheduleS(void) {

  chDbgCheckClassS();

  if (chSchIsRescRequiredI()) {
 8000eb6:	6892      	ldr	r2, [r2, #8]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d800      	bhi.n	8000ec0 <chSchRescheduleS+0x10>
 8000ebe:	4770      	bx	lr
    chSchDoRescheduleAhead();
 8000ec0:	f7ff bf16 	b.w	8000cf0 <chSchDoRescheduleAhead>
 8000ec4:	20001040 	.word	0x20001040
	...

08000ed0 <chThdSetPriority>:
 * @param[in] newprio   the new priority level of the running thread
 * @return              The old priority level.
 *
 * @api
 */
tprio_t chThdSetPriority(tprio_t newprio) {
 8000ed0:	b510      	push	{r4, lr}
 8000ed2:	2320      	movs	r3, #32
 8000ed4:	f383 8811 	msr	BASEPRI, r3

  chDbgCheck(newprio <= HIGHPRIO);

  chSysLock();
#if CH_CFG_USE_MUTEXES == TRUE
  oldprio = currp->p_realprio;
 8000ed8:	4b08      	ldr	r3, [pc, #32]	; (8000efc <chThdSetPriority+0x2c>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if ((currp->p_prio == currp->p_realprio) || (newprio > currp->p_prio)) {
 8000ede:	6899      	ldr	r1, [r3, #8]
 8000ee0:	428c      	cmp	r4, r1
 8000ee2:	d001      	beq.n	8000ee8 <chThdSetPriority+0x18>
 8000ee4:	4281      	cmp	r1, r0
 8000ee6:	d200      	bcs.n	8000eea <chThdSetPriority+0x1a>
    currp->p_prio = newprio;
 8000ee8:	6098      	str	r0, [r3, #8]
  }
  currp->p_realprio = newprio;
 8000eea:	63d8      	str	r0, [r3, #60]	; 0x3c
#else
  oldprio = currp->p_prio;
  currp->p_prio = newprio;
#endif
  chSchRescheduleS();
 8000eec:	f7ff ffe0 	bl	8000eb0 <chSchRescheduleS>
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return oldprio;
}
 8000ef6:	4620      	mov	r0, r4
 8000ef8:	bd10      	pop	{r4, pc}
 8000efa:	bf00      	nop
 8000efc:	20001040 	.word	0x20001040

08000f00 <chSchWakeupS>:

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8000f00:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <chSchWakeupS+0x54>)
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8000f02:	b470      	push	{r4, r5, r6}

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8000f04:	699e      	ldr	r6, [r3, #24]
 8000f06:	6884      	ldr	r4, [r0, #8]
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8000f08:	4605      	mov	r5, r0
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 8000f0a:	6201      	str	r1, [r0, #32]

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8000f0c:	68b0      	ldr	r0, [r6, #8]
 8000f0e:	4284      	cmp	r4, r0
 8000f10:	d80c      	bhi.n	8000f2c <chSchWakeupS+0x2c>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000f12:	2200      	movs	r2, #0
 8000f14:	772a      	strb	r2, [r5, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8000f16:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8000f18:	689a      	ldr	r2, [r3, #8]
 8000f1a:	4294      	cmp	r4, r2
 8000f1c:	d9fb      	bls.n	8000f16 <chSchWakeupS+0x16>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8000f1e:	685a      	ldr	r2, [r3, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8000f20:	602b      	str	r3, [r5, #0]
  tp->p_prev = cp->p_prev;
 8000f22:	606a      	str	r2, [r5, #4]
  tp->p_prev->p_next = tp;
 8000f24:	6015      	str	r5, [r2, #0]
  cp->p_prev = tp;
 8000f26:	605d      	str	r5, [r3, #4]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 8000f28:	bc70      	pop	{r4, r5, r6}
 8000f2a:	4770      	bx	lr
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
  cp = (thread_t *)&ch.rlist.r_queue;
 8000f2c:	461a      	mov	r2, r3
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000f2e:	2100      	movs	r1, #0
 8000f30:	7731      	strb	r1, [r6, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8000f32:	6812      	ldr	r2, [r2, #0]
  } while (cp->p_prio >= tp->p_prio);
 8000f34:	6891      	ldr	r1, [r2, #8]
 8000f36:	4288      	cmp	r0, r1
 8000f38:	d9fb      	bls.n	8000f32 <chSchWakeupS+0x32>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8000f3a:	6850      	ldr	r0, [r2, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 8000f3c:	2401      	movs	r4, #1
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8000f3e:	6070      	str	r0, [r6, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8000f40:	6032      	str	r2, [r6, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8000f42:	6006      	str	r6, [r0, #0]
  cp->p_prev = tp;
 8000f44:	6056      	str	r6, [r2, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 8000f46:	772c      	strb	r4, [r5, #28]
    chSysSwitch(ntp, otp);
 8000f48:	4631      	mov	r1, r6
 8000f4a:	4628      	mov	r0, r5
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
    setcurrp(ntp);
 8000f4c:	619d      	str	r5, [r3, #24]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 8000f4e:	bc70      	pop	{r4, r5, r6}
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 8000f50:	f7ff b96e 	b.w	8000230 <_port_switch>
 8000f54:	20001040 	.word	0x20001040
	...

08000f60 <chSemSignal>:
 *
 * @param[in] sp        pointer to a @p semaphore_t structure
 *
 * @api
 */
void chSemSignal(semaphore_t *sp) {
 8000f60:	b508      	push	{r3, lr}
 8000f62:	2320      	movs	r3, #32
 8000f64:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sp->s_cnt <= (cnt_t)0) {
 8000f68:	6883      	ldr	r3, [r0, #8]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	6083      	str	r3, [r0, #8]
 8000f70:	dd03      	ble.n	8000f7a <chSemSignal+0x1a>
 8000f72:	2300      	movs	r3, #0
 8000f74:	f383 8811 	msr	BASEPRI, r3
 8000f78:	bd08      	pop	{r3, pc}
 8000f7a:	4603      	mov	r3, r0
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8000f7c:	6800      	ldr	r0, [r0, #0]
    chSchWakeupS(queue_fifo_remove(&sp->s_queue), MSG_OK);
 8000f7e:	2100      	movs	r1, #0

  tqp->p_next = tp->p_next;
 8000f80:	6802      	ldr	r2, [r0, #0]
 8000f82:	601a      	str	r2, [r3, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000f84:	6053      	str	r3, [r2, #4]
 8000f86:	f7ff ffbb 	bl	8000f00 <chSchWakeupS>
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	f383 8811 	msr	BASEPRI, r3
 8000f90:	bd08      	pop	{r3, pc}
 8000f92:	bf00      	nop
	...

08000fa0 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 8000fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fa4:	4699      	mov	r9, r3
 8000fa6:	4604      	mov	r4, r0
 8000fa8:	2320      	movs	r3, #32
 8000faa:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000fae:	4e19      	ldr	r6, [pc, #100]	; (8001014 <chThdCreateStatic+0x74>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8000fb0:	3924      	subs	r1, #36	; 0x24
 8000fb2:	1847      	adds	r7, r0, r1
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000fb4:	6973      	ldr	r3, [r6, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8000fb6:	f8df a060 	ldr.w	sl, [pc, #96]	; 8001018 <chThdCreateStatic+0x78>
 8000fba:	60c7      	str	r7, [r0, #12]
 8000fbc:	f840 9001 	str.w	r9, [r0, r1]
 8000fc0:	9908      	ldr	r1, [sp, #32]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8000fc2:	2500      	movs	r5, #0
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 8000fc4:	f100 0928 	add.w	r9, r0, #40	; 0x28
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8000fc8:	f04f 0c01 	mov.w	ip, #1
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 8000fcc:	f100 0e24 	add.w	lr, r0, #36	; 0x24
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8000fd0:	f04f 0802 	mov.w	r8, #2

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8000fd4:	6079      	str	r1, [r7, #4]
 8000fd6:	f8c7 a020 	str.w	sl, [r7, #32]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 8000fda:	4629      	mov	r1, r5
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8000fdc:	6082      	str	r2, [r0, #8]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000fde:	6106      	str	r6, [r0, #16]
 8000fe0:	6143      	str	r3, [r0, #20]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8000fe2:	63c2      	str	r2, [r0, #60]	; 0x3c
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8000fe4:	f880 801c 	strb.w	r8, [r0, #28]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8000fe8:	f880 c01e 	strb.w	ip, [r0, #30]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8000fec:	7745      	strb	r5, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8000fee:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8000ff0:	6345      	str	r5, [r0, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8000ff2:	6185      	str	r5, [r0, #24]
  REG_INSERT(tp);
 8000ff4:	6118      	str	r0, [r3, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8000ff6:	f8c0 e024 	str.w	lr, [r0, #36]	; 0x24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000ffa:	f8c0 9028 	str.w	r9, [r0, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 8000ffe:	f8c0 902c 	str.w	r9, [r0, #44]	; 0x2c
 8001002:	6170      	str	r0, [r6, #20]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 8001004:	f7ff ff7c 	bl	8000f00 <chSchWakeupS>
 8001008:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  return tp;
}
 800100c:	4620      	mov	r0, r4
 800100e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001012:	bf00      	nop
 8001014:	20001040 	.word	0x20001040
 8001018:	08000241 	.word	0x08000241
 800101c:	00000000 	.word	0x00000000

08001020 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 8001020:	4b07      	ldr	r3, [pc, #28]	; (8001040 <chSchGoSleepS+0x20>)
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8001022:	b430      	push	{r4, r5}
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8001024:	681a      	ldr	r2, [r3, #0]
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 8001026:	6999      	ldr	r1, [r3, #24]

  tqp->p_next = tp->p_next;
 8001028:	6814      	ldr	r4, [r2, #0]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800102a:	2501      	movs	r5, #1
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
  otp->p_state = newstate;
 800102c:	7708      	strb	r0, [r1, #28]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800102e:	6063      	str	r3, [r4, #4]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8001030:	7715      	strb	r5, [r2, #28]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001032:	601c      	str	r4, [r3, #0]
  chSysSwitch(currp, otp);
 8001034:	4610      	mov	r0, r2
}
 8001036:	bc30      	pop	{r4, r5}
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8001038:	619a      	str	r2, [r3, #24]
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 800103a:	f7ff b8f9 	b.w	8000230 <_port_switch>
 800103e:	bf00      	nop
 8001040:	20001040 	.word	0x20001040
	...

08001050 <chMsgWait>:
 *
 * @return              A reference to the thread carrying the message.
 *
 * @api
 */
thread_t *chMsgWait(void) {
 8001050:	b510      	push	{r4, lr}
 8001052:	2320      	movs	r3, #32
 8001054:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp)) {
 8001058:	4c0b      	ldr	r4, [pc, #44]	; (8001088 <chMsgWait+0x38>)
 800105a:	69a2      	ldr	r2, [r4, #24]
 */
static inline bool chMsgIsPendingI(thread_t *tp) {

  chDbgCheckClassI();

  return (bool)(tp->p_msgqueue.p_next != (thread_t *)&tp->p_msgqueue);
 800105c:	4613      	mov	r3, r2
 800105e:	f853 0f28 	ldr.w	r0, [r3, #40]!
 8001062:	4298      	cmp	r0, r3
 8001064:	d008      	beq.n	8001078 <chMsgWait+0x28>
 8001066:	6801      	ldr	r1, [r0, #0]
    chSchGoSleepS(CH_STATE_WTMSG);
  }
  tp = queue_fifo_remove(&currp->p_msgqueue);
  tp->p_state = CH_STATE_SNDMSG;
 8001068:	240d      	movs	r4, #13
 800106a:	6291      	str	r1, [r2, #40]	; 0x28
  tqp->p_next->p_prev = (thread_t *)tqp;
 800106c:	604b      	str	r3, [r1, #4]
 800106e:	2200      	movs	r2, #0
 8001070:	7704      	strb	r4, [r0, #28]
 8001072:	f382 8811 	msr	BASEPRI, r2
  chSysUnlock();

  return tp;
}
 8001076:	bd10      	pop	{r4, pc}
thread_t *chMsgWait(void) {
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp)) {
    chSchGoSleepS(CH_STATE_WTMSG);
 8001078:	200e      	movs	r0, #14
 800107a:	f7ff ffd1 	bl	8001020 <chSchGoSleepS>
 800107e:	69a2      	ldr	r2, [r4, #24]
 8001080:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8001082:	f102 0328 	add.w	r3, r2, #40	; 0x28
 8001086:	e7ee      	b.n	8001066 <chMsgWait+0x16>
 8001088:	20001040 	.word	0x20001040
 800108c:	00000000 	.word	0x00000000

08001090 <chSemWait>:
 8001090:	2320      	movs	r3, #32
 8001092:	f383 8811 	msr	BASEPRI, r3
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
 8001096:	6883      	ldr	r3, [r0, #8]
 8001098:	3b01      	subs	r3, #1
 800109a:	2b00      	cmp	r3, #0
 800109c:	6083      	str	r3, [r0, #8]
 800109e:	db04      	blt.n	80010aa <chSemWait+0x1a>
    chSchGoSleepS(CH_STATE_WTSEM);

    return currp->p_u.rdymsg;
  }

  return MSG_OK;
 80010a0:	2000      	movs	r0, #0
 80010a2:	2300      	movs	r3, #0
 80010a4:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  msg = chSemWaitS(sp);
  chSysUnlock();

  return msg;
}
 80010a8:	4770      	bx	lr
 80010aa:	4603      	mov	r3, r0
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemWait(semaphore_t *sp) {
 80010ac:	b510      	push	{r4, lr}
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
    currp->p_u.wtsemp = sp;
 80010ae:	4c08      	ldr	r4, [pc, #32]	; (80010d0 <chSemWait+0x40>)
    sem_insert(currp, &sp->s_queue);
    chSchGoSleepS(CH_STATE_WTSEM);
 80010b0:	2005      	movs	r0, #5
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
    currp->p_u.wtsemp = sp;
 80010b2:	69a2      	ldr	r2, [r4, #24]
 80010b4:	6213      	str	r3, [r2, #32]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 80010b6:	6859      	ldr	r1, [r3, #4]
  cp->p_prev = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
 80010b8:	6013      	str	r3, [r2, #0]
  tp->p_prev = tqp->p_prev;
 80010ba:	6051      	str	r1, [r2, #4]
  tp->p_prev->p_next = tp;
 80010bc:	600a      	str	r2, [r1, #0]
  tqp->p_prev = tp;
 80010be:	605a      	str	r2, [r3, #4]
    sem_insert(currp, &sp->s_queue);
    chSchGoSleepS(CH_STATE_WTSEM);
 80010c0:	f7ff ffae 	bl	8001020 <chSchGoSleepS>

    return currp->p_u.rdymsg;
 80010c4:	69a3      	ldr	r3, [r4, #24]
 80010c6:	6a18      	ldr	r0, [r3, #32]
 80010c8:	2300      	movs	r3, #0
 80010ca:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  msg = chSemWaitS(sp);
  chSysUnlock();

  return msg;
}
 80010ce:	bd10      	pop	{r4, pc}
 80010d0:	20001040 	.word	0x20001040
	...

080010e0 <chSchReadyI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 80010e0:	b410      	push	{r4}
 80010e2:	4604      	mov	r4, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80010e4:	2200      	movs	r2, #0
 80010e6:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 80010e8:	4b07      	ldr	r3, [pc, #28]	; (8001108 <chSchReadyI+0x28>)
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80010ea:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 80010ec:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 80010ee:	689a      	ldr	r2, [r3, #8]
 80010f0:	428a      	cmp	r2, r1
 80010f2:	d2fb      	bcs.n	80010ec <chSchReadyI+0xc>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80010f4:	685a      	ldr	r2, [r3, #4]
  tp->p_prev->p_next = tp;
  cp->p_prev = tp;

  return tp;
}
 80010f6:	4620      	mov	r0, r4
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80010f8:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 80010fa:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 80010fc:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 80010fe:	605c      	str	r4, [r3, #4]

  return tp;
}
 8001100:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20001040 	.word	0x20001040
 800110c:	00000000 	.word	0x00000000

08001110 <chIQPutI>:
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 8001110:	6942      	ldr	r2, [r0, #20]
 * @retval Q_FULL       if the queue is full and the operation cannot be
 *                      completed.
 *
 * @iclass
 */
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {
 8001112:	4603      	mov	r3, r0
 8001114:	6980      	ldr	r0, [r0, #24]
 8001116:	b510      	push	{r4, lr}
 8001118:	4282      	cmp	r2, r0
 800111a:	d01d      	beq.n	8001158 <chIQPutI+0x48>

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 800111c:	6898      	ldr	r0, [r3, #8]
  *iqp->q_wrptr++ = b;
 800111e:	1c54      	adds	r4, r2, #1

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 8001120:	3001      	adds	r0, #1
  *iqp->q_wrptr++ = b;
 8001122:	615c      	str	r4, [r3, #20]

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 8001124:	6098      	str	r0, [r3, #8]
  *iqp->q_wrptr++ = b;
 8001126:	7011      	strb	r1, [r2, #0]
  if (iqp->q_wrptr >= iqp->q_top) {
 8001128:	6959      	ldr	r1, [r3, #20]
 800112a:	691a      	ldr	r2, [r3, #16]
 800112c:	4291      	cmp	r1, r2
 800112e:	d20c      	bcs.n	800114a <chIQPutI+0x3a>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8001130:	681a      	ldr	r2, [r3, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8001132:	4293      	cmp	r3, r2
 8001134:	d00e      	beq.n	8001154 <chIQPutI+0x44>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001136:	6811      	ldr	r1, [r2, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8001138:	2400      	movs	r4, #0
 800113a:	6019      	str	r1, [r3, #0]
  (void) chSchReadyI(tp);
 800113c:	4610      	mov	r0, r2
  tqp->p_next->p_prev = (thread_t *)tqp;
 800113e:	604b      	str	r3, [r1, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8001140:	6214      	str	r4, [r2, #32]
  (void) chSchReadyI(tp);
 8001142:	f7ff ffcd 	bl	80010e0 <chSchReadyI>
    iqp->q_wrptr = iqp->q_buffer;
  }

  chThdDequeueNextI(&iqp->q_waiting, Q_OK);

  return Q_OK;
 8001146:	4620      	mov	r0, r4
 8001148:	bd10      	pop	{r4, pc}
  }

  iqp->q_counter++;
  *iqp->q_wrptr++ = b;
  if (iqp->q_wrptr >= iqp->q_top) {
    iqp->q_wrptr = iqp->q_buffer;
 800114a:	68da      	ldr	r2, [r3, #12]
 800114c:	615a      	str	r2, [r3, #20]
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4293      	cmp	r3, r2
 8001152:	d1f0      	bne.n	8001136 <chIQPutI+0x26>
  }

  chThdDequeueNextI(&iqp->q_waiting, Q_OK);

  return Q_OK;
 8001154:	2000      	movs	r0, #0
 8001156:	bd10      	pop	{r4, pc}
 8001158:	6898      	ldr	r0, [r3, #8]
 800115a:	2800      	cmp	r0, #0
 800115c:	d0de      	beq.n	800111c <chIQPutI+0xc>
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {

  chDbgCheckClassI();

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
 800115e:	f06f 0003 	mvn.w	r0, #3
 8001162:	bd10      	pop	{r4, pc}
	...

08001170 <chOQGetI>:
 * @return              The byte value from the queue.
 * @retval Q_EMPTY      if the queue is empty.
 *
 * @iclass
 */
msg_t chOQGetI(output_queue_t *oqp) {
 8001170:	b538      	push	{r3, r4, r5, lr}
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 8001172:	6942      	ldr	r2, [r0, #20]
 8001174:	6983      	ldr	r3, [r0, #24]
 8001176:	429a      	cmp	r2, r3
 8001178:	d019      	beq.n	80011ae <chOQGetI+0x3e>

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 800117a:	6882      	ldr	r2, [r0, #8]
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
 800117c:	6905      	ldr	r5, [r0, #16]
  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 800117e:	1c59      	adds	r1, r3, #1

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 8001180:	3201      	adds	r2, #1
 8001182:	6082      	str	r2, [r0, #8]
  b = *oqp->q_rdptr++;
 8001184:	6181      	str	r1, [r0, #24]
  if (oqp->q_rdptr >= oqp->q_top) {
 8001186:	42a9      	cmp	r1, r5
  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 8001188:	781c      	ldrb	r4, [r3, #0]
  if (oqp->q_rdptr >= oqp->q_top) {
 800118a:	d20d      	bcs.n	80011a8 <chOQGetI+0x38>
 800118c:	6802      	ldr	r2, [r0, #0]
 800118e:	4290      	cmp	r0, r2
 8001190:	d008      	beq.n	80011a4 <chOQGetI+0x34>
 8001192:	4603      	mov	r3, r0
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001194:	6811      	ldr	r1, [r2, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8001196:	2500      	movs	r5, #0
 8001198:	6001      	str	r1, [r0, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800119a:	604b      	str	r3, [r1, #4]
  (void) chSchReadyI(tp);
 800119c:	4610      	mov	r0, r2

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 800119e:	6215      	str	r5, [r2, #32]
  (void) chSchReadyI(tp);
 80011a0:	f7ff ff9e 	bl	80010e0 <chSchReadyI>
    oqp->q_rdptr = oqp->q_buffer;
  }

  chThdDequeueNextI(&oqp->q_waiting, Q_OK);

  return (msg_t)b;
 80011a4:	4620      	mov	r0, r4
 80011a6:	bd38      	pop	{r3, r4, r5, pc}
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
    oqp->q_rdptr = oqp->q_buffer;
 80011a8:	68c3      	ldr	r3, [r0, #12]
 80011aa:	6183      	str	r3, [r0, #24]
 80011ac:	e7ee      	b.n	800118c <chOQGetI+0x1c>
 80011ae:	6882      	ldr	r2, [r0, #8]
 80011b0:	2a00      	cmp	r2, #0
 80011b2:	d0e2      	beq.n	800117a <chOQGetI+0xa>
  uint8_t b;

  chDbgCheckClassI();

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
 80011b4:	f06f 0002 	mvn.w	r0, #2
 80011b8:	bd38      	pop	{r3, r4, r5, pc}
 80011ba:	bf00      	nop
 80011bc:	0000      	movs	r0, r0
	...

080011c0 <chMsgSend>:
 * @return              The answer message from @p chMsgRelease().
 *
 * @api
 */
msg_t chMsgSend(thread_t *tp, msg_t msg) {
  thread_t *ctp = currp;
 80011c0:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <chMsgSend+0x3c>)
 * @param[in] msg       the message
 * @return              The answer message from @p chMsgRelease().
 *
 * @api
 */
msg_t chMsgSend(thread_t *tp, msg_t msg) {
 80011c2:	b570      	push	{r4, r5, r6, lr}
 80011c4:	2220      	movs	r2, #32
  thread_t *ctp = currp;
 80011c6:	699c      	ldr	r4, [r3, #24]
 80011c8:	f382 8811 	msr	BASEPRI, r2

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->p_msg = msg;
  ctp->p_u.wtobjp = &tp->p_msgqueue;
 80011cc:	f100 0528 	add.w	r5, r0, #40	; 0x28
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG) {
 80011d0:	7f06      	ldrb	r6, [r0, #28]

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->p_msg = msg;
  ctp->p_u.wtobjp = &tp->p_msgqueue;
 80011d2:	6225      	str	r5, [r4, #32]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 80011d4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG) {
 80011d6:	2e0e      	cmp	r6, #14
  thread_t *ctp = currp;

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->p_msg = msg;
 80011d8:	6321      	str	r1, [r4, #48]	; 0x30
  cp->p_prev = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
 80011da:	6025      	str	r5, [r4, #0]
  tp->p_prev = tqp->p_prev;
 80011dc:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 80011de:	6014      	str	r4, [r2, #0]
  tqp->p_prev = tp;
 80011e0:	62c4      	str	r4, [r0, #44]	; 0x2c
  ctp->p_u.wtobjp = &tp->p_msgqueue;
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG) {
 80011e2:	d007      	beq.n	80011f4 <chMsgSend+0x34>
    (void) chSchReadyI(tp);
  }
  chSchGoSleepS(CH_STATE_SNDMSGQ);
 80011e4:	200c      	movs	r0, #12
 80011e6:	f7ff ff1b 	bl	8001020 <chSchGoSleepS>
  msg = ctp->p_u.rdymsg;
 80011ea:	6a20      	ldr	r0, [r4, #32]
 80011ec:	2300      	movs	r3, #0
 80011ee:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return msg;
}
 80011f2:	bd70      	pop	{r4, r5, r6, pc}
  chSysLock();
  ctp->p_msg = msg;
  ctp->p_u.wtobjp = &tp->p_msgqueue;
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG) {
    (void) chSchReadyI(tp);
 80011f4:	f7ff ff74 	bl	80010e0 <chSchReadyI>
 80011f8:	e7f4      	b.n	80011e4 <chMsgSend+0x24>
 80011fa:	bf00      	nop
 80011fc:	20001040 	.word	0x20001040

08001200 <chEvtSignalI>:
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8001200:	6b43      	ldr	r3, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8001202:	7f02      	ldrb	r2, [r0, #28]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8001204:	4319      	orrs	r1, r3
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8001206:	2a0a      	cmp	r2, #10
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8001208:	6341      	str	r1, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800120a:	d00a      	beq.n	8001222 <chEvtSignalI+0x22>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 800120c:	2a0b      	cmp	r2, #11
 800120e:	d000      	beq.n	8001212 <chEvtSignalI+0x12>
 8001210:	4770      	bx	lr
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 8001212:	6a03      	ldr	r3, [r0, #32]
 8001214:	4019      	ands	r1, r3

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 8001216:	428b      	cmp	r3, r1
 8001218:	d1fa      	bne.n	8001210 <chEvtSignalI+0x10>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 800121a:	2300      	movs	r3, #0
 800121c:	6203      	str	r3, [r0, #32]
    (void) chSchReadyI(tp);
 800121e:	f7ff bf5f 	b.w	80010e0 <chSchReadyI>
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 8001222:	6a03      	ldr	r3, [r0, #32]
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8001224:	4219      	tst	r1, r3
 8001226:	d1f8      	bne.n	800121a <chEvtSignalI+0x1a>
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	0000      	movs	r0, r0
	...

08001230 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8001230:	b570      	push	{r4, r5, r6, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
 8001232:	6804      	ldr	r4, [r0, #0]
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8001234:	4606      	mov	r6, r0
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8001236:	42a0      	cmp	r0, r4
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8001238:	460d      	mov	r5, r1
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 800123a:	d00d      	beq.n	8001258 <chEvtBroadcastFlagsI+0x28>
  /*lint -restore*/
    elp->el_flags |= flags;
 800123c:	68e3      	ldr	r3, [r4, #12]
 800123e:	432b      	orrs	r3, r5
 8001240:	60e3      	str	r3, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8001242:	b115      	cbz	r5, 800124a <chEvtBroadcastFlagsI+0x1a>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
 8001244:	6922      	ldr	r2, [r4, #16]
  while (elp != (event_listener_t *)esp) {
  /*lint -restore*/
    elp->el_flags |= flags;
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8001246:	4213      	tst	r3, r2
 8001248:	d003      	beq.n	8001252 <chEvtBroadcastFlagsI+0x22>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
 800124a:	6860      	ldr	r0, [r4, #4]
 800124c:	68a1      	ldr	r1, [r4, #8]
 800124e:	f7ff ffd7 	bl	8001200 <chEvtSignalI>
    }
    elp = elp->el_next;
 8001252:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8001254:	42a6      	cmp	r6, r4
 8001256:	d1f1      	bne.n	800123c <chEvtBroadcastFlagsI+0xc>
 8001258:	bd70      	pop	{r4, r5, r6, pc}
 800125a:	bf00      	nop
 800125c:	0000      	movs	r0, r0
	...

08001260 <chMtxUnlockAll>:
 *          inheritance mechanism.
 *
 * @api
 */
void chMtxUnlockAll(void) {
  thread_t *ctp = currp;
 8001260:	4a13      	ldr	r2, [pc, #76]	; (80012b0 <chMtxUnlockAll+0x50>)
 *          this function does not have any overhead related to the priority
 *          inheritance mechanism.
 *
 * @api
 */
void chMtxUnlockAll(void) {
 8001262:	b570      	push	{r4, r5, r6, lr}
 8001264:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8001266:	6994      	ldr	r4, [r2, #24]
 8001268:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if (ctp->p_mtxlist != NULL) {
 800126c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800126e:	b1d3      	cbz	r3, 80012a6 <chMtxUnlockAll+0x46>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->m_cnt = (cnt_t)0;
#endif
        mp->m_owner = NULL;
 8001270:	2600      	movs	r6, #0
 8001272:	e00b      	b.n	800128c <chMtxUnlockAll+0x2c>
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->m_cnt = (cnt_t)1;
#endif
        thread_t *tp = queue_fifo_remove(&mp->m_queue);
        mp->m_owner = tp;
        mp->m_next = tp->p_mtxlist;
 8001274:	6b95      	ldr	r5, [r2, #56]	; 0x38
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001276:	6811      	ldr	r1, [r2, #0]
        tp->p_mtxlist = mp;
        (void) chSchReadyI(tp);
 8001278:	4610      	mov	r0, r2
 800127a:	6019      	str	r1, [r3, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800127c:	604b      	str	r3, [r1, #4]
      if (chMtxQueueNotEmptyS(mp)) {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->m_cnt = (cnt_t)1;
#endif
        thread_t *tp = queue_fifo_remove(&mp->m_queue);
        mp->m_owner = tp;
 800127e:	609a      	str	r2, [r3, #8]
        mp->m_next = tp->p_mtxlist;
 8001280:	60dd      	str	r5, [r3, #12]
        tp->p_mtxlist = mp;
 8001282:	6393      	str	r3, [r2, #56]	; 0x38
        (void) chSchReadyI(tp);
 8001284:	f7ff ff2c 	bl	80010e0 <chSchReadyI>
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->m_cnt = (cnt_t)0;
#endif
        mp->m_owner = NULL;
      }
    } while (ctp->p_mtxlist != NULL);
 8001288:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800128a:	b143      	cbz	r3, 800129e <chMtxUnlockAll+0x3e>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800128c:	681a      	ldr	r2, [r3, #0]

  chSysLock();
  if (ctp->p_mtxlist != NULL) {
    do {
      mutex_t *mp = ctp->p_mtxlist;
      ctp->p_mtxlist = mp->m_next;
 800128e:	68d9      	ldr	r1, [r3, #12]
      if (chMtxQueueNotEmptyS(mp)) {
 8001290:	4293      	cmp	r3, r2

  chSysLock();
  if (ctp->p_mtxlist != NULL) {
    do {
      mutex_t *mp = ctp->p_mtxlist;
      ctp->p_mtxlist = mp->m_next;
 8001292:	63a1      	str	r1, [r4, #56]	; 0x38
      if (chMtxQueueNotEmptyS(mp)) {
 8001294:	d1ee      	bne.n	8001274 <chMtxUnlockAll+0x14>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->m_cnt = (cnt_t)0;
#endif
        mp->m_owner = NULL;
 8001296:	609e      	str	r6, [r3, #8]
      }
    } while (ctp->p_mtxlist != NULL);
 8001298:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800129a:	2b00      	cmp	r3, #0
 800129c:	d1f6      	bne.n	800128c <chMtxUnlockAll+0x2c>
    ctp->p_prio = ctp->p_realprio;
 800129e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80012a0:	60a3      	str	r3, [r4, #8]
    chSchRescheduleS();
 80012a2:	f7ff fe05 	bl	8000eb0 <chSchRescheduleS>
 80012a6:	2300      	movs	r3, #0
 80012a8:	f383 8811 	msr	BASEPRI, r3
 80012ac:	bd70      	pop	{r4, r5, r6, pc}
 80012ae:	bf00      	nop
 80012b0:	20001040 	.word	0x20001040
	...

080012c0 <chMtxUnlockS>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
 80012c0:	b430      	push	{r4, r5}
 80012c2:	4604      	mov	r4, r0
  thread_t *ctp = currp;
 80012c4:	4a11      	ldr	r2, [pc, #68]	; (800130c <chMtxUnlockS+0x4c>)
 80012c6:	6825      	ldr	r5, [r4, #0]
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 80012c8:	68c3      	ldr	r3, [r0, #12]
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
  thread_t *ctp = currp;
 80012ca:	6990      	ldr	r0, [r2, #24]
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 80012cc:	42ac      	cmp	r4, r5
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 80012ce:	6383      	str	r3, [r0, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 80012d0:	d017      	beq.n	8001302 <chMtxUnlockS+0x42>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
 80012d2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 80012d4:	b14b      	cbz	r3, 80012ea <chMtxUnlockS+0x2a>
 80012d6:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 80012d8:	4293      	cmp	r3, r2
 80012da:	d003      	beq.n	80012e4 <chMtxUnlockS+0x24>
            (lmp->m_queue.p_next->p_prio > newprio)) {
 80012dc:	6892      	ldr	r2, [r2, #8]
 80012de:	4291      	cmp	r1, r2
 80012e0:	bf38      	it	cc
 80012e2:	4611      	movcc	r1, r2
          newprio = lmp->m_queue.p_next->p_prio;
        }
        lmp = lmp->m_next;
 80012e4:	68db      	ldr	r3, [r3, #12]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1f5      	bne.n	80012d6 <chMtxUnlockS+0x16>
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 80012ea:	6baa      	ldr	r2, [r5, #56]	; 0x38
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80012ec:	682b      	ldr	r3, [r5, #0]
        lmp = lmp->m_next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->p_prio = newprio;
 80012ee:	6081      	str	r1, [r0, #8]
 80012f0:	6023      	str	r3, [r4, #0]
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
      tp->p_mtxlist = mp;
      (void) chSchReadyI(tp);
 80012f2:	4628      	mov	r0, r5
  tqp->p_next->p_prev = (thread_t *)tqp;
 80012f4:	605c      	str	r4, [r3, #4]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
 80012f6:	60a5      	str	r5, [r4, #8]
      mp->m_next = tp->p_mtxlist;
 80012f8:	60e2      	str	r2, [r4, #12]
      tp->p_mtxlist = mp;
 80012fa:	63ac      	str	r4, [r5, #56]	; 0x38
      mp->m_owner = NULL;
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif
}
 80012fc:	bc30      	pop	{r4, r5}
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
      tp->p_mtxlist = mp;
      (void) chSchReadyI(tp);
 80012fe:	f7ff beef 	b.w	80010e0 <chSchReadyI>
    }
    else {
      mp->m_owner = NULL;
 8001302:	2300      	movs	r3, #0
 8001304:	60a3      	str	r3, [r4, #8]
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif
}
 8001306:	bc30      	pop	{r4, r5}
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	20001040 	.word	0x20001040

08001310 <chMtxUnlock>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
  thread_t *ctp = currp;
 8001310:	4b17      	ldr	r3, [pc, #92]	; (8001370 <chMtxUnlock+0x60>)
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 8001312:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8001314:	699d      	ldr	r5, [r3, #24]
 8001316:	2320      	movs	r3, #32
 8001318:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800131c:	6804      	ldr	r4, [r0, #0]
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 800131e:	68c3      	ldr	r3, [r0, #12]

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8001320:	42a0      	cmp	r0, r4
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 8001322:	63ab      	str	r3, [r5, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8001324:	d01d      	beq.n	8001362 <chMtxUnlock+0x52>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
 8001326:	6be9      	ldr	r1, [r5, #60]	; 0x3c
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8001328:	b14b      	cbz	r3, 800133e <chMtxUnlock+0x2e>
 800132a:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 800132c:	4293      	cmp	r3, r2
 800132e:	d003      	beq.n	8001338 <chMtxUnlock+0x28>
            (lmp->m_queue.p_next->p_prio > newprio)) {
 8001330:	6892      	ldr	r2, [r2, #8]
 8001332:	4291      	cmp	r1, r2
 8001334:	bf38      	it	cc
 8001336:	4611      	movcc	r1, r2
          newprio = lmp->m_queue.p_next->p_prio;
        }
        lmp = lmp->m_next;
 8001338:	68db      	ldr	r3, [r3, #12]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1f5      	bne.n	800132a <chMtxUnlock+0x1a>
 800133e:	4603      	mov	r3, r0
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001340:	6822      	ldr	r2, [r4, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 8001342:	6ba6      	ldr	r6, [r4, #56]	; 0x38

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 8001344:	4620      	mov	r0, r4
        lmp = lmp->m_next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->p_prio = newprio;
 8001346:	60a9      	str	r1, [r5, #8]
 8001348:	601a      	str	r2, [r3, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800134a:	6053      	str	r3, [r2, #4]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
 800134c:	609c      	str	r4, [r3, #8]
      mp->m_next = tp->p_mtxlist;
 800134e:	60de      	str	r6, [r3, #12]
      tp->p_mtxlist = mp;
 8001350:	63a3      	str	r3, [r4, #56]	; 0x38

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 8001352:	f7ff fec5 	bl	80010e0 <chSchReadyI>
      chSchRescheduleS();
 8001356:	f7ff fdab 	bl	8000eb0 <chSchRescheduleS>
 800135a:	2300      	movs	r3, #0
 800135c:	f383 8811 	msr	BASEPRI, r3
 8001360:	bd70      	pop	{r4, r5, r6, pc}
    }
    else {
      mp->m_owner = NULL;
 8001362:	2300      	movs	r3, #0
 8001364:	6083      	str	r3, [r0, #8]
 8001366:	2300      	movs	r3, #0
 8001368:	f383 8811 	msr	BASEPRI, r3
 800136c:	bd70      	pop	{r4, r5, r6, pc}
 800136e:	bf00      	nop
 8001370:	20001040 	.word	0x20001040
	...

08001380 <chMtxLockS>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
 8001380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 8001382:	6882      	ldr	r2, [r0, #8]
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
  thread_t *ctp = currp;
 8001384:	4b2f      	ldr	r3, [pc, #188]	; (8001444 <chMtxLockS+0xc4>)
 8001386:	699c      	ldr	r4, [r3, #24]

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 8001388:	2a00      	cmp	r2, #0
 800138a:	d055      	beq.n	8001438 <chMtxLockS+0xb8>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 800138c:	68a1      	ldr	r1, [r4, #8]
 800138e:	6893      	ldr	r3, [r2, #8]
 8001390:	4605      	mov	r5, r0
 8001392:	4299      	cmp	r1, r3
 8001394:	d906      	bls.n	80013a4 <chMtxLockS+0x24>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 8001396:	7f13      	ldrb	r3, [r2, #28]

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;
 8001398:	6091      	str	r1, [r2, #8]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 800139a:	2b06      	cmp	r3, #6
 800139c:	d033      	beq.n	8001406 <chMtxLockS+0x86>
 800139e:	2b07      	cmp	r3, #7
 80013a0:	d01d      	beq.n	80013de <chMtxLockS+0x5e>
 80013a2:	b19b      	cbz	r3, 80013cc <chMtxLockS+0x4c>
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 80013a4:	462b      	mov	r3, r5
 80013a6:	e003      	b.n	80013b0 <chMtxLockS+0x30>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80013a8:	6899      	ldr	r1, [r3, #8]
 80013aa:	68a2      	ldr	r2, [r4, #8]
 80013ac:	4291      	cmp	r1, r2
 80013ae:	d302      	bcc.n	80013b6 <chMtxLockS+0x36>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 80013b0:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80013b2:	429d      	cmp	r5, r3
 80013b4:	d1f8      	bne.n	80013a8 <chMtxLockS+0x28>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80013b6:	685a      	ldr	r2, [r3, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 80013b8:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 80013ba:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 80013bc:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 80013be:	605c      	str	r4, [r3, #4]
        break;
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtmtxp = mp;
 80013c0:	6225      	str	r5, [r4, #32]
      chSchGoSleepS(CH_STATE_WTMTX);
 80013c2:	2006      	movs	r0, #6
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
    ctp->p_mtxlist = mp;
  }
}
 80013c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtmtxp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 80013c8:	f7ff be2a 	b.w	8001020 <chSchGoSleepS>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 80013cc:	e892 000a 	ldmia.w	r2, {r1, r3}
 80013d0:	6019      	str	r1, [r3, #0]
#if CH_DBG_ENABLE_ASSERTS == TRUE
          /* Prevents an assertion in chSchReadyI().*/
          tp->p_state = CH_STATE_CURRENT;
#endif
          /* Re-enqueues tp with its new priority on the ready list.*/
          (void) chSchReadyI(queue_dequeue(tp));
 80013d2:	4610      	mov	r0, r2
  tp->p_next->p_prev = tp->p_prev;
 80013d4:	6812      	ldr	r2, [r2, #0]
 80013d6:	6053      	str	r3, [r2, #4]
 80013d8:	f7ff fe82 	bl	80010e0 <chSchReadyI>
 80013dc:	e7e2      	b.n	80013a4 <chMtxLockS+0x24>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 80013de:	6817      	ldr	r7, [r2, #0]
 80013e0:	6850      	ldr	r0, [r2, #4]
#endif
#if (CH_CFG_USE_MESSAGES == TRUE) && (CH_CFG_USE_MESSAGES_PRIORITY == TRUE)
        case CH_STATE_SNDMSGQ:
#endif
          /* Re-enqueues tp with its new priority on the queue.*/
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 80013e2:	6a16      	ldr	r6, [r2, #32]
 80013e4:	6007      	str	r7, [r0, #0]
  tp->p_next->p_prev = tp->p_prev;
 80013e6:	6817      	ldr	r7, [r2, #0]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 80013e8:	4633      	mov	r3, r6
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
  tp->p_next->p_prev = tp->p_prev;
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	e002      	b.n	80013f4 <chMtxLockS+0x74>
static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80013ee:	6898      	ldr	r0, [r3, #8]
 80013f0:	4288      	cmp	r0, r1
 80013f2:	d302      	bcc.n	80013fa <chMtxLockS+0x7a>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 80013f4:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80013f6:	429e      	cmp	r6, r3
 80013f8:	d1f9      	bne.n	80013ee <chMtxLockS+0x6e>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80013fa:	6859      	ldr	r1, [r3, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 80013fc:	6013      	str	r3, [r2, #0]
  tp->p_prev = cp->p_prev;
 80013fe:	6051      	str	r1, [r2, #4]
  tp->p_prev->p_next = tp;
 8001400:	600a      	str	r2, [r1, #0]
  cp->p_prev = tp;
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	e7ce      	b.n	80013a4 <chMtxLockS+0x24>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8001406:	6817      	ldr	r7, [r2, #0]
 8001408:	6850      	ldr	r0, [r2, #4]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
        case CH_STATE_WTMTX:
          /* Re-enqueues the mutex owner with its new priority.*/
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 800140a:	6a16      	ldr	r6, [r2, #32]
 800140c:	6007      	str	r7, [r0, #0]
  tp->p_next->p_prev = tp->p_prev;
 800140e:	6817      	ldr	r7, [r2, #0]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8001410:	4633      	mov	r3, r6
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
  tp->p_next->p_prev = tp->p_prev;
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	e002      	b.n	800141c <chMtxLockS+0x9c>
static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001416:	6898      	ldr	r0, [r3, #8]
 8001418:	4288      	cmp	r0, r1
 800141a:	d302      	bcc.n	8001422 <chMtxLockS+0xa2>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 800141c:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 800141e:	429e      	cmp	r6, r3
 8001420:	d1f9      	bne.n	8001416 <chMtxLockS+0x96>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001422:	6859      	ldr	r1, [r3, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8001424:	6013      	str	r3, [r2, #0]
  tp->p_prev = cp->p_prev;
 8001426:	6051      	str	r1, [r2, #4]
  tp->p_prev->p_next = tp;
 8001428:	600a      	str	r2, [r1, #0]
  cp->p_prev = tp;
 800142a:	605a      	str	r2, [r3, #4]
          tp = tp->p_u.wtmtxp->m_owner;
 800142c:	68b2      	ldr	r2, [r6, #8]
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 800142e:	68a1      	ldr	r1, [r4, #8]
 8001430:	6893      	ldr	r3, [r2, #8]
 8001432:	428b      	cmp	r3, r1
 8001434:	d3af      	bcc.n	8001396 <chMtxLockS+0x16>
 8001436:	e7b5      	b.n	80013a4 <chMtxLockS+0x24>

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
 8001438:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
 800143a:	6084      	str	r4, [r0, #8]
    mp->m_next = ctp->p_mtxlist;
 800143c:	60c3      	str	r3, [r0, #12]
    ctp->p_mtxlist = mp;
 800143e:	63a0      	str	r0, [r4, #56]	; 0x38
 8001440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001442:	bf00      	nop
 8001444:	20001040 	.word	0x20001040
	...

08001450 <chMtxLock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxLock(mutex_t *mp) {
 8001450:	b508      	push	{r3, lr}
 8001452:	2320      	movs	r3, #32
 8001454:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chMtxLockS(mp);
 8001458:	f7ff ff92 	bl	8001380 <chMtxLockS>
 800145c:	2300      	movs	r3, #0
 800145e:	f383 8811 	msr	BASEPRI, r3
 8001462:	bd08      	pop	{r3, pc}
	...

08001470 <chHeapStatus>:
 *                      fragmented free space
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *sizep) {
 8001470:	b570      	push	{r4, r5, r6, lr}
  union heap_header *qp;
  size_t n, sz;

  if (heapp == NULL) {
    heapp = &default_heap;
 8001472:	4c0f      	ldr	r4, [pc, #60]	; (80014b0 <chHeapStatus+0x40>)
 *                      fragmented free space
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *sizep) {
 8001474:	460e      	mov	r6, r1
  union heap_header *qp;
  size_t n, sz;

  if (heapp == NULL) {
    heapp = &default_heap;
 8001476:	2800      	cmp	r0, #0
 8001478:	bf18      	it	ne
 800147a:	4604      	movne	r4, r0
  }

  H_LOCK(heapp);
 800147c:	f104 0510 	add.w	r5, r4, #16
 8001480:	4628      	mov	r0, r5
 8001482:	f7ff ffe5 	bl	8001450 <chMtxLock>
  sz = 0;
  n = 0;
  qp = &heapp->h_free;
  while (qp->h.u.next != NULL) {
 8001486:	68a3      	ldr	r3, [r4, #8]
 8001488:	b173      	cbz	r3, 80014a8 <chHeapStatus+0x38>
 800148a:	2200      	movs	r2, #0
 800148c:	4614      	mov	r4, r2
    sz += qp->h.u.next->h.size;
 800148e:	6858      	ldr	r0, [r3, #4]

  H_LOCK(heapp);
  sz = 0;
  n = 0;
  qp = &heapp->h_free;
  while (qp->h.u.next != NULL) {
 8001490:	681b      	ldr	r3, [r3, #0]
    sz += qp->h.u.next->h.size;
    n++;
 8001492:	3401      	adds	r4, #1
  H_LOCK(heapp);
  sz = 0;
  n = 0;
  qp = &heapp->h_free;
  while (qp->h.u.next != NULL) {
    sz += qp->h.u.next->h.size;
 8001494:	4402      	add	r2, r0

  H_LOCK(heapp);
  sz = 0;
  n = 0;
  qp = &heapp->h_free;
  while (qp->h.u.next != NULL) {
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1f9      	bne.n	800148e <chHeapStatus+0x1e>
    sz += qp->h.u.next->h.size;
    n++;
    qp = qp->h.u.next;
  }
  if (sizep != NULL) {
 800149a:	b106      	cbz	r6, 800149e <chHeapStatus+0x2e>
    *sizep = sz;
 800149c:	6032      	str	r2, [r6, #0]
  }
  H_UNLOCK(heapp);
 800149e:	4628      	mov	r0, r5
 80014a0:	f7ff ff36 	bl	8001310 <chMtxUnlock>

  return n;
}
 80014a4:	4620      	mov	r0, r4
 80014a6:	bd70      	pop	{r4, r5, r6, pc}
  if (heapp == NULL) {
    heapp = &default_heap;
  }

  H_LOCK(heapp);
  sz = 0;
 80014a8:	461a      	mov	r2, r3
  n = 0;
 80014aa:	461c      	mov	r4, r3
 80014ac:	e7f5      	b.n	800149a <chHeapStatus+0x2a>
 80014ae:	bf00      	nop
 80014b0:	200009c8 	.word	0x200009c8
	...

080014c0 <chHeapFree>:
 *
 * @param[in] p         pointer to the memory block to be freed
 *
 * @api
 */
void chHeapFree(void *p) {
 80014c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  chDbgCheck(p != NULL);

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (union heap_header *)p - 1;
  /*lint -restore*/
  heapp = hp->h.u.heap;
 80014c2:	f850 5c08 	ldr.w	r5, [r0, #-8]
 *
 * @param[in] p         pointer to the memory block to be freed
 *
 * @api
 */
void chHeapFree(void *p) {
 80014c6:	4606      	mov	r6, r0
  hp = (union heap_header *)p - 1;
  /*lint -restore*/
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;

  H_LOCK(heapp);
 80014c8:	f105 0710 	add.w	r7, r5, #16
  memory_heap_t *heapp;

  chDbgCheck(p != NULL);

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (union heap_header *)p - 1;
 80014cc:	f1a0 0408 	sub.w	r4, r0, #8
  /*lint -restore*/
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;
 80014d0:	3508      	adds	r5, #8

  H_LOCK(heapp);
 80014d2:	4638      	mov	r0, r7
 80014d4:	f7ff ffbc 	bl	8001450 <chMtxLock>

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (union heap_header *)p - 1;
  /*lint -restore*/
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;
 80014d8:	462b      	mov	r3, r5

  H_LOCK(heapp);
  while (true) {
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
 80014da:	42ab      	cmp	r3, r5
 80014dc:	d004      	beq.n	80014e8 <chHeapFree+0x28>
 80014de:	42a3      	cmp	r3, r4
 80014e0:	d302      	bcc.n	80014e8 <chHeapFree+0x28>
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	42ab      	cmp	r3, r5
 80014e6:	d1fa      	bne.n	80014de <chHeapFree+0x1e>
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
 80014e8:	681a      	ldr	r2, [r3, #0]

  H_LOCK(heapp);
  while (true) {
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
 80014ea:	b11a      	cbz	r2, 80014f4 <chHeapFree+0x34>
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
 80014ec:	4294      	cmp	r4, r2
 80014ee:	d301      	bcc.n	80014f4 <chHeapFree+0x34>
 80014f0:	4613      	mov	r3, r2
 80014f2:	e7f2      	b.n	80014da <chHeapFree+0x1a>
      /* Insertion after qp.*/
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
 80014f4:	f856 1c04 	ldr.w	r1, [r6, #-4]
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
      /* Insertion after qp.*/
      hp->h.u.next = qp->h.u.next;
 80014f8:	f846 2c08 	str.w	r2, [r6, #-8]
      qp->h.u.next = hp;
 80014fc:	601c      	str	r4, [r3, #0]
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
 80014fe:	f101 0208 	add.w	r2, r1, #8
 8001502:	f856 5c08 	ldr.w	r5, [r6, #-8]
 8001506:	18a0      	adds	r0, r4, r2
 8001508:	42a8      	cmp	r0, r5
 800150a:	d00a      	beq.n	8001522 <chHeapFree+0x62>
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
 800150c:	6859      	ldr	r1, [r3, #4]
 800150e:	f101 0208 	add.w	r2, r1, #8
 8001512:	441a      	add	r2, r3
 8001514:	4294      	cmp	r4, r2
 8001516:	d010      	beq.n	800153a <chHeapFree+0x7a>
      }
      break;
    }
    qp = qp->h.u.next;
  }
  H_UNLOCK(heapp);
 8001518:	4638      	mov	r0, r7

  return;
}
 800151a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      }
      break;
    }
    qp = qp->h.u.next;
  }
  H_UNLOCK(heapp);
 800151e:	f7ff bef7 	b.w	8001310 <chMtxUnlock>
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
 8001522:	6845      	ldr	r5, [r0, #4]
        hp->h.u.next = hp->h.u.next->h.u.next;
 8001524:	58a0      	ldr	r0, [r4, r2]
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
 8001526:	194a      	adds	r2, r1, r5
 8001528:	3208      	adds	r2, #8
        hp->h.u.next = hp->h.u.next->h.u.next;
 800152a:	e906 0005 	stmdb	r6, {r0, r2}
      }
      if ((LIMIT(qp) == hp)) {
 800152e:	6859      	ldr	r1, [r3, #4]
 8001530:	f101 0208 	add.w	r2, r1, #8
 8001534:	441a      	add	r2, r3
 8001536:	4294      	cmp	r4, r2
 8001538:	d1ee      	bne.n	8001518 <chHeapFree+0x58>
        /* Merge with the previous block.*/
        qp->h.size += hp->h.size + sizeof(union heap_header);
        qp->h.u.next = hp->h.u.next;
 800153a:	e916 0005 	ldmdb	r6, {r0, r2}
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
        /* Merge with the previous block.*/
        qp->h.size += hp->h.size + sizeof(union heap_header);
 800153e:	440a      	add	r2, r1
 8001540:	3208      	adds	r2, #8
        qp->h.u.next = hp->h.u.next;
 8001542:	e883 0005 	stmia.w	r3, {r0, r2}
      }
      break;
    }
    qp = qp->h.u.next;
  }
  H_UNLOCK(heapp);
 8001546:	4638      	mov	r0, r7

  return;
}
 8001548:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      }
      break;
    }
    qp = qp->h.u.next;
  }
  H_UNLOCK(heapp);
 800154c:	f7ff bee0 	b.w	8001310 <chMtxUnlock>

08001550 <chThdRelease>:
 *
 * @param[in] tp        pointer to the thread
 *
 * @api
 */
void chThdRelease(thread_t *tp) {
 8001550:	4602      	mov	r2, r0
 8001552:	2120      	movs	r1, #32
 8001554:	f381 8811 	msr	BASEPRI, r1
  trefs_t refs;

  chSysLock();
  chDbgAssert(tp->p_refs > (trefs_t)0, "not referenced");
  tp->p_refs--;
 8001558:	7f83      	ldrb	r3, [r0, #30]
 800155a:	3b01      	subs	r3, #1
 800155c:	b2db      	uxtb	r3, r3
 800155e:	7783      	strb	r3, [r0, #30]
  refs = tp->p_refs;

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator. Of course static threads are not affected.*/
  if ((refs == (trefs_t)0) && (tp->p_state == CH_STATE_FINAL)) {
 8001560:	b94b      	cbnz	r3, 8001576 <chThdRelease+0x26>
 *
 * @param[in] tp        pointer to the thread
 *
 * @api
 */
void chThdRelease(thread_t *tp) {
 8001562:	b410      	push	{r4}
  refs = tp->p_refs;

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator. Of course static threads are not affected.*/
  if ((refs == (trefs_t)0) && (tp->p_state == CH_STATE_FINAL)) {
 8001564:	7f04      	ldrb	r4, [r0, #28]
 8001566:	2c0f      	cmp	r4, #15
 8001568:	d009      	beq.n	800157e <chThdRelease+0x2e>
 800156a:	2300      	movs	r3, #0
 800156c:	f383 8811 	msr	BASEPRI, r3
         registry on exit.*/
      break;
    }
  }
  chSysUnlock();
}
 8001570:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	2300      	movs	r3, #0
 8001578:	f383 8811 	msr	BASEPRI, r3
 800157c:	4770      	bx	lr

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator. Of course static threads are not affected.*/
  if ((refs == (trefs_t)0) && (tp->p_state == CH_STATE_FINAL)) {
    switch (tp->p_flags & CH_FLAG_MODE_MASK) {
 800157e:	7f44      	ldrb	r4, [r0, #29]
 8001580:	f004 0403 	and.w	r4, r4, #3
 8001584:	2c01      	cmp	r4, #1
 8001586:	d011      	beq.n	80015ac <chThdRelease+0x5c>
 8001588:	2c02      	cmp	r4, #2
 800158a:	d1ee      	bne.n	800156a <chThdRelease+0x1a>
      return;
#endif
#if CH_CFG_USE_MEMPOOLS == TRUE
    case CH_FLAG_MODE_MPOOL:
#if CH_CFG_USE_REGISTRY == TRUE
      REG_REMOVE(tp);
 800158c:	6914      	ldr	r4, [r2, #16]
 800158e:	6940      	ldr	r0, [r0, #20]
 8001590:	6104      	str	r4, [r0, #16]
 8001592:	6914      	ldr	r4, [r2, #16]
 8001594:	6160      	str	r0, [r4, #20]
 8001596:	f383 8811 	msr	BASEPRI, r3
#endif
      chSysUnlock();
      chPoolFree(tp->p_mpool, tp);
 800159a:	6c10      	ldr	r0, [r2, #64]	; 0x40
 800159c:	f381 8811 	msr	BASEPRI, r1
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 80015a0:	6801      	ldr	r1, [r0, #0]
 80015a2:	6011      	str	r1, [r2, #0]
  mp->mp_next = php;
 80015a4:	6002      	str	r2, [r0, #0]
 80015a6:	f383 8811 	msr	BASEPRI, r3
 80015aa:	e7e1      	b.n	8001570 <chThdRelease+0x20>
  if ((refs == (trefs_t)0) && (tp->p_state == CH_STATE_FINAL)) {
    switch (tp->p_flags & CH_FLAG_MODE_MASK) {
#if CH_CFG_USE_HEAP == TRUE
    case CH_FLAG_MODE_HEAP:
#if CH_CFG_USE_REGISTRY == TRUE
      REG_REMOVE(tp);
 80015ac:	6941      	ldr	r1, [r0, #20]
 80015ae:	6904      	ldr	r4, [r0, #16]
 80015b0:	610c      	str	r4, [r1, #16]
 80015b2:	6902      	ldr	r2, [r0, #16]
 80015b4:	6151      	str	r1, [r2, #20]
 80015b6:	f383 8811 	msr	BASEPRI, r3
         registry on exit.*/
      break;
    }
  }
  chSysUnlock();
}
 80015ba:	f85d 4b04 	ldr.w	r4, [sp], #4
    case CH_FLAG_MODE_HEAP:
#if CH_CFG_USE_REGISTRY == TRUE
      REG_REMOVE(tp);
#endif
      chSysUnlock();
      chHeapFree(tp);
 80015be:	f7ff bf7f 	b.w	80014c0 <chHeapFree>
 80015c2:	bf00      	nop
	...

080015d0 <chRegNextThread>:
 * @return              A reference to the next thread.
 * @retval NULL         if there is no next thread.
 *
 * @api
 */
thread_t *chRegNextThread(thread_t *tp) {
 80015d0:	b510      	push	{r4, lr}
 80015d2:	2320      	movs	r3, #32
 80015d4:	f383 8811 	msr	BASEPRI, r3
  thread_t *ntp;

  chSysLock();
  ntp = tp->p_newer;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  if (ntp == (thread_t *)&ch.rlist) {
 80015d8:	4b07      	ldr	r3, [pc, #28]	; (80015f8 <chRegNextThread+0x28>)
 */
thread_t *chRegNextThread(thread_t *tp) {
  thread_t *ntp;

  chSysLock();
  ntp = tp->p_newer;
 80015da:	6904      	ldr	r4, [r0, #16]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  if (ntp == (thread_t *)&ch.rlist) {
 80015dc:	429c      	cmp	r4, r3
    ntp = NULL;
  }
#if CH_CFG_USE_DYNAMIC == TRUE
  else {
    chDbgAssert(ntp->p_refs < (trefs_t)255, "too many references");
    ntp->p_refs++;
 80015de:	bf17      	itett	ne
 80015e0:	7fa3      	ldrbne	r3, [r4, #30]
  chSysLock();
  ntp = tp->p_newer;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  if (ntp == (thread_t *)&ch.rlist) {
  /*lint -restore*/
    ntp = NULL;
 80015e2:	2400      	moveq	r4, #0
  }
#if CH_CFG_USE_DYNAMIC == TRUE
  else {
    chDbgAssert(ntp->p_refs < (trefs_t)255, "too many references");
    ntp->p_refs++;
 80015e4:	3301      	addne	r3, #1
 80015e6:	77a3      	strbne	r3, [r4, #30]
 80015e8:	2300      	movs	r3, #0
 80015ea:	f383 8811 	msr	BASEPRI, r3
  }
#endif
  chSysUnlock();
#if CH_CFG_USE_DYNAMIC == TRUE
  chThdRelease(tp);
 80015ee:	f7ff ffaf 	bl	8001550 <chThdRelease>
#endif

  return ntp;
}
 80015f2:	4620      	mov	r0, r4
 80015f4:	bd10      	pop	{r4, pc}
 80015f6:	bf00      	nop
 80015f8:	20001040 	.word	0x20001040
 80015fc:	00000000 	.word	0x00000000

08001600 <chThdWait>:
 * @param[in] tp        pointer to the thread
 * @return              The exit code from the terminated thread.
 *
 * @api
 */
msg_t chThdWait(thread_t *tp) {
 8001600:	b538      	push	{r3, r4, r5, lr}
 8001602:	4604      	mov	r4, r0
 8001604:	2320      	movs	r3, #32
 8001606:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chDbgAssert(tp != currp, "waiting self");
#if CH_CFG_USE_DYNAMIC == TRUE
  chDbgAssert(tp->p_refs > (trefs_t)0, "not referenced");
#endif
  if (tp->p_state != CH_STATE_FINAL) {
 800160a:	7f03      	ldrb	r3, [r0, #28]
 800160c:	2b0f      	cmp	r3, #15
 800160e:	d007      	beq.n	8001620 <chThdWait+0x20>
    list_insert(currp, &tp->p_waiting);
 8001610:	4b08      	ldr	r3, [pc, #32]	; (8001634 <chThdWait+0x34>)
/* If the performance code path has been chosen then all the following
   functions are inlined into the various kernel modules.*/
#if CH_CFG_OPTIMIZE_SPEED == TRUE
static inline void list_insert(thread_t *tp, threads_list_t *tlp) {

  tp->p_next = tlp->p_next;
 8001612:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001614:	699b      	ldr	r3, [r3, #24]
    chSchGoSleepS(CH_STATE_WTEXIT);
 8001616:	2009      	movs	r0, #9
 8001618:	601a      	str	r2, [r3, #0]
  tlp->p_next = tp;
 800161a:	6263      	str	r3, [r4, #36]	; 0x24
 800161c:	f7ff fd00 	bl	8001020 <chSchGoSleepS>
  }
  msg = tp->p_u.exitcode;
 8001620:	6a25      	ldr	r5, [r4, #32]
 8001622:	2300      	movs	r3, #0
 8001624:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

#if CH_CFG_USE_DYNAMIC == TRUE
  /* Releasing a lock if it is a dynamic thread.*/
  chThdRelease(tp);
 8001628:	4620      	mov	r0, r4
 800162a:	f7ff ff91 	bl	8001550 <chThdRelease>
#endif

  return msg;
}
 800162e:	4628      	mov	r0, r5
 8001630:	bd38      	pop	{r3, r4, r5, pc}
 8001632:	bf00      	nop
 8001634:	20001040 	.word	0x20001040
	...

08001640 <chHeapAlloc>:
 * @return              A pointer to the allocated block.
 * @retval NULL         if the block cannot be allocated.
 *
 * @api
 */
void *chHeapAlloc(memory_heap_t *heapp, size_t size) {
 8001640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  union heap_header *qp, *hp, *fp;

  if (heapp == NULL) {
    heapp = &default_heap;
 8001642:	4e21      	ldr	r6, [pc, #132]	; (80016c8 <chHeapAlloc+0x88>)
  }

  size = MEM_ALIGN_NEXT(size);
 8001644:	3107      	adds	r1, #7
 */
void *chHeapAlloc(memory_heap_t *heapp, size_t size) {
  union heap_header *qp, *hp, *fp;

  if (heapp == NULL) {
    heapp = &default_heap;
 8001646:	2800      	cmp	r0, #0
 8001648:	bf18      	it	ne
 800164a:	4606      	movne	r6, r0
  }

  size = MEM_ALIGN_NEXT(size);
  qp = &heapp->h_free;

  H_LOCK(heapp);
 800164c:	f106 0710 	add.w	r7, r6, #16
 8001650:	4638      	mov	r0, r7

  if (heapp == NULL) {
    heapp = &default_heap;
  }

  size = MEM_ALIGN_NEXT(size);
 8001652:	f021 0507 	bic.w	r5, r1, #7
  qp = &heapp->h_free;
 8001656:	f106 0408 	add.w	r4, r6, #8

  H_LOCK(heapp);
 800165a:	f7ff fef9 	bl	8001450 <chMtxLock>
 800165e:	e003      	b.n	8001668 <chHeapAlloc+0x28>
  while (qp->h.u.next != NULL) {
    hp = qp->h.u.next;
    if (hp->h.size >= size) {
 8001660:	6843      	ldr	r3, [r0, #4]
 8001662:	429d      	cmp	r5, r3
 8001664:	d912      	bls.n	800168c <chHeapAlloc+0x4c>
 8001666:	4604      	mov	r4, r0

  size = MEM_ALIGN_NEXT(size);
  qp = &heapp->h_free;

  H_LOCK(heapp);
  while (qp->h.u.next != NULL) {
 8001668:	6820      	ldr	r0, [r4, #0]
 800166a:	2800      	cmp	r0, #0
 800166c:	d1f8      	bne.n	8001660 <chHeapAlloc+0x20>
      return (void *)(hp + 1);
      /*lint -restore*/
    }
    qp = hp;
  }
  H_UNLOCK(heapp);
 800166e:	4638      	mov	r0, r7
 8001670:	f7ff fe4e 	bl	8001310 <chMtxUnlock>

  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->h_provider != NULL) {
 8001674:	6833      	ldr	r3, [r6, #0]
 8001676:	b323      	cbz	r3, 80016c2 <chHeapAlloc+0x82>
    hp = heapp->h_provider(size + sizeof(union heap_header));
 8001678:	f105 0008 	add.w	r0, r5, #8
 800167c:	4798      	blx	r3
    if (hp != NULL) {
 800167e:	b300      	cbz	r0, 80016c2 <chHeapAlloc+0x82>
      hp->h.u.heap = heapp;
 8001680:	6006      	str	r6, [r0, #0]
      hp->h.size = size;
 8001682:	6045      	str	r5, [r0, #4]
      hp++;
 8001684:	f100 0408 	add.w	r4, r0, #8
      /*lint -restore*/
    }
  }

  return NULL;
}
 8001688:	4620      	mov	r0, r4
 800168a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  H_LOCK(heapp);
  while (qp->h.u.next != NULL) {
    hp = qp->h.u.next;
    if (hp->h.size >= size) {
      if (hp->h.size < (size + sizeof(union heap_header))) {
 800168c:	f105 0108 	add.w	r1, r5, #8
 8001690:	4299      	cmp	r1, r3
 8001692:	d909      	bls.n	80016a8 <chHeapAlloc+0x68>
        /* Gets the whole block even if it is slightly bigger than the
           requested size because the fragment would be too small to be
           useful.*/
        qp->h.u.next = hp->h.u.next;
 8001694:	6803      	ldr	r3, [r0, #0]
 8001696:	6023      	str	r3, [r4, #0]
        fp->h.u.next = hp->h.u.next;
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
        qp->h.u.next = fp;
        hp->h.size = size;
      }
      hp->h.u.heap = heapp;
 8001698:	4604      	mov	r4, r0
      H_UNLOCK(heapp);
 800169a:	4638      	mov	r0, r7
        fp->h.u.next = hp->h.u.next;
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
        qp->h.u.next = fp;
        hp->h.size = size;
      }
      hp->h.u.heap = heapp;
 800169c:	f844 6b08 	str.w	r6, [r4], #8
      H_UNLOCK(heapp);
 80016a0:	f7ff fe36 	bl	8001310 <chMtxUnlock>
      /*lint -restore*/
    }
  }

  return NULL;
}
 80016a4:	4620      	mov	r0, r4
 80016a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016a8:	f06f 0e07 	mvn.w	lr, #7
 80016ac:	ebc5 0e0e 	rsb	lr, r5, lr
        /* Block bigger enough, must split it.*/
        /*lint -save -e9087 [11.3] Safe cast.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
        /*lint -restore*/
        fp->h.u.next = hp->h.u.next;
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
 80016b0:	449e      	add	lr, r3
      else {
        /* Block bigger enough, must split it.*/
        /*lint -save -e9087 [11.3] Safe cast.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
        /*lint -restore*/
        fp->h.u.next = hp->h.u.next;
 80016b2:	6803      	ldr	r3, [r0, #0]
        qp->h.u.next = hp->h.u.next;
      }
      else {
        /* Block bigger enough, must split it.*/
        /*lint -save -e9087 [11.3] Safe cast.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
 80016b4:	1842      	adds	r2, r0, r1
        /*lint -restore*/
        fp->h.u.next = hp->h.u.next;
 80016b6:	5043      	str	r3, [r0, r1]
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
 80016b8:	f8c2 e004 	str.w	lr, [r2, #4]
        qp->h.u.next = fp;
 80016bc:	6022      	str	r2, [r4, #0]
        hp->h.size = size;
 80016be:	6045      	str	r5, [r0, #4]
 80016c0:	e7ea      	b.n	8001698 <chHeapAlloc+0x58>
      return (void *)hp;
      /*lint -restore*/
    }
  }

  return NULL;
 80016c2:	2400      	movs	r4, #0
 80016c4:	e7e0      	b.n	8001688 <chHeapAlloc+0x48>
 80016c6:	bf00      	nop
 80016c8:	200009c8 	.word	0x200009c8
 80016cc:	00000000 	.word	0x00000000

080016d0 <chThdCreateFromHeap>:
 * @retval NULL         if the memory cannot be allocated.
 *
 * @api
 */
thread_t *chThdCreateFromHeap(memory_heap_t *heapp, size_t size,
                              tprio_t prio, tfunc_t pf, void *arg) {
 80016d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016d4:	4690      	mov	r8, r2
 80016d6:	4699      	mov	r9, r3
 80016d8:	460d      	mov	r5, r1
  void *wsp;
  thread_t *tp;

  wsp = chHeapAlloc(heapp, size);
 80016da:	f7ff ffb1 	bl	8001640 <chHeapAlloc>
  if (wsp == NULL) {
 80016de:	4604      	mov	r4, r0
 80016e0:	2800      	cmp	r0, #0
 80016e2:	d034      	beq.n	800174e <chThdCreateFromHeap+0x7e>
 80016e4:	2320      	movs	r3, #32
 80016e6:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80016ea:	4f1a      	ldr	r7, [pc, #104]	; (8001754 <chThdCreateFromHeap+0x84>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80016ec:	f1a5 0124 	sub.w	r1, r5, #36	; 0x24
 80016f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80016f2:	eb00 0c01 	add.w	ip, r0, r1
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80016f6:	697b      	ldr	r3, [r7, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80016f8:	f8c0 c00c 	str.w	ip, [r0, #12]
 80016fc:	f840 9001 	str.w	r9, [r0, r1]
 8001700:	f8cc 2004 	str.w	r2, [ip, #4]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8001704:	f04f 0201 	mov.w	r2, #1

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001708:	f8df b04c 	ldr.w	fp, [pc, #76]	; 8001758 <chThdCreateFromHeap+0x88>
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 800170c:	2500      	movs	r5, #0
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 800170e:	f100 0628 	add.w	r6, r0, #40	; 0x28
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 8001712:	f100 0e24 	add.w	lr, r0, #36	; 0x24
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8001716:	f04f 0a02 	mov.w	sl, #2

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800171a:	f8cc b020 	str.w	fp, [ip, #32]
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_HEAP;
  chSchWakeupS(tp, MSG_OK);
 800171e:	4629      	mov	r1, r5
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8001720:	f8c0 8008 	str.w	r8, [r0, #8]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001724:	6107      	str	r7, [r0, #16]
 8001726:	6143      	str	r3, [r0, #20]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8001728:	f8c0 803c 	str.w	r8, [r0, #60]	; 0x3c
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 800172c:	f880 a01c 	strb.w	sl, [r0, #28]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8001730:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8001732:	6345      	str	r5, [r0, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8001734:	6185      	str	r5, [r0, #24]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8001736:	7782      	strb	r2, [r0, #30]
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001738:	6118      	str	r0, [r3, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 800173a:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_HEAP;
 800173e:	7762      	strb	r2, [r4, #29]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001740:	6286      	str	r6, [r0, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 8001742:	62c6      	str	r6, [r0, #44]	; 0x2c
 8001744:	6178      	str	r0, [r7, #20]
  chSchWakeupS(tp, MSG_OK);
 8001746:	f7ff fbdb 	bl	8000f00 <chSchWakeupS>
 800174a:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  return tp;
}
 800174e:	4620      	mov	r0, r4
 8001750:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001754:	20001040 	.word	0x20001040
 8001758:	08000241 	.word	0x08000241
 800175c:	00000000 	.word	0x00000000

08001760 <chSemSignalI>:
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (++sp->s_cnt <= (cnt_t)0) {
 8001760:	6883      	ldr	r3, [r0, #8]
 *
 * @param[in] sp    pointer to a @p semaphore_t structure
 *
 * @iclass
 */
void chSemSignalI(semaphore_t *sp) {
 8001762:	4602      	mov	r2, r0
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (++sp->s_cnt <= (cnt_t)0) {
 8001764:	3301      	adds	r3, #1
 8001766:	2b00      	cmp	r3, #0
 8001768:	6083      	str	r3, [r0, #8]
 800176a:	dd00      	ble.n	800176e <chSemSignalI+0xe>
 800176c:	4770      	bx	lr
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 800176e:	6803      	ldr	r3, [r0, #0]
 *
 * @param[in] sp    pointer to a @p semaphore_t structure
 *
 * @iclass
 */
void chSemSignalI(semaphore_t *sp) {
 8001770:	b410      	push	{r4}

  tqp->p_next = tp->p_next;
 8001772:	6819      	ldr	r1, [r3, #0]

  if (++sp->s_cnt <= (cnt_t)0) {
    /* Note, it is done this way in order to allow a tail call on
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->s_queue);
    tp->p_u.rdymsg = MSG_OK;
 8001774:	2400      	movs	r4, #0
 8001776:	6011      	str	r1, [r2, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001778:	604a      	str	r2, [r1, #4]
 800177a:	621c      	str	r4, [r3, #32]
    (void) chSchReadyI(tp);
 800177c:	4618      	mov	r0, r3
  }
}
 800177e:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (++sp->s_cnt <= (cnt_t)0) {
    /* Note, it is done this way in order to allow a tail call on
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->s_queue);
    tp->p_u.rdymsg = MSG_OK;
    (void) chSchReadyI(tp);
 8001782:	f7ff bcad 	b.w	80010e0 <chSchReadyI>
 8001786:	bf00      	nop
	...

08001790 <chSemResetI>:
 * @param[in] n         the new value of the semaphore counter. The value must
 *                      be non-negative.
 *
 * @iclass
 */
void chSemResetI(semaphore_t *sp, cnt_t n) {
 8001790:	b570      	push	{r4, r5, r6, lr}
  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
 8001792:	6885      	ldr	r5, [r0, #8]
  sp->s_cnt = n;
 8001794:	6081      	str	r1, [r0, #8]
  while (++cnt <= (cnt_t)0) {
 8001796:	3501      	adds	r5, #1
 8001798:	2d00      	cmp	r5, #0
 800179a:	dc0c      	bgt.n	80017b6 <chSemResetI+0x26>
 800179c:	4604      	mov	r4, r0
    chSchReadyI(queue_lifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_RESET;
 800179e:	f06f 0601 	mvn.w	r6, #1

  return tp;
}

static inline thread_t *queue_lifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_prev;
 80017a2:	6860      	ldr	r0, [r4, #4]
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= (cnt_t)0) {
 80017a4:	3501      	adds	r5, #1

  tqp->p_prev = tp->p_prev;
 80017a6:	6843      	ldr	r3, [r0, #4]
 80017a8:	6063      	str	r3, [r4, #4]
  tqp->p_prev->p_next = (thread_t *)tqp;
 80017aa:	601c      	str	r4, [r3, #0]
    chSchReadyI(queue_lifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_RESET;
 80017ac:	f7ff fc98 	bl	80010e0 <chSchReadyI>
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= (cnt_t)0) {
 80017b0:	2d01      	cmp	r5, #1
    chSchReadyI(queue_lifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_RESET;
 80017b2:	6206      	str	r6, [r0, #32]
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= (cnt_t)0) {
 80017b4:	d1f5      	bne.n	80017a2 <chSemResetI+0x12>
 80017b6:	bd70      	pop	{r4, r5, r6, pc}
	...

080017c0 <chThdDequeueAllI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 80017c0:	b538      	push	{r3, r4, r5, lr}
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 80017c2:	6803      	ldr	r3, [r0, #0]
 80017c4:	4604      	mov	r4, r0

  while (queue_notempty(tqp)) {
 80017c6:	4298      	cmp	r0, r3
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 80017c8:	460d      	mov	r5, r1

  while (queue_notempty(tqp)) {
 80017ca:	d009      	beq.n	80017e0 <chThdDequeueAllI+0x20>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	6022      	str	r2, [r4, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 80017d2:	6054      	str	r4, [r2, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 80017d4:	621d      	str	r5, [r3, #32]
  (void) chSchReadyI(tp);
 80017d6:	f7ff fc83 	bl	80010e0 <chSchReadyI>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 80017da:	6823      	ldr	r3, [r4, #0]
 80017dc:	429c      	cmp	r4, r3
 80017de:	d1f5      	bne.n	80017cc <chThdDequeueAllI+0xc>
 80017e0:	bd38      	pop	{r3, r4, r5, pc}
 80017e2:	bf00      	nop
	...

080017f0 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 80017f0:	b538      	push	{r3, r4, r5, lr}
  thread_t *tp = currp;
 80017f2:	4b0e      	ldr	r3, [pc, #56]	; (800182c <chThdExitS+0x3c>)
 80017f4:	699c      	ldr	r4, [r3, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 80017f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 80017f8:	f104 0524 	add.w	r5, r4, #36	; 0x24
 80017fc:	429d      	cmp	r5, r3
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;

  tp->p_u.exitcode = msg;
 80017fe:	6220      	str	r0, [r4, #32]
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 8001800:	d007      	beq.n	8001812 <chThdExitS+0x22>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->p_next;
  tlp->p_next = tp->p_next;
 8001802:	681a      	ldr	r2, [r3, #0]
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 8001804:	4618      	mov	r0, r3
 8001806:	6262      	str	r2, [r4, #36]	; 0x24
 8001808:	f7ff fc6a 	bl	80010e0 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 800180c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 800180e:	42ab      	cmp	r3, r5
 8001810:	d1f7      	bne.n	8001802 <chThdExitS+0x12>
  }
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 8001812:	7f63      	ldrb	r3, [r4, #29]
 8001814:	079b      	lsls	r3, r3, #30
 8001816:	d104      	bne.n	8001822 <chThdExitS+0x32>
    REG_REMOVE(tp);
 8001818:	6922      	ldr	r2, [r4, #16]
 800181a:	6963      	ldr	r3, [r4, #20]
 800181c:	611a      	str	r2, [r3, #16]
 800181e:	6922      	ldr	r2, [r4, #16]
 8001820:	6153      	str	r3, [r2, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8001822:	200f      	movs	r0, #15

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
}
 8001824:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
    REG_REMOVE(tp);
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8001828:	f7ff bbfa 	b.w	8001020 <chSchGoSleepS>
 800182c:	20001040 	.word	0x20001040

08001830 <chThdExit>:
 8001830:	2320      	movs	r3, #32
 8001832:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
 8001836:	f7ff bfdb 	b.w	80017f0 <chThdExitS>
 800183a:	bf00      	nop
 800183c:	0000      	movs	r0, r0
	...

08001840 <chVTDoResetI>:
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 8001840:	4b1c      	ldr	r3, [pc, #112]	; (80018b4 <chVTDoResetI+0x74>)
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 8001842:	b470      	push	{r4, r5, r6}
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 8001844:	69da      	ldr	r2, [r3, #28]
 8001846:	4282      	cmp	r2, r0
 8001848:	d00f      	beq.n	800186a <chVTDoResetI+0x2a>
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 800184a:	6802      	ldr	r2, [r0, #0]
 800184c:	6841      	ldr	r1, [r0, #4]
    vtp->vt_next->vt_prev = vtp->vt_prev;
    vtp->vt_func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 800184e:	331c      	adds	r3, #28

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 8001850:	600a      	str	r2, [r1, #0]
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8001852:	6802      	ldr	r2, [r0, #0]
    vtp->vt_func = NULL;
 8001854:	2400      	movs	r4, #0

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8001856:	429a      	cmp	r2, r3
  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8001858:	6051      	str	r1, [r2, #4]
    vtp->vt_func = NULL;
 800185a:	60c4      	str	r4, [r0, #12]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 800185c:	d003      	beq.n	8001866 <chVTDoResetI+0x26>
      vtp->vt_next->vt_delta += vtp->vt_delta;
 800185e:	8901      	ldrh	r1, [r0, #8]
 8001860:	8913      	ldrh	r3, [r2, #8]
 8001862:	440b      	add	r3, r1
 8001864:	8113      	strh	r3, [r2, #8]
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8001866:	bc70      	pop	{r4, r5, r6}
 8001868:	4770      	bx	lr

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 800186a:	4619      	mov	r1, r3
 800186c:	6815      	ldr	r5, [r2, #0]
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
  vtp->vt_func = NULL;
 800186e:	2000      	movs	r0, #0

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 8001870:	f841 5f1c 	str.w	r5, [r1, #28]!
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
  vtp->vt_func = NULL;

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8001874:	428d      	cmp	r5, r1
    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8001876:	6069      	str	r1, [r5, #4]
  vtp->vt_func = NULL;
 8001878:	60d0      	str	r0, [r2, #12]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800187a:	d016      	beq.n	80018aa <chVTDoResetI+0x6a>
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 800187c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001880:	6a41      	ldr	r1, [r0, #36]	; 0x24

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8001882:	8916      	ldrh	r6, [r2, #8]
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8001884:	8cdc      	ldrh	r4, [r3, #38]	; 0x26

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8001886:	892a      	ldrh	r2, [r5, #8]
 8001888:	b289      	uxth	r1, r1
 800188a:	18b3      	adds	r3, r6, r2
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 800188c:	1b0a      	subs	r2, r1, r4

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 800188e:	b29b      	uxth	r3, r3
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8001890:	b292      	uxth	r2, r2

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 8001892:	4293      	cmp	r3, r2

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8001894:	812b      	strh	r3, [r5, #8]
  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 8001896:	d9e6      	bls.n	8001866 <chVTDoResetI+0x26>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.vt_next->vt_delta - nowdelta;
 8001898:	1a9b      	subs	r3, r3, r2
 800189a:	b29b      	uxth	r3, r3

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
 800189c:	2b01      	cmp	r3, #1
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 800189e:	bf98      	it	ls
 80018a0:	2302      	movls	r3, #2
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
 80018a2:	440b      	add	r3, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	6343      	str	r3, [r0, #52]	; 0x34
 80018a8:	e7dd      	b.n	8001866 <chVTDoResetI+0x26>
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 80018aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018ae:	60d8      	str	r0, [r3, #12]
 80018b0:	e7d9      	b.n	8001866 <chVTDoResetI+0x26>
 80018b2:	bf00      	nop
 80018b4:	20001040 	.word	0x20001040
	...

080018c0 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
 80018c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80018c2:	4e1e      	ldr	r6, [pc, #120]	; (800193c <chVTDoSetI+0x7c>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80018c4:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 80018c8:	46b6      	mov	lr, r6
 80018ca:	f85e 4f1c 	ldr.w	r4, [lr, #28]!
 80018ce:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 80018d0:	2901      	cmp	r1, #1
 80018d2:	bf98      	it	ls
 80018d4:	2102      	movls	r1, #2
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80018d6:	4574      	cmp	r4, lr
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 80018d8:	6103      	str	r3, [r0, #16]
  vtp->vt_func = vtfunc;
 80018da:	60c2      	str	r2, [r0, #12]
 80018dc:	b2ab      	uxth	r3, r5
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80018de:	d01d      	beq.n	800191c <chVTDoSetI+0x5c>
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 80018e0:	4419      	add	r1, r3
 80018e2:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 80018e4:	b289      	uxth	r1, r1
    if (delta < ch.vtlist.vt_next->vt_delta) {
 80018e6:	8922      	ldrh	r2, [r4, #8]
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 80018e8:	1acb      	subs	r3, r1, r3
 80018ea:	b29b      	uxth	r3, r3
    if (delta < ch.vtlist.vt_next->vt_delta) {
 80018ec:	4293      	cmp	r3, r2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80018ee:	bf38      	it	cc
 80018f0:	6379      	strcc	r1, [r7, #52]	; 0x34
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d905      	bls.n	8001902 <chVTDoSetI+0x42>
    delta -= p->vt_delta;
    p = p->vt_next;
 80018f6:	6824      	ldr	r4, [r4, #0]

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
    delta -= p->vt_delta;
 80018f8:	1a9b      	subs	r3, r3, r2
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 80018fa:	8922      	ldrh	r2, [r4, #8]
    delta -= p->vt_delta;
 80018fc:	b29b      	uxth	r3, r3
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 80018fe:	429a      	cmp	r2, r3
 8001900:	d3f9      	bcc.n	80018f6 <chVTDoSetI+0x36>
  vtp->vt_delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
  ch.vtlist.vt_delta = (systime_t)-1;
 8001902:	f64f 71ff 	movw	r1, #65535	; 0xffff
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 8001906:	6862      	ldr	r2, [r4, #4]
    delta -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
 8001908:	6004      	str	r4, [r0, #0]
  vtp->vt_prev = vtp->vt_next->vt_prev;
 800190a:	6042      	str	r2, [r0, #4]
  vtp->vt_prev->vt_next = vtp;
 800190c:	6010      	str	r0, [r2, #0]
  p->vt_prev = vtp;
 800190e:	6060      	str	r0, [r4, #4]
  vtp->vt_delta = delta
 8001910:	8103      	strh	r3, [r0, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 8001912:	8922      	ldrh	r2, [r4, #8]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	8123      	strh	r3, [r4, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8001918:	84b1      	strh	r1, [r6, #36]	; 0x24
 800191a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_delta = delay;

      /* Being the first element in the list the alarm timer is started.*/
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
 800191c:	18ca      	adds	r2, r1, r3
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800191e:	b292      	uxth	r2, r2
  STM32_ST_TIM->SR     = 0;
 8001920:	f04f 0e00 	mov.w	lr, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001924:	2502      	movs	r5, #2
    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
 8001926:	84f3      	strh	r3, [r6, #38]	; 0x26
      ch.vtlist.vt_next = vtp;
 8001928:	61f0      	str	r0, [r6, #28]
      ch.vtlist.vt_prev = vtp;
 800192a:	6230      	str	r0, [r6, #32]
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
 800192c:	6004      	str	r4, [r0, #0]
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800192e:	6044      	str	r4, [r0, #4]
      vtp->vt_delta = delay;
 8001930:	8101      	strh	r1, [r0, #8]
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001932:	637a      	str	r2, [r7, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8001934:	f8c7 e010 	str.w	lr, [r7, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001938:	60fd      	str	r5, [r7, #12]
 800193a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800193c:	20001040 	.word	0x20001040

08001940 <chSchGoSleepTimeoutS>:
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8001940:	f64f 73ff 	movw	r3, #65535	; 0xffff
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8001944:	b530      	push	{r4, r5, lr}

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8001946:	4299      	cmp	r1, r3
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8001948:	b087      	sub	sp, #28

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 800194a:	d012      	beq.n	8001972 <chSchGoSleepTimeoutS+0x32>
 800194c:	4605      	mov	r5, r0
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 800194e:	4c0c      	ldr	r4, [pc, #48]	; (8001980 <chSchGoSleepTimeoutS+0x40>)
 8001950:	a801      	add	r0, sp, #4
 8001952:	69a3      	ldr	r3, [r4, #24]
 8001954:	4a0b      	ldr	r2, [pc, #44]	; (8001984 <chSchGoSleepTimeoutS+0x44>)
 8001956:	f7ff ffb3 	bl	80018c0 <chVTDoSetI>
    chSchGoSleepS(newstate);
 800195a:	4628      	mov	r0, r5
 800195c:	f7ff fb60 	bl	8001020 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8001960:	9b04      	ldr	r3, [sp, #16]
 8001962:	b113      	cbz	r3, 800196a <chSchGoSleepTimeoutS+0x2a>
      chVTDoResetI(&vt);
 8001964:	a801      	add	r0, sp, #4
 8001966:	f7ff ff6b 	bl	8001840 <chVTDoResetI>
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->p_u.rdymsg;
 800196a:	69a3      	ldr	r3, [r4, #24]
}
 800196c:	6a18      	ldr	r0, [r3, #32]
 800196e:	b007      	add	sp, #28
 8001970:	bd30      	pop	{r4, r5, pc}
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 8001972:	f7ff fb55 	bl	8001020 <chSchGoSleepS>
 8001976:	4c02      	ldr	r4, [pc, #8]	; (8001980 <chSchGoSleepTimeoutS+0x40>)
  }

  return currp->p_u.rdymsg;
 8001978:	69a3      	ldr	r3, [r4, #24]
}
 800197a:	6a18      	ldr	r0, [r3, #32]
 800197c:	b007      	add	sp, #28
 800197e:	bd30      	pop	{r4, r5, pc}
 8001980:	20001040 	.word	0x20001040
 8001984:	08000c71 	.word	0x08000c71
	...

08001990 <chSemWaitTimeoutS>:
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chSemWaitTimeoutS(semaphore_t *sp, systime_t time) {
 8001990:	4603      	mov	r3, r0
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
 8001992:	6880      	ldr	r0, [r0, #8]
 8001994:	1e42      	subs	r2, r0, #1
 8001996:	2a00      	cmp	r2, #0
 8001998:	609a      	str	r2, [r3, #8]
 800199a:	db01      	blt.n	80019a0 <chSemWaitTimeoutS+0x10>
    sem_insert(currp, &sp->s_queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }

  return MSG_OK;
 800199c:	2000      	movs	r0, #0
 800199e:	4770      	bx	lr
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chSemWaitTimeoutS(semaphore_t *sp, systime_t time) {
 80019a0:	b410      	push	{r4}
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
    if (TIME_IMMEDIATE == time) {
 80019a2:	b161      	cbz	r1, 80019be <chSemWaitTimeoutS+0x2e>
      sp->s_cnt++;

      return MSG_TIMEOUT;
    }
    currp->p_u.wtsemp = sp;
 80019a4:	4a09      	ldr	r2, [pc, #36]	; (80019cc <chSemWaitTimeoutS+0x3c>)
    sem_insert(currp, &sp->s_queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
 80019a6:	2005      	movs	r0, #5
    if (TIME_IMMEDIATE == time) {
      sp->s_cnt++;

      return MSG_TIMEOUT;
    }
    currp->p_u.wtsemp = sp;
 80019a8:	6992      	ldr	r2, [r2, #24]
 80019aa:	6213      	str	r3, [r2, #32]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 80019ac:	685c      	ldr	r4, [r3, #4]
 80019ae:	e882 0018 	stmia.w	r2, {r3, r4}
  tp->p_prev->p_next = tp;
 80019b2:	6022      	str	r2, [r4, #0]
  tqp->p_prev = tp;
 80019b4:	605a      	str	r2, [r3, #4]

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }

  return MSG_OK;
}
 80019b6:	f85d 4b04 	ldr.w	r4, [sp], #4
      return MSG_TIMEOUT;
    }
    currp->p_u.wtsemp = sp;
    sem_insert(currp, &sp->s_queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
 80019ba:	f7ff bfc1 	b.w	8001940 <chSchGoSleepTimeoutS>
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
    if (TIME_IMMEDIATE == time) {
      sp->s_cnt++;
 80019be:	6098      	str	r0, [r3, #8]

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }

  return MSG_OK;
}
 80019c0:	f85d 4b04 	ldr.w	r4, [sp], #4

  if (--sp->s_cnt < (cnt_t)0) {
    if (TIME_IMMEDIATE == time) {
      sp->s_cnt++;

      return MSG_TIMEOUT;
 80019c4:	f04f 30ff 	mov.w	r0, #4294967295

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }

  return MSG_OK;
}
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	20001040 	.word	0x20001040

080019d0 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 80019d0:	b169      	cbz	r1, 80019ee <chThdEnqueueTimeoutS+0x1e>
 80019d2:	4602      	mov	r2, r0
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 80019d4:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <chThdEnqueueTimeoutS+0x24>)
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 80019d6:	b410      	push	{r4}

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 80019d8:	699b      	ldr	r3, [r3, #24]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 80019da:	6844      	ldr	r4, [r0, #4]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80019dc:	2004      	movs	r0, #4
 80019de:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->p_prev->p_next = tp;
 80019e2:	6023      	str	r3, [r4, #0]
  tqp->p_prev = tp;
 80019e4:	6053      	str	r3, [r2, #4]
}
 80019e6:	f85d 4b04 	ldr.w	r4, [sp], #4
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80019ea:	f7ff bfa9 	b.w	8001940 <chSchGoSleepTimeoutS>
}
 80019ee:	f04f 30ff 	mov.w	r0, #4294967295
 80019f2:	4770      	bx	lr
 80019f4:	20001040 	.word	0x20001040
	...

08001a00 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
 8001a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a04:	b083      	sub	sp, #12
 8001a06:	4604      	mov	r4, r0
 8001a08:	468b      	mov	fp, r1
 8001a0a:	4615      	mov	r5, r2
 8001a0c:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 8001a0e:	69c7      	ldr	r7, [r0, #28]
 8001a10:	f04f 0820 	mov.w	r8, #32
 8001a14:	f388 8811 	msr	BASEPRI, r8
  size_t w = 0;
 8001a18:	2600      	movs	r6, #0
 8001a1a:	46b1      	mov	r9, r6
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 8001a1c:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8001a1e:	f10b 0a01 	add.w	sl, fp, #1

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 8001a22:	b1fb      	cbz	r3, 8001a64 <chOQWriteTimeout+0x64>
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8001a24:	6962      	ldr	r2, [r4, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 8001a26:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8001a28:	1c50      	adds	r0, r2, #1
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 8001a2a:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
 8001a2c:	6160      	str	r0, [r4, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 8001a2e:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8001a30:	f89b 3000 	ldrb.w	r3, [fp]
 8001a34:	7013      	strb	r3, [r2, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 8001a36:	6923      	ldr	r3, [r4, #16]
 8001a38:	6962      	ldr	r2, [r4, #20]
 8001a3a:	429a      	cmp	r2, r3
      oqp->q_wrptr = oqp->q_buffer;
 8001a3c:	bf24      	itt	cs
 8001a3e:	68e3      	ldrcs	r3, [r4, #12]
 8001a40:	6163      	strcs	r3, [r4, #20]
    }

    if (nfy != NULL) {
 8001a42:	b10f      	cbz	r7, 8001a48 <chOQWriteTimeout+0x48>
      nfy(oqp);
 8001a44:	4620      	mov	r0, r4
 8001a46:	47b8      	blx	r7
 8001a48:	f389 8811 	msr	BASEPRI, r9
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
    if (--n == 0U) {
 8001a4c:	3d01      	subs	r5, #1
    if (nfy != NULL) {
      nfy(oqp);
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
 8001a4e:	f106 0601 	add.w	r6, r6, #1
    if (--n == 0U) {
 8001a52:	d011      	beq.n	8001a78 <chOQWriteTimeout+0x78>
 8001a54:	f388 8811 	msr	BASEPRI, r8
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8001a58:	46d3      	mov	fp, sl
 8001a5a:	68a3      	ldr	r3, [r4, #8]
 8001a5c:	f10b 0a01 	add.w	sl, fp, #1

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1df      	bne.n	8001a24 <chOQWriteTimeout+0x24>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
 8001a64:	4620      	mov	r0, r4
 8001a66:	9901      	ldr	r1, [sp, #4]
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	f7ff ffb1 	bl	80019d0 <chThdEnqueueTimeoutS>
 8001a6e:	9b00      	ldr	r3, [sp, #0]
 8001a70:	2800      	cmp	r0, #0
 8001a72:	d0d3      	beq.n	8001a1c <chOQWriteTimeout+0x1c>
 8001a74:	f383 8811 	msr	BASEPRI, r3
    if (--n == 0U) {
      return w;
    }
    chSysLock();
  }
}
 8001a78:	4630      	mov	r0, r6
 8001a7a:	b003      	add	sp, #12
 8001a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001a80 <chOQPutTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 8001a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a82:	4604      	mov	r4, r0
 8001a84:	460f      	mov	r7, r1
 8001a86:	4616      	mov	r6, r2
 8001a88:	2320      	movs	r3, #32
 8001a8a:	f383 8811 	msr	BASEPRI, r3
 8001a8e:	e005      	b.n	8001a9c <chOQPutTimeout+0x1c>

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8001a90:	4620      	mov	r0, r4
 8001a92:	4631      	mov	r1, r6
 8001a94:	f7ff ff9c 	bl	80019d0 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 8001a98:	2800      	cmp	r0, #0
 8001a9a:	db17      	blt.n	8001acc <chOQPutTimeout+0x4c>
 8001a9c:	68a5      	ldr	r5, [r4, #8]
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
 8001a9e:	2d00      	cmp	r5, #0
 8001aa0:	d0f6      	beq.n	8001a90 <chOQPutTimeout+0x10>
      return msg;
    }
  }

  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 8001aa2:	6962      	ldr	r2, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8001aa4:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8001aa6:	1c51      	adds	r1, r2, #1
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8001aa8:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 8001aaa:	6161      	str	r1, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8001aac:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8001aae:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8001ab0:	6923      	ldr	r3, [r4, #16]
 8001ab2:	6962      	ldr	r2, [r4, #20]
 8001ab4:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8001ab6:	bf24      	itt	cs
 8001ab8:	68e3      	ldrcs	r3, [r4, #12]
 8001aba:	6163      	strcs	r3, [r4, #20]
  }

  if (oqp->q_notify != NULL) {
 8001abc:	69e3      	ldr	r3, [r4, #28]
 8001abe:	b10b      	cbz	r3, 8001ac4 <chOQPutTimeout+0x44>
    oqp->q_notify(oqp);
 8001ac0:	4620      	mov	r0, r4
 8001ac2:	4798      	blx	r3
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	f380 8811 	msr	BASEPRI, r0
  }
  chSysUnlock();

  return Q_OK;
}
 8001aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001acc:	f385 8811 	msr	BASEPRI, r5
 8001ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ad2:	bf00      	nop
	...

08001ae0 <chIQReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
                       size_t n, systime_t timeout) {
 8001ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ae4:	4604      	mov	r4, r0
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	4689      	mov	r9, r1
 8001aea:	4693      	mov	fp, r2
 8001aec:	461d      	mov	r5, r3
  qnotify_t nfy = iqp->q_notify;
 8001aee:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8001af2:	2720      	movs	r7, #32
 8001af4:	f387 8811 	msr	BASEPRI, r7
  size_t r = 0;
 8001af8:	2600      	movs	r6, #0
 8001afa:	46b2      	mov	sl, r6
 8001afc:	9701      	str	r7, [sp, #4]

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    if (nfy != NULL) {
 8001afe:	f1b8 0f00 	cmp.w	r8, #0
 8001b02:	d007      	beq.n	8001b14 <chIQReadTimeout+0x34>
      nfy(iqp);
 8001b04:	4620      	mov	r0, r4
 8001b06:	47c0      	blx	r8
 8001b08:	e004      	b.n	8001b14 <chIQReadTimeout+0x34>
    }

    while (chIQIsEmptyI(iqp)) {
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	4629      	mov	r1, r5
 8001b0e:	f7ff ff5f 	bl	80019d0 <chThdEnqueueTimeoutS>
 8001b12:	b9d0      	cbnz	r0, 8001b4a <chIQReadTimeout+0x6a>
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 8001b14:	68a7      	ldr	r7, [r4, #8]
  while (true) {
    if (nfy != NULL) {
      nfy(iqp);
    }

    while (chIQIsEmptyI(iqp)) {
 8001b16:	2f00      	cmp	r7, #0
 8001b18:	d0f7      	beq.n	8001b0a <chIQReadTimeout+0x2a>
        return r;
      }
    }

    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 8001b1a:	69a2      	ldr	r2, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8001b1c:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8001b1e:	1c51      	adds	r1, r2, #1
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8001b20:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
 8001b22:	61a1      	str	r1, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8001b24:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8001b26:	7813      	ldrb	r3, [r2, #0]
 8001b28:	f809 3b01 	strb.w	r3, [r9], #1
    if (iqp->q_rdptr >= iqp->q_top) {
 8001b2c:	6923      	ldr	r3, [r4, #16]
 8001b2e:	69a2      	ldr	r2, [r4, #24]
 8001b30:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 8001b32:	bf24      	itt	cs
 8001b34:	68e3      	ldrcs	r3, [r4, #12]
 8001b36:	61a3      	strcs	r3, [r4, #24]
 8001b38:	f38a 8811 	msr	BASEPRI, sl
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    r++;
 8001b3c:	3601      	adds	r6, #1
    if (--n == 0U) {
 8001b3e:	45b3      	cmp	fp, r6
 8001b40:	d005      	beq.n	8001b4e <chIQReadTimeout+0x6e>
 8001b42:	9b01      	ldr	r3, [sp, #4]
 8001b44:	f383 8811 	msr	BASEPRI, r3
 8001b48:	e7d9      	b.n	8001afe <chIQReadTimeout+0x1e>
 8001b4a:	f387 8811 	msr	BASEPRI, r7
      return r;
    }

    chSysLock();
  }
}
 8001b4e:	4630      	mov	r0, r6
 8001b50:	b003      	add	sp, #12
 8001b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b56:	bf00      	nop
	...

08001b60 <chIQGetTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t timeout) {
 8001b60:	b570      	push	{r4, r5, r6, lr}
 8001b62:	2320      	movs	r3, #32
 8001b64:	460e      	mov	r6, r1
 8001b66:	4604      	mov	r4, r0
 8001b68:	f383 8811 	msr	BASEPRI, r3
  uint8_t b;

  chSysLock();
  if (iqp->q_notify != NULL) {
 8001b6c:	69c3      	ldr	r3, [r0, #28]
 8001b6e:	b13b      	cbz	r3, 8001b80 <chIQGetTimeout+0x20>
    iqp->q_notify(iqp);
 8001b70:	4798      	blx	r3
 8001b72:	e005      	b.n	8001b80 <chIQGetTimeout+0x20>
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 8001b74:	4620      	mov	r0, r4
 8001b76:	4631      	mov	r1, r6
 8001b78:	f7ff ff2a 	bl	80019d0 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 8001b7c:	2800      	cmp	r0, #0
 8001b7e:	db13      	blt.n	8001ba8 <chIQGetTimeout+0x48>
 8001b80:	68a5      	ldr	r5, [r4, #8]
  chSysLock();
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
 8001b82:	2d00      	cmp	r5, #0
 8001b84:	d0f6      	beq.n	8001b74 <chIQGetTimeout+0x14>
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8001b86:	69a1      	ldr	r1, [r4, #24]
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8001b88:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 8001b8a:	6925      	ldr	r5, [r4, #16]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8001b8c:	1c4a      	adds	r2, r1, #1
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8001b8e:	3b01      	subs	r3, #1
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 8001b90:	42aa      	cmp	r2, r5
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8001b92:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 8001b94:	bf28      	it	cs
 8001b96:	68e3      	ldrcs	r3, [r4, #12]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8001b98:	61a2      	str	r2, [r4, #24]
 8001b9a:	7808      	ldrb	r0, [r1, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 8001b9c:	bf28      	it	cs
 8001b9e:	61a3      	strcs	r3, [r4, #24]
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return (msg_t)b;
}
 8001ba6:	bd70      	pop	{r4, r5, r6, pc}
 8001ba8:	f385 8811 	msr	BASEPRI, r5
 8001bac:	bd70      	pop	{r4, r5, r6, pc}
 8001bae:	bf00      	nop

08001bb0 <chThdSleepUntil>:
 *
 * @param[in] time      absolute system time
 *
 * @api
 */
void chThdSleepUntil(systime_t time) {
 8001bb0:	b508      	push	{r3, lr}
 8001bb2:	2320      	movs	r3, #32
 8001bb4:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8001bb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bbc:	6a59      	ldr	r1, [r3, #36]	; 0x24

  chSysLock();
  time -= chVTGetSystemTimeX();
 8001bbe:	1a41      	subs	r1, r0, r1
 8001bc0:	b289      	uxth	r1, r1
  if (time > (systime_t)0) {
 8001bc2:	b111      	cbz	r1, 8001bca <chThdSleepUntil+0x1a>
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 8001bc4:	2008      	movs	r0, #8
 8001bc6:	f7ff febb 	bl	8001940 <chSchGoSleepTimeoutS>
 8001bca:	2300      	movs	r3, #0
 8001bcc:	f383 8811 	msr	BASEPRI, r3
 8001bd0:	bd08      	pop	{r3, pc}
 8001bd2:	bf00      	nop
	...

08001be0 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 8001be0:	b508      	push	{r3, lr}
 8001be2:	4601      	mov	r1, r0
 8001be4:	2320      	movs	r3, #32
 8001be6:	f383 8811 	msr	BASEPRI, r3
 8001bea:	2008      	movs	r0, #8
 8001bec:	f7ff fea8 	bl	8001940 <chSchGoSleepTimeoutS>
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	f383 8811 	msr	BASEPRI, r3
 8001bf6:	bd08      	pop	{r3, pc}
	...

08001c00 <chSysRestoreStatusX.part.3.lto_priv.95>:
 *
 * @param[in] sts       the system status to be restored.
 *
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {
 8001c00:	b510      	push	{r4, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c02:	f3ef 8405 	mrs	r4, IPSR
 * @retval false        not running in ISR mode.
 * @retval true         running in ISR mode.
 */
static inline bool port_is_isr_context(void) {

  return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 8001c06:	f3c4 0408 	ubfx	r4, r4, #0, #9

  if (port_irq_enabled(sts)) {
    if (port_is_isr_context()) {
 8001c0a:	b11c      	cbz	r4, 8001c14 <chSysRestoreStatusX.part.3.lto_priv.95+0x14>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f383 8811 	msr	BASEPRI, r3
 8001c12:	bd10      	pop	{r4, pc}
      chSysUnlockFromISR();
    }
    else {
      chSchRescheduleS();
 8001c14:	f7ff f94c 	bl	8000eb0 <chSchRescheduleS>
 8001c18:	f384 8811 	msr	BASEPRI, r4
 8001c1c:	bd10      	pop	{r4, pc}
 8001c1e:	bf00      	nop

08001c20 <chSysGetStatusAndLockX.part.2.lto_priv.96>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c20:	f3ef 8305 	mrs	r3, IPSR
 8001c24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 */
syssts_t chSysGetStatusAndLockX(void) {

  syssts_t sts = port_get_irq_status();
  if (port_irq_enabled(sts)) {
    if (port_is_isr_context()) {
 8001c28:	b91b      	cbnz	r3, 8001c32 <chSysGetStatusAndLockX.part.2.lto_priv.96+0x12>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001c2a:	2320      	movs	r3, #32
 8001c2c:	f383 8811 	msr	BASEPRI, r3
    else {
      chSysLock();
    }
  }
  return sts;
}
 8001c30:	4770      	bx	lr
 8001c32:	2320      	movs	r3, #32
 8001c34:	f383 8811 	msr	BASEPRI, r3
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	0000      	movs	r0, r0
	...

08001c40 <chSysIntegrityCheckI>:
  cnt_t n;

  chDbgCheckClassI();

  /* Ready List integrity check.*/
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 8001c40:	07c2      	lsls	r2, r0, #31
 * @retval false        The test succeeded.
 * @retval true         Test failed.
 *
 * @iclass
 */
bool chSysIntegrityCheckI(unsigned testmask) {
 8001c42:	b410      	push	{r4}
  cnt_t n;

  chDbgCheckClassI();

  /* Ready List integrity check.*/
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 8001c44:	d510      	bpl.n	8001c68 <chSysIntegrityCheckI+0x28>
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_queue.p_next;
 8001c46:	4a2a      	ldr	r2, [pc, #168]	; (8001cf0 <chSysIntegrityCheckI+0xb0>)
 8001c48:	6811      	ldr	r1, [r2, #0]
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 8001c4a:	4291      	cmp	r1, r2
 8001c4c:	d03e      	beq.n	8001ccc <chSysIntegrityCheckI+0x8c>
 8001c4e:	2300      	movs	r3, #0
      n++;
      tp = tp->p_next;
 8001c50:	6809      	ldr	r1, [r1, #0]

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_queue.p_next;
    while (tp != (thread_t *)&ch.rlist.r_queue) {
      n++;
 8001c52:	3301      	adds	r3, #1
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_queue.p_next;
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 8001c54:	4291      	cmp	r1, r2
 8001c56:	d1fb      	bne.n	8001c50 <chSysIntegrityCheckI+0x10>
      n++;
      tp = tp->p_next;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_queue.p_prev;
 8001c58:	684c      	ldr	r4, [r1, #4]
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 8001c5a:	428c      	cmp	r4, r1
 8001c5c:	d032      	beq.n	8001cc4 <chSysIntegrityCheckI+0x84>
      n--;
      tp = tp->p_prev;
 8001c5e:	6864      	ldr	r4, [r4, #4]
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_queue.p_prev;
    while (tp != (thread_t *)&ch.rlist.r_queue) {
      n--;
 8001c60:	3b01      	subs	r3, #1
      tp = tp->p_next;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_queue.p_prev;
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 8001c62:	4294      	cmp	r4, r2
 8001c64:	d1fb      	bne.n	8001c5e <chSysIntegrityCheckI+0x1e>
      n--;
      tp = tp->p_prev;
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 8001c66:	bb6b      	cbnz	r3, 8001cc4 <chSysIntegrityCheckI+0x84>
      return true;
    }
  }

  /* Timers list integrity check.*/
  if ((testmask & CH_INTEGRITY_VTLIST) != 0U) {
 8001c68:	0783      	lsls	r3, r0, #30
 8001c6a:	d512      	bpl.n	8001c92 <chSysIntegrityCheckI+0x52>
    virtual_timer_t * vtp;

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
    vtp = ch.vtlist.vt_next;
 8001c6c:	4a20      	ldr	r2, [pc, #128]	; (8001cf0 <chSysIntegrityCheckI+0xb0>)
 8001c6e:	4614      	mov	r4, r2
 8001c70:	f854 1f1c 	ldr.w	r1, [r4, #28]!
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001c74:	42a1      	cmp	r1, r4
 8001c76:	d02f      	beq.n	8001cd8 <chSysIntegrityCheckI+0x98>
 8001c78:	2300      	movs	r3, #0
      n++;
      vtp = vtp->vt_next;
 8001c7a:	6809      	ldr	r1, [r1, #0]

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
    vtp = ch.vtlist.vt_next;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
      n++;
 8001c7c:	3301      	adds	r3, #1
    virtual_timer_t * vtp;

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
    vtp = ch.vtlist.vt_next;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001c7e:	42a1      	cmp	r1, r4
 8001c80:	d1fb      	bne.n	8001c7a <chSysIntegrityCheckI+0x3a>
      n++;
      vtp = vtp->vt_next;
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.vt_prev;
 8001c82:	6a12      	ldr	r2, [r2, #32]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001c84:	428a      	cmp	r2, r1
 8001c86:	d01d      	beq.n	8001cc4 <chSysIntegrityCheckI+0x84>
      n--;
      vtp = vtp->vt_prev;
 8001c88:	6852      	ldr	r2, [r2, #4]
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.vt_prev;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
      n--;
 8001c8a:	3b01      	subs	r3, #1
      vtp = vtp->vt_next;
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.vt_prev;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001c8c:	42a2      	cmp	r2, r4
 8001c8e:	d1fb      	bne.n	8001c88 <chSysIntegrityCheckI+0x48>
      n--;
      vtp = vtp->vt_prev;
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 8001c90:	b9c3      	cbnz	r3, 8001cc4 <chSysIntegrityCheckI+0x84>
      return true;
    }
  }

#if CH_CFG_USE_REGISTRY == TRUE
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
 8001c92:	f010 0004 	ands.w	r0, r0, #4
 8001c96:	d012      	beq.n	8001cbe <chSysIntegrityCheckI+0x7e>
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_newer;
 8001c98:	4a15      	ldr	r2, [pc, #84]	; (8001cf0 <chSysIntegrityCheckI+0xb0>)
 8001c9a:	6913      	ldr	r3, [r2, #16]
    while (tp != (thread_t *)&ch.rlist) {
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d021      	beq.n	8001ce4 <chSysIntegrityCheckI+0xa4>
 8001ca0:	2000      	movs	r0, #0
      n++;
      tp = tp->p_newer;
 8001ca2:	691b      	ldr	r3, [r3, #16]

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_newer;
    while (tp != (thread_t *)&ch.rlist) {
      n++;
 8001ca4:	3001      	adds	r0, #1
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_newer;
    while (tp != (thread_t *)&ch.rlist) {
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d1fb      	bne.n	8001ca2 <chSysIntegrityCheckI+0x62>
      n++;
      tp = tp->p_newer;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_older;
 8001caa:	6959      	ldr	r1, [r3, #20]
    while (tp != (thread_t *)&ch.rlist) {
 8001cac:	4299      	cmp	r1, r3
 8001cae:	d009      	beq.n	8001cc4 <chSysIntegrityCheckI+0x84>
      n--;
      tp = tp->p_older;
 8001cb0:	6949      	ldr	r1, [r1, #20]
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_older;
    while (tp != (thread_t *)&ch.rlist) {
      n--;
 8001cb2:	3801      	subs	r0, #1
      tp = tp->p_newer;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_older;
    while (tp != (thread_t *)&ch.rlist) {
 8001cb4:	4291      	cmp	r1, r2
 8001cb6:	d1fb      	bne.n	8001cb0 <chSysIntegrityCheckI+0x70>
      n--;
      tp = tp->p_older;
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 8001cb8:	3000      	adds	r0, #0
 8001cba:	bf18      	it	ne
 8001cbc:	2001      	movne	r0, #1
    PORT_INTEGRITY_CHECK();
  }
#endif

  return false;
}
 8001cbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001cc2:	4770      	bx	lr
      tp = tp->p_prev;
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
      return true;
 8001cc4:	2001      	movs	r0, #1
    PORT_INTEGRITY_CHECK();
  }
#endif

  return false;
}
 8001cc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001cca:	4770      	bx	lr
      n++;
      tp = tp->p_next;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_queue.p_prev;
 8001ccc:	6854      	ldr	r4, [r2, #4]
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 8001cce:	4294      	cmp	r4, r2
  /* Ready List integrity check.*/
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
 8001cd0:	bf18      	it	ne
 8001cd2:	2300      	movne	r3, #0
      tp = tp->p_next;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_queue.p_prev;
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 8001cd4:	d1c3      	bne.n	8001c5e <chSysIntegrityCheckI+0x1e>
 8001cd6:	e7c7      	b.n	8001c68 <chSysIntegrityCheckI+0x28>
      n++;
      vtp = vtp->vt_next;
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.vt_prev;
 8001cd8:	6a12      	ldr	r2, [r2, #32]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001cda:	42a2      	cmp	r2, r4
  /* Timers list integrity check.*/
  if ((testmask & CH_INTEGRITY_VTLIST) != 0U) {
    virtual_timer_t * vtp;

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
 8001cdc:	bf18      	it	ne
 8001cde:	2300      	movne	r3, #0
      vtp = vtp->vt_next;
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.vt_prev;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001ce0:	d1d2      	bne.n	8001c88 <chSysIntegrityCheckI+0x48>
 8001ce2:	e7d6      	b.n	8001c92 <chSysIntegrityCheckI+0x52>
      n++;
      tp = tp->p_newer;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_older;
 8001ce4:	6959      	ldr	r1, [r3, #20]
#if CH_CFG_USE_REGISTRY == TRUE
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
 8001ce6:	2000      	movs	r0, #0
      tp = tp->p_newer;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_older;
    while (tp != (thread_t *)&ch.rlist) {
 8001ce8:	4299      	cmp	r1, r3
 8001cea:	d1e1      	bne.n	8001cb0 <chSysIntegrityCheckI+0x70>
 8001cec:	e7e7      	b.n	8001cbe <chSysIntegrityCheckI+0x7e>
 8001cee:	bf00      	nop
 8001cf0:	20001040 	.word	0x20001040
	...

08001d00 <BusFault_Handler>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 8001d00:	e7fe      	b.n	8001d00 <BusFault_Handler>
 8001d02:	bf00      	nop
	...

08001d10 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8001d10:	b4f0      	push	{r4, r5, r6, r7}
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
 8001d12:	4e11      	ldr	r6, [pc, #68]	; (8001d58 <__init_ram_areas+0x48>)
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8001d14:	2500      	movs	r5, #0
 8001d16:	f106 0780 	add.w	r7, r6, #128	; 0x80
void __init_ram_areas(void) {
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;

  do {
    uint32_t *tp = rap->init_text_area;
 8001d1a:	e896 001a 	ldmia.w	r6, {r1, r3, r4}
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8001d1e:	42a3      	cmp	r3, r4
 8001d20:	d20d      	bcs.n	8001d3e <__init_ram_areas+0x2e>
 8001d22:	461a      	mov	r2, r3
 8001d24:	3904      	subs	r1, #4
      *p = *tp;
 8001d26:	f851 0f04 	ldr.w	r0, [r1, #4]!
 8001d2a:	f842 0b04 	str.w	r0, [r2], #4
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8001d2e:	42a2      	cmp	r2, r4
 8001d30:	d3f9      	bcc.n	8001d26 <__init_ram_areas+0x16>
 8001d32:	43da      	mvns	r2, r3
 8001d34:	4414      	add	r4, r2
 8001d36:	f024 0403 	bic.w	r4, r4, #3
 8001d3a:	3404      	adds	r4, #4
 8001d3c:	4423      	add	r3, r4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8001d3e:	68f2      	ldr	r2, [r6, #12]
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d203      	bcs.n	8001d4c <__init_ram_areas+0x3c>
      *p = 0;
 8001d44:	f843 5b04 	str.w	r5, [r3], #4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d3fb      	bcc.n	8001d44 <__init_ram_areas+0x34>
      *p = 0;
      p++;
    }
    rap++;
 8001d4c:	3610      	adds	r6, #16
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8001d4e:	42be      	cmp	r6, r7
 8001d50:	d3e3      	bcc.n	8001d1a <__init_ram_areas+0xa>
#endif
}
 8001d52:	bcf0      	pop	{r4, r5, r6, r7}
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	08007820 	.word	0x08007820
 8001d5c:	00000000 	.word	0x00000000

08001d60 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 8001d60:	e7fe      	b.n	8001d60 <__default_exit>
 8001d62:	bf00      	nop
	...

08001d70 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
	...

08001d80 <__core_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __core_init(void) {
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
	...

08001d90 <mtx5_setup.lto_priv.128>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001d90:	4b02      	ldr	r3, [pc, #8]	; (8001d9c <mtx5_setup.lto_priv.128+0xc>)
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 8001d92:	2200      	movs	r2, #0
 8001d94:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8001d96:	605b      	str	r3, [r3, #4]
 8001d98:	609a      	str	r2, [r3, #8]
 8001d9a:	4770      	bx	lr
 8001d9c:	20000800 	.word	0x20000800

08001da0 <mtx4_setup.lto_priv.126>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001da0:	4a04      	ldr	r2, [pc, #16]	; (8001db4 <mtx4_setup.lto_priv.126+0x14>)
 8001da2:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <mtx4_setup.lto_priv.126+0x18>)
 8001da4:	2100      	movs	r1, #0
 8001da6:	6012      	str	r2, [r2, #0]
  tqp->p_prev = (thread_t *)tqp;
 8001da8:	6052      	str	r2, [r2, #4]
 8001daa:	6091      	str	r1, [r2, #8]
 8001dac:	6099      	str	r1, [r3, #8]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001dae:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8001db0:	605b      	str	r3, [r3, #4]
 8001db2:	4770      	bx	lr
 8001db4:	20000800 	.word	0x20000800
 8001db8:	20000810 	.word	0x20000810
 8001dbc:	00000000 	.word	0x00000000

08001dc0 <mtx1_setup.lto_priv.124>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001dc0:	4b02      	ldr	r3, [pc, #8]	; (8001dcc <mtx1_setup.lto_priv.124+0xc>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8001dc6:	605b      	str	r3, [r3, #4]
 8001dc8:	609a      	str	r2, [r3, #8]
 8001dca:	4770      	bx	lr
 8001dcc:	20000800 	.word	0x20000800

08001dd0 <sem3_setup.lto_priv.121>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001dd0:	4b02      	ldr	r3, [pc, #8]	; (8001ddc <sem3_setup.lto_priv.121+0xc>)
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));

  queue_init(&sp->s_queue);
  sp->s_cnt = n;
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8001dd6:	605b      	str	r3, [r3, #4]
 8001dd8:	609a      	str	r2, [r3, #8]
 8001dda:	4770      	bx	lr
 8001ddc:	200008a0 	.word	0x200008a0

08001de0 <sem2_setup.lto_priv.119>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001de0:	4b02      	ldr	r3, [pc, #8]	; (8001dec <sem2_setup.lto_priv.119+0xc>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8001de6:	605b      	str	r3, [r3, #4]
 8001de8:	609a      	str	r2, [r3, #8]
 8001dea:	4770      	bx	lr
 8001dec:	200008a0 	.word	0x200008a0

08001df0 <sem1_setup.lto_priv.117>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001df0:	4b02      	ldr	r3, [pc, #8]	; (8001dfc <sem1_setup.lto_priv.117+0xc>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8001df6:	605b      	str	r3, [r3, #4]
 8001df8:	609a      	str	r2, [r3, #8]
 8001dfa:	4770      	bx	lr
 8001dfc:	200008a0 	.word	0x200008a0

08001e00 <mtx4_execute.lto_priv.127>:
  chThdSleepMilliseconds(150);
  chMtxLock(&m1);
  chMtxUnlock(&m1);
}

static void mtx4_execute(void) {
 8001e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8001e04:	4d84      	ldr	r5, [pc, #528]	; (8002018 <mtx4_execute.lto_priv.127+0x218>)
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 8001e06:	4b85      	ldr	r3, [pc, #532]	; (800201c <mtx4_execute.lto_priv.127+0x21c>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8001e08:	69aa      	ldr	r2, [r5, #24]
  chThdSleepMilliseconds(150);
  chMtxLock(&m1);
  chMtxUnlock(&m1);
}

static void mtx4_execute(void) {
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	6894      	ldr	r4, [r2, #8]
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 8001e0e:	f44f 71a4 	mov.w	r1, #328	; 0x148

static void mtx4_execute(void) {
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
 8001e12:	1c67      	adds	r7, r4, #1
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 8001e14:	463a      	mov	r2, r7
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	4881      	ldr	r0, [pc, #516]	; (8002020 <mtx4_execute.lto_priv.127+0x220>)
 8001e1a:	4b82      	ldr	r3, [pc, #520]	; (8002024 <mtx4_execute.lto_priv.127+0x224>)
 8001e1c:	f7ff f8c0 	bl	8000fa0 <chThdCreateStatic>
 8001e20:	4e81      	ldr	r6, [pc, #516]	; (8002028 <mtx4_execute.lto_priv.127+0x228>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "A");
 8001e22:	4b82      	ldr	r3, [pc, #520]	; (800202c <mtx4_execute.lto_priv.127+0x22c>)
static void mtx4_execute(void) {
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
  p2 = p + 2;
 8001e24:	f104 0802 	add.w	r8, r4, #2
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 8001e28:	6030      	str	r0, [r6, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "A");
 8001e2a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001e2e:	4642      	mov	r2, r8
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	487f      	ldr	r0, [pc, #508]	; (8002030 <mtx4_execute.lto_priv.127+0x230>)
 8001e34:	4b7f      	ldr	r3, [pc, #508]	; (8002034 <mtx4_execute.lto_priv.127+0x234>)
 8001e36:	f7ff f8b3 	bl	8000fa0 <chThdCreateStatic>
 8001e3a:	6070      	str	r0, [r6, #4]
  chMtxLock(&m2);
 8001e3c:	487e      	ldr	r0, [pc, #504]	; (8002038 <mtx4_execute.lto_priv.127+0x238>)
 8001e3e:	f7ff fb07 	bl	8001450 <chMtxLock>
 8001e42:	69ab      	ldr	r3, [r5, #24]
  test_assert(1, chThdGetPriorityX() == p, "wrong priority level");
 8001e44:	2001      	movs	r0, #1
 8001e46:	6899      	ldr	r1, [r3, #8]
 8001e48:	1a61      	subs	r1, r4, r1
 8001e4a:	fab1 f181 	clz	r1, r1
 8001e4e:	0949      	lsrs	r1, r1, #5
 8001e50:	f001 fa6e 	bl	8003330 <_test_assert>
 8001e54:	b110      	cbz	r0, 8001e5c <mtx4_execute.lto_priv.127+0x5c>
  chThdSleepMilliseconds(100);
  test_assert(13, chThdGetPriorityX() == p1, "wrong priority level");
  chMtxUnlockAll();
  test_assert(14, chThdGetPriorityX() == p, "wrong priority level");
  test_wait_threads();
}
 8001e56:	b002      	add	sp, #8
 8001e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "A");
  chMtxLock(&m2);
  test_assert(1, chThdGetPriorityX() == p, "wrong priority level");
  chThdSleepMilliseconds(100);
 8001e5c:	20c8      	movs	r0, #200	; 0xc8
 8001e5e:	f7ff febf 	bl	8001be0 <chThdSleep>
 8001e62:	69ab      	ldr	r3, [r5, #24]
  test_assert(2, chThdGetPriorityX() == p1, "wrong priority level");
 8001e64:	2002      	movs	r0, #2
 8001e66:	6899      	ldr	r1, [r3, #8]
 8001e68:	1a79      	subs	r1, r7, r1
 8001e6a:	fab1 f181 	clz	r1, r1
 8001e6e:	0949      	lsrs	r1, r1, #5
 8001e70:	f001 fa5e 	bl	8003330 <_test_assert>
 8001e74:	2800      	cmp	r0, #0
 8001e76:	d1ee      	bne.n	8001e56 <mtx4_execute.lto_priv.127+0x56>
  chMtxLock(&m1);
 8001e78:	4870      	ldr	r0, [pc, #448]	; (800203c <mtx4_execute.lto_priv.127+0x23c>)
 8001e7a:	f7ff fae9 	bl	8001450 <chMtxLock>
 8001e7e:	69ab      	ldr	r3, [r5, #24]
  test_assert(3, chThdGetPriorityX() == p1, "wrong priority level");
 8001e80:	2003      	movs	r0, #3
 8001e82:	6899      	ldr	r1, [r3, #8]
 8001e84:	1a79      	subs	r1, r7, r1
 8001e86:	fab1 f181 	clz	r1, r1
 8001e8a:	0949      	lsrs	r1, r1, #5
 8001e8c:	f001 fa50 	bl	8003330 <_test_assert>
 8001e90:	2800      	cmp	r0, #0
 8001e92:	d1e0      	bne.n	8001e56 <mtx4_execute.lto_priv.127+0x56>
  chThdSleepMilliseconds(100);
 8001e94:	20c8      	movs	r0, #200	; 0xc8
 8001e96:	f7ff fea3 	bl	8001be0 <chThdSleep>
 8001e9a:	69ab      	ldr	r3, [r5, #24]
  test_assert(4, chThdGetPriorityX() == p2, "wrong priority level");
 8001e9c:	2004      	movs	r0, #4
 8001e9e:	6899      	ldr	r1, [r3, #8]
 8001ea0:	ebc1 0108 	rsb	r1, r1, r8
 8001ea4:	fab1 f181 	clz	r1, r1
 8001ea8:	0949      	lsrs	r1, r1, #5
 8001eaa:	f001 fa41 	bl	8003330 <_test_assert>
 8001eae:	2800      	cmp	r0, #0
 8001eb0:	d1d1      	bne.n	8001e56 <mtx4_execute.lto_priv.127+0x56>
  chMtxUnlock(&m1);
 8001eb2:	4862      	ldr	r0, [pc, #392]	; (800203c <mtx4_execute.lto_priv.127+0x23c>)
 8001eb4:	f7ff fa2c 	bl	8001310 <chMtxUnlock>
 8001eb8:	69ab      	ldr	r3, [r5, #24]
  test_assert(5, chThdGetPriorityX() == p1, "wrong priority level");
 8001eba:	2005      	movs	r0, #5
 8001ebc:	6899      	ldr	r1, [r3, #8]
 8001ebe:	1a79      	subs	r1, r7, r1
 8001ec0:	fab1 f181 	clz	r1, r1
 8001ec4:	0949      	lsrs	r1, r1, #5
 8001ec6:	f001 fa33 	bl	8003330 <_test_assert>
 8001eca:	2800      	cmp	r0, #0
 8001ecc:	d1c3      	bne.n	8001e56 <mtx4_execute.lto_priv.127+0x56>
  chThdSleepMilliseconds(100);
 8001ece:	20c8      	movs	r0, #200	; 0xc8
 8001ed0:	f7ff fe86 	bl	8001be0 <chThdSleep>
 8001ed4:	69ab      	ldr	r3, [r5, #24]
  test_assert(6, chThdGetPriorityX() == p1, "wrong priority level");
 8001ed6:	2006      	movs	r0, #6
 8001ed8:	6899      	ldr	r1, [r3, #8]
 8001eda:	1a79      	subs	r1, r7, r1
 8001edc:	fab1 f181 	clz	r1, r1
 8001ee0:	0949      	lsrs	r1, r1, #5
 8001ee2:	f001 fa25 	bl	8003330 <_test_assert>
 8001ee6:	2800      	cmp	r0, #0
 8001ee8:	d1b5      	bne.n	8001e56 <mtx4_execute.lto_priv.127+0x56>
  chMtxUnlockAll();
 8001eea:	f7ff f9b9 	bl	8001260 <chMtxUnlockAll>
 8001eee:	69ab      	ldr	r3, [r5, #24]
  test_assert(7, chThdGetPriorityX() == p, "wrong priority level");
 8001ef0:	2007      	movs	r0, #7
 8001ef2:	6899      	ldr	r1, [r3, #8]
 8001ef4:	1a61      	subs	r1, r4, r1
 8001ef6:	fab1 f181 	clz	r1, r1
 8001efa:	0949      	lsrs	r1, r1, #5
 8001efc:	f001 fa18 	bl	8003330 <_test_assert>
 8001f00:	2800      	cmp	r0, #0
 8001f02:	d1a8      	bne.n	8001e56 <mtx4_execute.lto_priv.127+0x56>
  test_wait_threads();
 8001f04:	f001 f994 	bl	8003230 <test_wait_threads>

  /* Test repeated in order to cover chMtxUnlockS().*/
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "D");
 8001f08:	4b4d      	ldr	r3, [pc, #308]	; (8002040 <mtx4_execute.lto_priv.127+0x240>)
 8001f0a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001f0e:	9300      	str	r3, [sp, #0]
 8001f10:	463a      	mov	r2, r7
 8001f12:	4b44      	ldr	r3, [pc, #272]	; (8002024 <mtx4_execute.lto_priv.127+0x224>)
 8001f14:	4842      	ldr	r0, [pc, #264]	; (8002020 <mtx4_execute.lto_priv.127+0x220>)
 8001f16:	f7ff f843 	bl	8000fa0 <chThdCreateStatic>
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "C");
 8001f1a:	4b4a      	ldr	r3, [pc, #296]	; (8002044 <mtx4_execute.lto_priv.127+0x244>)
  chMtxUnlockAll();
  test_assert(7, chThdGetPriorityX() == p, "wrong priority level");
  test_wait_threads();

  /* Test repeated in order to cover chMtxUnlockS().*/
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "D");
 8001f1c:	6030      	str	r0, [r6, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "C");
 8001f1e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001f22:	9300      	str	r3, [sp, #0]
 8001f24:	4642      	mov	r2, r8
 8001f26:	4b43      	ldr	r3, [pc, #268]	; (8002034 <mtx4_execute.lto_priv.127+0x234>)
 8001f28:	4841      	ldr	r0, [pc, #260]	; (8002030 <mtx4_execute.lto_priv.127+0x230>)
 8001f2a:	f7ff f839 	bl	8000fa0 <chThdCreateStatic>
 8001f2e:	6070      	str	r0, [r6, #4]
  chMtxLock(&m2);
 8001f30:	4841      	ldr	r0, [pc, #260]	; (8002038 <mtx4_execute.lto_priv.127+0x238>)
 8001f32:	f7ff fa8d 	bl	8001450 <chMtxLock>
 8001f36:	69ab      	ldr	r3, [r5, #24]
  test_assert(8, chThdGetPriorityX() == p, "wrong priority level");
 8001f38:	2008      	movs	r0, #8
 8001f3a:	6899      	ldr	r1, [r3, #8]
 8001f3c:	1a61      	subs	r1, r4, r1
 8001f3e:	fab1 f181 	clz	r1, r1
 8001f42:	0949      	lsrs	r1, r1, #5
 8001f44:	f001 f9f4 	bl	8003330 <_test_assert>
 8001f48:	2800      	cmp	r0, #0
 8001f4a:	d184      	bne.n	8001e56 <mtx4_execute.lto_priv.127+0x56>
  chThdSleepMilliseconds(100);
 8001f4c:	20c8      	movs	r0, #200	; 0xc8
 8001f4e:	f7ff fe47 	bl	8001be0 <chThdSleep>
 8001f52:	69ab      	ldr	r3, [r5, #24]
  test_assert(9, chThdGetPriorityX() == p1, "wrong priority level");
 8001f54:	2009      	movs	r0, #9
 8001f56:	6899      	ldr	r1, [r3, #8]
 8001f58:	1a7b      	subs	r3, r7, r1
 8001f5a:	4259      	negs	r1, r3
 8001f5c:	4159      	adcs	r1, r3
 8001f5e:	f001 f9e7 	bl	8003330 <_test_assert>
 8001f62:	2800      	cmp	r0, #0
 8001f64:	f47f af77 	bne.w	8001e56 <mtx4_execute.lto_priv.127+0x56>
  chMtxLock(&m1);
 8001f68:	4834      	ldr	r0, [pc, #208]	; (800203c <mtx4_execute.lto_priv.127+0x23c>)
 8001f6a:	f7ff fa71 	bl	8001450 <chMtxLock>
 8001f6e:	69ab      	ldr	r3, [r5, #24]
  test_assert(10, chThdGetPriorityX() == p1, "wrong priority level");
 8001f70:	200a      	movs	r0, #10
 8001f72:	6899      	ldr	r1, [r3, #8]
 8001f74:	ebc1 0c07 	rsb	ip, r1, r7
 8001f78:	f1dc 0100 	rsbs	r1, ip, #0
 8001f7c:	eb41 010c 	adc.w	r1, r1, ip
 8001f80:	f001 f9d6 	bl	8003330 <_test_assert>
 8001f84:	2800      	cmp	r0, #0
 8001f86:	f47f af66 	bne.w	8001e56 <mtx4_execute.lto_priv.127+0x56>
  chThdSleepMilliseconds(100);
 8001f8a:	20c8      	movs	r0, #200	; 0xc8
 8001f8c:	f7ff fe28 	bl	8001be0 <chThdSleep>
 8001f90:	69ab      	ldr	r3, [r5, #24]
  test_assert(11, chThdGetPriorityX() == p2, "wrong priority level");
 8001f92:	200b      	movs	r0, #11
 8001f94:	6899      	ldr	r1, [r3, #8]
 8001f96:	ebc1 0e08 	rsb	lr, r1, r8
 8001f9a:	f1de 0100 	rsbs	r1, lr, #0
 8001f9e:	eb41 010e 	adc.w	r1, r1, lr
 8001fa2:	f001 f9c5 	bl	8003330 <_test_assert>
 8001fa6:	4606      	mov	r6, r0
 8001fa8:	2800      	cmp	r0, #0
 8001faa:	f47f af54 	bne.w	8001e56 <mtx4_execute.lto_priv.127+0x56>
 8001fae:	2320      	movs	r3, #32
 8001fb0:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chMtxUnlockS(&m1);
 8001fb4:	4821      	ldr	r0, [pc, #132]	; (800203c <mtx4_execute.lto_priv.127+0x23c>)
 8001fb6:	f7ff f983 	bl	80012c0 <chMtxUnlockS>
  chSchRescheduleS();
 8001fba:	f7fe ff79 	bl	8000eb0 <chSchRescheduleS>
 8001fbe:	f386 8811 	msr	BASEPRI, r6
 8001fc2:	69ab      	ldr	r3, [r5, #24]
  chSysUnlock();
  test_assert(12, chThdGetPriorityX() == p1, "wrong priority level");
 8001fc4:	200c      	movs	r0, #12
 8001fc6:	6899      	ldr	r1, [r3, #8]
 8001fc8:	1a7e      	subs	r6, r7, r1
 8001fca:	4271      	negs	r1, r6
 8001fcc:	4171      	adcs	r1, r6
 8001fce:	f001 f9af 	bl	8003330 <_test_assert>
 8001fd2:	2800      	cmp	r0, #0
 8001fd4:	f47f af3f 	bne.w	8001e56 <mtx4_execute.lto_priv.127+0x56>
  chThdSleepMilliseconds(100);
 8001fd8:	20c8      	movs	r0, #200	; 0xc8
 8001fda:	f7ff fe01 	bl	8001be0 <chThdSleep>
 8001fde:	69ab      	ldr	r3, [r5, #24]
  test_assert(13, chThdGetPriorityX() == p1, "wrong priority level");
 8001fe0:	200d      	movs	r0, #13
 8001fe2:	6899      	ldr	r1, [r3, #8]
 8001fe4:	1a7a      	subs	r2, r7, r1
 8001fe6:	4251      	negs	r1, r2
 8001fe8:	4151      	adcs	r1, r2
 8001fea:	f001 f9a1 	bl	8003330 <_test_assert>
 8001fee:	2800      	cmp	r0, #0
 8001ff0:	f47f af31 	bne.w	8001e56 <mtx4_execute.lto_priv.127+0x56>
  chMtxUnlockAll();
 8001ff4:	f7ff f934 	bl	8001260 <chMtxUnlockAll>
 8001ff8:	69ab      	ldr	r3, [r5, #24]
  test_assert(14, chThdGetPriorityX() == p, "wrong priority level");
 8001ffa:	200e      	movs	r0, #14
 8001ffc:	6899      	ldr	r1, [r3, #8]
 8001ffe:	1a63      	subs	r3, r4, r1
 8002000:	4259      	negs	r1, r3
 8002002:	4159      	adcs	r1, r3
 8002004:	f001 f994 	bl	8003330 <_test_assert>
 8002008:	2800      	cmp	r0, #0
 800200a:	f47f af24 	bne.w	8001e56 <mtx4_execute.lto_priv.127+0x56>
  test_wait_threads();
}
 800200e:	b002      	add	sp, #8
 8002010:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  test_assert(12, chThdGetPriorityX() == p1, "wrong priority level");
  chThdSleepMilliseconds(100);
  test_assert(13, chThdGetPriorityX() == p1, "wrong priority level");
  chMtxUnlockAll();
  test_assert(14, chThdGetPriorityX() == p, "wrong priority level");
  test_wait_threads();
 8002014:	f001 b90c 	b.w	8003230 <test_wait_threads>
 8002018:	20001040 	.word	0x20001040
 800201c:	080078a0 	.word	0x080078a0
 8002020:	20001210 	.word	0x20001210
 8002024:	08002051 	.word	0x08002051
 8002028:	20000968 	.word	0x20000968
 800202c:	080078a4 	.word	0x080078a4
 8002030:	20001358 	.word	0x20001358
 8002034:	08002071 	.word	0x08002071
 8002038:	20000810 	.word	0x20000810
 800203c:	20000800 	.word	0x20000800
 8002040:	080087f0 	.word	0x080087f0
 8002044:	080078a8 	.word	0x080078a8
	...

08002050 <thread4a>:

  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}

static THD_FUNCTION(thread4a, p) {
 8002050:	b510      	push	{r4, lr}

  (void)p;
  chThdSleepMilliseconds(50);
  chMtxLock(&m2);
 8002052:	4c06      	ldr	r4, [pc, #24]	; (800206c <thread4a+0x1c>)
}

static THD_FUNCTION(thread4a, p) {

  (void)p;
  chThdSleepMilliseconds(50);
 8002054:	2064      	movs	r0, #100	; 0x64
 8002056:	f7ff fdc3 	bl	8001be0 <chThdSleep>
  chMtxLock(&m2);
 800205a:	4620      	mov	r0, r4
 800205c:	f7ff f9f8 	bl	8001450 <chMtxLock>
  chMtxUnlock(&m2);
 8002060:	4620      	mov	r0, r4
}
 8002062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static THD_FUNCTION(thread4a, p) {

  (void)p;
  chThdSleepMilliseconds(50);
  chMtxLock(&m2);
  chMtxUnlock(&m2);
 8002066:	f7ff b953 	b.w	8001310 <chMtxUnlock>
 800206a:	bf00      	nop
 800206c:	20000810 	.word	0x20000810

08002070 <thread4b>:
}

static THD_FUNCTION(thread4b, p) {
 8002070:	b510      	push	{r4, lr}

  (void)p;
  chThdSleepMilliseconds(150);
  chMtxLock(&m1);
 8002072:	4c06      	ldr	r4, [pc, #24]	; (800208c <thread4b+0x1c>)
}

static THD_FUNCTION(thread4b, p) {

  (void)p;
  chThdSleepMilliseconds(150);
 8002074:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002078:	f7ff fdb2 	bl	8001be0 <chThdSleep>
  chMtxLock(&m1);
 800207c:	4620      	mov	r0, r4
 800207e:	f7ff f9e7 	bl	8001450 <chMtxLock>
  chMtxUnlock(&m1);
 8002082:	4620      	mov	r0, r4
}
 8002084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static THD_FUNCTION(thread4b, p) {

  (void)p;
  chThdSleepMilliseconds(150);
  chMtxLock(&m1);
  chMtxUnlock(&m1);
 8002088:	f7ff b942 	b.w	8001310 <chMtxUnlock>
 800208c:	20000800 	.word	0x20000800

08002090 <mtx1_execute.lto_priv.125>:
  chMtxLock(&m1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
}

static void mtx1_execute(void) {
 8002090:	b570      	push	{r4, r5, r6, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8002092:	4e29      	ldr	r6, [pc, #164]	; (8002138 <mtx1_execute.lto_priv.125+0xa8>)
 8002094:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8002096:	69b3      	ldr	r3, [r6, #24]

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
 8002098:	4828      	ldr	r0, [pc, #160]	; (800213c <mtx1_execute.lto_priv.125+0xac>)
 800209a:	689c      	ldr	r4, [r3, #8]
 800209c:	f7ff f9d8 	bl	8001450 <chMtxLock>
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 80020a0:	4b27      	ldr	r3, [pc, #156]	; (8002140 <mtx1_execute.lto_priv.125+0xb0>)
 80020a2:	1c62      	adds	r2, r4, #1
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80020aa:	4b26      	ldr	r3, [pc, #152]	; (8002144 <mtx1_execute.lto_priv.125+0xb4>)
 80020ac:	4826      	ldr	r0, [pc, #152]	; (8002148 <mtx1_execute.lto_priv.125+0xb8>)
 80020ae:	f7fe ff77 	bl	8000fa0 <chThdCreateStatic>
 80020b2:	4d26      	ldr	r5, [pc, #152]	; (800214c <mtx1_execute.lto_priv.125+0xbc>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 80020b4:	4b26      	ldr	r3, [pc, #152]	; (8002150 <mtx1_execute.lto_priv.125+0xc0>)

static void mtx1_execute(void) {

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 80020b6:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 80020b8:	1ca2      	adds	r2, r4, #2
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80020c0:	4b20      	ldr	r3, [pc, #128]	; (8002144 <mtx1_execute.lto_priv.125+0xb4>)
 80020c2:	4824      	ldr	r0, [pc, #144]	; (8002154 <mtx1_execute.lto_priv.125+0xc4>)
 80020c4:	f7fe ff6c 	bl	8000fa0 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 80020c8:	4b23      	ldr	r3, [pc, #140]	; (8002158 <mtx1_execute.lto_priv.125+0xc8>)
static void mtx1_execute(void) {

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 80020ca:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 80020cc:	1ce2      	adds	r2, r4, #3
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80020d4:	4b1b      	ldr	r3, [pc, #108]	; (8002144 <mtx1_execute.lto_priv.125+0xb4>)
 80020d6:	4821      	ldr	r0, [pc, #132]	; (800215c <mtx1_execute.lto_priv.125+0xcc>)
 80020d8:	f7fe ff62 	bl	8000fa0 <chThdCreateStatic>
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 80020dc:	4b20      	ldr	r3, [pc, #128]	; (8002160 <mtx1_execute.lto_priv.125+0xd0>)

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 80020de:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 80020e0:	1d22      	adds	r2, r4, #4
 80020e2:	9300      	str	r3, [sp, #0]
 80020e4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80020e8:	4b16      	ldr	r3, [pc, #88]	; (8002144 <mtx1_execute.lto_priv.125+0xb4>)
 80020ea:	481e      	ldr	r0, [pc, #120]	; (8002164 <mtx1_execute.lto_priv.125+0xd4>)
 80020ec:	f7fe ff58 	bl	8000fa0 <chThdCreateStatic>
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 80020f0:	4b1d      	ldr	r3, [pc, #116]	; (8002168 <mtx1_execute.lto_priv.125+0xd8>)
 80020f2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80020f6:	1d62      	adds	r2, r4, #5
  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 80020f8:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 80020fa:	9300      	str	r3, [sp, #0]
 80020fc:	481b      	ldr	r0, [pc, #108]	; (800216c <mtx1_execute.lto_priv.125+0xdc>)
 80020fe:	4b11      	ldr	r3, [pc, #68]	; (8002144 <mtx1_execute.lto_priv.125+0xb4>)
 8002100:	f7fe ff4e 	bl	8000fa0 <chThdCreateStatic>
 8002104:	6128      	str	r0, [r5, #16]
  chMtxUnlock(&m1);
 8002106:	480d      	ldr	r0, [pc, #52]	; (800213c <mtx1_execute.lto_priv.125+0xac>)
 8002108:	f7ff f902 	bl	8001310 <chMtxUnlock>
  test_wait_threads();
 800210c:	f001 f890 	bl	8003230 <test_wait_threads>
 8002110:	69b3      	ldr	r3, [r6, #24]
  test_assert(1, prio == chThdGetPriorityX(), "wrong priority level");
 8002112:	2001      	movs	r0, #1
 8002114:	6899      	ldr	r1, [r3, #8]
 8002116:	1a61      	subs	r1, r4, r1
 8002118:	fab1 f181 	clz	r1, r1
 800211c:	0949      	lsrs	r1, r1, #5
 800211e:	f001 f907 	bl	8003330 <_test_assert>
 8002122:	b108      	cbz	r0, 8002128 <mtx1_execute.lto_priv.125+0x98>
  test_assert_sequence(2, "ABCDE");
}
 8002124:	b002      	add	sp, #8
 8002126:	bd70      	pop	{r4, r5, r6, pc}
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
  chMtxUnlock(&m1);
  test_wait_threads();
  test_assert(1, prio == chThdGetPriorityX(), "wrong priority level");
  test_assert_sequence(2, "ABCDE");
 8002128:	4911      	ldr	r1, [pc, #68]	; (8002170 <mtx1_execute.lto_priv.125+0xe0>)
 800212a:	2002      	movs	r0, #2
}
 800212c:	b002      	add	sp, #8
 800212e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
  chMtxUnlock(&m1);
  test_wait_threads();
  test_assert(1, prio == chThdGetPriorityX(), "wrong priority level");
  test_assert_sequence(2, "ABCDE");
 8002132:	f001 b8d5 	b.w	80032e0 <_test_assert_sequence>
 8002136:	bf00      	nop
 8002138:	20001040 	.word	0x20001040
 800213c:	20000800 	.word	0x20000800
 8002140:	080078b0 	.word	0x080078b0
 8002144:	08002251 	.word	0x08002251
 8002148:	20001210 	.word	0x20001210
 800214c:	20000968 	.word	0x20000968
 8002150:	080087f0 	.word	0x080087f0
 8002154:	20001358 	.word	0x20001358
 8002158:	080078a8 	.word	0x080078a8
 800215c:	200014a0 	.word	0x200014a0
 8002160:	080078a0 	.word	0x080078a0
 8002164:	200015e8 	.word	0x200015e8
 8002168:	080078a4 	.word	0x080078a4
 800216c:	20001730 	.word	0x20001730
 8002170:	080078ac 	.word	0x080078ac
	...

08002180 <thd1_execute.lto_priv.113>:
static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
}

static void thd1_execute(void) {
 8002180:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8002182:	4f27      	ldr	r7, [pc, #156]	; (8002220 <thd1_execute.lto_priv.113+0xa0>)

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8002184:	4e27      	ldr	r6, [pc, #156]	; (8002224 <thd1_execute.lto_priv.113+0xa4>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	4d27      	ldr	r5, [pc, #156]	; (8002228 <thd1_execute.lto_priv.113+0xa8>)
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	4927      	ldr	r1, [pc, #156]	; (800222c <thd1_execute.lto_priv.113+0xac>)
static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
}

static void thd1_execute(void) {
 800218e:	b083      	sub	sp, #12

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8002190:	462b      	mov	r3, r5
 8002192:	9100      	str	r1, [sp, #0]
 8002194:	3a05      	subs	r2, #5
 8002196:	4630      	mov	r0, r6
 8002198:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800219c:	f7fe ff00 	bl	8000fa0 <chThdCreateStatic>
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	4c23      	ldr	r4, [pc, #140]	; (8002230 <thd1_execute.lto_priv.113+0xb0>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 80021a4:	689a      	ldr	r2, [r3, #8]
 80021a6:	4923      	ldr	r1, [pc, #140]	; (8002234 <thd1_execute.lto_priv.113+0xb4>)
  test_emit_token(*(char *)p);
}

static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 80021a8:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 80021aa:	462b      	mov	r3, r5
 80021ac:	9100      	str	r1, [sp, #0]
 80021ae:	3a04      	subs	r2, #4
 80021b0:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 80021b4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80021b8:	f7fe fef2 	bl	8000fa0 <chThdCreateStatic>
 80021bc:	69bb      	ldr	r3, [r7, #24]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 80021be:	491e      	ldr	r1, [pc, #120]	; (8002238 <thd1_execute.lto_priv.113+0xb8>)
 80021c0:	689a      	ldr	r2, [r3, #8]
}

static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 80021c2:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 80021c4:	462b      	mov	r3, r5
 80021c6:	9100      	str	r1, [sp, #0]
 80021c8:	3a03      	subs	r2, #3
 80021ca:	f506 7024 	add.w	r0, r6, #656	; 0x290
 80021ce:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80021d2:	f7fe fee5 	bl	8000fa0 <chThdCreateStatic>
 80021d6:	69bb      	ldr	r3, [r7, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80021d8:	4918      	ldr	r1, [pc, #96]	; (800223c <thd1_execute.lto_priv.113+0xbc>)
 80021da:	689a      	ldr	r2, [r3, #8]

static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 80021dc:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80021de:	462b      	mov	r3, r5
 80021e0:	9100      	str	r1, [sp, #0]
 80021e2:	3a02      	subs	r2, #2
 80021e4:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 80021e8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80021ec:	f7fe fed8 	bl	8000fa0 <chThdCreateStatic>
 80021f0:	69bb      	ldr	r3, [r7, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80021f2:	4913      	ldr	r1, [pc, #76]	; (8002240 <thd1_execute.lto_priv.113+0xc0>)
 80021f4:	689a      	ldr	r2, [r3, #8]
static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80021f6:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80021f8:	3a01      	subs	r2, #1
 80021fa:	462b      	mov	r3, r5
 80021fc:	9100      	str	r1, [sp, #0]
 80021fe:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 8002202:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002206:	f7fe fecb 	bl	8000fa0 <chThdCreateStatic>
 800220a:	6120      	str	r0, [r4, #16]
  test_wait_threads();
 800220c:	f001 f810 	bl	8003230 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8002210:	490c      	ldr	r1, [pc, #48]	; (8002244 <thd1_execute.lto_priv.113+0xc4>)
 8002212:	2001      	movs	r0, #1
}
 8002214:	b003      	add	sp, #12
 8002216:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 800221a:	f001 b861 	b.w	80032e0 <_test_assert_sequence>
 800221e:	bf00      	nop
 8002220:	20001040 	.word	0x20001040
 8002224:	20001210 	.word	0x20001210
 8002228:	08002271 	.word	0x08002271
 800222c:	080078b0 	.word	0x080078b0
 8002230:	20000968 	.word	0x20000968
 8002234:	080087f0 	.word	0x080087f0
 8002238:	080078a8 	.word	0x080078a8
 800223c:	080078a0 	.word	0x080078a0
 8002240:	080078a4 	.word	0x080078a4
 8002244:	080078ac 	.word	0x080078ac
	...

08002250 <thread1.lto_priv.108>:
static void mtx1_setup(void) {

  chMtxObjectInit(&m1);
}

static THD_FUNCTION(thread1, p) {
 8002250:	b538      	push	{r3, r4, r5, lr}
 8002252:	4605      	mov	r5, r0

  chMtxLock(&m1);
 8002254:	4c05      	ldr	r4, [pc, #20]	; (800226c <thread1.lto_priv.108+0x1c>)
 8002256:	4620      	mov	r0, r4
 8002258:	f7ff f8fa 	bl	8001450 <chMtxLock>
  test_emit_token(*(char *)p);
 800225c:	7828      	ldrb	r0, [r5, #0]
 800225e:	f001 f87f 	bl	8003360 <test_emit_token>
  chMtxUnlock(&m1);
 8002262:	4620      	mov	r0, r4
}
 8002264:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

static THD_FUNCTION(thread1, p) {

  chMtxLock(&m1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
 8002268:	f7ff b852 	b.w	8001310 <chMtxUnlock>
 800226c:	20000800 	.word	0x20000800

08002270 <thread>:
 * priority order regardless of the initial order.
 */

static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
 8002270:	7800      	ldrb	r0, [r0, #0]
 8002272:	f001 b875 	b.w	8003360 <test_emit_token>
 8002276:	bf00      	nop
	...

08002280 <thread1.lto_priv.107>:
static void sem1_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static THD_FUNCTION(thread1, p) {
 8002280:	b510      	push	{r4, lr}
 8002282:	4604      	mov	r4, r0

  chSemWait(&sem1);
 8002284:	4803      	ldr	r0, [pc, #12]	; (8002294 <thread1.lto_priv.107+0x14>)
 8002286:	f7fe ff03 	bl	8001090 <chSemWait>
  test_emit_token(*(char *)p);
 800228a:	7820      	ldrb	r0, [r4, #0]
}
 800228c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static THD_FUNCTION(thread1, p) {

  chSemWait(&sem1);
  test_emit_token(*(char *)p);
 8002290:	f001 b866 	b.w	8003360 <test_emit_token>
 8002294:	200008a0 	.word	0x200008a0
	...

080022a0 <thread4>:
 * <h2>Description</h2>
 * This test case tests the binary semaphores functionality. The test both
 * checks the binary semaphore status and the expected status of the underlying
 * counting semaphore.
 */
static THD_FUNCTION(thread4, p) {
 80022a0:	b508      	push	{r3, lr}
 80022a2:	2220      	movs	r2, #32
 80022a4:	f382 8811 	msr	BASEPRI, r2
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
 80022a8:	6883      	ldr	r3, [r0, #8]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	dd05      	ble.n	80022ba <thread4+0x1a>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 80022ae:	f7fe fdff 	bl	8000eb0 <chSchRescheduleS>
 80022b2:	2300      	movs	r3, #0
 80022b4:	f383 8811 	msr	BASEPRI, r3
 80022b8:	bd08      	pop	{r3, pc}
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
    chSemSignalI(&bsp->bs_sem);
 80022ba:	f7ff fa51 	bl	8001760 <chSemSignalI>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 80022be:	f7fe fdf7 	bl	8000eb0 <chSchRescheduleS>
 80022c2:	2300      	movs	r3, #0
 80022c4:	f383 8811 	msr	BASEPRI, r3
 80022c8:	bd08      	pop	{r3, pc}
 80022ca:	bf00      	nop
 80022cc:	0000      	movs	r0, r0
	...

080022d0 <thread2>:
static void sem2_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static THD_FUNCTION(thread2, p) {
 80022d0:	b508      	push	{r3, lr}

  (void)p;
  chThdSleepMilliseconds(50);
 80022d2:	2064      	movs	r0, #100	; 0x64
 80022d4:	f7ff fc84 	bl	8001be0 <chThdSleep>
 80022d8:	2320      	movs	r3, #32
 80022da:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chSemSignalI(&sem1); /* For coverage reasons */
 80022de:	4804      	ldr	r0, [pc, #16]	; (80022f0 <thread2+0x20>)
 80022e0:	f7ff fa3e 	bl	8001760 <chSemSignalI>
  chSchRescheduleS();
 80022e4:	f7fe fde4 	bl	8000eb0 <chSchRescheduleS>
 80022e8:	2300      	movs	r3, #0
 80022ea:	f383 8811 	msr	BASEPRI, r3
 80022ee:	bd08      	pop	{r3, pc}
 80022f0:	200008a0 	.word	0x200008a0
	...

08002300 <sem4_execute.lto_priv.123>:
static THD_FUNCTION(thread4, p) {

  chBSemSignal((binary_semaphore_t *)p);
}

static void sem4_execute(void) {
 8002300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002302:	b087      	sub	sp, #28
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002304:	ad03      	add	r5, sp, #12
 8002306:	2400      	movs	r4, #0
 8002308:	9503      	str	r5, [sp, #12]
  tqp->p_prev = (thread_t *)tqp;
 800230a:	9504      	str	r5, [sp, #16]
 800230c:	9405      	str	r4, [sp, #20]
 800230e:	2620      	movs	r6, #32
 8002310:	f386 8811 	msr	BASEPRI, r6
 * @api
 */
void chSemReset(semaphore_t *sp, cnt_t n) {

  chSysLock();
  chSemResetI(sp, n);
 8002314:	4628      	mov	r0, r5
 8002316:	4621      	mov	r1, r4
 8002318:	f7ff fa3a 	bl	8001790 <chSemResetI>
  chSchRescheduleS();
 800231c:	f7fe fdc8 	bl	8000eb0 <chSchRescheduleS>
 8002320:	f384 8811 	msr	BASEPRI, r4
 8002324:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chBSemGetStateI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  return (bsp->bs_sem.s_cnt > (cnt_t)0) ? false : true;
 8002328:	9905      	ldr	r1, [sp, #20]
  binary_semaphore_t bsem;
  
  /* Creates a taken binary semaphore.*/
  chBSemObjectInit(&bsem, TRUE);
  chBSemReset(&bsem, TRUE);
  test_assert_lock(1, chBSemGetStateI(&bsem) == TRUE, "not taken");
 800232a:	2001      	movs	r0, #1
 800232c:	42a1      	cmp	r1, r4
 800232e:	bfcc      	ite	gt
 8002330:	2100      	movgt	r1, #0
 8002332:	2101      	movle	r1, #1
 8002334:	f000 fffc 	bl	8003330 <_test_assert>
 8002338:	4607      	mov	r7, r0
 800233a:	b118      	cbz	r0, 8002344 <sem4_execute.lto_priv.123+0x44>
 800233c:	f384 8811 	msr	BASEPRI, r4

  /* Checking signaling overflow, the counter must not go beyond 1.*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "taken");
  test_assert_lock(5, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
}
 8002340:	b007      	add	sp, #28
 8002342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002344:	f380 8811 	msr	BASEPRI, r0
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8002348:	4b3f      	ldr	r3, [pc, #252]	; (8002448 <sem4_execute.lto_priv.123+0x148>)
  chBSemObjectInit(&bsem, TRUE);
  chBSemReset(&bsem, TRUE);
  test_assert_lock(1, chBSemGetStateI(&bsem) == TRUE, "not taken");

  /* Starts a signaler thread at a lower priority.*/
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 800234a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	483e      	ldr	r0, [pc, #248]	; (800244c <sem4_execute.lto_priv.123+0x14c>)
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	4b3e      	ldr	r3, [pc, #248]	; (8002450 <sem4_execute.lto_priv.123+0x150>)
 8002356:	3a01      	subs	r2, #1
 8002358:	9500      	str	r5, [sp, #0]
 800235a:	f7fe fe21 	bl	8000fa0 <chThdCreateStatic>
 800235e:	4b3d      	ldr	r3, [pc, #244]	; (8002454 <sem4_execute.lto_priv.123+0x154>)
 8002360:	6018      	str	r0, [r3, #0]
 *
 * @api
 */
static inline msg_t chBSemWait(binary_semaphore_t *bsp) {

  return chSemWait(&bsp->bs_sem);
 8002362:	4628      	mov	r0, r5
 8002364:	f7fe fe94 	bl	8001090 <chSemWait>
 8002368:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chBSemGetStateI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  return (bsp->bs_sem.s_cnt > (cnt_t)0) ? false : true;
 800236c:	9905      	ldr	r1, [sp, #20]
                                 
  /* Waits to be signaled.*/
  chBSemWait(&bsem);
  
  /* The binary semaphore is expected to be taken.*/
  test_assert_lock(2, chBSemGetStateI(&bsem) == TRUE, "not taken");
 800236e:	2002      	movs	r0, #2
 8002370:	2900      	cmp	r1, #0
 8002372:	bfcc      	ite	gt
 8002374:	2100      	movgt	r1, #0
 8002376:	2101      	movle	r1, #1
 8002378:	f000 ffda 	bl	8003330 <_test_assert>
 800237c:	b118      	cbz	r0, 8002386 <sem4_execute.lto_priv.123+0x86>
 800237e:	f387 8811 	msr	BASEPRI, r7

  /* Checking signaling overflow, the counter must not go beyond 1.*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "taken");
  test_assert_lock(5, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
}
 8002382:	b007      	add	sp, #28
 8002384:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002386:	f380 8811 	msr	BASEPRI, r0
 800238a:	f386 8811 	msr	BASEPRI, r6
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
 800238e:	9b05      	ldr	r3, [sp, #20]
 8002390:	2b00      	cmp	r3, #0
 8002392:	dd23      	ble.n	80023dc <sem4_execute.lto_priv.123+0xdc>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 8002394:	f7fe fd8c 	bl	8000eb0 <chSchRescheduleS>
 8002398:	2400      	movs	r4, #0
 800239a:	f384 8811 	msr	BASEPRI, r4
 800239e:	2720      	movs	r7, #32
 80023a0:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(2, chBSemGetStateI(&bsem) == TRUE, "not taken");

  /* Releasing it, check both the binary semaphore state and the underlying
     counter semaphore state..*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "still taken");
 80023a4:	9905      	ldr	r1, [sp, #20]
 80023a6:	2003      	movs	r0, #3
 80023a8:	42a1      	cmp	r1, r4
 80023aa:	bfd4      	ite	le
 80023ac:	2100      	movle	r1, #0
 80023ae:	2101      	movgt	r1, #1
 80023b0:	f000 ffbe 	bl	8003330 <_test_assert>
 80023b4:	4606      	mov	r6, r0
 80023b6:	2800      	cmp	r0, #0
 80023b8:	d1c0      	bne.n	800233c <sem4_execute.lto_priv.123+0x3c>
 80023ba:	f380 8811 	msr	BASEPRI, r0
 80023be:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(4, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
 80023c2:	9905      	ldr	r1, [sp, #20]
 80023c4:	2004      	movs	r0, #4
 80023c6:	f1a1 0101 	sub.w	r1, r1, #1
 80023ca:	fab1 f181 	clz	r1, r1
 80023ce:	0949      	lsrs	r1, r1, #5
 80023d0:	f000 ffae 	bl	8003330 <_test_assert>
 80023d4:	b130      	cbz	r0, 80023e4 <sem4_execute.lto_priv.123+0xe4>
 80023d6:	f386 8811 	msr	BASEPRI, r6
 80023da:	e7b1      	b.n	8002340 <sem4_execute.lto_priv.123+0x40>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
    chSemSignalI(&bsp->bs_sem);
 80023dc:	4628      	mov	r0, r5
 80023de:	f7ff f9bf 	bl	8001760 <chSemSignalI>
 80023e2:	e7d7      	b.n	8002394 <sem4_execute.lto_priv.123+0x94>
 80023e4:	f380 8811 	msr	BASEPRI, r0
 80023e8:	f387 8811 	msr	BASEPRI, r7
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
 80023ec:	9b05      	ldr	r3, [sp, #20]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	dd23      	ble.n	800243a <sem4_execute.lto_priv.123+0x13a>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 80023f2:	f7fe fd5d 	bl	8000eb0 <chSchRescheduleS>
 80023f6:	2400      	movs	r4, #0
 80023f8:	f384 8811 	msr	BASEPRI, r4
 80023fc:	2620      	movs	r6, #32
 80023fe:	f386 8811 	msr	BASEPRI, r6

  /* Checking signaling overflow, the counter must not go beyond 1.*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "taken");
 8002402:	9905      	ldr	r1, [sp, #20]
 8002404:	2003      	movs	r0, #3
 8002406:	42a1      	cmp	r1, r4
 8002408:	bfd4      	ite	le
 800240a:	2100      	movle	r1, #0
 800240c:	2101      	movgt	r1, #1
 800240e:	f000 ff8f 	bl	8003330 <_test_assert>
 8002412:	4605      	mov	r5, r0
 8002414:	2800      	cmp	r0, #0
 8002416:	d191      	bne.n	800233c <sem4_execute.lto_priv.123+0x3c>
 8002418:	f380 8811 	msr	BASEPRI, r0
 800241c:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(5, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
 8002420:	9905      	ldr	r1, [sp, #20]
 8002422:	2005      	movs	r0, #5
 8002424:	f1a1 0101 	sub.w	r1, r1, #1
 8002428:	fab1 f181 	clz	r1, r1
 800242c:	0949      	lsrs	r1, r1, #5
 800242e:	f000 ff7f 	bl	8003330 <_test_assert>
 8002432:	b130      	cbz	r0, 8002442 <sem4_execute.lto_priv.123+0x142>
 8002434:	f385 8811 	msr	BASEPRI, r5
 8002438:	e782      	b.n	8002340 <sem4_execute.lto_priv.123+0x40>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
    chSemSignalI(&bsp->bs_sem);
 800243a:	4628      	mov	r0, r5
 800243c:	f7ff f990 	bl	8001760 <chSemSignalI>
 8002440:	e7d7      	b.n	80023f2 <sem4_execute.lto_priv.123+0xf2>
 8002442:	f380 8811 	msr	BASEPRI, r0
 8002446:	e77b      	b.n	8002340 <sem4_execute.lto_priv.123+0x40>
 8002448:	20001040 	.word	0x20001040
 800244c:	20001210 	.word	0x20001210
 8002450:	080022a1 	.word	0x080022a1
 8002454:	20000968 	.word	0x20000968
	...

08002460 <sem3_execute.lto_priv.122>:
  (void)p;
  chSemWait(&sem1);
  chSemSignal(&sem1);
}

static void sem3_execute(void) {
 8002460:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8002462:	4a1e      	ldr	r2, [pc, #120]	; (80024dc <sem3_execute.lto_priv.122+0x7c>)
 8002464:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8002466:	6992      	ldr	r2, [r2, #24]

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8002468:	2300      	movs	r3, #0
 800246a:	6892      	ldr	r2, [r2, #8]
 800246c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002470:	3201      	adds	r2, #1
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	481a      	ldr	r0, [pc, #104]	; (80024e0 <sem3_execute.lto_priv.122+0x80>)
 8002476:	4b1b      	ldr	r3, [pc, #108]	; (80024e4 <sem3_execute.lto_priv.122+0x84>)
 8002478:	f7fe fd92 	bl	8000fa0 <chThdCreateStatic>
 *
 * @notapi
 */
static inline bool queue_isempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next == (const thread_t *)tqp);
 800247c:	4c1a      	ldr	r4, [pc, #104]	; (80024e8 <sem3_execute.lto_priv.122+0x88>)
 800247e:	4b1b      	ldr	r3, [pc, #108]	; (80024ec <sem3_execute.lto_priv.122+0x8c>)
 8002480:	6018      	str	r0, [r3, #0]
  chSemSignalWait(&sem1, &sem1);
 8002482:	f004 ff55 	bl	8007330 <chSemSignalWait.constprop.72>
 8002486:	6821      	ldr	r1, [r4, #0]
  test_assert(1, queue_isempty(&sem1.s_queue), "queue not empty");
 8002488:	2001      	movs	r0, #1
 800248a:	1b09      	subs	r1, r1, r4
 800248c:	fab1 f181 	clz	r1, r1
 8002490:	0949      	lsrs	r1, r1, #5
 8002492:	f000 ff4d 	bl	8003330 <_test_assert>
 8002496:	b108      	cbz	r0, 800249c <sem3_execute.lto_priv.122+0x3c>
  test_assert(2, sem1.s_cnt == 0, "counter not zero");

  chSemSignalWait(&sem1, &sem1);
  test_assert(3, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(4, sem1.s_cnt == 0, "counter not zero");
}
 8002498:	b002      	add	sp, #8
 800249a:	bd10      	pop	{r4, pc}
static void sem3_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
  chSemSignalWait(&sem1, &sem1);
  test_assert(1, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(2, sem1.s_cnt == 0, "counter not zero");
 800249c:	68a1      	ldr	r1, [r4, #8]
 800249e:	2002      	movs	r0, #2
 80024a0:	fab1 f181 	clz	r1, r1
 80024a4:	0949      	lsrs	r1, r1, #5
 80024a6:	f000 ff43 	bl	8003330 <_test_assert>
 80024aa:	2800      	cmp	r0, #0
 80024ac:	d1f4      	bne.n	8002498 <sem3_execute.lto_priv.122+0x38>

  chSemSignalWait(&sem1, &sem1);
 80024ae:	f004 ff3f 	bl	8007330 <chSemSignalWait.constprop.72>
 80024b2:	6821      	ldr	r1, [r4, #0]
  test_assert(3, queue_isempty(&sem1.s_queue), "queue not empty");
 80024b4:	2003      	movs	r0, #3
 80024b6:	1b09      	subs	r1, r1, r4
 80024b8:	fab1 f181 	clz	r1, r1
 80024bc:	0949      	lsrs	r1, r1, #5
 80024be:	f000 ff37 	bl	8003330 <_test_assert>
 80024c2:	2800      	cmp	r0, #0
 80024c4:	d1e8      	bne.n	8002498 <sem3_execute.lto_priv.122+0x38>
  test_assert(4, sem1.s_cnt == 0, "counter not zero");
 80024c6:	68a1      	ldr	r1, [r4, #8]
 80024c8:	2004      	movs	r0, #4
 80024ca:	fab1 f181 	clz	r1, r1
 80024ce:	0949      	lsrs	r1, r1, #5
}
 80024d0:	b002      	add	sp, #8
 80024d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_assert(1, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(2, sem1.s_cnt == 0, "counter not zero");

  chSemSignalWait(&sem1, &sem1);
  test_assert(3, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(4, sem1.s_cnt == 0, "counter not zero");
 80024d6:	f000 bf2b 	b.w	8003330 <_test_assert>
 80024da:	bf00      	nop
 80024dc:	20001040 	.word	0x20001040
 80024e0:	20001210 	.word	0x20001210
 80024e4:	080024f1 	.word	0x080024f1
 80024e8:	200008a0 	.word	0x200008a0
 80024ec:	20000968 	.word	0x20000968

080024f0 <thread3>:
static void sem3_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static THD_FUNCTION(thread3, p) {
 80024f0:	b510      	push	{r4, lr}

  (void)p;
  chSemWait(&sem1);
 80024f2:	4c04      	ldr	r4, [pc, #16]	; (8002504 <thread3+0x14>)
 80024f4:	4620      	mov	r0, r4
 80024f6:	f7fe fdcb 	bl	8001090 <chSemWait>
  chSemSignal(&sem1);
 80024fa:	4620      	mov	r0, r4
}
 80024fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

static THD_FUNCTION(thread3, p) {

  (void)p;
  chSemWait(&sem1);
  chSemSignal(&sem1);
 8002500:	f7fe bd2e 	b.w	8000f60 <chSemSignal>
 8002504:	200008a0 	.word	0x200008a0
	...

08002510 <sem2_execute.lto_priv.120>:
  chSemSignalI(&sem1); /* For coverage reasons */
  chSchRescheduleS();
  chSysUnlock();
}

static void sem2_execute(void) {
 8002510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002512:	2520      	movs	r5, #32
 8002514:	b083      	sub	sp, #12
 8002516:	f385 8811 	msr	BASEPRI, r5
 */
msg_t chSemWaitTimeout(semaphore_t *sp, systime_t time) {
  msg_t msg;

  chSysLock();
  msg = chSemWaitTimeoutS(sp, time);
 800251a:	4c55      	ldr	r4, [pc, #340]	; (8002670 <sem2_execute.lto_priv.120+0x160>)
 800251c:	2100      	movs	r1, #0
 800251e:	4620      	mov	r0, r4
 8002520:	f7ff fa36 	bl	8001990 <chSemWaitTimeoutS>
 8002524:	2300      	movs	r3, #0
 8002526:	4601      	mov	r1, r0
 8002528:	f383 8811 	msr	BASEPRI, r3

  /*
   * Testing special case TIME_IMMEDIATE.
   */
  msg = chSemWaitTimeout(&sem1, TIME_IMMEDIATE);
  test_assert(1, msg == MSG_TIMEOUT, "wrong wake-up message");
 800252c:	f1a1 31ff 	sub.w	r1, r1, #4294967295
 8002530:	fab1 f181 	clz	r1, r1
 8002534:	2001      	movs	r0, #1
 8002536:	0949      	lsrs	r1, r1, #5
 8002538:	f000 fefa 	bl	8003330 <_test_assert>
 800253c:	b108      	cbz	r0, 8002542 <sem2_execute.lto_priv.120+0x32>
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
  test_assert_time_window(11, target_time, target_time + ALLOWED_DELAY);
}
 800253e:	b003      	add	sp, #12
 8002540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002542:	6821      	ldr	r1, [r4, #0]
  /*
   * Testing special case TIME_IMMEDIATE.
   */
  msg = chSemWaitTimeout(&sem1, TIME_IMMEDIATE);
  test_assert(1, msg == MSG_TIMEOUT, "wrong wake-up message");
  test_assert(2, queue_isempty(&sem1.s_queue), "queue not empty");
 8002544:	2002      	movs	r0, #2
 8002546:	1b09      	subs	r1, r1, r4
 8002548:	fab1 f181 	clz	r1, r1
 800254c:	0949      	lsrs	r1, r1, #5
 800254e:	f000 feef 	bl	8003330 <_test_assert>
 8002552:	2800      	cmp	r0, #0
 8002554:	d1f3      	bne.n	800253e <sem2_execute.lto_priv.120+0x2e>
  test_assert(3, sem1.s_cnt == 0, "counter not zero");
 8002556:	68a1      	ldr	r1, [r4, #8]
 8002558:	2003      	movs	r0, #3
 800255a:	fab1 f181 	clz	r1, r1
 800255e:	0949      	lsrs	r1, r1, #5
 8002560:	f000 fee6 	bl	8003330 <_test_assert>
 8002564:	4606      	mov	r6, r0
 8002566:	2800      	cmp	r0, #0
 8002568:	d1e9      	bne.n	800253e <sem2_execute.lto_priv.120+0x2e>
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 800256a:	4b42      	ldr	r3, [pc, #264]	; (8002674 <sem2_execute.lto_priv.120+0x164>)

  /*
   * Testing not timeout condition.
   */
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800256c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	4841      	ldr	r0, [pc, #260]	; (8002678 <sem2_execute.lto_priv.120+0x168>)
 8002574:	689a      	ldr	r2, [r3, #8]
 8002576:	4b41      	ldr	r3, [pc, #260]	; (800267c <sem2_execute.lto_priv.120+0x16c>)
 8002578:	3a01      	subs	r2, #1
 800257a:	9600      	str	r6, [sp, #0]
 800257c:	f7fe fd10 	bl	8000fa0 <chThdCreateStatic>
 8002580:	4b3f      	ldr	r3, [pc, #252]	; (8002680 <sem2_execute.lto_priv.120+0x170>)
 8002582:	6018      	str	r0, [r3, #0]
 8002584:	f385 8811 	msr	BASEPRI, r5
 8002588:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800258c:	4620      	mov	r0, r4
 800258e:	f7ff f9ff 	bl	8001990 <chSemWaitTimeoutS>
 8002592:	4607      	mov	r7, r0
 8002594:	f386 8811 	msr	BASEPRI, r6
                                 thread2, 0);
  msg = chSemWaitTimeout(&sem1, MS2ST(500));
  test_wait_threads();
 8002598:	f000 fe4a 	bl	8003230 <test_wait_threads>
  test_assert(4, msg == MSG_OK, "wrong wake-up message");
 800259c:	fab7 f187 	clz	r1, r7
 80025a0:	2004      	movs	r0, #4
 80025a2:	0949      	lsrs	r1, r1, #5
 80025a4:	f000 fec4 	bl	8003330 <_test_assert>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d1c8      	bne.n	800253e <sem2_execute.lto_priv.120+0x2e>
 80025ac:	6821      	ldr	r1, [r4, #0]
  test_assert(5, queue_isempty(&sem1.s_queue), "queue not empty");
 80025ae:	2005      	movs	r0, #5
 80025b0:	1b09      	subs	r1, r1, r4
 80025b2:	fab1 f181 	clz	r1, r1
 80025b6:	0949      	lsrs	r1, r1, #5
 80025b8:	f000 feba 	bl	8003330 <_test_assert>
 80025bc:	2800      	cmp	r0, #0
 80025be:	d1be      	bne.n	800253e <sem2_execute.lto_priv.120+0x2e>
  test_assert(6, sem1.s_cnt == 0, "counter not zero");
 80025c0:	68a1      	ldr	r1, [r4, #8]
 80025c2:	2006      	movs	r0, #6
 80025c4:	fab1 f181 	clz	r1, r1
 80025c8:	0949      	lsrs	r1, r1, #5
 80025ca:	f000 feb1 	bl	8003330 <_test_assert>
 80025ce:	4606      	mov	r6, r0
 80025d0:	2800      	cmp	r0, #0
 80025d2:	d1b4      	bne.n	800253e <sem2_execute.lto_priv.120+0x2e>

  /*
   * Testing timeout condition.
   */
  test_wait_tick();
 80025d4:	f000 fe1c 	bl	8003210 <test_wait_tick>
 80025d8:	f385 8811 	msr	BASEPRI, r5
 80025dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025e0:	6a5f      	ldr	r7, [r3, #36]	; 0x24
 80025e2:	f386 8811 	msr	BASEPRI, r6
 80025e6:	2641      	movs	r6, #65	; 0x41
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
  for (i = 0; i < 5; i++) {
    test_emit_token('A' + i);
 80025e8:	4630      	mov	r0, r6
 80025ea:	f000 feb9 	bl	8003360 <test_emit_token>
 80025ee:	f385 8811 	msr	BASEPRI, r5
 80025f2:	2164      	movs	r1, #100	; 0x64
 80025f4:	481e      	ldr	r0, [pc, #120]	; (8002670 <sem2_execute.lto_priv.120+0x160>)
 80025f6:	f7ff f9cb 	bl	8001990 <chSemWaitTimeoutS>
 80025fa:	2300      	movs	r3, #0
 80025fc:	4601      	mov	r1, r0
 80025fe:	f383 8811 	msr	BASEPRI, r3
    msg = chSemWaitTimeout(&sem1, MS2ST(50));
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
 8002602:	f1a1 31ff 	sub.w	r1, r1, #4294967295
 8002606:	fab1 f181 	clz	r1, r1
 800260a:	2007      	movs	r0, #7
 800260c:	0949      	lsrs	r1, r1, #5
 800260e:	f000 fe8f 	bl	8003330 <_test_assert>
 8002612:	2800      	cmp	r0, #0
 8002614:	d193      	bne.n	800253e <sem2_execute.lto_priv.120+0x2e>
 8002616:	6821      	ldr	r1, [r4, #0]
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
 8002618:	2008      	movs	r0, #8
 800261a:	1b09      	subs	r1, r1, r4
 800261c:	fab1 f181 	clz	r1, r1
 8002620:	0949      	lsrs	r1, r1, #5
 8002622:	f000 fe85 	bl	8003330 <_test_assert>
 8002626:	2800      	cmp	r0, #0
 8002628:	d189      	bne.n	800253e <sem2_execute.lto_priv.120+0x2e>
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
 800262a:	68a1      	ldr	r1, [r4, #8]
 800262c:	2009      	movs	r0, #9
 800262e:	fab1 f181 	clz	r1, r1
 8002632:	0949      	lsrs	r1, r1, #5
 8002634:	f000 fe7c 	bl	8003330 <_test_assert>
 8002638:	3601      	adds	r6, #1
 800263a:	b2f6      	uxtb	r6, r6
 800263c:	2800      	cmp	r0, #0
 800263e:	f47f af7e 	bne.w	800253e <sem2_execute.lto_priv.120+0x2e>
  /*
   * Testing timeout condition.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
  for (i = 0; i < 5; i++) {
 8002642:	2e46      	cmp	r6, #70	; 0x46
 8002644:	d1d0      	bne.n	80025e8 <sem2_execute.lto_priv.120+0xd8>
    msg = chSemWaitTimeout(&sem1, MS2ST(50));
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
 8002646:	200a      	movs	r0, #10
 8002648:	490e      	ldr	r1, [pc, #56]	; (8002684 <sem2_execute.lto_priv.120+0x174>)
 800264a:	f000 fe49 	bl	80032e0 <_test_assert_sequence>
 800264e:	2800      	cmp	r0, #0
 8002650:	f47f af75 	bne.w	800253e <sem2_execute.lto_priv.120+0x2e>
 8002654:	b2bf      	uxth	r7, r7

  /*
   * Testing timeout condition.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
 8002656:	f507 71fa 	add.w	r1, r7, #500	; 0x1f4
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
  test_assert_time_window(11, target_time, target_time + ALLOWED_DELAY);
 800265a:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 800265e:	b289      	uxth	r1, r1
 8002660:	b292      	uxth	r2, r2
 8002662:	200b      	movs	r0, #11
}
 8002664:	b003      	add	sp, #12
 8002666:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
  test_assert_time_window(11, target_time, target_time + ALLOWED_DELAY);
 800266a:	f000 be11 	b.w	8003290 <_test_assert_time_window>
 800266e:	bf00      	nop
 8002670:	200008a0 	.word	0x200008a0
 8002674:	20001040 	.word	0x20001040
 8002678:	20001210 	.word	0x20001210
 800267c:	080022d1 	.word	0x080022d1
 8002680:	20000968 	.word	0x20000968
 8002684:	080078ac 	.word	0x080078ac
	...

08002690 <sem1_execute.lto_priv.118>:

  chSemWait(&sem1);
  test_emit_token(*(char *)p);
}

static void sem1_execute(void) {
 8002690:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8002692:	4d4b      	ldr	r5, [pc, #300]	; (80027c0 <sem1_execute.lto_priv.118+0x130>)

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8002694:	4f4b      	ldr	r7, [pc, #300]	; (80027c4 <sem1_execute.lto_priv.118+0x134>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8002696:	69ab      	ldr	r3, [r5, #24]

  chSemWait(&sem1);
  test_emit_token(*(char *)p);
}

static void sem1_execute(void) {
 8002698:	b083      	sub	sp, #12

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80026a0:	3205      	adds	r2, #5
 80026a2:	4b49      	ldr	r3, [pc, #292]	; (80027c8 <sem1_execute.lto_priv.118+0x138>)
 80026a4:	4849      	ldr	r0, [pc, #292]	; (80027cc <sem1_execute.lto_priv.118+0x13c>)
 80026a6:	9700      	str	r7, [sp, #0]
 80026a8:	f7fe fc7a 	bl	8000fa0 <chThdCreateStatic>
 80026ac:	69ab      	ldr	r3, [r5, #24]
 80026ae:	4c48      	ldr	r4, [pc, #288]	; (80027d0 <sem1_execute.lto_priv.118+0x140>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 80026b0:	689a      	ldr	r2, [r3, #8]
 80026b2:	4b48      	ldr	r3, [pc, #288]	; (80027d4 <sem1_execute.lto_priv.118+0x144>)
  test_emit_token(*(char *)p);
}

static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 80026b4:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 80026b6:	3201      	adds	r2, #1
 80026b8:	9300      	str	r3, [sp, #0]
 80026ba:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80026be:	4b42      	ldr	r3, [pc, #264]	; (80027c8 <sem1_execute.lto_priv.118+0x138>)
 80026c0:	4845      	ldr	r0, [pc, #276]	; (80027d8 <sem1_execute.lto_priv.118+0x148>)
 80026c2:	f7fe fc6d 	bl	8000fa0 <chThdCreateStatic>
 80026c6:	69aa      	ldr	r2, [r5, #24]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 80026c8:	4b44      	ldr	r3, [pc, #272]	; (80027dc <sem1_execute.lto_priv.118+0x14c>)
 80026ca:	6892      	ldr	r2, [r2, #8]
 80026cc:	f44f 71a4 	mov.w	r1, #328	; 0x148
}

static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 80026d0:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 80026d2:	3203      	adds	r2, #3
 80026d4:	9300      	str	r3, [sp, #0]
 80026d6:	4842      	ldr	r0, [pc, #264]	; (80027e0 <sem1_execute.lto_priv.118+0x150>)
 80026d8:	4b3b      	ldr	r3, [pc, #236]	; (80027c8 <sem1_execute.lto_priv.118+0x138>)
 80026da:	f7fe fc61 	bl	8000fa0 <chThdCreateStatic>
 80026de:	69aa      	ldr	r2, [r5, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 80026e0:	4b40      	ldr	r3, [pc, #256]	; (80027e4 <sem1_execute.lto_priv.118+0x154>)
 80026e2:	6892      	ldr	r2, [r2, #8]
 80026e4:	f44f 71a4 	mov.w	r1, #328	; 0x148

static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 80026e8:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 80026ea:	3204      	adds	r2, #4
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	483e      	ldr	r0, [pc, #248]	; (80027e8 <sem1_execute.lto_priv.118+0x158>)
 80026f0:	4b35      	ldr	r3, [pc, #212]	; (80027c8 <sem1_execute.lto_priv.118+0x138>)
 80026f2:	f7fe fc55 	bl	8000fa0 <chThdCreateStatic>
 80026f6:	69aa      	ldr	r2, [r5, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 80026f8:	4b3c      	ldr	r3, [pc, #240]	; (80027ec <sem1_execute.lto_priv.118+0x15c>)
 80026fa:	6892      	ldr	r2, [r2, #8]
 80026fc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002700:	3202      	adds	r2, #2
static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8002702:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	483a      	ldr	r0, [pc, #232]	; (80027f0 <sem1_execute.lto_priv.118+0x160>)
 8002708:	4b2f      	ldr	r3, [pc, #188]	; (80027c8 <sem1_execute.lto_priv.118+0x138>)
 800270a:	f7fe fc49 	bl	8000fa0 <chThdCreateStatic>
 800270e:	6120      	str	r0, [r4, #16]
  chSemSignal(&sem1);
 8002710:	4838      	ldr	r0, [pc, #224]	; (80027f4 <sem1_execute.lto_priv.118+0x164>)
 8002712:	f7fe fc25 	bl	8000f60 <chSemSignal>
  chSemSignal(&sem1);
 8002716:	4837      	ldr	r0, [pc, #220]	; (80027f4 <sem1_execute.lto_priv.118+0x164>)
 8002718:	f7fe fc22 	bl	8000f60 <chSemSignal>
  chSemSignal(&sem1);
 800271c:	4835      	ldr	r0, [pc, #212]	; (80027f4 <sem1_execute.lto_priv.118+0x164>)
 800271e:	f7fe fc1f 	bl	8000f60 <chSemSignal>
  chSemSignal(&sem1);
 8002722:	4834      	ldr	r0, [pc, #208]	; (80027f4 <sem1_execute.lto_priv.118+0x164>)
 8002724:	f7fe fc1c 	bl	8000f60 <chSemSignal>
  chSemSignal(&sem1);
 8002728:	4832      	ldr	r0, [pc, #200]	; (80027f4 <sem1_execute.lto_priv.118+0x164>)
 800272a:	f7fe fc19 	bl	8000f60 <chSemSignal>
  test_wait_threads();
 800272e:	f000 fd7f 	bl	8003230 <test_wait_threads>
#if CH_CFG_USE_SEMAPHORES_PRIORITY
  test_assert_sequence(1, "ADCEB");
#else
  test_assert_sequence(1, "ABCDE");
 8002732:	2001      	movs	r0, #1
 8002734:	4930      	ldr	r1, [pc, #192]	; (80027f8 <sem1_execute.lto_priv.118+0x168>)
 8002736:	f000 fdd3 	bl	80032e0 <_test_assert_sequence>
 800273a:	4606      	mov	r6, r0
 800273c:	b108      	cbz	r0, 8002742 <sem1_execute.lto_priv.118+0xb2>
  chSemAddCounterI(&sem1, 2);
  chSchRescheduleS();
  chSysUnlock();
  test_wait_threads();
  test_assert_lock(2, chSemGetCounterI(&sem1) == 1, "invalid counter");
}
 800273e:	b003      	add	sp, #12
 8002740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002742:	69ab      	ldr	r3, [r5, #24]
#if CH_CFG_USE_SEMAPHORES_PRIORITY
  test_assert_sequence(1, "ADCEB");
#else
  test_assert_sequence(1, "ABCDE");
#endif
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8002744:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002748:	689a      	ldr	r2, [r3, #8]
 800274a:	4820      	ldr	r0, [pc, #128]	; (80027cc <sem1_execute.lto_priv.118+0x13c>)
 800274c:	3205      	adds	r2, #5
 800274e:	9700      	str	r7, [sp, #0]
 8002750:	4b1d      	ldr	r3, [pc, #116]	; (80027c8 <sem1_execute.lto_priv.118+0x138>)
 8002752:	f7fe fc25 	bl	8000fa0 <chThdCreateStatic>
 8002756:	2320      	movs	r3, #32
 8002758:	6020      	str	r0, [r4, #0]
 800275a:	f383 8811 	msr	BASEPRI, r3
 800275e:	4c25      	ldr	r4, [pc, #148]	; (80027f4 <sem1_execute.lto_priv.118+0x164>)
 8002760:	2502      	movs	r5, #2
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
    if (++sp->s_cnt <= (cnt_t)0) {
 8002762:	4627      	mov	r7, r4
 8002764:	e002      	b.n	800276c <sem1_execute.lto_priv.118+0xdc>
  chDbgCheck((sp != NULL) && (n > (cnt_t)0));
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
 8002766:	2d01      	cmp	r5, #1
 8002768:	d00e      	beq.n	8002788 <sem1_execute.lto_priv.118+0xf8>
 800276a:	2501      	movs	r5, #1
    if (++sp->s_cnt <= (cnt_t)0) {
 800276c:	68a3      	ldr	r3, [r4, #8]
 800276e:	3301      	adds	r3, #1
 8002770:	2b00      	cmp	r3, #0
 8002772:	60a3      	str	r3, [r4, #8]
 8002774:	dcf7      	bgt.n	8002766 <sem1_execute.lto_priv.118+0xd6>
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8002776:	6838      	ldr	r0, [r7, #0]

  tqp->p_next = tp->p_next;
 8002778:	6803      	ldr	r3, [r0, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800277a:	605f      	str	r7, [r3, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 800277c:	603b      	str	r3, [r7, #0]
      chSchReadyI(queue_fifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_OK;
 800277e:	f7fe fcaf 	bl	80010e0 <chSchReadyI>
  chDbgCheck((sp != NULL) && (n > (cnt_t)0));
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
 8002782:	2d01      	cmp	r5, #1
    if (++sp->s_cnt <= (cnt_t)0) {
      chSchReadyI(queue_fifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_OK;
 8002784:	6206      	str	r6, [r0, #32]
  chDbgCheck((sp != NULL) && (n > (cnt_t)0));
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
 8002786:	d1f0      	bne.n	800276a <sem1_execute.lto_priv.118+0xda>
  chSysLock();
  chSemAddCounterI(&sem1, 2);
  chSchRescheduleS();
 8002788:	f7fe fb92 	bl	8000eb0 <chSchRescheduleS>
 800278c:	2500      	movs	r5, #0
 800278e:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_wait_threads();
 8002792:	f000 fd4d 	bl	8003230 <test_wait_threads>
 8002796:	2320      	movs	r3, #32
 8002798:	f383 8811 	msr	BASEPRI, r3
  test_assert_lock(2, chSemGetCounterI(&sem1) == 1, "invalid counter");
 800279c:	68a1      	ldr	r1, [r4, #8]
 800279e:	2002      	movs	r0, #2
 80027a0:	f1a1 0101 	sub.w	r1, r1, #1
 80027a4:	fab1 f181 	clz	r1, r1
 80027a8:	0949      	lsrs	r1, r1, #5
 80027aa:	f000 fdc1 	bl	8003330 <_test_assert>
 80027ae:	b918      	cbnz	r0, 80027b8 <sem1_execute.lto_priv.118+0x128>
 80027b0:	f380 8811 	msr	BASEPRI, r0
}
 80027b4:	b003      	add	sp, #12
 80027b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027b8:	f385 8811 	msr	BASEPRI, r5
 80027bc:	b003      	add	sp, #12
 80027be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027c0:	20001040 	.word	0x20001040
 80027c4:	080078a4 	.word	0x080078a4
 80027c8:	08002281 	.word	0x08002281
 80027cc:	20001210 	.word	0x20001210
 80027d0:	20000968 	.word	0x20000968
 80027d4:	080078a0 	.word	0x080078a0
 80027d8:	20001358 	.word	0x20001358
 80027dc:	080078a8 	.word	0x080078a8
 80027e0:	200014a0 	.word	0x200014a0
 80027e4:	080087f0 	.word	0x080087f0
 80027e8:	200015e8 	.word	0x200015e8
 80027ec:	080078b0 	.word	0x080078b0
 80027f0:	20001730 	.word	0x20001730
 80027f4:	200008a0 	.word	0x200008a0
 80027f8:	080078ac 	.word	0x080078ac
 80027fc:	00000000 	.word	0x00000000

08002800 <thd2_execute.lto_priv.114>:
 * and atomically executed.<br>
 * The test expects the threads to perform their operations in increasing
 * priority order regardless of the initial order.
 */

static void thd2_execute(void) {
 8002800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8002804:	4e47      	ldr	r6, [pc, #284]	; (8002924 <thd2_execute.lto_priv.114+0x124>)

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8002806:	4d48      	ldr	r5, [pc, #288]	; (8002928 <thd2_execute.lto_priv.114+0x128>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8002808:	69b3      	ldr	r3, [r6, #24]
 800280a:	f8df 9134 	ldr.w	r9, [pc, #308]	; 8002940 <thd2_execute.lto_priv.114+0x140>
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	4946      	ldr	r1, [pc, #280]	; (800292c <thd2_execute.lto_priv.114+0x12c>)
 * and atomically executed.<br>
 * The test expects the threads to perform their operations in increasing
 * priority order regardless of the initial order.
 */

static void thd2_execute(void) {
 8002812:	b083      	sub	sp, #12

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8002814:	464b      	mov	r3, r9
 8002816:	9100      	str	r1, [sp, #0]
 8002818:	3a04      	subs	r2, #4
 800281a:	4628      	mov	r0, r5
 800281c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002820:	f7fe fbbe 	bl	8000fa0 <chThdCreateStatic>
 8002824:	69b3      	ldr	r3, [r6, #24]
 8002826:	f8df 811c 	ldr.w	r8, [pc, #284]	; 8002944 <thd2_execute.lto_priv.114+0x144>
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	4940      	ldr	r1, [pc, #256]	; (8002930 <thd2_execute.lto_priv.114+0x130>)
 800282e:	f5a5 74a4 	sub.w	r4, r5, #328	; 0x148
 * priority order regardless of the initial order.
 */

static void thd2_execute(void) {

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8002832:	f8c8 0004 	str.w	r0, [r8, #4]
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8002836:	464b      	mov	r3, r9
 8002838:	9100      	str	r1, [sp, #0]
 800283a:	3a05      	subs	r2, #5
 800283c:	4620      	mov	r0, r4
 800283e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002842:	f7fe fbad 	bl	8000fa0 <chThdCreateStatic>
 8002846:	69b3      	ldr	r3, [r6, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8002848:	493a      	ldr	r1, [pc, #232]	; (8002934 <thd2_execute.lto_priv.114+0x134>)
 800284a:	689a      	ldr	r2, [r3, #8]
 */

static void thd2_execute(void) {

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 800284c:	f8c8 0000 	str.w	r0, [r8]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8002850:	464b      	mov	r3, r9
 8002852:	9100      	str	r1, [sp, #0]
 8002854:	3a01      	subs	r2, #1
 8002856:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 800285a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800285e:	f7fe fb9f 	bl	8000fa0 <chThdCreateStatic>
 8002862:	69b3      	ldr	r3, [r6, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8002864:	4934      	ldr	r1, [pc, #208]	; (8002938 <thd2_execute.lto_priv.114+0x138>)
 8002866:	689a      	ldr	r2, [r3, #8]

static void thd2_execute(void) {

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8002868:	f8c8 0010 	str.w	r0, [r8, #16]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 800286c:	9100      	str	r1, [sp, #0]
 800286e:	3a02      	subs	r2, #2
 8002870:	f505 7024 	add.w	r0, r5, #656	; 0x290
 8002874:	464b      	mov	r3, r9
 8002876:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800287a:	f7fe fb91 	bl	8000fa0 <chThdCreateStatic>
 800287e:	2220      	movs	r2, #32
 8002880:	f8c8 000c 	str.w	r0, [r8, #12]
 8002884:	f382 8811 	msr	BASEPRI, r2
 8002888:	69b3      	ldr	r3, [r6, #24]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800288a:	6971      	ldr	r1, [r6, #20]
  /* Done this way for coverage of chThdCreateI() and chThdStart().*/
  chSysLock();
  threads[2] = chThdCreateI(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 800288c:	689b      	ldr	r3, [r3, #8]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800288e:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 8002948 <thd2_execute.lto_priv.114+0x148>
 8002892:	f1a3 0a03 	sub.w	sl, r3, #3
 8002896:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 800294c <thd2_execute.lto_priv.114+0x14c>
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800289a:	f505 73a4 	add.w	r3, r5, #328	; 0x148
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800289e:	2700      	movs	r7, #0

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80028a0:	f505 7b1b 	add.w	fp, r5, #620	; 0x26c
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 80028a4:	f8c4 a298 	str.w	sl, [r4, #664]	; 0x298
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 80028a8:	f8c4 a2cc 	str.w	sl, [r4, #716]	; 0x2cc

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80028ac:	f8c4 93b4 	str.w	r9, [r4, #948]	; 0x3b4
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80028b0:	2002      	movs	r0, #2
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 80028b2:	f505 79b6 	add.w	r9, r5, #364	; 0x16c
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80028b6:	f04f 0a01 	mov.w	sl, #1
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80028ba:	f505 75b8 	add.w	r5, r5, #368	; 0x170
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80028be:	f8c4 62a0 	str.w	r6, [r4, #672]	; 0x2a0

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80028c2:	f8c4 b29c 	str.w	fp, [r4, #668]	; 0x29c
 80028c6:	f8c4 c3b8 	str.w	ip, [r4, #952]	; 0x3b8
 80028ca:	f8c4 e3d4 	str.w	lr, [r4, #980]	; 0x3d4
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80028ce:	f884 02ac 	strb.w	r0, [r4, #684]	; 0x2ac
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80028d2:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 80028d6:	f884 72ad 	strb.w	r7, [r4, #685]	; 0x2ad
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 80028da:	f8c4 72c8 	str.w	r7, [r4, #712]	; 0x2c8
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 80028de:	f8c4 72c4 	str.w	r7, [r4, #708]	; 0x2c4
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 80028e2:	f8c4 72a8 	str.w	r7, [r4, #680]	; 0x2a8
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80028e6:	f884 a2ae 	strb.w	sl, [r4, #686]	; 0x2ae
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80028ea:	610b      	str	r3, [r1, #16]
 80028ec:	6173      	str	r3, [r6, #20]
 80028ee:	f8c8 3008 	str.w	r3, [r8, #8]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 80028f2:	f8c4 92b4 	str.w	r9, [r4, #692]	; 0x2b4
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80028f6:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
  tqp->p_prev = (thread_t *)tqp;
 80028fa:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
 80028fe:	f387 8811 	msr	BASEPRI, r7
  chSysUnlock();
  chThdStart(threads[2]);
 8002902:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8002906:	f382 8811 	msr	BASEPRI, r2
 */
static inline thread_t *chThdStartI(thread_t *tp) {

  chDbgAssert(tp->p_state == CH_STATE_WTSTART, "wrong state");

  return chSchReadyI(tp);
 800290a:	f7fe fbe9 	bl	80010e0 <chSchReadyI>
 800290e:	f387 8811 	msr	BASEPRI, r7
  test_wait_threads();
 8002912:	f000 fc8d 	bl	8003230 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8002916:	4650      	mov	r0, sl
 8002918:	4908      	ldr	r1, [pc, #32]	; (800293c <thd2_execute.lto_priv.114+0x13c>)
}
 800291a:	b003      	add	sp, #12
 800291c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  chSysLock();
  threads[2] = chThdCreateI(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  chSysUnlock();
  chThdStart(threads[2]);
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 8002920:	f000 bcde 	b.w	80032e0 <_test_assert_sequence>
 8002924:	20001040 	.word	0x20001040
 8002928:	20001358 	.word	0x20001358
 800292c:	080087f0 	.word	0x080087f0
 8002930:	080078b0 	.word	0x080078b0
 8002934:	080078a4 	.word	0x080078a4
 8002938:	080078a0 	.word	0x080078a0
 800293c:	080078ac 	.word	0x080078ac
 8002940:	08002271 	.word	0x08002271
 8002944:	20000968 	.word	0x20000968
 8002948:	080078a8 	.word	0x080078a8
 800294c:	08000241 	.word	0x08000241

08002950 <thd4_execute.lto_priv.116>:
 * <h2>Description</h2>
 * Delay APIs and associated macros are tested, the invoking thread is verified
 * to wake up at the exact expected time.
 */

static void thd4_execute(void) {
 8002950:	b570      	push	{r4, r5, r6, lr}
  systime_t time;

  test_wait_tick();
 8002952:	f000 fc5d 	bl	8003210 <test_wait_tick>
 8002956:	2620      	movs	r6, #32
 8002958:	f386 8811 	msr	BASEPRI, r6
 800295c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8002960:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8002962:	2300      	movs	r3, #0
 8002964:	b2a4      	uxth	r4, r4
 8002966:	f383 8811 	msr	BASEPRI, r3

  /* Timeouts in microseconds.*/
  time = chVTGetSystemTime();
  chThdSleepMicroseconds(100000);
 800296a:	20c8      	movs	r0, #200	; 0xc8
 800296c:	f7ff f938 	bl	8001be0 <chThdSleep>
  test_assert_time_window(1,
 8002970:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
 8002974:	f104 02cb 	add.w	r2, r4, #203	; 0xcb
 8002978:	b289      	uxth	r1, r1
 800297a:	b292      	uxth	r2, r2
 800297c:	2001      	movs	r0, #1
 800297e:	f000 fc87 	bl	8003290 <_test_assert_time_window>
 8002982:	b100      	cbz	r0, 8002986 <thd4_execute.lto_priv.116+0x36>
 8002984:	bd70      	pop	{r4, r5, r6, pc}
 8002986:	f386 8811 	msr	BASEPRI, r6
 800298a:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800298c:	b2a4      	uxth	r4, r4
 800298e:	f380 8811 	msr	BASEPRI, r0
                          time + US2ST(100000),
                          time + US2ST(100000) + CH_CFG_ST_TIMEDELTA + 1);

  /* Timeouts in milliseconds.*/
  time = chVTGetSystemTime();
  chThdSleepMilliseconds(100);
 8002992:	20c8      	movs	r0, #200	; 0xc8
 8002994:	f7ff f924 	bl	8001be0 <chThdSleep>
  test_assert_time_window(2,
 8002998:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
 800299c:	f104 02cb 	add.w	r2, r4, #203	; 0xcb
 80029a0:	b289      	uxth	r1, r1
 80029a2:	b292      	uxth	r2, r2
 80029a4:	2002      	movs	r0, #2
 80029a6:	f000 fc73 	bl	8003290 <_test_assert_time_window>
 80029aa:	2800      	cmp	r0, #0
 80029ac:	d1ea      	bne.n	8002984 <thd4_execute.lto_priv.116+0x34>
 80029ae:	f386 8811 	msr	BASEPRI, r6
 80029b2:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 80029b4:	b2a4      	uxth	r4, r4
 80029b6:	f380 8811 	msr	BASEPRI, r0
                          time + MS2ST(100),
                          time + MS2ST(100) + CH_CFG_ST_TIMEDELTA + 1);

  /* Timeouts in seconds.*/
  time = chVTGetSystemTime();
  chThdSleepSeconds(1);
 80029ba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80029be:	f7ff f90f 	bl	8001be0 <chThdSleep>
  test_assert_time_window(3,
 80029c2:	f504 61fa 	add.w	r1, r4, #2000	; 0x7d0
 80029c6:	f204 72d3 	addw	r2, r4, #2003	; 0x7d3
 80029ca:	b289      	uxth	r1, r1
 80029cc:	b292      	uxth	r2, r2
 80029ce:	2003      	movs	r0, #3
 80029d0:	f000 fc5e 	bl	8003290 <_test_assert_time_window>
 80029d4:	2800      	cmp	r0, #0
 80029d6:	d1d5      	bne.n	8002984 <thd4_execute.lto_priv.116+0x34>
 80029d8:	f386 8811 	msr	BASEPRI, r6
 80029dc:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 80029de:	b2a4      	uxth	r4, r4
 80029e0:	f380 8811 	msr	BASEPRI, r0
                          time + S2ST(1),
                          time + S2ST(1) + CH_CFG_ST_TIMEDELTA + 1);

  /* Absolute timelines.*/
  time = chVTGetSystemTime() + MS2ST(100);
 80029e4:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
 80029e8:	b2ad      	uxth	r5, r5
  chThdSleepUntil(time);
 80029ea:	4628      	mov	r0, r5
 80029ec:	f7ff f8e0 	bl	8001bb0 <chThdSleepUntil>
  test_assert_time_window(4,
 80029f0:	f104 02cb 	add.w	r2, r4, #203	; 0xcb
 80029f4:	4629      	mov	r1, r5
                          time,
                          time + CH_CFG_ST_TIMEDELTA + 1);
}
 80029f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                          time + S2ST(1) + CH_CFG_ST_TIMEDELTA + 1);

  /* Absolute timelines.*/
  time = chVTGetSystemTime() + MS2ST(100);
  chThdSleepUntil(time);
  test_assert_time_window(4,
 80029fa:	b292      	uxth	r2, r2
 80029fc:	2004      	movs	r0, #4
 80029fe:	f000 bc47 	b.w	8003290 <_test_assert_time_window>
 8002a02:	bf00      	nop
	...

08002a10 <thd3_execute.lto_priv.115>:
 * to verify that the priority change happens as expected.<br>
 * If the @p CH_CFG_USE_MUTEXES option is enabled then the priority changes are
 * also tested under priority inheritance boosted priority state.
 */

static void thd3_execute(void) {
 8002a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8002a12:	4e49      	ldr	r6, [pc, #292]	; (8002b38 <thd3_execute.lto_priv.115+0x128>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8002a14:	69b3      	ldr	r3, [r6, #24]
 8002a16:	689c      	ldr	r4, [r3, #8]
  tprio_t prio, p1;

  prio = chThdGetPriorityX();
  p1 = chThdSetPriority(prio + 1);
 8002a18:	1c65      	adds	r5, r4, #1
 8002a1a:	4628      	mov	r0, r5
 8002a1c:	f7fe fa58 	bl	8000ed0 <chThdSetPriority>
 8002a20:	4607      	mov	r7, r0
  test_assert(1, p1 == prio,
 8002a22:	1b39      	subs	r1, r7, r4
 8002a24:	fab1 f181 	clz	r1, r1
 8002a28:	2001      	movs	r0, #1
 8002a2a:	0949      	lsrs	r1, r1, #5
 8002a2c:	f000 fc80 	bl	8003330 <_test_assert>
 8002a30:	b100      	cbz	r0, 8002a34 <thd3_execute.lto_priv.115+0x24>
 8002a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a34:	69b3      	ldr	r3, [r6, #24]
              "unexpected returned priority level");
  test_assert(2, chThdGetPriorityX() == prio + 1,
 8002a36:	2002      	movs	r0, #2
 8002a38:	6899      	ldr	r1, [r3, #8]
 8002a3a:	1a69      	subs	r1, r5, r1
 8002a3c:	fab1 f181 	clz	r1, r1
 8002a40:	0949      	lsrs	r1, r1, #5
 8002a42:	f000 fc75 	bl	8003330 <_test_assert>
 8002a46:	2800      	cmp	r0, #0
 8002a48:	d1f3      	bne.n	8002a32 <thd3_execute.lto_priv.115+0x22>
              "unexpected priority level");
  p1 = chThdSetPriority(p1);
 8002a4a:	4638      	mov	r0, r7
 8002a4c:	f7fe fa40 	bl	8000ed0 <chThdSetPriority>
  test_assert(3, p1 == prio + 1,
 8002a50:	1a29      	subs	r1, r5, r0
 8002a52:	fab1 f181 	clz	r1, r1
 8002a56:	2003      	movs	r0, #3
 8002a58:	0949      	lsrs	r1, r1, #5
 8002a5a:	f000 fc69 	bl	8003330 <_test_assert>
 8002a5e:	2800      	cmp	r0, #0
 8002a60:	d1e7      	bne.n	8002a32 <thd3_execute.lto_priv.115+0x22>
 8002a62:	69b3      	ldr	r3, [r6, #24]
              "unexpected returned priority level");
  test_assert(4, chThdGetPriorityX() == prio,
 8002a64:	2004      	movs	r0, #4
 8002a66:	6899      	ldr	r1, [r3, #8]
 8002a68:	1a61      	subs	r1, r4, r1
 8002a6a:	fab1 f181 	clz	r1, r1
 8002a6e:	0949      	lsrs	r1, r1, #5
 8002a70:	f000 fc5e 	bl	8003330 <_test_assert>
 8002a74:	2800      	cmp	r0, #0
 8002a76:	d1dc      	bne.n	8002a32 <thd3_execute.lto_priv.115+0x22>
 8002a78:	2320      	movs	r3, #32
 8002a7a:	f383 8811 	msr	BASEPRI, r3
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8002a7e:	69b2      	ldr	r2, [r6, #24]
              "unexpected priority level");

#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
  /* Simulates a priority boost situation (p_prio > p_realprio).*/
  chSysLock();
  chThdGetSelfX()->p_prio += 2;
 8002a80:	6893      	ldr	r3, [r2, #8]
 8002a82:	3302      	adds	r3, #2
 8002a84:	6093      	str	r3, [r2, #8]
 8002a86:	f380 8811 	msr	BASEPRI, r0
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8002a8a:	69b3      	ldr	r3, [r6, #24]
  chSysUnlock();
  test_assert(5, chThdGetPriorityX() == prio + 2,
 8002a8c:	1ca7      	adds	r7, r4, #2
 8002a8e:	6899      	ldr	r1, [r3, #8]
 8002a90:	2005      	movs	r0, #5
 8002a92:	1a79      	subs	r1, r7, r1
 8002a94:	fab1 f181 	clz	r1, r1
 8002a98:	0949      	lsrs	r1, r1, #5
 8002a9a:	f000 fc49 	bl	8003330 <_test_assert>
 8002a9e:	2800      	cmp	r0, #0
 8002aa0:	d1c7      	bne.n	8002a32 <thd3_execute.lto_priv.115+0x22>
              "unexpected priority level");

  /* Tries to raise but below the boost level. */
  p1 = chThdSetPriority(prio + 1);
 8002aa2:	4628      	mov	r0, r5
 8002aa4:	f7fe fa14 	bl	8000ed0 <chThdSetPriority>
  test_assert(6, p1 == prio,
 8002aa8:	1b01      	subs	r1, r0, r4
 8002aaa:	fab1 f181 	clz	r1, r1
 8002aae:	2006      	movs	r0, #6
 8002ab0:	0949      	lsrs	r1, r1, #5
 8002ab2:	f000 fc3d 	bl	8003330 <_test_assert>
 8002ab6:	2800      	cmp	r0, #0
 8002ab8:	d1bb      	bne.n	8002a32 <thd3_execute.lto_priv.115+0x22>
              "unexpected returned priority level");
  test_assert(7, chThdGetSelfX()->p_prio == prio + 2,
 8002aba:	69b3      	ldr	r3, [r6, #24]
 8002abc:	2007      	movs	r0, #7
 8002abe:	6899      	ldr	r1, [r3, #8]
 8002ac0:	1a79      	subs	r1, r7, r1
 8002ac2:	fab1 f181 	clz	r1, r1
 8002ac6:	0949      	lsrs	r1, r1, #5
 8002ac8:	f000 fc32 	bl	8003330 <_test_assert>
 8002acc:	2800      	cmp	r0, #0
 8002ace:	d1b0      	bne.n	8002a32 <thd3_execute.lto_priv.115+0x22>
              "unexpected priority level");
  test_assert(8, chThdGetSelfX()->p_realprio == prio + 1,
 8002ad0:	69b3      	ldr	r3, [r6, #24]
 8002ad2:	2008      	movs	r0, #8
 8002ad4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002ad6:	1a69      	subs	r1, r5, r1
 8002ad8:	fab1 f181 	clz	r1, r1
 8002adc:	0949      	lsrs	r1, r1, #5
 8002ade:	f000 fc27 	bl	8003330 <_test_assert>
 8002ae2:	2800      	cmp	r0, #0
 8002ae4:	d1a5      	bne.n	8002a32 <thd3_execute.lto_priv.115+0x22>
              "unexpected returned real priority level");

  /* Tries to raise above the boost level. */
  p1 = chThdSetPriority(prio + 3);
 8002ae6:	1ce7      	adds	r7, r4, #3
 8002ae8:	4638      	mov	r0, r7
 8002aea:	f7fe f9f1 	bl	8000ed0 <chThdSetPriority>
  test_assert(9, p1 == prio + 1,
 8002aee:	1a28      	subs	r0, r5, r0
 8002af0:	4241      	negs	r1, r0
 8002af2:	4141      	adcs	r1, r0
 8002af4:	2009      	movs	r0, #9
 8002af6:	f000 fc1b 	bl	8003330 <_test_assert>
 8002afa:	2800      	cmp	r0, #0
 8002afc:	d199      	bne.n	8002a32 <thd3_execute.lto_priv.115+0x22>
              "unexpected returned priority level");
  test_assert(10, chThdGetSelfX()->p_prio == prio + 3,
 8002afe:	69b3      	ldr	r3, [r6, #24]
 8002b00:	200a      	movs	r0, #10
 8002b02:	6899      	ldr	r1, [r3, #8]
 8002b04:	1a7a      	subs	r2, r7, r1
 8002b06:	4251      	negs	r1, r2
 8002b08:	4151      	adcs	r1, r2
 8002b0a:	f000 fc11 	bl	8003330 <_test_assert>
 8002b0e:	2800      	cmp	r0, #0
 8002b10:	d18f      	bne.n	8002a32 <thd3_execute.lto_priv.115+0x22>
              "unexpected priority level");
  test_assert(11, chThdGetSelfX()->p_realprio == prio + 3,
 8002b12:	69b3      	ldr	r3, [r6, #24]
 8002b14:	200b      	movs	r0, #11
 8002b16:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002b18:	1a7b      	subs	r3, r7, r1
 8002b1a:	4259      	negs	r1, r3
 8002b1c:	4159      	adcs	r1, r3
 8002b1e:	f000 fc07 	bl	8003330 <_test_assert>
 8002b22:	2800      	cmp	r0, #0
 8002b24:	d185      	bne.n	8002a32 <thd3_execute.lto_priv.115+0x22>
 8002b26:	2320      	movs	r3, #32
 8002b28:	f383 8811 	msr	BASEPRI, r3
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8002b2c:	69b3      	ldr	r3, [r6, #24]
              "unexpected real priority level");

  chSysLock();
  chThdGetSelfX()->p_prio = prio;
 8002b2e:	609c      	str	r4, [r3, #8]
  chThdGetSelfX()->p_realprio = prio;
 8002b30:	63dc      	str	r4, [r3, #60]	; 0x3c
 8002b32:	f380 8811 	msr	BASEPRI, r0
 8002b36:	e77c      	b.n	8002a32 <thd3_execute.lto_priv.115+0x22>
 8002b38:	20001040 	.word	0x20001040
 8002b3c:	00000000 	.word	0x00000000

08002b40 <print_line>:
    tcp->teardown();

  test_wait_threads();
}

static void print_line(void) {
 8002b40:	b570      	push	{r4, r5, r6, lr}
 8002b42:	4e09      	ldr	r6, [pc, #36]	; (8002b68 <print_line+0x28>)
 8002b44:	244c      	movs	r4, #76	; 0x4c
  unsigned i;

  for (i = 0; i < 76; i++)
    chSequentialStreamPut(chp, '-');
 8002b46:	6830      	ldr	r0, [r6, #0]
 8002b48:	212d      	movs	r1, #45	; 0x2d
 8002b4a:	6803      	ldr	r3, [r0, #0]
 8002b4c:	4d06      	ldr	r5, [pc, #24]	; (8002b68 <print_line+0x28>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	4798      	blx	r3
}

static void print_line(void) {
  unsigned i;

  for (i = 0; i < 76; i++)
 8002b52:	3c01      	subs	r4, #1
 8002b54:	d1f7      	bne.n	8002b46 <print_line+0x6>
    chSequentialStreamPut(chp, '-');
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 8002b56:	6828      	ldr	r0, [r5, #0]
 8002b58:	4904      	ldr	r1, [pc, #16]	; (8002b6c <print_line+0x2c>)
 8002b5a:	6803      	ldr	r3, [r0, #0]
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	681b      	ldr	r3, [r3, #0]
}
 8002b60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
static void print_line(void) {
  unsigned i;

  for (i = 0; i < 76; i++)
    chSequentialStreamPut(chp, '-');
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 8002b64:	4718      	bx	r3
 8002b66:	bf00      	nop
 8002b68:	200008e8 	.word	0x200008e8
 8002b6c:	080089c0 	.word	0x080089c0

08002b70 <tmr.lto_priv.82>:

static virtual_timer_t vt;
static void tmr(void *p) {
  (void)p;

  test_timer_done = TRUE;
 8002b70:	4b01      	ldr	r3, [pc, #4]	; (8002b78 <tmr.lto_priv.82+0x8>)
 8002b72:	2201      	movs	r2, #1
 8002b74:	701a      	strb	r2, [r3, #0]
 8002b76:	4770      	bx	lr
 8002b78:	20001008 	.word	0x20001008
 8002b7c:	00000000 	.word	0x00000000

08002b80 <notify1.lto_priv.81>:

#if STM32_SERIAL_USE_USART1 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  USART1->CR1 |= USART_CR1_TXEIE;
 8002b80:	4a02      	ldr	r2, [pc, #8]	; (8002b8c <notify1.lto_priv.81+0xc>)
 8002b82:	68d3      	ldr	r3, [r2, #12]
 8002b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b88:	60d3      	str	r3, [r2, #12]
 8002b8a:	4770      	bx	lr
 8002b8c:	40013800 	.word	0x40013800

08002b90 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8002b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8002b94:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8002b98:	6923      	ldr	r3, [r4, #16]
 8002b9a:	079b      	lsls	r3, r3, #30
 8002b9c:	d403      	bmi.n	8002ba6 <VectorB0+0x16>
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 8002b9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8002ba2:	f7fe b8c5 	b.w	8000d30 <_port_irq_epilogue>

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
    STM32_ST_TIM->SR = 0U;
 8002ba6:	2700      	movs	r7, #0
 8002ba8:	6127      	str	r7, [r4, #16]
 8002baa:	2520      	movs	r5, #32
 8002bac:	f385 8811 	msr	BASEPRI, r5
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 8002bb0:	4e1e      	ldr	r6, [pc, #120]	; (8002c2c <VectorB0+0x9c>)
 8002bb2:	6a62      	ldr	r2, [r4, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8002bb4:	f8b6 e026 	ldrh.w	lr, [r6, #38]	; 0x26
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 8002bb8:	69f3      	ldr	r3, [r6, #28]
 8002bba:	b290      	uxth	r0, r2

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8002bbc:	ebce 0100 	rsb	r1, lr, r0
 8002bc0:	891a      	ldrh	r2, [r3, #8]
 8002bc2:	b289      	uxth	r1, r1
 8002bc4:	4291      	cmp	r1, r2
 8002bc6:	f106 081c 	add.w	r8, r6, #28
 8002bca:	d31b      	bcc.n	8002c04 <VectorB0+0x74>
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8002bcc:	6819      	ldr	r1, [r3, #0]
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8002bce:	4472      	add	r2, lr
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8002bd0:	4541      	cmp	r1, r8
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8002bd2:	84f2      	strh	r2, [r6, #38]	; 0x26

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
 8002bd4:	68da      	ldr	r2, [r3, #12]
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8002bd6:	f8c1 8004 	str.w	r8, [r1, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 8002bda:	61f1      	str	r1, [r6, #28]
    fn = vtp->vt_func;
    vtp->vt_func = NULL;
 8002bdc:	60df      	str	r7, [r3, #12]
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8002bde:	bf08      	it	eq
 8002be0:	60e7      	streq	r7, [r4, #12]
 8002be2:	f387 8811 	msr	BASEPRI, r7
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->vt_par);
 8002be6:	6918      	ldr	r0, [r3, #16]
 8002be8:	4790      	blx	r2
 8002bea:	f385 8811 	msr	BASEPRI, r5
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8002bee:	6a62      	ldr	r2, [r4, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8002bf0:	f8b6 e026 	ldrh.w	lr, [r6, #38]	; 0x26
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.vt_next;
 8002bf4:	69f3      	ldr	r3, [r6, #28]
 8002bf6:	b290      	uxth	r0, r2

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8002bf8:	ebce 0100 	rsb	r1, lr, r0
 8002bfc:	891a      	ldrh	r2, [r3, #8]
 8002bfe:	b289      	uxth	r1, r1
 8002c00:	428a      	cmp	r2, r1
 8002c02:	d9e3      	bls.n	8002bcc <VectorB0+0x3c>
    vtp = ch.vtlist.vt_next;
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8002c04:	4543      	cmp	r3, r8
 8002c06:	d00a      	beq.n	8002c1e <VectorB0+0x8e>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.vt_lasttime + vtp->vt_delta - now;
 8002c08:	4472      	add	r2, lr
 8002c0a:	1a12      	subs	r2, r2, r0
 8002c0c:	b292      	uxth	r2, r2
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 8002c0e:	2a01      	cmp	r2, #1
 8002c10:	bf98      	it	ls
 8002c12:	2202      	movls	r2, #2
  }
  port_timer_set_alarm(now + delta);
 8002c14:	4402      	add	r2, r0
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8002c16:	b292      	uxth	r2, r2
 8002c18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c1c:	635a      	str	r2, [r3, #52]	; 0x34
 8002c1e:	2300      	movs	r3, #0
 8002c20:	f383 8811 	msr	BASEPRI, r3
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 8002c24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8002c28:	f7fe b882 	b.w	8000d30 <_port_irq_epilogue>
 8002c2c:	20001040 	.word	0x20001040

08002c30 <Vector84>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM7);
 8002c30:	4b09      	ldr	r3, [pc, #36]	; (8002c58 <Vector84+0x28>)
 8002c32:	6819      	ldr	r1, [r3, #0]
 8002c34:	f3c1 6103 	ubfx	r1, r1, #24, #4
 8002c38:	b159      	cbz	r1, 8002c52 <Vector84+0x22>
 8002c3a:	4808      	ldr	r0, [pc, #32]	; (8002c5c <Vector84+0x2c>)
/**
 * @brief   DMA1 stream 7 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 8002c3c:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM7);
 8002c3e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002c40:	060a      	lsls	r2, r1, #24
 8002c42:	605a      	str	r2, [r3, #4]
 8002c44:	b10c      	cbz	r4, 8002c4a <Vector84+0x1a>
 8002c46:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8002c48:	47a0      	blx	r4

  OSAL_IRQ_EPILOGUE();
}
 8002c4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM7);

  OSAL_IRQ_EPILOGUE();
 8002c4e:	f7fe b86f 	b.w	8000d30 <_port_irq_epilogue>
 8002c52:	f7fe b86d 	b.w	8000d30 <_port_irq_epilogue>
 8002c56:	bf00      	nop
 8002c58:	40020000 	.word	0x40020000
 8002c5c:	2000098c 	.word	0x2000098c

08002c60 <Vector80>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM6);
 8002c60:	4b09      	ldr	r3, [pc, #36]	; (8002c88 <Vector80+0x28>)
 8002c62:	6819      	ldr	r1, [r3, #0]
 8002c64:	f3c1 5103 	ubfx	r1, r1, #20, #4
 8002c68:	b159      	cbz	r1, 8002c82 <Vector80+0x22>
 8002c6a:	4808      	ldr	r0, [pc, #32]	; (8002c8c <Vector80+0x2c>)
/**
 * @brief   DMA1 stream 6 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8002c6c:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM6);
 8002c6e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002c70:	050a      	lsls	r2, r1, #20
 8002c72:	605a      	str	r2, [r3, #4]
 8002c74:	b10c      	cbz	r4, 8002c7a <Vector80+0x1a>
 8002c76:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8002c78:	47a0      	blx	r4

  OSAL_IRQ_EPILOGUE();
}
 8002c7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM6);

  OSAL_IRQ_EPILOGUE();
 8002c7e:	f7fe b857 	b.w	8000d30 <_port_irq_epilogue>
 8002c82:	f7fe b855 	b.w	8000d30 <_port_irq_epilogue>
 8002c86:	bf00      	nop
 8002c88:	40020000 	.word	0x40020000
 8002c8c:	2000098c 	.word	0x2000098c

08002c90 <Vector7C>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM5);
 8002c90:	4b09      	ldr	r3, [pc, #36]	; (8002cb8 <Vector7C+0x28>)
 8002c92:	6819      	ldr	r1, [r3, #0]
 8002c94:	f3c1 4103 	ubfx	r1, r1, #16, #4
 8002c98:	b159      	cbz	r1, 8002cb2 <Vector7C+0x22>
 8002c9a:	4808      	ldr	r0, [pc, #32]	; (8002cbc <Vector7C+0x2c>)
/**
 * @brief   DMA1 stream 5 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8002c9c:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM5);
 8002c9e:	6a04      	ldr	r4, [r0, #32]
 8002ca0:	040a      	lsls	r2, r1, #16
 8002ca2:	605a      	str	r2, [r3, #4]
 8002ca4:	b10c      	cbz	r4, 8002caa <Vector7C+0x1a>
 8002ca6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002ca8:	47a0      	blx	r4

  OSAL_IRQ_EPILOGUE();
}
 8002caa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM5);

  OSAL_IRQ_EPILOGUE();
 8002cae:	f7fe b83f 	b.w	8000d30 <_port_irq_epilogue>
 8002cb2:	f7fe b83d 	b.w	8000d30 <_port_irq_epilogue>
 8002cb6:	bf00      	nop
 8002cb8:	40020000 	.word	0x40020000
 8002cbc:	2000098c 	.word	0x2000098c

08002cc0 <Vector78>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM4);
 8002cc0:	4b09      	ldr	r3, [pc, #36]	; (8002ce8 <Vector78+0x28>)
 8002cc2:	6819      	ldr	r1, [r3, #0]
 8002cc4:	f3c1 3103 	ubfx	r1, r1, #12, #4
 8002cc8:	b159      	cbz	r1, 8002ce2 <Vector78+0x22>
 8002cca:	4808      	ldr	r0, [pc, #32]	; (8002cec <Vector78+0x2c>)
/**
 * @brief   DMA1 stream 4 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8002ccc:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM4);
 8002cce:	6984      	ldr	r4, [r0, #24]
 8002cd0:	030a      	lsls	r2, r1, #12
 8002cd2:	605a      	str	r2, [r3, #4]
 8002cd4:	b10c      	cbz	r4, 8002cda <Vector78+0x1a>
 8002cd6:	69c0      	ldr	r0, [r0, #28]
 8002cd8:	47a0      	blx	r4

  OSAL_IRQ_EPILOGUE();
}
 8002cda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM4);

  OSAL_IRQ_EPILOGUE();
 8002cde:	f7fe b827 	b.w	8000d30 <_port_irq_epilogue>
 8002ce2:	f7fe b825 	b.w	8000d30 <_port_irq_epilogue>
 8002ce6:	bf00      	nop
 8002ce8:	40020000 	.word	0x40020000
 8002cec:	2000098c 	.word	0x2000098c

08002cf0 <Vector74>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM3);
 8002cf0:	4b09      	ldr	r3, [pc, #36]	; (8002d18 <Vector74+0x28>)
 8002cf2:	6819      	ldr	r1, [r3, #0]
 8002cf4:	f3c1 2103 	ubfx	r1, r1, #8, #4
 8002cf8:	b159      	cbz	r1, 8002d12 <Vector74+0x22>
 8002cfa:	4808      	ldr	r0, [pc, #32]	; (8002d1c <Vector74+0x2c>)
/**
 * @brief   DMA1 stream 3 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 8002cfc:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM3);
 8002cfe:	6904      	ldr	r4, [r0, #16]
 8002d00:	020a      	lsls	r2, r1, #8
 8002d02:	605a      	str	r2, [r3, #4]
 8002d04:	b10c      	cbz	r4, 8002d0a <Vector74+0x1a>
 8002d06:	6940      	ldr	r0, [r0, #20]
 8002d08:	47a0      	blx	r4

  OSAL_IRQ_EPILOGUE();
}
 8002d0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM3);

  OSAL_IRQ_EPILOGUE();
 8002d0e:	f7fe b80f 	b.w	8000d30 <_port_irq_epilogue>
 8002d12:	f7fe b80d 	b.w	8000d30 <_port_irq_epilogue>
 8002d16:	bf00      	nop
 8002d18:	40020000 	.word	0x40020000
 8002d1c:	2000098c 	.word	0x2000098c

08002d20 <Vector70>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM2);
 8002d20:	4b09      	ldr	r3, [pc, #36]	; (8002d48 <Vector70+0x28>)
 8002d22:	6819      	ldr	r1, [r3, #0]
 8002d24:	f3c1 1103 	ubfx	r1, r1, #4, #4
 8002d28:	b159      	cbz	r1, 8002d42 <Vector70+0x22>
 8002d2a:	4808      	ldr	r0, [pc, #32]	; (8002d4c <Vector70+0x2c>)
/**
 * @brief   DMA1 stream 2 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8002d2c:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM2);
 8002d2e:	6884      	ldr	r4, [r0, #8]
 8002d30:	010a      	lsls	r2, r1, #4
 8002d32:	605a      	str	r2, [r3, #4]
 8002d34:	b10c      	cbz	r4, 8002d3a <Vector70+0x1a>
 8002d36:	68c0      	ldr	r0, [r0, #12]
 8002d38:	47a0      	blx	r4

  OSAL_IRQ_EPILOGUE();
}
 8002d3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM2);

  OSAL_IRQ_EPILOGUE();
 8002d3e:	f7fd bff7 	b.w	8000d30 <_port_irq_epilogue>
 8002d42:	f7fd bff5 	b.w	8000d30 <_port_irq_epilogue>
 8002d46:	bf00      	nop
 8002d48:	40020000 	.word	0x40020000
 8002d4c:	2000098c 	.word	0x2000098c

08002d50 <Vector6C>:
/**
 * @brief   DMA1 stream 1 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8002d50:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM1);
 8002d52:	4b07      	ldr	r3, [pc, #28]	; (8002d70 <Vector6C+0x20>)
 8002d54:	6819      	ldr	r1, [r3, #0]
 8002d56:	f011 010f 	ands.w	r1, r1, #15
 8002d5a:	d005      	beq.n	8002d68 <Vector6C+0x18>
 8002d5c:	4a05      	ldr	r2, [pc, #20]	; (8002d74 <Vector6C+0x24>)
 8002d5e:	6059      	str	r1, [r3, #4]
 8002d60:	6813      	ldr	r3, [r2, #0]
 8002d62:	b10b      	cbz	r3, 8002d68 <Vector6C+0x18>
 8002d64:	6850      	ldr	r0, [r2, #4]
 8002d66:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 8002d68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM1);

  OSAL_IRQ_EPILOGUE();
 8002d6c:	f7fd bfe0 	b.w	8000d30 <_port_irq_epilogue>
 8002d70:	40020000 	.word	0x40020000
 8002d74:	2000098c 	.word	0x2000098c
	...

08002d80 <Vector98>:
/**
 * @brief   CAN1 SCE interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_SCE_HANDLER) {
 8002d80:	b538      	push	{r3, r4, r5, lr}
 */
static void can_lld_sce_handler(CANDriver *canp) {
  uint32_t msr;

  /* Clearing IRQ sources.*/
  msr = canp->can->MSR;
 8002d82:	4d15      	ldr	r5, [pc, #84]	; (8002dd8 <Vector98+0x58>)
 8002d84:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002d86:	685c      	ldr	r4, [r3, #4]
  canp->can->MSR = msr;

  /* Wakeup event.*/
#if CAN_USE_SLEEP_MODE
  if (msr & CAN_MSR_WKUI) {
 8002d88:	0722      	lsls	r2, r4, #28
static void can_lld_sce_handler(CANDriver *canp) {
  uint32_t msr;

  /* Clearing IRQ sources.*/
  msr = canp->can->MSR;
  canp->can->MSR = msr;
 8002d8a:	605c      	str	r4, [r3, #4]

  /* Wakeup event.*/
#if CAN_USE_SLEEP_MODE
  if (msr & CAN_MSR_WKUI) {
 8002d8c:	d411      	bmi.n	8002db2 <Vector98+0x32>
    osalEventBroadcastFlagsI(&canp->wakeup_event, 0);
    osalSysUnlockFromISR();
  }
#endif /* CAN_USE_SLEEP_MODE */
  /* Error event.*/
  if (msr & CAN_MSR_ERRI) {
 8002d8e:	0763      	lsls	r3, r4, #29
 8002d90:	d50b      	bpl.n	8002daa <Vector98+0x2a>
    eventflags_t flags;
    uint32_t esr = canp->can->ESR;
 8002d92:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002d94:	2320      	movs	r3, #32
 8002d96:	6991      	ldr	r1, [r2, #24]
 8002d98:	f383 8811 	msr	BASEPRI, r3
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8002d9c:	480f      	ldr	r0, [pc, #60]	; (8002ddc <Vector98+0x5c>)
 8002d9e:	0409      	lsls	r1, r1, #16
 8002da0:	f7fe fa46 	bl	8001230 <chEvtBroadcastFlagsI>
 8002da4:	2300      	movs	r3, #0
 8002da6:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_sce_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 8002daa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  OSAL_IRQ_PROLOGUE();

  can_lld_sce_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
 8002dae:	f7fd bfbf 	b.w	8000d30 <_port_irq_epilogue>
  canp->can->MSR = msr;

  /* Wakeup event.*/
#if CAN_USE_SLEEP_MODE
  if (msr & CAN_MSR_WKUI) {
    canp->state = CAN_READY;
 8002db2:	4628      	mov	r0, r5
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 8002db4:	681a      	ldr	r2, [r3, #0]
  canp->can->MSR = msr;

  /* Wakeup event.*/
#if CAN_USE_SLEEP_MODE
  if (msr & CAN_MSR_WKUI) {
    canp->state = CAN_READY;
 8002db6:	2103      	movs	r1, #3
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 8002db8:	f022 0202 	bic.w	r2, r2, #2
  canp->can->MSR = msr;

  /* Wakeup event.*/
#if CAN_USE_SLEEP_MODE
  if (msr & CAN_MSR_WKUI) {
    canp->state = CAN_READY;
 8002dbc:	f800 1b28 	strb.w	r1, [r0], #40
 8002dc0:	2120      	movs	r1, #32
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	f381 8811 	msr	BASEPRI, r1
 8002dc8:	2100      	movs	r1, #0
 8002dca:	f7fe fa31 	bl	8001230 <chEvtBroadcastFlagsI>
 8002dce:	2300      	movs	r3, #0
 8002dd0:	f383 8811 	msr	BASEPRI, r3
 8002dd4:	e7db      	b.n	8002d8e <Vector98+0xe>
 8002dd6:	bf00      	nop
 8002dd8:	200009ec 	.word	0x200009ec
 8002ddc:	20000a0c 	.word	0x20000a0c

08002de0 <VectorD4>:
/**
 * @brief   USART1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8002de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
 8002de4:	4f4b      	ldr	r7, [pc, #300]	; (8002f14 <VectorD4+0x134>)
 8002de6:	f8d7 52ac 	ldr.w	r5, [r7, #684]	; 0x2ac
  uint16_t cr1 = u->CR1;
 8002dea:	f8d5 800c 	ldr.w	r8, [r5, #12]
  uint16_t sr = u->SR;
 8002dee:	682b      	ldr	r3, [r5, #0]

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 8002df0:	05de      	lsls	r6, r3, #23
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
  uint16_t cr1 = u->CR1;
  uint16_t sr = u->SR;
 8002df2:	b29c      	uxth	r4, r3

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 8002df4:	d45e      	bmi.n	8002eb4 <VectorD4+0xd4>
 8002df6:	2320      	movs	r3, #32
 8002df8:	f383 8811 	msr	BASEPRI, r3
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8002dfc:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8002e00:	d108      	bne.n	8002e14 <VectorD4+0x34>
 8002e02:	e031      	b.n	8002e68 <VectorD4+0x88>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
    if (sr & USART_SR_RXNE)
 8002e04:	06a0      	lsls	r0, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
 8002e06:	686e      	ldr	r6, [r5, #4]
    if (sr & USART_SR_RXNE)
 8002e08:	d41d      	bmi.n	8002e46 <VectorD4+0x66>
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 8002e0a:	682c      	ldr	r4, [r5, #0]
 8002e0c:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8002e0e:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8002e12:	d029      	beq.n	8002e68 <VectorD4+0x88>
               USART_SR_PE)) {
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8002e14:	0720      	lsls	r0, r4, #28
 8002e16:	d0f5      	beq.n	8002e04 <VectorD4+0x24>
 */
static void set_error(SerialDriver *sdp, uint16_t sr) {
  eventflags_t sts = 0;

  if (sr & USART_SR_ORE)
    sts |= SD_OVERRUN_ERROR;
 8002e18:	f014 0f08 	tst.w	r4, #8
 8002e1c:	bf0c      	ite	eq
 8002e1e:	2100      	moveq	r1, #0
 8002e20:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 8002e22:	07e2      	lsls	r2, r4, #31
    sts |= SD_PARITY_ERROR;
 8002e24:	bf48      	it	mi
 8002e26:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 8002e2a:	07a3      	lsls	r3, r4, #30
    sts |= SD_FRAMING_ERROR;
 8002e2c:	bf48      	it	mi
 8002e2e:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 8002e32:	0766      	lsls	r6, r4, #29
    sts |= SD_NOISE_ERROR;
 8002e34:	bf48      	it	mi
 8002e36:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 8002e3a:	4837      	ldr	r0, [pc, #220]	; (8002f18 <VectorD4+0x138>)
 8002e3c:	f7fe f9f8 	bl	8001230 <chEvtBroadcastFlagsI>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
    if (sr & USART_SR_RXNE)
 8002e40:	06a0      	lsls	r0, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
 8002e42:	686e      	ldr	r6, [r5, #4]
    if (sr & USART_SR_RXNE)
 8002e44:	d5e1      	bpl.n	8002e0a <VectorD4+0x2a>
 8002e46:	697b      	ldr	r3, [r7, #20]
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8002e48:	b37b      	cbz	r3, 8002eaa <VectorD4+0xca>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < Q_OK)
 8002e4a:	b2f1      	uxtb	r1, r6
 8002e4c:	4833      	ldr	r0, [pc, #204]	; (8002f1c <VectorD4+0x13c>)
 8002e4e:	f7fe f95f 	bl	8001110 <chIQPutI>
 8002e52:	2800      	cmp	r0, #0
 8002e54:	dad9      	bge.n	8002e0a <VectorD4+0x2a>
 8002e56:	4830      	ldr	r0, [pc, #192]	; (8002f18 <VectorD4+0x138>)
 8002e58:	2180      	movs	r1, #128	; 0x80
 8002e5a:	f7fe f9e9 	bl	8001230 <chEvtBroadcastFlagsI>
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 8002e5e:	682c      	ldr	r4, [r5, #0]
 8002e60:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8002e62:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8002e66:	d1d5      	bne.n	8002e14 <VectorD4+0x34>
 8002e68:	2300      	movs	r3, #0
 8002e6a:	f383 8811 	msr	BASEPRI, r3
    sr = u->SR;
  }
  osalSysUnlockFromISR();

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8002e6e:	f018 0f80 	tst.w	r8, #128	; 0x80
 8002e72:	d001      	beq.n	8002e78 <VectorD4+0x98>
 8002e74:	0622      	lsls	r2, r4, #24
 8002e76:	d42c      	bmi.n	8002ed2 <VectorD4+0xf2>
      u->DR = b;
    osalSysUnlockFromISR();
  }

  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
 8002e78:	0663      	lsls	r3, r4, #25
 8002e7a:	d512      	bpl.n	8002ea2 <VectorD4+0xc2>
 8002e7c:	2320      	movs	r3, #32
 8002e7e:	f383 8811 	msr	BASEPRI, r3
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 8002e82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e86:	4823      	ldr	r0, [pc, #140]	; (8002f14 <VectorD4+0x134>)
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d02f      	beq.n	8002eec <VectorD4+0x10c>
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8002e8c:	f64f 73bf 	movw	r3, #65471	; 0xffbf
    u->SR = ~USART_SR_TC;
 8002e90:	f06f 0240 	mvn.w	r2, #64	; 0x40
  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8002e94:	ea08 0303 	and.w	r3, r8, r3
 8002e98:	60eb      	str	r3, [r5, #12]
 8002e9a:	2300      	movs	r3, #0
    u->SR = ~USART_SR_TC;
 8002e9c:	602a      	str	r2, [r5, #0]
 8002e9e:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD1);

  OSAL_IRQ_EPILOGUE();
}
 8002ea2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD1);

  OSAL_IRQ_EPILOGUE();
 8002ea6:	f7fd bf43 	b.w	8000d30 <_port_irq_epilogue>
 8002eaa:	481b      	ldr	r0, [pc, #108]	; (8002f18 <VectorD4+0x138>)
 8002eac:	2104      	movs	r1, #4
 8002eae:	f7fe f9bf 	bl	8001230 <chEvtBroadcastFlagsI>
 8002eb2:	e7ca      	b.n	8002e4a <VectorD4+0x6a>
 8002eb4:	2320      	movs	r3, #32
 8002eb6:	f383 8811 	msr	BASEPRI, r3
 8002eba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ebe:	1d38      	adds	r0, r7, #4
 8002ec0:	f7fe f9b6 	bl	8001230 <chEvtBroadcastFlagsI>

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
    osalSysLockFromISR();
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
    u->SR = ~USART_SR_LBD;
 8002ec4:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8002ec8:	602b      	str	r3, [r5, #0]
 8002eca:	2300      	movs	r3, #0
 8002ecc:	f383 8811 	msr	BASEPRI, r3
 8002ed0:	e791      	b.n	8002df6 <VectorD4+0x16>
 8002ed2:	2320      	movs	r3, #32
 8002ed4:	f383 8811 	msr	BASEPRI, r3

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
 8002ed8:	4811      	ldr	r0, [pc, #68]	; (8002f20 <VectorD4+0x140>)
 8002eda:	f7fe f949 	bl	8001170 <chOQGetI>
    if (b < Q_OK) {
 8002ede:	2800      	cmp	r0, #0
 8002ee0:	db0c      	blt.n	8002efc <VectorD4+0x11c>
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
    }
    else
      u->DR = b;
 8002ee2:	6068      	str	r0, [r5, #4]
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	f383 8811 	msr	BASEPRI, r3
 8002eea:	e7c5      	b.n	8002e78 <VectorD4+0x98>
 8002eec:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0cc      	beq.n	8002e8c <VectorD4+0xac>
 8002ef2:	3004      	adds	r0, #4
 8002ef4:	2110      	movs	r1, #16
 8002ef6:	f7fe f99b 	bl	8001230 <chEvtBroadcastFlagsI>
 8002efa:	e7c7      	b.n	8002e8c <VectorD4+0xac>
 8002efc:	4806      	ldr	r0, [pc, #24]	; (8002f18 <VectorD4+0x138>)
 8002efe:	2108      	movs	r1, #8
 8002f00:	f7fe f996 	bl	8001230 <chEvtBroadcastFlagsI>
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
    if (b < Q_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 8002f04:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8002f08:	ea08 0303 	and.w	r3, r8, r3
 8002f0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f10:	60eb      	str	r3, [r5, #12]
 8002f12:	e7e7      	b.n	8002ee4 <VectorD4+0x104>
 8002f14:	20000d58 	.word	0x20000d58
 8002f18:	20000d5c 	.word	0x20000d5c
 8002f1c:	20000d64 	.word	0x20000d64
 8002f20:	20000d88 	.word	0x20000d88
	...

08002f30 <Vector94>:
/**
 * @brief   CAN1 RX1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_RX1_HANDLER) {
 8002f30:	b538      	push	{r3, r4, r5, lr}
 * @notapi
 */
static void can_lld_rx1_handler(CANDriver *canp) {
  uint32_t rf1r;

  rf1r = canp->can->RF1R;
 8002f32:	4d16      	ldr	r5, [pc, #88]	; (8002f8c <Vector94+0x5c>)
 8002f34:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002f36:	691c      	ldr	r4, [r3, #16]
  if ((rf1r & CAN_RF1R_FMP1) > 0) {
 8002f38:	07a2      	lsls	r2, r4, #30
 8002f3a:	d111      	bne.n	8002f60 <Vector94+0x30>
    osalSysLockFromISR();
    osalThreadDequeueAllI(&canp->rxqueue, MSG_OK);
    osalEventBroadcastFlagsI(&canp->rxfull_event, CAN_MAILBOX_TO_MASK(2U));
    osalSysUnlockFromISR();
  }
  if ((rf1r & CAN_RF1R_FOVR1) > 0) {
 8002f3c:	06e3      	lsls	r3, r4, #27
 8002f3e:	d50b      	bpl.n	8002f58 <Vector94+0x28>
    /* Overflow events handling.*/
    canp->can->RF1R = CAN_RF1R_FOVR1;
 8002f40:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002f42:	2110      	movs	r1, #16
 8002f44:	6119      	str	r1, [r3, #16]
 8002f46:	2320      	movs	r3, #32
 8002f48:	f383 8811 	msr	BASEPRI, r3
 8002f4c:	4810      	ldr	r0, [pc, #64]	; (8002f90 <Vector94+0x60>)
 8002f4e:	f7fe f96f 	bl	8001230 <chEvtBroadcastFlagsI>
 8002f52:	2300      	movs	r3, #0
 8002f54:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_rx1_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 8002f58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  OSAL_IRQ_PROLOGUE();

  can_lld_rx1_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
 8002f5c:	f7fd bee8 	b.w	8000d30 <_port_irq_epilogue>
  uint32_t rf1r;

  rf1r = canp->can->RF1R;
  if ((rf1r & CAN_RF1R_FMP1) > 0) {
    /* No more receive events until the queue 0 has been emptied.*/
    canp->can->IER &= ~CAN_IER_FMPIE1;
 8002f60:	695a      	ldr	r2, [r3, #20]
 8002f62:	2120      	movs	r1, #32
 8002f64:	f022 0210 	bic.w	r2, r2, #16
 8002f68:	615a      	str	r2, [r3, #20]
 8002f6a:	f381 8811 	msr	BASEPRI, r1
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 8002f6e:	2100      	movs	r1, #0
 8002f70:	f105 0010 	add.w	r0, r5, #16
 8002f74:	f7fe fc24 	bl	80017c0 <chThdDequeueAllI>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8002f78:	f105 0018 	add.w	r0, r5, #24
 8002f7c:	2102      	movs	r1, #2
 8002f7e:	f7fe f957 	bl	8001230 <chEvtBroadcastFlagsI>
 8002f82:	2300      	movs	r3, #0
 8002f84:	f383 8811 	msr	BASEPRI, r3
 8002f88:	e7d8      	b.n	8002f3c <Vector94+0xc>
 8002f8a:	bf00      	nop
 8002f8c:	200009ec 	.word	0x200009ec
 8002f90:	20000a0c 	.word	0x20000a0c
	...

08002fa0 <Vector90>:
/*
 * @brief   CAN1 RX0 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_RX0_HANDLER) {
 8002fa0:	b538      	push	{r3, r4, r5, lr}
 * @notapi
 */
static void can_lld_rx0_handler(CANDriver *canp) {
  uint32_t rf0r;

  rf0r = canp->can->RF0R;
 8002fa2:	4d16      	ldr	r5, [pc, #88]	; (8002ffc <Vector90+0x5c>)
 8002fa4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002fa6:	68dc      	ldr	r4, [r3, #12]
  if ((rf0r & CAN_RF0R_FMP0) > 0) {
 8002fa8:	07a2      	lsls	r2, r4, #30
 8002faa:	d111      	bne.n	8002fd0 <Vector90+0x30>
    osalSysLockFromISR();
    osalThreadDequeueAllI(&canp->rxqueue, MSG_OK);
    osalEventBroadcastFlagsI(&canp->rxfull_event, CAN_MAILBOX_TO_MASK(1U));
    osalSysUnlockFromISR();
  }
  if ((rf0r & CAN_RF0R_FOVR0) > 0) {
 8002fac:	06e3      	lsls	r3, r4, #27
 8002fae:	d50b      	bpl.n	8002fc8 <Vector90+0x28>
    /* Overflow events handling.*/
    canp->can->RF0R = CAN_RF0R_FOVR0;
 8002fb0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002fb2:	2110      	movs	r1, #16
 8002fb4:	60d9      	str	r1, [r3, #12]
 8002fb6:	2320      	movs	r3, #32
 8002fb8:	f383 8811 	msr	BASEPRI, r3
 8002fbc:	4810      	ldr	r0, [pc, #64]	; (8003000 <Vector90+0x60>)
 8002fbe:	f7fe f937 	bl	8001230 <chEvtBroadcastFlagsI>
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_rx0_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 8002fc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  OSAL_IRQ_PROLOGUE();

  can_lld_rx0_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
 8002fcc:	f7fd beb0 	b.w	8000d30 <_port_irq_epilogue>
  uint32_t rf0r;

  rf0r = canp->can->RF0R;
  if ((rf0r & CAN_RF0R_FMP0) > 0) {
    /* No more receive events until the queue 0 has been emptied.*/
    canp->can->IER &= ~CAN_IER_FMPIE0;
 8002fd0:	695a      	ldr	r2, [r3, #20]
 8002fd2:	2120      	movs	r1, #32
 8002fd4:	f022 0202 	bic.w	r2, r2, #2
 8002fd8:	615a      	str	r2, [r3, #20]
 8002fda:	f381 8811 	msr	BASEPRI, r1
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 8002fde:	2100      	movs	r1, #0
 8002fe0:	f105 0010 	add.w	r0, r5, #16
 8002fe4:	f7fe fbec 	bl	80017c0 <chThdDequeueAllI>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8002fe8:	f105 0018 	add.w	r0, r5, #24
 8002fec:	2101      	movs	r1, #1
 8002fee:	f7fe f91f 	bl	8001230 <chEvtBroadcastFlagsI>
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	f383 8811 	msr	BASEPRI, r3
 8002ff8:	e7d8      	b.n	8002fac <Vector90+0xc>
 8002ffa:	bf00      	nop
 8002ffc:	200009ec 	.word	0x200009ec
 8003000:	20000a0c 	.word	0x20000a0c
	...

08003010 <Vector8C>:
static void can_lld_tx_handler(CANDriver *canp) {
  uint32_t tsr;
  eventflags_t flags;

  /* Clearing IRQ sources.*/
  tsr = canp->can->TSR;
 8003010:	4b18      	ldr	r3, [pc, #96]	; (8003074 <Vector8C+0x64>)
/**
 * @brief   CAN1 TX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_TX_HANDLER) {
 8003012:	b510      	push	{r4, lr}
static void can_lld_tx_handler(CANDriver *canp) {
  uint32_t tsr;
  eventflags_t flags;

  /* Clearing IRQ sources.*/
  tsr = canp->can->TSR;
 8003014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003016:	6893      	ldr	r3, [r2, #8]

  /* Flags to be signaled through the TX event source.*/
  flags = 0U;

  /* Checking mailbox 0.*/
  if ((tsr & CAN_TSR_RQCP0) != 0U) {
 8003018:	f013 0401 	ands.w	r4, r3, #1
  uint32_t tsr;
  eventflags_t flags;

  /* Clearing IRQ sources.*/
  tsr = canp->can->TSR;
  canp->can->TSR = tsr;
 800301c:	6093      	str	r3, [r2, #8]

  /* Flags to be signaled through the TX event source.*/
  flags = 0U;

  /* Checking mailbox 0.*/
  if ((tsr & CAN_TSR_RQCP0) != 0U) {
 800301e:	d005      	beq.n	800302c <Vector8C+0x1c>
    if ((tsr & (CAN_TSR_ALST0 | CAN_TSR_TERR0)) != 0U) {
      flags |= CAN_MAILBOX_TO_MASK(1U) << 16U;
    }
    else {
      flags |= CAN_MAILBOX_TO_MASK(1U);
 8003020:	f013 0f0c 	tst.w	r3, #12
 8003024:	bf14      	ite	ne
 8003026:	f44f 3480 	movne.w	r4, #65536	; 0x10000
 800302a:	2401      	moveq	r4, #1
    }
  }

  /* Checking mailbox 1.*/
  if ((tsr & CAN_TSR_RQCP1) != 0U) {
 800302c:	05d9      	lsls	r1, r3, #23
 800302e:	d506      	bpl.n	800303e <Vector8C+0x2e>
    if ((tsr & (CAN_TSR_ALST1 | CAN_TSR_TERR1)) != 0U) {
 8003030:	f413 6f40 	tst.w	r3, #3072	; 0xc00
      flags |= CAN_MAILBOX_TO_MASK(2U) << 16U;
 8003034:	bf14      	ite	ne
 8003036:	f444 3400 	orrne.w	r4, r4, #131072	; 0x20000
    }
    else {
      flags |= CAN_MAILBOX_TO_MASK(2U);
 800303a:	f044 0402 	orreq.w	r4, r4, #2
    }
  }

  /* Checking mailbox 2.*/
  if ((tsr & CAN_TSR_RQCP2) != 0U) {
 800303e:	03da      	lsls	r2, r3, #15
 8003040:	d506      	bpl.n	8003050 <Vector8C+0x40>
    if ((tsr & (CAN_TSR_ALST2 | CAN_TSR_TERR2)) != 0U) {
 8003042:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
      flags |= CAN_MAILBOX_TO_MASK(3U) << 16U;
 8003046:	bf14      	ite	ne
 8003048:	f444 2480 	orrne.w	r4, r4, #262144	; 0x40000
    }
    else {
      flags |= CAN_MAILBOX_TO_MASK(3U);
 800304c:	f044 0404 	orreq.w	r4, r4, #4
 8003050:	2320      	movs	r3, #32
 8003052:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 8003056:	4808      	ldr	r0, [pc, #32]	; (8003078 <Vector8C+0x68>)
 8003058:	2100      	movs	r1, #0
 800305a:	f7fe fbb1 	bl	80017c0 <chThdDequeueAllI>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 800305e:	4621      	mov	r1, r4
 8003060:	4806      	ldr	r0, [pc, #24]	; (800307c <Vector8C+0x6c>)
 8003062:	f7fe f8e5 	bl	8001230 <chEvtBroadcastFlagsI>
 8003066:	2300      	movs	r3, #0
 8003068:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_tx_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 800306c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  can_lld_tx_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
 8003070:	f7fd be5e 	b.w	8000d30 <_port_irq_epilogue>
 8003074:	200009ec 	.word	0x200009ec
 8003078:	200009f4 	.word	0x200009f4
 800307c:	20000a08 	.word	0x20000a08

08003080 <adc_lld_serve_rx_interrupt.lto_priv.92>:
 * @brief   Shared ADC DMA ISR service routine.
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void adc_lld_serve_rx_interrupt(ADCDriver *adcp, uint32_t flags) {
 8003080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* DMA errors handling.*/
  if ((flags & STM32_DMA_ISR_TEIF) != 0) {
 8003084:	070d      	lsls	r5, r1, #28
 * @brief   Shared ADC DMA ISR service routine.
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void adc_lld_serve_rx_interrupt(ADCDriver *adcp, uint32_t flags) {
 8003086:	4604      	mov	r4, r0

  /* DMA errors handling.*/
  if ((flags & STM32_DMA_ISR_TEIF) != 0) {
 8003088:	d52b      	bpl.n	80030e2 <adc_lld_serve_rx_interrupt.lto_priv.92+0x62>
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 800308a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c

  /* DMA errors handling.*/
  if ((flags & STM32_DMA_ISR_TEIF) != 0) {
    /* DMA, this could help only if the DMA tries to access an unmapped
       address space or violates alignment rules.*/
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 800308c:	6907      	ldr	r7, [r0, #16]
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 800308e:	6855      	ldr	r5, [r2, #4]
 8003090:	6816      	ldr	r6, [r2, #0]
 8003092:	6829      	ldr	r1, [r5, #0]
 8003094:	230f      	movs	r3, #15
 8003096:	f021 010f 	bic.w	r1, r1, #15
 800309a:	6029      	str	r1, [r5, #0]
 800309c:	7c11      	ldrb	r1, [r2, #16]
  adcp->adc->CR2 = 0;
 800309e:	6a85      	ldr	r5, [r0, #40]	; 0x28

  /* DMA errors handling.*/
  if ((flags & STM32_DMA_ISR_TEIF) != 0) {
    /* DMA, this could help only if the DMA tries to access an unmapped
       address space or violates alignment rules.*/
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 80030a0:	68ba      	ldr	r2, [r7, #8]
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 80030a2:	408b      	lsls	r3, r1
  adcp->adc->CR2 = 0;
 80030a4:	2100      	movs	r1, #0
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 80030a6:	6073      	str	r3, [r6, #4]
  adcp->adc->CR2 = 0;
 80030a8:	60a9      	str	r1, [r5, #8]

  /* DMA errors handling.*/
  if ((flags & STM32_DMA_ISR_TEIF) != 0) {
    /* DMA, this could help only if the DMA tries to access an unmapped
       address space or violates alignment rules.*/
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 80030aa:	b13a      	cbz	r2, 80030bc <adc_lld_serve_rx_interrupt.lto_priv.92+0x3c>
 80030ac:	2305      	movs	r3, #5
 80030ae:	7003      	strb	r3, [r0, #0]
 80030b0:	4790      	blx	r2
 80030b2:	7823      	ldrb	r3, [r4, #0]
 80030b4:	2b05      	cmp	r3, #5
 80030b6:	bf04      	itt	eq
 80030b8:	2302      	moveq	r3, #2
 80030ba:	7023      	strbeq	r3, [r4, #0]
 80030bc:	2200      	movs	r2, #0
 80030be:	6122      	str	r2, [r4, #16]
 80030c0:	2320      	movs	r3, #32
 80030c2:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 80030c6:	6963      	ldr	r3, [r4, #20]
 80030c8:	b133      	cbz	r3, 80030d8 <adc_lld_serve_rx_interrupt.lto_priv.92+0x58>

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
    tp->p_u.rdymsg = msg;
 80030ca:	f04f 31ff 	mov.w	r1, #4294967295
    thread_t *tp = *trp;

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
 80030ce:	6162      	str	r2, [r4, #20]
    tp->p_u.rdymsg = msg;
    (void) chSchReadyI(tp);
 80030d0:	4618      	mov	r0, r3

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
    tp->p_u.rdymsg = msg;
 80030d2:	6219      	str	r1, [r3, #32]
    (void) chSchReadyI(tp);
 80030d4:	f7fe f804 	bl	80010e0 <chSchReadyI>
 80030d8:	2300      	movs	r3, #0
 80030da:	f383 8811 	msr	BASEPRI, r3
 80030de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  else {
    if ((flags & STM32_DMA_ISR_TCIF) != 0) {
 80030e2:	078a      	lsls	r2, r1, #30
 80030e4:	d52a      	bpl.n	800313c <adc_lld_serve_rx_interrupt.lto_priv.92+0xbc>
      /* Transfer complete processing.*/
      _adc_isr_full_code(adcp);
 80030e6:	6903      	ldr	r3, [r0, #16]
 80030e8:	781a      	ldrb	r2, [r3, #0]
 80030ea:	2a00      	cmp	r2, #0
 80030ec:	d133      	bne.n	8003156 <adc_lld_serve_rx_interrupt.lto_priv.92+0xd6>
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 80030ee:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
  }
  else {
    if ((flags & STM32_DMA_ISR_TCIF) != 0) {
      /* Transfer complete processing.*/
      _adc_isr_full_code(adcp);
 80030f0:	685f      	ldr	r7, [r3, #4]
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 80030f2:	684e      	ldr	r6, [r1, #4]
 80030f4:	f8d1 e000 	ldr.w	lr, [r1]
 80030f8:	6835      	ldr	r5, [r6, #0]
 80030fa:	230f      	movs	r3, #15
 80030fc:	f025 050f 	bic.w	r5, r5, #15
 8003100:	6035      	str	r5, [r6, #0]
 8003102:	7c0d      	ldrb	r5, [r1, #16]
  adcp->adc->CR2 = 0;
 8003104:	6a81      	ldr	r1, [r0, #40]	; 0x28
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8003106:	40ab      	lsls	r3, r5
 8003108:	f8ce 3004 	str.w	r3, [lr, #4]
  adcp->adc->CR2 = 0;
 800310c:	608a      	str	r2, [r1, #8]
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
  }
  else {
    if ((flags & STM32_DMA_ISR_TCIF) != 0) {
      /* Transfer complete processing.*/
      _adc_isr_full_code(adcp);
 800310e:	2f00      	cmp	r7, #0
 8003110:	d032      	beq.n	8003178 <adc_lld_serve_rx_interrupt.lto_priv.92+0xf8>
 8003112:	2304      	movs	r3, #4
 8003114:	7003      	strb	r3, [r0, #0]
 8003116:	6881      	ldr	r1, [r0, #8]
 8003118:	68c2      	ldr	r2, [r0, #12]
 800311a:	47b8      	blx	r7
 800311c:	7823      	ldrb	r3, [r4, #0]
 800311e:	2b04      	cmp	r3, #4
 8003120:	d02a      	beq.n	8003178 <adc_lld_serve_rx_interrupt.lto_priv.92+0xf8>
 8003122:	2320      	movs	r3, #32
 8003124:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 8003128:	6963      	ldr	r3, [r4, #20]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0d4      	beq.n	80030d8 <adc_lld_serve_rx_interrupt.lto_priv.92+0x58>
    thread_t *tp = *trp;

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
 800312e:	2200      	movs	r2, #0
 8003130:	6162      	str	r2, [r4, #20]
    tp->p_u.rdymsg = msg;
    (void) chSchReadyI(tp);
 8003132:	4618      	mov	r0, r3

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
    tp->p_u.rdymsg = msg;
 8003134:	621a      	str	r2, [r3, #32]
    (void) chSchReadyI(tp);
 8003136:	f7fd ffd3 	bl	80010e0 <chSchReadyI>
 800313a:	e7cd      	b.n	80030d8 <adc_lld_serve_rx_interrupt.lto_priv.92+0x58>
    }
    else if ((flags & STM32_DMA_ISR_HTIF) != 0) {
 800313c:	074b      	lsls	r3, r1, #29
 800313e:	d508      	bpl.n	8003152 <adc_lld_serve_rx_interrupt.lto_priv.92+0xd2>
      /* Half transfer processing.*/
      _adc_isr_half_code(adcp);
 8003140:	6903      	ldr	r3, [r0, #16]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	b12b      	cbz	r3, 8003152 <adc_lld_serve_rx_interrupt.lto_priv.92+0xd2>
    }
  }
}
 8003146:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      /* Transfer complete processing.*/
      _adc_isr_full_code(adcp);
    }
    else if ((flags & STM32_DMA_ISR_HTIF) != 0) {
      /* Half transfer processing.*/
      _adc_isr_half_code(adcp);
 800314a:	68c2      	ldr	r2, [r0, #12]
 800314c:	6881      	ldr	r1, [r0, #8]
 800314e:	0852      	lsrs	r2, r2, #1
 8003150:	4718      	bx	r3
 8003152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
  }
  else {
    if ((flags & STM32_DMA_ISR_TCIF) != 0) {
      /* Transfer complete processing.*/
      _adc_isr_full_code(adcp);
 8003156:	685d      	ldr	r5, [r3, #4]
 8003158:	2d00      	cmp	r5, #0
 800315a:	d0fa      	beq.n	8003152 <adc_lld_serve_rx_interrupt.lto_priv.92+0xd2>
 800315c:	68c2      	ldr	r2, [r0, #12]
 800315e:	2a01      	cmp	r2, #1
 8003160:	d90f      	bls.n	8003182 <adc_lld_serve_rx_interrupt.lto_priv.92+0x102>
 8003162:	885b      	ldrh	r3, [r3, #2]
 8003164:	0852      	lsrs	r2, r2, #1
 8003166:	fb03 f302 	mul.w	r3, r3, r2
 800316a:	6881      	ldr	r1, [r0, #8]
 800316c:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8003170:	462b      	mov	r3, r5
    else if ((flags & STM32_DMA_ISR_HTIF) != 0) {
      /* Half transfer processing.*/
      _adc_isr_half_code(adcp);
    }
  }
}
 8003172:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
  }
  else {
    if ((flags & STM32_DMA_ISR_TCIF) != 0) {
      /* Transfer complete processing.*/
      _adc_isr_full_code(adcp);
 8003176:	4718      	bx	r3
 8003178:	2202      	movs	r2, #2
 800317a:	2300      	movs	r3, #0
 800317c:	7022      	strb	r2, [r4, #0]
 800317e:	6123      	str	r3, [r4, #16]
 8003180:	e7cf      	b.n	8003122 <adc_lld_serve_rx_interrupt.lto_priv.92+0xa2>
 8003182:	462b      	mov	r3, r5
    else if ((flags & STM32_DMA_ISR_HTIF) != 0) {
      /* Half transfer processing.*/
      _adc_isr_half_code(adcp);
    }
  }
}
 8003184:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
  }
  else {
    if ((flags & STM32_DMA_ISR_TCIF) != 0) {
      /* Transfer complete processing.*/
      _adc_isr_full_code(adcp);
 8003188:	6881      	ldr	r1, [r0, #8]
 800318a:	4718      	bx	r3
 800318c:	0000      	movs	r0, r0
	...

08003190 <readt.lto_priv.90>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8003190:	300c      	adds	r0, #12
 8003192:	f7fe bca5 	b.w	8001ae0 <chIQReadTimeout>
 8003196:	bf00      	nop
	...

080031a0 <read.lto_priv.84>:
                        n, TIME_INFINITE);
}

static size_t read(void *ip, uint8_t *bp, size_t n) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 80031a0:	300c      	adds	r0, #12
 80031a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031a6:	f7fe bc9b 	b.w	8001ae0 <chIQReadTimeout>
 80031aa:	bf00      	nop
 80031ac:	0000      	movs	r0, r0
	...

080031b0 <writet.lto_priv.89>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
}

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 80031b0:	3030      	adds	r0, #48	; 0x30
 80031b2:	f7fe bc25 	b.w	8001a00 <chOQWriteTimeout>
 80031b6:	bf00      	nop
	...

080031c0 <write.lto_priv.83>:
 * queue-level function or macro.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 80031c0:	3030      	adds	r0, #48	; 0x30
 80031c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031c6:	f7fe bc1b 	b.w	8001a00 <chOQWriteTimeout>
 80031ca:	bf00      	nop
 80031cc:	0000      	movs	r0, r0
	...

080031d0 <gett.lto_priv.88>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
}

static msg_t gett(void *ip, systime_t timeout) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 80031d0:	300c      	adds	r0, #12
 80031d2:	f7fe bcc5 	b.w	8001b60 <chIQGetTimeout>
 80031d6:	bf00      	nop
	...

080031e0 <get.lto_priv.86>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t get(void *ip) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 80031e0:	300c      	adds	r0, #12
 80031e2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80031e6:	f7fe bcbb 	b.w	8001b60 <chIQGetTimeout>
 80031ea:	bf00      	nop
 80031ec:	0000      	movs	r0, r0
	...

080031f0 <putt.lto_priv.87>:
}

static msg_t putt(void *ip, uint8_t b, systime_t timeout) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 80031f0:	3030      	adds	r0, #48	; 0x30
 80031f2:	f7fe bc45 	b.w	8001a80 <chOQPutTimeout>
 80031f6:	bf00      	nop
	...

08003200 <put.lto_priv.85>:
                       n, TIME_INFINITE);
}

static msg_t put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8003200:	3030      	adds	r0, #48	; 0x30
 8003202:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003206:	f7fe bc3b 	b.w	8001a80 <chOQPutTimeout>
 800320a:	bf00      	nop
 800320c:	0000      	movs	r0, r0
	...

08003210 <test_wait_tick>:
/**
 * @brief   Delays execution until next system time tick.
 *
 * @return              The system time.
 */
systime_t test_wait_tick(void) {
 8003210:	b508      	push	{r3, lr}

  chThdSleep(1);
 8003212:	2001      	movs	r0, #1
 8003214:	f7fe fce4 	bl	8001be0 <chThdSleep>
 8003218:	2320      	movs	r3, #32
 800321a:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 800321e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003222:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003224:	2300      	movs	r3, #0
 8003226:	f383 8811 	msr	BASEPRI, r3
  return chVTGetSystemTime();
}
 800322a:	b280      	uxth	r0, r0
 800322c:	bd08      	pop	{r3, pc}
 800322e:	bf00      	nop

08003230 <test_wait_threads>:
}

/**
 * @brief   Waits for the completion of all the test-spawned threads.
 */
void test_wait_threads(void) {
 8003230:	b570      	push	{r4, r5, r6, lr}
 8003232:	4c07      	ldr	r4, [pc, #28]	; (8003250 <test_wait_threads+0x20>)
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
      chThdWait(threads[i]);
      threads[i] = NULL;
 8003234:	2600      	movs	r6, #0
 8003236:	f104 0514 	add.w	r5, r4, #20
 */
void test_wait_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
 800323a:	f854 0b04 	ldr.w	r0, [r4], #4
 800323e:	b118      	cbz	r0, 8003248 <test_wait_threads+0x18>
      chThdWait(threads[i]);
 8003240:	f7fe f9de 	bl	8001600 <chThdWait>
      threads[i] = NULL;
 8003244:	f844 6c04 	str.w	r6, [r4, #-4]
 * @brief   Waits for the completion of all the test-spawned threads.
 */
void test_wait_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
 8003248:	42ac      	cmp	r4, r5
 800324a:	d1f6      	bne.n	800323a <test_wait_threads+0xa>
    if (threads[i] != NULL) {
      chThdWait(threads[i]);
      threads[i] = NULL;
    }
}
 800324c:	bd70      	pop	{r4, r5, r6, pc}
 800324e:	bf00      	nop
 8003250:	20000968 	.word	0x20000968
	...

08003260 <test_terminate_threads>:
 */

/**
 * @brief   Sets a termination request in all the test-spawned threads.
 */
void test_terminate_threads(void) {
 8003260:	4b0a      	ldr	r3, [pc, #40]	; (800328c <test_terminate_threads+0x2c>)
 8003262:	b430      	push	{r4, r5}
 8003264:	f103 0014 	add.w	r0, r3, #20
 8003268:	2520      	movs	r5, #32
 800326a:	2400      	movs	r4, #0
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i])
 800326c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003270:	b13a      	cbz	r2, 8003282 <test_terminate_threads+0x22>
 8003272:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
void chThdTerminate(thread_t *tp) {

  chSysLock();
  tp->p_flags |= CH_FLAG_TERMINATE;
 8003276:	7f51      	ldrb	r1, [r2, #29]
 8003278:	f041 0104 	orr.w	r1, r1, #4
 800327c:	7751      	strb	r1, [r2, #29]
 800327e:	f384 8811 	msr	BASEPRI, r4
 * @brief   Sets a termination request in all the test-spawned threads.
 */
void test_terminate_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
 8003282:	4283      	cmp	r3, r0
 8003284:	d1f2      	bne.n	800326c <test_terminate_threads+0xc>
    if (threads[i])
      chThdTerminate(threads[i]);
}
 8003286:	bc30      	pop	{r4, r5}
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	20000968 	.word	0x20000968

08003290 <_test_assert_time_window>:
    return _test_fail(point);
  clear_tokens();
  return FALSE;
}

bool _test_assert_time_window(unsigned point, systime_t start, systime_t end) {
 8003290:	b410      	push	{r4}
 8003292:	2320      	movs	r3, #32
 8003294:	f383 8811 	msr	BASEPRI, r3
 8003298:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800329c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800329e:	2300      	movs	r3, #0
 80032a0:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chVTIsTimeWithinX(systime_t time,
                                     systime_t start,
                                     systime_t end) {

  return (bool)((systime_t)(time - start) < (systime_t)(end - start));
 80032a4:	1a52      	subs	r2, r2, r1
 80032a6:	1a64      	subs	r4, r4, r1
  return TRUE;
}

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
 80032a8:	b2a1      	uxth	r1, r4
 80032aa:	b292      	uxth	r2, r2
 80032ac:	4291      	cmp	r1, r2
 80032ae:	d306      	bcc.n	80032be <_test_assert_time_window+0x2e>
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 80032b0:	4c05      	ldr	r4, [pc, #20]	; (80032c8 <_test_assert_time_window+0x38>)
  local_fail = TRUE;
 80032b2:	4906      	ldr	r1, [pc, #24]	; (80032cc <_test_assert_time_window+0x3c>)
  failpoint = point;
 80032b4:	4a06      	ldr	r2, [pc, #24]	; (80032d0 <_test_assert_time_window+0x40>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 80032b6:	2301      	movs	r3, #1
 80032b8:	7023      	strb	r3, [r4, #0]
  local_fail = TRUE;
 80032ba:	700b      	strb	r3, [r1, #0]
  failpoint = point;
 80032bc:	6010      	str	r0, [r2, #0]
}

bool _test_assert_time_window(unsigned point, systime_t start, systime_t end) {

  return _test_assert(point, chVTIsSystemTimeWithin(start, end));
}
 80032be:	4618      	mov	r0, r3
 80032c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	200008e4 	.word	0x200008e4
 80032cc:	200008e5 	.word	0x200008e5
 80032d0:	200008fc 	.word	0x200008fc
	...

080032e0 <_test_assert_sequence>:
  if (!condition)
    return _test_fail(point);
  return FALSE;
}

bool _test_assert_sequence(unsigned point, char *expected) {
 80032e0:	b4f0      	push	{r4, r5, r6, r7}
 80032e2:	4e0e      	ldr	r6, [pc, #56]	; (800331c <_test_assert_sequence+0x3c>)
  char *cp = tokens_buffer;
 80032e4:	4f0e      	ldr	r7, [pc, #56]	; (8003320 <_test_assert_sequence+0x40>)
 80032e6:	6835      	ldr	r5, [r6, #0]
 80032e8:	463b      	mov	r3, r7
 80032ea:	e005      	b.n	80032f8 <_test_assert_sequence+0x18>
  while (cp < tokp) {
    if (*cp++ != *expected++)
 80032ec:	f813 4b01 	ldrb.w	r4, [r3], #1
 80032f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80032f4:	4294      	cmp	r4, r2
 80032f6:	d107      	bne.n	8003308 <_test_assert_sequence+0x28>
  return FALSE;
}

bool _test_assert_sequence(unsigned point, char *expected) {
  char *cp = tokens_buffer;
  while (cp < tokp) {
 80032f8:	42ab      	cmp	r3, r5
 80032fa:	d3f7      	bcc.n	80032ec <_test_assert_sequence+0xc>
    if (*cp++ != *expected++)
     return _test_fail(point);
  }
  if (*expected)
 80032fc:	780b      	ldrb	r3, [r1, #0]
 80032fe:	b91b      	cbnz	r3, 8003308 <_test_assert_sequence+0x28>
/*
 * Tokens.
 */
static void clear_tokens(void) {

  tokp = tokens_buffer;
 8003300:	6037      	str	r7, [r6, #0]
  }
  if (*expected)
    return _test_fail(point);
  clear_tokens();
  return FALSE;
}
 8003302:	4618      	mov	r0, r3
 8003304:	bcf0      	pop	{r4, r5, r6, r7}
 8003306:	4770      	bx	lr
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 8003308:	4c06      	ldr	r4, [pc, #24]	; (8003324 <_test_assert_sequence+0x44>)
  local_fail = TRUE;
 800330a:	4907      	ldr	r1, [pc, #28]	; (8003328 <_test_assert_sequence+0x48>)
  failpoint = point;
 800330c:	4a07      	ldr	r2, [pc, #28]	; (800332c <_test_assert_sequence+0x4c>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 800330e:	2301      	movs	r3, #1
 8003310:	7023      	strb	r3, [r4, #0]
  local_fail = TRUE;
  failpoint = point;
 8003312:	6010      	str	r0, [r2, #0]
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
  local_fail = TRUE;
 8003314:	700b      	strb	r3, [r1, #0]
  }
  if (*expected)
    return _test_fail(point);
  clear_tokens();
  return FALSE;
}
 8003316:	4618      	mov	r0, r3
 8003318:	bcf0      	pop	{r4, r5, r6, r7}
 800331a:	4770      	bx	lr
 800331c:	200008e0 	.word	0x200008e0
 8003320:	200008ec 	.word	0x200008ec
 8003324:	200008e4 	.word	0x200008e4
 8003328:	200008e5 	.word	0x200008e5
 800332c:	200008fc 	.word	0x200008fc

08003330 <_test_assert>:
  return TRUE;
}

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
 8003330:	b959      	cbnz	r1, 800334a <_test_assert+0x1a>
  local_fail = TRUE;
  failpoint = point;
  return TRUE;
}

bool _test_assert(unsigned point, bool condition) {
 8003332:	b410      	push	{r4}
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
  local_fail = TRUE;
 8003334:	4906      	ldr	r1, [pc, #24]	; (8003350 <_test_assert+0x20>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 8003336:	4c07      	ldr	r4, [pc, #28]	; (8003354 <_test_assert+0x24>)
  local_fail = TRUE;
  failpoint = point;
 8003338:	4a07      	ldr	r2, [pc, #28]	; (8003358 <_test_assert+0x28>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 800333a:	2301      	movs	r3, #1
 800333c:	7023      	strb	r3, [r4, #0]
  local_fail = TRUE;
  failpoint = point;
 800333e:	6010      	str	r0, [r2, #0]
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
  local_fail = TRUE;
 8003340:	700b      	strb	r3, [r1, #0]
bool _test_assert(unsigned point, bool condition) {

  if (!condition)
    return _test_fail(point);
  return FALSE;
}
 8003342:	4618      	mov	r0, r3
 8003344:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003348:	4770      	bx	lr

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
    return _test_fail(point);
  return FALSE;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	4770      	bx	lr
 8003350:	200008e5 	.word	0x200008e5
 8003354:	200008e4 	.word	0x200008e4
 8003358:	200008fc 	.word	0x200008fc
 800335c:	00000000 	.word	0x00000000

08003360 <test_emit_token>:
/**
 * @brief   Emits a token into the tokens buffer.
 *
 * @param[in] token     the token as a char
 */
void test_emit_token(char token) {
 8003360:	b410      	push	{r4}
 8003362:	2320      	movs	r3, #32
 8003364:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  *tokp++ = token;
 8003368:	4b05      	ldr	r3, [pc, #20]	; (8003380 <test_emit_token+0x20>)
 800336a:	2100      	movs	r1, #0
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	1c54      	adds	r4, r2, #1
 8003370:	7010      	strb	r0, [r2, #0]
 8003372:	601c      	str	r4, [r3, #0]
 8003374:	f381 8811 	msr	BASEPRI, r1
  chSysUnlock();
}
 8003378:	f85d 4b04 	ldr.w	r4, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	200008e0 	.word	0x200008e0
	...

08003390 <test_println>:
/**
 * @brief   Prints a line.
 *
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {
 8003390:	b570      	push	{r4, r5, r6, lr}
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8003392:	7801      	ldrb	r1, [r0, #0]
/**
 * @brief   Prints a line.
 *
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {
 8003394:	4604      	mov	r4, r0
 8003396:	4d09      	ldr	r5, [pc, #36]	; (80033bc <test_println+0x2c>)
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8003398:	b139      	cbz	r1, 80033aa <test_println+0x1a>
    chSequentialStreamPut(chp, *msgp++);
 800339a:	6828      	ldr	r0, [r5, #0]
 800339c:	6803      	ldr	r3, [r0, #0]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80033a2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80033a6:	2900      	cmp	r1, #0
 80033a8:	d1f7      	bne.n	800339a <test_println+0xa>
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {

  test_print(msgp);
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 80033aa:	6828      	ldr	r0, [r5, #0]
 80033ac:	4904      	ldr	r1, [pc, #16]	; (80033c0 <test_println+0x30>)
 80033ae:	6803      	ldr	r3, [r0, #0]
 80033b0:	2202      	movs	r2, #2
 80033b2:	681b      	ldr	r3, [r3, #0]
}
 80033b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {

  test_print(msgp);
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 80033b8:	4718      	bx	r3
 80033ba:	bf00      	nop
 80033bc:	200008e8 	.word	0x200008e8
 80033c0:	080089c0 	.word	0x080089c0
	...

080033d0 <test_print>:
/**
 * @brief   Prints a line without final end-of-line.
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {
 80033d0:	b538      	push	{r3, r4, r5, lr}

  while (*msgp)
 80033d2:	7801      	ldrb	r1, [r0, #0]
/**
 * @brief   Prints a line without final end-of-line.
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {
 80033d4:	4604      	mov	r4, r0

  while (*msgp)
 80033d6:	b141      	cbz	r1, 80033ea <test_print+0x1a>
 80033d8:	4d04      	ldr	r5, [pc, #16]	; (80033ec <test_print+0x1c>)
    chSequentialStreamPut(chp, *msgp++);
 80033da:	6828      	ldr	r0, [r5, #0]
 80033dc:	6803      	ldr	r3, [r0, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80033e2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80033e6:	2900      	cmp	r1, #0
 80033e8:	d1f7      	bne.n	80033da <test_print+0xa>
 80033ea:	bd38      	pop	{r3, r4, r5, pc}
 80033ec:	200008e8 	.word	0x200008e8

080033f0 <test_printn>:
 * @param[in] n         the number to be printed
 */
void test_printn(uint32_t n) {
  char buf[16], *p;

  if (!n)
 80033f0:	b310      	cbz	r0, 8003438 <test_printn+0x48>
/**
 * @brief   Prints a decimal unsigned number.
 *
 * @param[in] n         the number to be printed
 */
void test_printn(uint32_t n) {
 80033f2:	b570      	push	{r4, r5, r6, lr}
 80033f4:	b084      	sub	sp, #16
  char buf[16], *p;

  if (!n)
 80033f6:	466d      	mov	r5, sp
 80033f8:	466c      	mov	r4, sp
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
 80033fa:	4a12      	ldr	r2, [pc, #72]	; (8003444 <test_printn+0x54>)
 80033fc:	fba2 1300 	umull	r1, r3, r2, r0
 8003400:	08db      	lsrs	r3, r3, #3
 8003402:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8003406:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
 800340a:	f100 0130 	add.w	r1, r0, #48	; 0x30
 800340e:	b2c9      	uxtb	r1, r1
 8003410:	f804 1b01 	strb.w	r1, [r4], #1

  if (!n)
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
 8003414:	4618      	mov	r0, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1f0      	bne.n	80033fc <test_printn+0xc>
      *p++ = (n % 10) + '0', n /= 10;
    while (p > buf)
 800341a:	42ac      	cmp	r4, r5
 800341c:	d90a      	bls.n	8003434 <test_printn+0x44>
 800341e:	4e0a      	ldr	r6, [pc, #40]	; (8003448 <test_printn+0x58>)
 8003420:	3c01      	subs	r4, #1
 8003422:	e001      	b.n	8003428 <test_printn+0x38>
 8003424:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
      chSequentialStreamPut(chp, *--p);
 8003428:	6830      	ldr	r0, [r6, #0]
 800342a:	6803      	ldr	r3, [r0, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	4798      	blx	r3
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
    while (p > buf)
 8003430:	42ac      	cmp	r4, r5
 8003432:	d1f7      	bne.n	8003424 <test_printn+0x34>
      chSequentialStreamPut(chp, *--p);
  }
}
 8003434:	b004      	add	sp, #16
 8003436:	bd70      	pop	{r4, r5, r6, pc}
 */
void test_printn(uint32_t n) {
  char buf[16], *p;

  if (!n)
    chSequentialStreamPut(chp, '0');
 8003438:	4b03      	ldr	r3, [pc, #12]	; (8003448 <test_printn+0x58>)
 800343a:	2130      	movs	r1, #48	; 0x30
 800343c:	6818      	ldr	r0, [r3, #0]
 800343e:	6803      	ldr	r3, [r0, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	4718      	bx	r3
 8003444:	cccccccd 	.word	0xcccccccd
 8003448:	200008e8 	.word	0x200008e8
 800344c:	00000000 	.word	0x00000000

08003450 <TestThread>:
/**
 * @brief   Test execution thread function.
 *
 * @param[in] p         pointer to a @p BaseChannel object for test output
 */
void TestThread(void *p) {
 8003450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int i, j;

  chp = p;
 8003454:	4c9f      	ldr	r4, [pc, #636]	; (80036d4 <TestThread+0x284>)
/**
 * @brief   Test execution thread function.
 *
 * @param[in] p         pointer to a @p BaseChannel object for test output
 */
void TestThread(void *p) {
 8003456:	b083      	sub	sp, #12
  int i, j;

  chp = p;
 8003458:	6020      	str	r0, [r4, #0]
  test_println("");
 800345a:	489f      	ldr	r0, [pc, #636]	; (80036d8 <TestThread+0x288>)
 800345c:	f7ff ff98 	bl	8003390 <test_println>
  test_println("*** ChibiOS/RT test suite");
 8003460:	489e      	ldr	r0, [pc, #632]	; (80036dc <TestThread+0x28c>)
 8003462:	f7ff ff95 	bl	8003390 <test_println>
  test_println("***");
 8003466:	4d9e      	ldr	r5, [pc, #632]	; (80036e0 <TestThread+0x290>)
 8003468:	489e      	ldr	r0, [pc, #632]	; (80036e4 <TestThread+0x294>)
 800346a:	f7ff ff91 	bl	8003390 <test_println>
 800346e:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8003470:	6820      	ldr	r0, [r4, #0]
 8003472:	6803      	ldr	r3, [r0, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8003478:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800347c:	2900      	cmp	r1, #0
 800347e:	d1f7      	bne.n	8003470 <TestThread+0x20>
  chp = p;
  test_println("");
  test_println("*** ChibiOS/RT test suite");
  test_println("***");
  test_print("*** Kernel:       ");
  test_println(CH_KERNEL_VERSION);
 8003480:	4899      	ldr	r0, [pc, #612]	; (80036e8 <TestThread+0x298>)
 8003482:	4d9a      	ldr	r5, [pc, #616]	; (80036ec <TestThread+0x29c>)
 8003484:	f7ff ff84 	bl	8003390 <test_println>
 8003488:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 800348a:	6820      	ldr	r0, [r4, #0]
 800348c:	6803      	ldr	r3, [r0, #0]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8003492:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8003496:	2900      	cmp	r1, #0
 8003498:	d1f7      	bne.n	800348a <TestThread+0x3a>
  test_println("*** ChibiOS/RT test suite");
  test_println("***");
  test_print("*** Kernel:       ");
  test_println(CH_KERNEL_VERSION);
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
 800349a:	4895      	ldr	r0, [pc, #596]	; (80036f0 <TestThread+0x2a0>)
 800349c:	4d95      	ldr	r5, [pc, #596]	; (80036f4 <TestThread+0x2a4>)
 800349e:	f7ff ff77 	bl	8003390 <test_println>
 80034a2:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 80034a4:	6820      	ldr	r0, [r4, #0]
 80034a6:	6803      	ldr	r3, [r0, #0]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80034ac:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80034b0:	2900      	cmp	r1, #0
 80034b2:	d1f7      	bne.n	80034a4 <TestThread+0x54>
  test_println(CH_KERNEL_VERSION);
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
#ifdef PORT_COMPILER_NAME
  test_print("*** Compiler:     ");
  test_println(PORT_COMPILER_NAME);
 80034b4:	4890      	ldr	r0, [pc, #576]	; (80036f8 <TestThread+0x2a8>)
 80034b6:	4d91      	ldr	r5, [pc, #580]	; (80036fc <TestThread+0x2ac>)
 80034b8:	f7ff ff6a 	bl	8003390 <test_println>
 80034bc:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 80034be:	6820      	ldr	r0, [r4, #0]
 80034c0:	6803      	ldr	r3, [r0, #0]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80034c6:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80034ca:	2900      	cmp	r1, #0
 80034cc:	d1f7      	bne.n	80034be <TestThread+0x6e>
#ifdef PORT_COMPILER_NAME
  test_print("*** Compiler:     ");
  test_println(PORT_COMPILER_NAME);
#endif
  test_print("*** Architecture: ");
  test_println(PORT_ARCHITECTURE_NAME);
 80034ce:	488c      	ldr	r0, [pc, #560]	; (8003700 <TestThread+0x2b0>)
 80034d0:	4d8c      	ldr	r5, [pc, #560]	; (8003704 <TestThread+0x2b4>)
 80034d2:	f7ff ff5d 	bl	8003390 <test_println>
 80034d6:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 80034d8:	6820      	ldr	r0, [r4, #0]
 80034da:	6803      	ldr	r3, [r0, #0]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80034e0:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80034e4:	2900      	cmp	r1, #0
 80034e6:	d1f7      	bne.n	80034d8 <TestThread+0x88>
#endif
  test_print("*** Architecture: ");
  test_println(PORT_ARCHITECTURE_NAME);
#ifdef PORT_CORE_VARIANT_NAME
  test_print("*** Core Variant: ");
  test_println(PORT_CORE_VARIANT_NAME);
 80034e8:	4887      	ldr	r0, [pc, #540]	; (8003708 <TestThread+0x2b8>)
 80034ea:	4d88      	ldr	r5, [pc, #544]	; (800370c <TestThread+0x2bc>)
 80034ec:	f7ff ff50 	bl	8003390 <test_println>
 80034f0:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 80034f2:	6820      	ldr	r0, [r4, #0]
 80034f4:	6803      	ldr	r3, [r0, #0]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80034fa:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80034fe:	2900      	cmp	r1, #0
 8003500:	d1f7      	bne.n	80034f2 <TestThread+0xa2>
  test_print("*** Core Variant: ");
  test_println(PORT_CORE_VARIANT_NAME);
#endif
#ifdef PORT_INFO
  test_print("*** Port Info:    ");
  test_println(PORT_INFO);
 8003502:	4883      	ldr	r0, [pc, #524]	; (8003710 <TestThread+0x2c0>)
 8003504:	4d83      	ldr	r5, [pc, #524]	; (8003714 <TestThread+0x2c4>)
 8003506:	f7ff ff43 	bl	8003390 <test_println>
 800350a:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 800350c:	6820      	ldr	r0, [r4, #0]
 800350e:	6803      	ldr	r3, [r0, #0]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8003514:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8003518:	2900      	cmp	r1, #0
 800351a:	d1f7      	bne.n	800350c <TestThread+0xbc>
  test_print("*** Port Info:    ");
  test_println(PORT_INFO);
#endif
#ifdef PLATFORM_NAME
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
 800351c:	487e      	ldr	r0, [pc, #504]	; (8003718 <TestThread+0x2c8>)
 800351e:	4d7f      	ldr	r5, [pc, #508]	; (800371c <TestThread+0x2cc>)
 8003520:	f7ff ff36 	bl	8003390 <test_println>
 8003524:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8003526:	6820      	ldr	r0, [r4, #0]
 8003528:	6803      	ldr	r3, [r0, #0]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 800352e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8003532:	2900      	cmp	r1, #0
 8003534:	d1f7      	bne.n	8003526 <TestThread+0xd6>
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
#endif
#ifdef BOARD_NAME
  test_print("*** Test Board:   ");
  test_println(BOARD_NAME);
 8003536:	487a      	ldr	r0, [pc, #488]	; (8003720 <TestThread+0x2d0>)
 8003538:	9100      	str	r1, [sp, #0]
 800353a:	f7ff ff29 	bl	8003390 <test_println>
#endif
  test_println("");
 800353e:	4866      	ldr	r0, [pc, #408]	; (80036d8 <TestThread+0x288>)
 8003540:	f7ff ff26 	bl	8003390 <test_println>

  test_global_fail = FALSE;
 8003544:	4b77      	ldr	r3, [pc, #476]	; (8003724 <TestThread+0x2d4>)
 8003546:	9900      	ldr	r1, [sp, #0]
 8003548:	4f77      	ldr	r7, [pc, #476]	; (8003728 <TestThread+0x2d8>)
 800354a:	7019      	strb	r1, [r3, #0]
 800354c:	4b77      	ldr	r3, [pc, #476]	; (800372c <TestThread+0x2dc>)
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 800354e:	f8df b184 	ldr.w	fp, [pc, #388]	; 80036d4 <TestThread+0x284>
 8003552:	9301      	str	r3, [sp, #4]
 8003554:	9b00      	ldr	r3, [sp, #0]
}

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
 8003556:	2600      	movs	r6, #0
 8003558:	3301      	adds	r3, #1
 800355a:	9300      	str	r3, [sp, #0]

  test_global_fail = FALSE;
  i = 0;
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
 800355c:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
 8003560:	eb07 0886 	add.w	r8, r7, r6, lsl #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 808b 	beq.w	8003680 <TestThread+0x230>
      print_line();
 800356a:	4d71      	ldr	r5, [pc, #452]	; (8003730 <TestThread+0x2e0>)
 800356c:	f7ff fae8 	bl	8002b40 <print_line>
 8003570:	212d      	movs	r1, #45	; 0x2d
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8003572:	6820      	ldr	r0, [r4, #0]
 8003574:	6803      	ldr	r3, [r0, #0]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 800357a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800357e:	2900      	cmp	r1, #0
 8003580:	d1f7      	bne.n	8003572 <TestThread+0x122>
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
 8003582:	9800      	ldr	r0, [sp, #0]
 8003584:	f7ff ff34 	bl	80033f0 <test_printn>
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8003588:	f8db 0000 	ldr.w	r0, [fp]
 800358c:	212e      	movs	r1, #46	; 0x2e
 800358e:	6803      	ldr	r3, [r0, #0]
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
 8003590:	3601      	adds	r6, #1
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	4798      	blx	r3
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
 8003596:	4d67      	ldr	r5, [pc, #412]	; (8003734 <TestThread+0x2e4>)
 8003598:	4630      	mov	r0, r6
 800359a:	f7ff ff29 	bl	80033f0 <test_printn>
 800359e:	2120      	movs	r1, #32
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 80035a0:	6820      	ldr	r0, [r4, #0]
 80035a2:	6803      	ldr	r3, [r0, #0]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80035a8:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80035ac:	2900      	cmp	r1, #0
 80035ae:	d1f7      	bne.n	80035a0 <TestThread+0x150>
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
      test_print(" (");
      test_print(patterns[i][j]->name);
 80035b0:	f8d8 3000 	ldr.w	r3, [r8]
 80035b4:	681d      	ldr	r5, [r3, #0]
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80035b6:	7829      	ldrb	r1, [r5, #0]
 80035b8:	b139      	cbz	r1, 80035ca <TestThread+0x17a>
    chSequentialStreamPut(chp, *msgp++);
 80035ba:	6820      	ldr	r0, [r4, #0]
 80035bc:	6803      	ldr	r3, [r0, #0]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80035c2:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80035c6:	2900      	cmp	r1, #0
 80035c8:	d1f7      	bne.n	80035ba <TestThread+0x16a>
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
      test_print(" (");
      test_print(patterns[i][j]->name);
      test_println(")");
 80035ca:	485b      	ldr	r0, [pc, #364]	; (8003738 <TestThread+0x2e8>)
 80035cc:	f7ff fee0 	bl	8003390 <test_println>
#if DELAY_BETWEEN_TESTS > 0
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
 80035d0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80035d4:	f7fe fb04 	bl	8001be0 <chThdSleep>

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;
 80035d8:	4a58      	ldr	r2, [pc, #352]	; (800373c <TestThread+0x2ec>)
      test_print(patterns[i][j]->name);
      test_println(")");
#if DELAY_BETWEEN_TESTS > 0
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
#endif
      execute_test(patterns[i][j]);
 80035da:	f8d8 a000 	ldr.w	sl, [r8]
static void execute_test(const struct testcase *tcp) {
  int i;

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
 80035de:	2300      	movs	r3, #0
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;
 80035e0:	6013      	str	r3, [r2, #0]
 80035e2:	6053      	str	r3, [r2, #4]
 80035e4:	6093      	str	r3, [r2, #8]
 80035e6:	60d3      	str	r3, [r2, #12]
 80035e8:	6113      	str	r3, [r2, #16]
static void execute_test(const struct testcase *tcp) {
  int i;

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
 80035ea:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8003768 <TestThread+0x318>
/*
 * Tokens.
 */
static void clear_tokens(void) {

  tokp = tokens_buffer;
 80035ee:	4d54      	ldr	r5, [pc, #336]	; (8003740 <TestThread+0x2f0>)
 80035f0:	f8df 915c 	ldr.w	r9, [pc, #348]	; 8003750 <TestThread+0x300>
  clear_tokens();
  local_fail = FALSE;
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;

  if (tcp->setup != NULL)
 80035f4:	f8da 2004 	ldr.w	r2, [sl, #4]
static void execute_test(const struct testcase *tcp) {
  int i;

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
 80035f8:	f888 3000 	strb.w	r3, [r8]
/*
 * Tokens.
 */
static void clear_tokens(void) {

  tokp = tokens_buffer;
 80035fc:	f8c5 9000 	str.w	r9, [r5]
  clear_tokens();
  local_fail = FALSE;
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;

  if (tcp->setup != NULL)
 8003600:	b102      	cbz	r2, 8003604 <TestThread+0x1b4>
    tcp->setup();
 8003602:	4790      	blx	r2
  tcp->execute();
 8003604:	f8da 300c 	ldr.w	r3, [sl, #12]
 8003608:	4798      	blx	r3
  if (tcp->teardown != NULL)
 800360a:	f8da 3008 	ldr.w	r3, [sl, #8]
 800360e:	b103      	cbz	r3, 8003612 <TestThread+0x1c2>
    tcp->teardown();
 8003610:	4798      	blx	r3

  test_wait_threads();
 8003612:	f7ff fe0d 	bl	8003230 <test_wait_threads>
      test_println(")");
#if DELAY_BETWEEN_TESTS > 0
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
#endif
      execute_test(patterns[i][j]);
      if (local_fail) {
 8003616:	f898 3000 	ldrb.w	r3, [r8]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d04f      	beq.n	80036be <TestThread+0x26e>
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
 800361e:	4f49      	ldr	r7, [pc, #292]	; (8003744 <TestThread+0x2f4>)
 8003620:	212d      	movs	r1, #45	; 0x2d
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8003622:	6820      	ldr	r0, [r4, #0]
 8003624:	6803      	ldr	r3, [r0, #0]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 800362a:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 800362e:	2900      	cmp	r1, #0
 8003630:	d1f7      	bne.n	8003622 <TestThread+0x1d2>
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
#endif
      execute_test(patterns[i][j]);
      if (local_fail) {
        test_print("--- Result: FAILURE (#");
        test_printn(failpoint);
 8003632:	4b45      	ldr	r3, [pc, #276]	; (8003748 <TestThread+0x2f8>)
 8003634:	4f45      	ldr	r7, [pc, #276]	; (800374c <TestThread+0x2fc>)
 8003636:	6818      	ldr	r0, [r3, #0]
 8003638:	f7ff feda 	bl	80033f0 <test_printn>
 800363c:	2120      	movs	r1, #32
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 800363e:	6820      	ldr	r0, [r4, #0]
 8003640:	6803      	ldr	r3, [r0, #0]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8003646:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 800364a:	2900      	cmp	r1, #0
 800364c:	d1f7      	bne.n	800363e <TestThread+0x1ee>
}

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
 800364e:	682b      	ldr	r3, [r5, #0]
 8003650:	454b      	cmp	r3, r9
 8003652:	d909      	bls.n	8003668 <TestThread+0x218>
 8003654:	4f3e      	ldr	r7, [pc, #248]	; (8003750 <TestThread+0x300>)
    chSequentialStreamPut(chp, *cp++);
 8003656:	6820      	ldr	r0, [r4, #0]
 8003658:	f817 1b01 	ldrb.w	r1, [r7], #1
 800365c:	6803      	ldr	r3, [r0, #0]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	4798      	blx	r3
}

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
 8003662:	682b      	ldr	r3, [r5, #0]
 8003664:	429f      	cmp	r7, r3
 8003666:	d3f6      	bcc.n	8003656 <TestThread+0x206>
      if (local_fail) {
        test_print("--- Result: FAILURE (#");
        test_printn(failpoint);
        test_print(" [");
        print_tokens();
        test_println("])");
 8003668:	483a      	ldr	r0, [pc, #232]	; (8003754 <TestThread+0x304>)
 800366a:	f7ff fe91 	bl	8003390 <test_println>
 800366e:	9b01      	ldr	r3, [sp, #4]
 8003670:	681f      	ldr	r7, [r3, #0]

  test_global_fail = FALSE;
  i = 0;
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
 8003672:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
 8003676:	eb07 0886 	add.w	r8, r7, r6, lsl #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	f47f af75 	bne.w	800356a <TestThread+0x11a>
#endif
  test_println("");

  test_global_fail = FALSE;
  i = 0;
  while (patterns[i]) {
 8003680:	9b01      	ldr	r3, [sp, #4]
 8003682:	f853 7f04 	ldr.w	r7, [r3, #4]!
 8003686:	9301      	str	r3, [sp, #4]
 8003688:	2f00      	cmp	r7, #0
 800368a:	f47f af63 	bne.w	8003554 <TestThread+0x104>
        test_println("--- Result: SUCCESS");
      j++;
    }
    i++;
  }
  print_line();
 800368e:	f7ff fa57 	bl	8002b40 <print_line>
  test_println("");
 8003692:	4d31      	ldr	r5, [pc, #196]	; (8003758 <TestThread+0x308>)
 8003694:	4810      	ldr	r0, [pc, #64]	; (80036d8 <TestThread+0x288>)
 8003696:	f7ff fe7b 	bl	8003390 <test_println>
 800369a:	2146      	movs	r1, #70	; 0x46
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 800369c:	6820      	ldr	r0, [r4, #0]
 800369e:	6803      	ldr	r3, [r0, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80036a4:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80036a8:	2900      	cmp	r1, #0
 80036aa:	d1f7      	bne.n	800369c <TestThread+0x24c>
    i++;
  }
  print_line();
  test_println("");
  test_print("Final result: ");
  if (test_global_fail)
 80036ac:	4b1d      	ldr	r3, [pc, #116]	; (8003724 <TestThread+0x2d4>)
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	b94b      	cbnz	r3, 80036c6 <TestThread+0x276>
    test_println("FAILURE");
  else
    test_println("SUCCESS");
 80036b2:	482a      	ldr	r0, [pc, #168]	; (800375c <TestThread+0x30c>)
}
 80036b4:	b003      	add	sp, #12
 80036b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_println("");
  test_print("Final result: ");
  if (test_global_fail)
    test_println("FAILURE");
  else
    test_println("SUCCESS");
 80036ba:	f7ff be69 	b.w	8003390 <test_println>
        test_print(" [");
        print_tokens();
        test_println("])");
      }
      else
        test_println("--- Result: SUCCESS");
 80036be:	4828      	ldr	r0, [pc, #160]	; (8003760 <TestThread+0x310>)
 80036c0:	f7ff fe66 	bl	8003390 <test_println>
 80036c4:	e74a      	b.n	800355c <TestThread+0x10c>
  }
  print_line();
  test_println("");
  test_print("Final result: ");
  if (test_global_fail)
    test_println("FAILURE");
 80036c6:	4827      	ldr	r0, [pc, #156]	; (8003764 <TestThread+0x314>)
  else
    test_println("SUCCESS");
}
 80036c8:	b003      	add	sp, #12
 80036ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_println("");
  test_print("Final result: ");
  if (test_global_fail)
    test_println("FAILURE");
  else
    test_println("SUCCESS");
 80036ce:	f7ff be5f 	b.w	8003390 <test_println>
 80036d2:	bf00      	nop
 80036d4:	200008e8 	.word	0x200008e8
 80036d8:	080087a0 	.word	0x080087a0
 80036dc:	08007d80 	.word	0x08007d80
 80036e0:	08007ca0 	.word	0x08007ca0
 80036e4:	08007d9c 	.word	0x08007d9c
 80036e8:	08007dc4 	.word	0x08007dc4
 80036ec:	08007cb4 	.word	0x08007cb4
 80036f0:	08007dcc 	.word	0x08007dcc
 80036f4:	08007cc8 	.word	0x08007cc8
 80036f8:	08007de4 	.word	0x08007de4
 80036fc:	08007cdc 	.word	0x08007cdc
 8003700:	08007e2c 	.word	0x08007e2c
 8003704:	08007cf0 	.word	0x08007cf0
 8003708:	08007e34 	.word	0x08007e34
 800370c:	08007d04 	.word	0x08007d04
 8003710:	08007e40 	.word	0x08007e40
 8003714:	08007d18 	.word	0x08007d18
 8003718:	08007e58 	.word	0x08007e58
 800371c:	08007d2c 	.word	0x08007d2c
 8003720:	08007e84 	.word	0x08007e84
 8003724:	200008e4 	.word	0x200008e4
 8003728:	08007a70 	.word	0x08007a70
 800372c:	08007ae0 	.word	0x08007ae0
 8003730:	08007d40 	.word	0x08007d40
 8003734:	08007d50 	.word	0x08007d50
 8003738:	08007da0 	.word	0x08007da0
 800373c:	20000968 	.word	0x20000968
 8003740:	200008e0 	.word	0x200008e0
 8003744:	08007d54 	.word	0x08007d54
 8003748:	200008fc 	.word	0x200008fc
 800374c:	08007d6c 	.word	0x08007d6c
 8003750:	200008ec 	.word	0x200008ec
 8003754:	08007da4 	.word	0x08007da4
 8003758:	08007d70 	.word	0x08007d70
 800375c:	08007db4 	.word	0x08007db4
 8003760:	08007da8 	.word	0x08007da8
 8003764:	08007dbc 	.word	0x08007dbc
 8003768:	200008e5 	.word	0x200008e5
 800376c:	00000000 	.word	0x00000000

08003770 <__early_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8003770:	4b1f      	ldr	r3, [pc, #124]	; (80037f0 <__early_init+0x80>)
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8003772:	4619      	mov	r1, r3
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	f042 0201 	orr.w	r2, r2, #1
 800377a:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 800377c:	680b      	ldr	r3, [r1, #0]
 800377e:	4a1c      	ldr	r2, [pc, #112]	; (80037f0 <__early_init+0x80>)
 8003780:	079b      	lsls	r3, r3, #30
 8003782:	d5fb      	bpl.n	800377c <__early_init+0xc>
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  RCC->CFGR = 0;                            /* CFGR reset value.            */
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8003784:	4611      	mov	r1, r2
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8003786:	6813      	ldr	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8003788:	2000      	movs	r0, #0
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 800378a:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
 800378e:	6013      	str	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8003790:	6050      	str	r0, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8003792:	684b      	ldr	r3, [r1, #4]
 8003794:	4a16      	ldr	r2, [pc, #88]	; (80037f0 <__early_init+0x80>)
 8003796:	f013 0f0c 	tst.w	r3, #12
 800379a:	d1fa      	bne.n	8003792 <__early_init+0x22>
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
  while (!(RCC->CR & RCC_CR_HSERDY))
 800379c:	4611      	mov	r1, r2
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
 800379e:	6813      	ldr	r3, [r2, #0]
 80037a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a4:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 80037a6:	680b      	ldr	r3, [r1, #0]
 80037a8:	4a11      	ldr	r2, [pc, #68]	; (80037f0 <__early_init+0x80>)
 80037aa:	0398      	lsls	r0, r3, #14
 80037ac:	d5fb      	bpl.n	80037a6 <__early_init+0x36>

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
  RCC->CR   |= RCC_CR_PLLON;
  while (!(RCC->CR & RCC_CR_PLLRDY))
 80037ae:	4611      	mov	r1, r2
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 80037b0:	6853      	ldr	r3, [r2, #4]
 80037b2:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80037b6:	6053      	str	r3, [r2, #4]
  RCC->CR   |= RCC_CR_PLLON;
 80037b8:	6813      	ldr	r3, [r2, #0]
 80037ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037be:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 80037c0:	680b      	ldr	r3, [r1, #0]
 80037c2:	4a0b      	ldr	r2, [pc, #44]	; (80037f0 <__early_init+0x80>)
 80037c4:	019b      	lsls	r3, r3, #6
 80037c6:	d5fb      	bpl.n	80037c0 <__early_init+0x50>

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 80037c8:	4611      	mov	r1, r2
/*
 * Early initialization code.
 * This initialization must be performed just after stack setup and before
 * any other initialization.
 */
void __early_init(void) {
 80037ca:	b410      	push	{r4}
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 80037cc:	4b09      	ldr	r3, [pc, #36]	; (80037f4 <__early_init+0x84>)
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Clock settings.*/
#if STM32_HAS_USB
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 80037ce:	4c0a      	ldr	r4, [pc, #40]	; (80037f8 <__early_init+0x88>)
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 80037d0:	2012      	movs	r0, #18
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Clock settings.*/
#if STM32_HAS_USB
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 80037d2:	6054      	str	r4, [r2, #4]
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 80037d4:	6018      	str	r0, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 80037d6:	6853      	ldr	r3, [r2, #4]
 80037d8:	f043 0302 	orr.w	r3, r3, #2
 80037dc:	6053      	str	r3, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 80037de:	684b      	ldr	r3, [r1, #4]
 80037e0:	f003 030c 	and.w	r3, r3, #12
 80037e4:	2b08      	cmp	r3, #8
 80037e6:	d1fa      	bne.n	80037de <__early_init+0x6e>

  stm32_clock_init();
}
 80037e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	40021000 	.word	0x40021000
 80037f4:	40022000 	.word	0x40022000
 80037f8:	001d6400 	.word	0x001d6400
 80037fc:	00000000 	.word	0x00000000

08003800 <mbox1_setup.lto_priv.137>:
 * Messages are posted/fetched from a mailbox in carefully designed sequences
 * in order to stimulate all the possible code paths inside the mailbox.<br>
 * The test expects to find a consistent mailbox status after each operation.
 */

static void mbox1_setup(void) {
 8003800:	b470      	push	{r4, r5, r6}
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, cnt_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (cnt_t)0));

  mbp->mb_buffer = buf;
 8003802:	4b0b      	ldr	r3, [pc, #44]	; (8003830 <mbox1_setup.lto_priv.137+0x30>)
 8003804:	4a0b      	ldr	r2, [pc, #44]	; (8003834 <mbox1_setup.lto_priv.137+0x34>)
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));

  queue_init(&sp->s_queue);
  sp->s_cnt = n;
 8003806:	2505      	movs	r5, #5
  mbp->mb_rdptr = buf;
  mbp->mb_wrptr = buf;
  mbp->mb_top = &buf[n];
 8003808:	f102 0614 	add.w	r6, r2, #20
 800380c:	2400      	movs	r4, #0
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800380e:	f103 001c 	add.w	r0, r3, #28
 8003812:	f103 0110 	add.w	r1, r3, #16
 8003816:	605e      	str	r6, [r3, #4]
 8003818:	625d      	str	r5, [r3, #36]	; 0x24
 800381a:	619c      	str	r4, [r3, #24]
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, cnt_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (cnt_t)0));

  mbp->mb_buffer = buf;
 800381c:	601a      	str	r2, [r3, #0]
  mbp->mb_rdptr = buf;
 800381e:	60da      	str	r2, [r3, #12]
  mbp->mb_wrptr = buf;
 8003820:	609a      	str	r2, [r3, #8]
 8003822:	61d8      	str	r0, [r3, #28]
  tqp->p_prev = (thread_t *)tqp;
 8003824:	6218      	str	r0, [r3, #32]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8003826:	6119      	str	r1, [r3, #16]
  tqp->p_prev = (thread_t *)tqp;
 8003828:	6159      	str	r1, [r3, #20]

  chMBObjectInit(&mb1, (msg_t *)test.wa.T0, MB_SIZE);
}
 800382a:	bc70      	pop	{r4, r5, r6}
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	200008ac 	.word	0x200008ac
 8003834:	20001210 	.word	0x20001210
	...

08003840 <mtx8_setup.lto_priv.134>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8003840:	4a06      	ldr	r2, [pc, #24]	; (800385c <mtx8_setup.lto_priv.134+0x1c>)
 8003842:	4b07      	ldr	r3, [pc, #28]	; (8003860 <mtx8_setup.lto_priv.134+0x20>)
 8003844:	4907      	ldr	r1, [pc, #28]	; (8003864 <mtx8_setup.lto_priv.134+0x24>)
 8003846:	2000      	movs	r0, #0
 8003848:	6009      	str	r1, [r1, #0]
  tqp->p_prev = (thread_t *)tqp;
 800384a:	6049      	str	r1, [r1, #4]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800384c:	6012      	str	r2, [r2, #0]
  tqp->p_prev = (thread_t *)tqp;
 800384e:	6052      	str	r2, [r2, #4]
 8003850:	6090      	str	r0, [r2, #8]
 8003852:	6098      	str	r0, [r3, #8]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8003854:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8003856:	605b      	str	r3, [r3, #4]
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	20000800 	.word	0x20000800
 8003860:	20000810 	.word	0x20000810
 8003864:	200008d4 	.word	0x200008d4
	...

08003870 <mtx7_setup.lto_priv.132>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8003870:	4b04      	ldr	r3, [pc, #16]	; (8003884 <mtx7_setup.lto_priv.132+0x14>)
 8003872:	4a05      	ldr	r2, [pc, #20]	; (8003888 <mtx7_setup.lto_priv.132+0x18>)
 8003874:	2100      	movs	r1, #0
 8003876:	6012      	str	r2, [r2, #0]
  tqp->p_prev = (thread_t *)tqp;
 8003878:	6052      	str	r2, [r2, #4]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800387a:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 800387c:	605b      	str	r3, [r3, #4]
 800387e:	6099      	str	r1, [r3, #8]
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	20000800 	.word	0x20000800
 8003888:	200008d4 	.word	0x200008d4
 800388c:	00000000 	.word	0x00000000

08003890 <mtx6_setup.lto_priv.130>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8003890:	4b04      	ldr	r3, [pc, #16]	; (80038a4 <mtx6_setup.lto_priv.130+0x14>)
 8003892:	4a05      	ldr	r2, [pc, #20]	; (80038a8 <mtx6_setup.lto_priv.130+0x18>)
 8003894:	2100      	movs	r1, #0
 8003896:	6012      	str	r2, [r2, #0]
  tqp->p_prev = (thread_t *)tqp;
 8003898:	6052      	str	r2, [r2, #4]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800389a:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 800389c:	605b      	str	r3, [r3, #4]
 800389e:	6099      	str	r1, [r3, #8]
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	20000800 	.word	0x20000800
 80038a8:	200008d4 	.word	0x200008d4
 80038ac:	00000000 	.word	0x00000000

080038b0 <mbox1_execute.lto_priv.138>:

static void mbox1_execute(void) {
 80038b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038b4:	2320      	movs	r3, #32
 80038b6:	b082      	sub	sp, #8
 80038b8:	f383 8811 	msr	BASEPRI, r3
 80038bc:	4d95      	ldr	r5, [pc, #596]	; (8003b14 <mbox1_execute.lto_priv.138+0x264>)
  unsigned i;

  /*
   * Testing initial space.
   */
  test_assert_lock(1, chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
 80038be:	2001      	movs	r0, #1
 80038c0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80038c2:	f1a1 0105 	sub.w	r1, r1, #5
 80038c6:	fab1 f181 	clz	r1, r1
 80038ca:	0949      	lsrs	r1, r1, #5
 80038cc:	f7ff fd30 	bl	8003330 <_test_assert>
 80038d0:	2800      	cmp	r0, #0
 80038d2:	f040 8089 	bne.w	80039e8 <mbox1_execute.lto_priv.138+0x138>
 80038d6:	f380 8811 	msr	BASEPRI, r0
 80038da:	2442      	movs	r4, #66	; 0x42

  /*
   * Testing enqueuing and backward circularity.
   */
  for (i = 0; i < MB_SIZE - 1; i++) {
    msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
 80038dc:	4620      	mov	r0, r4
 80038de:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80038e2:	f003 fddd 	bl	80074a0 <chMBPost.constprop.40>
    test_assert(2, msg1 == MSG_OK, "wrong wake-up message");
 80038e6:	fab0 f180 	clz	r1, r0
 80038ea:	2002      	movs	r0, #2
 80038ec:	0949      	lsrs	r1, r1, #5
 80038ee:	f7ff fd1f 	bl	8003330 <_test_assert>
 80038f2:	3401      	adds	r4, #1
 80038f4:	b970      	cbnz	r0, 8003914 <mbox1_execute.lto_priv.138+0x64>
  test_assert_lock(1, chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");

  /*
   * Testing enqueuing and backward circularity.
   */
  for (i = 0; i < MB_SIZE - 1; i++) {
 80038f6:	2c46      	cmp	r4, #70	; 0x46
 80038f8:	d1f0      	bne.n	80038dc <mbox1_execute.lto_priv.138+0x2c>
    msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
    test_assert(2, msg1 == MSG_OK, "wrong wake-up message");
  }
  msg1 = chMBPostAhead(&mb1, 'A', TIME_INFINITE);
 80038fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80038fe:	2041      	movs	r0, #65	; 0x41
 8003900:	f003 fe16 	bl	8007530 <chMBPostAhead.constprop.38>
  test_assert(3, msg1 == MSG_OK, "wrong wake-up message");
 8003904:	fab0 f180 	clz	r1, r0
 8003908:	2003      	movs	r0, #3
 800390a:	0949      	lsrs	r1, r1, #5
 800390c:	f7ff fd10 	bl	8003330 <_test_assert>
 8003910:	2800      	cmp	r0, #0
 8003912:	d06f      	beq.n	80039f4 <mbox1_execute.lto_priv.138+0x144>
   */
  test_assert_lock(44, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
  test_assert_lock(45, chMBGetUsedCountI(&mb1) == 0, "still full");
  test_assert_lock(46, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
  test_assert_lock(47, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
}
 8003914:	b002      	add	sp, #8
 8003916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800391a:	f386 8811 	msr	BASEPRI, r6
 800391e:	f387 8811 	msr	BASEPRI, r7
    test_assert(39, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
  }
  test_assert_sequence(40, "ABCDE");
  test_assert_lock(41, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
  test_assert_lock(42, chMBGetUsedCountI(&mb1) == 0, "still full");
 8003922:	69a1      	ldr	r1, [r4, #24]
 8003924:	202a      	movs	r0, #42	; 0x2a
 8003926:	fab1 f181 	clz	r1, r1
 800392a:	0949      	lsrs	r1, r1, #5
 800392c:	f7ff fd00 	bl	8003330 <_test_assert>
 8003930:	2800      	cmp	r0, #0
 8003932:	f040 8299 	bne.w	8003e68 <mbox1_execute.lto_priv.138+0x5b8>
 8003936:	f386 8811 	msr	BASEPRI, r6
  test_assert(43, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 800393a:	68e1      	ldr	r1, [r4, #12]
 800393c:	68a3      	ldr	r3, [r4, #8]
 800393e:	202b      	movs	r0, #43	; 0x2b
 8003940:	ebc3 0e01 	rsb	lr, r3, r1
 8003944:	f1de 0100 	rsbs	r1, lr, #0
 8003948:	eb41 010e 	adc.w	r1, r1, lr
 800394c:	f7ff fcf0 	bl	8003330 <_test_assert>
 8003950:	2800      	cmp	r0, #0
 8003952:	d1df      	bne.n	8003914 <mbox1_execute.lto_priv.138+0x64>
 8003954:	f387 8811 	msr	BASEPRI, r7
void chMBResetI(mailbox_t *mbp) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->mb_wrptr = mbp->mb_buffer;
 8003958:	6823      	ldr	r3, [r4, #0]
  mbp->mb_rdptr = mbp->mb_buffer;
  chSemResetI(&mbp->mb_emptysem, (cnt_t)(mbp->mb_top - mbp->mb_buffer));
 800395a:	6862      	ldr	r2, [r4, #4]
 800395c:	f104 001c 	add.w	r0, r4, #28
 8003960:	1ad1      	subs	r1, r2, r3
 8003962:	1089      	asrs	r1, r1, #2
void chMBResetI(mailbox_t *mbp) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->mb_wrptr = mbp->mb_buffer;
 8003964:	60a3      	str	r3, [r4, #8]
  mbp->mb_rdptr = mbp->mb_buffer;
 8003966:	60e3      	str	r3, [r4, #12]
  chSemResetI(&mbp->mb_emptysem, (cnt_t)(mbp->mb_top - mbp->mb_buffer));
 8003968:	f7fd ff12 	bl	8001790 <chSemResetI>
  chSemResetI(&mbp->mb_fullsem, (cnt_t)0);
 800396c:	f104 0010 	add.w	r0, r4, #16
 8003970:	4631      	mov	r1, r6
 8003972:	f7fd ff0d 	bl	8001790 <chSemResetI>
 */
void chMBReset(mailbox_t *mbp) {

  chSysLock();
  chMBResetI(mbp);
  chSchRescheduleS();
 8003976:	f7fd fa9b 	bl	8000eb0 <chSchRescheduleS>
 800397a:	f386 8811 	msr	BASEPRI, r6
 800397e:	f387 8811 	msr	BASEPRI, r7
  chMBReset(&mb1);

  /*
   * Re-testing final conditions.
   */
  test_assert_lock(44, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8003982:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003984:	202c      	movs	r0, #44	; 0x2c
 8003986:	1f4d      	subs	r5, r1, #5
 8003988:	4269      	negs	r1, r5
 800398a:	4169      	adcs	r1, r5
 800398c:	f7ff fcd0 	bl	8003330 <_test_assert>
 8003990:	2800      	cmp	r0, #0
 8003992:	f040 8269 	bne.w	8003e68 <mbox1_execute.lto_priv.138+0x5b8>
 8003996:	f386 8811 	msr	BASEPRI, r6
 800399a:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(45, chMBGetUsedCountI(&mb1) == 0, "still full");
 800399e:	69a1      	ldr	r1, [r4, #24]
 80039a0:	202d      	movs	r0, #45	; 0x2d
 80039a2:	fab1 f181 	clz	r1, r1
 80039a6:	0949      	lsrs	r1, r1, #5
 80039a8:	f7ff fcc2 	bl	8003330 <_test_assert>
 80039ac:	2800      	cmp	r0, #0
 80039ae:	f040 825b 	bne.w	8003e68 <mbox1_execute.lto_priv.138+0x5b8>
 80039b2:	f386 8811 	msr	BASEPRI, r6
 80039b6:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(46, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
 80039ba:	6821      	ldr	r1, [r4, #0]
 80039bc:	68a3      	ldr	r3, [r4, #8]
 80039be:	202e      	movs	r0, #46	; 0x2e
 80039c0:	1aca      	subs	r2, r1, r3
 80039c2:	4251      	negs	r1, r2
 80039c4:	4151      	adcs	r1, r2
 80039c6:	f7ff fcb3 	bl	8003330 <_test_assert>
 80039ca:	2800      	cmp	r0, #0
 80039cc:	f040 824c 	bne.w	8003e68 <mbox1_execute.lto_priv.138+0x5b8>
 80039d0:	f386 8811 	msr	BASEPRI, r6
 80039d4:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(47, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
 80039d8:	6821      	ldr	r1, [r4, #0]
 80039da:	68e3      	ldr	r3, [r4, #12]
 80039dc:	202f      	movs	r0, #47	; 0x2f
 80039de:	1acb      	subs	r3, r1, r3
 80039e0:	4259      	negs	r1, r3
 80039e2:	4159      	adcs	r1, r3
 80039e4:	f7ff fca4 	bl	8003330 <_test_assert>
 80039e8:	2300      	movs	r3, #0
 80039ea:	f383 8811 	msr	BASEPRI, r3
}
 80039ee:	b002      	add	sp, #8
 80039f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_assert(3, msg1 == MSG_OK, "wrong wake-up message");

  /*
   * Testing post timeout.
   */
  msg1 = chMBPost(&mb1, 'X', 1);
 80039f4:	2101      	movs	r1, #1
 80039f6:	2058      	movs	r0, #88	; 0x58
 80039f8:	f003 fd52 	bl	80074a0 <chMBPost.constprop.40>
  test_assert(4, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80039fc:	f1a0 31ff 	sub.w	r1, r0, #4294967295
 8003a00:	fab1 f181 	clz	r1, r1
 8003a04:	2004      	movs	r0, #4
 8003a06:	0949      	lsrs	r1, r1, #5
 8003a08:	f7ff fc92 	bl	8003330 <_test_assert>
 8003a0c:	4604      	mov	r4, r0
 8003a0e:	2800      	cmp	r0, #0
 8003a10:	d180      	bne.n	8003914 <mbox1_execute.lto_priv.138+0x64>
 8003a12:	2620      	movs	r6, #32
 8003a14:	f386 8811 	msr	BASEPRI, r6
  chSysLock();
  msg1 = chMBPostI(&mb1, 'X');
 8003a18:	2058      	movs	r0, #88	; 0x58
 8003a1a:	f003 fd69 	bl	80074f0 <chMBPostI.constprop.39>
 8003a1e:	4601      	mov	r1, r0
 8003a20:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();
  test_assert(5, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8003a24:	f1a1 31ff 	sub.w	r1, r1, #4294967295
 8003a28:	fab1 f181 	clz	r1, r1
 8003a2c:	2005      	movs	r0, #5
 8003a2e:	0949      	lsrs	r1, r1, #5
 8003a30:	f7ff fc7e 	bl	8003330 <_test_assert>
 8003a34:	2800      	cmp	r0, #0
 8003a36:	f47f af6d 	bne.w	8003914 <mbox1_execute.lto_priv.138+0x64>
  msg1 = chMBPostAhead(&mb1, 'X', 1);
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	2058      	movs	r0, #88	; 0x58
 8003a3e:	f003 fd77 	bl	8007530 <chMBPostAhead.constprop.38>
  test_assert(6, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8003a42:	f1a0 31ff 	sub.w	r1, r0, #4294967295
 8003a46:	fab1 f181 	clz	r1, r1
 8003a4a:	2006      	movs	r0, #6
 8003a4c:	0949      	lsrs	r1, r1, #5
 8003a4e:	f7ff fc6f 	bl	8003330 <_test_assert>
 8003a52:	4604      	mov	r4, r0
 8003a54:	2800      	cmp	r0, #0
 8003a56:	f47f af5d 	bne.w	8003914 <mbox1_execute.lto_priv.138+0x64>
 8003a5a:	f386 8811 	msr	BASEPRI, r6
  chSysLock();
  msg1 = chMBPostAheadI(&mb1, 'X');
 8003a5e:	2058      	movs	r0, #88	; 0x58
 8003a60:	f003 fd8e 	bl	8007580 <chMBPostAheadI.constprop.37>
 8003a64:	4601      	mov	r1, r0
 8003a66:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();
  test_assert(7, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8003a6a:	f1a1 31ff 	sub.w	r1, r1, #4294967295
 8003a6e:	fab1 f181 	clz	r1, r1
 8003a72:	2007      	movs	r0, #7
 8003a74:	0949      	lsrs	r1, r1, #5
 8003a76:	f7ff fc5b 	bl	8003330 <_test_assert>
 8003a7a:	4680      	mov	r8, r0
 8003a7c:	2800      	cmp	r0, #0
 8003a7e:	f47f af49 	bne.w	8003914 <mbox1_execute.lto_priv.138+0x64>
 8003a82:	f386 8811 	msr	BASEPRI, r6

  /*
   * Testing final conditions.
   */
  test_assert_lock(8, chMBGetFreeCountI(&mb1) == 0, "still empty");
 8003a86:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8003a88:	2008      	movs	r0, #8
 8003a8a:	fab1 f181 	clz	r1, r1
 8003a8e:	0949      	lsrs	r1, r1, #5
 8003a90:	f7ff fc4e 	bl	8003330 <_test_assert>
 8003a94:	4c1f      	ldr	r4, [pc, #124]	; (8003b14 <mbox1_execute.lto_priv.138+0x264>)
 8003a96:	4607      	mov	r7, r0
 8003a98:	b110      	cbz	r0, 8003aa0 <mbox1_execute.lto_priv.138+0x1f0>
 8003a9a:	f388 8811 	msr	BASEPRI, r8
 8003a9e:	e739      	b.n	8003914 <mbox1_execute.lto_priv.138+0x64>
 8003aa0:	f380 8811 	msr	BASEPRI, r0
 8003aa4:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(9, chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 8003aa8:	69a1      	ldr	r1, [r4, #24]
 8003aaa:	2009      	movs	r0, #9
 8003aac:	f1a1 0e05 	sub.w	lr, r1, #5
 8003ab0:	f1de 0100 	rsbs	r1, lr, #0
 8003ab4:	eb41 010e 	adc.w	r1, r1, lr
 8003ab8:	f7ff fc3a 	bl	8003330 <_test_assert>
 8003abc:	b110      	cbz	r0, 8003ac4 <mbox1_execute.lto_priv.138+0x214>
 8003abe:	f387 8811 	msr	BASEPRI, r7
 8003ac2:	e727      	b.n	8003914 <mbox1_execute.lto_priv.138+0x64>
 8003ac4:	f380 8811 	msr	BASEPRI, r0
 8003ac8:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(10, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8003acc:	68e1      	ldr	r1, [r4, #12]
 8003ace:	68a3      	ldr	r3, [r4, #8]
 8003ad0:	200a      	movs	r0, #10
 8003ad2:	1acf      	subs	r7, r1, r3
 8003ad4:	4279      	negs	r1, r7
 8003ad6:	4179      	adcs	r1, r7
 8003ad8:	f7ff fc2a 	bl	8003330 <_test_assert>
 8003adc:	2300      	movs	r3, #0
 8003ade:	2800      	cmp	r0, #0
 8003ae0:	d183      	bne.n	80039ea <mbox1_execute.lto_priv.138+0x13a>
 8003ae2:	f383 8811 	msr	BASEPRI, r3
 8003ae6:	2405      	movs	r4, #5
 8003ae8:	e005      	b.n	8003af6 <mbox1_execute.lto_priv.138+0x246>
   * Testing dequeuing.
   */
  for (i = 0; i < MB_SIZE; i++) {
    msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
    test_assert(11, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
 8003aea:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8003aee:	f7ff fc37 	bl	8003360 <test_emit_token>
  test_assert_lock(10, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");

  /*
   * Testing dequeuing.
   */
  for (i = 0; i < MB_SIZE; i++) {
 8003af2:	3c01      	subs	r4, #1
 8003af4:	d010      	beq.n	8003b18 <mbox1_execute.lto_priv.138+0x268>
    msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
 8003af6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003afa:	a801      	add	r0, sp, #4
 8003afc:	f003 fd60 	bl	80075c0 <chMBFetch.constprop.36>
    test_assert(11, msg1 == MSG_OK, "wrong wake-up message");
 8003b00:	fab0 f180 	clz	r1, r0
 8003b04:	200b      	movs	r0, #11
 8003b06:	0949      	lsrs	r1, r1, #5
 8003b08:	f7ff fc12 	bl	8003330 <_test_assert>
 8003b0c:	2800      	cmp	r0, #0
 8003b0e:	d0ec      	beq.n	8003aea <mbox1_execute.lto_priv.138+0x23a>
 8003b10:	e700      	b.n	8003914 <mbox1_execute.lto_priv.138+0x64>
 8003b12:	bf00      	nop
 8003b14:	200008ac 	.word	0x200008ac
    test_emit_token(msg2);
  }
  test_assert_sequence(12, "ABCDE");
 8003b18:	200c      	movs	r0, #12
 8003b1a:	49d5      	ldr	r1, [pc, #852]	; (8003e70 <mbox1_execute.lto_priv.138+0x5c0>)
 8003b1c:	f7ff fbe0 	bl	80032e0 <_test_assert_sequence>
 8003b20:	2800      	cmp	r0, #0
 8003b22:	f47f aef7 	bne.w	8003914 <mbox1_execute.lto_priv.138+0x64>

  /*
   * Testing buffer circularity.
   */
  msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
 8003b26:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003b2a:	2047      	movs	r0, #71	; 0x47
 8003b2c:	f003 fcb8 	bl	80074a0 <chMBPost.constprop.40>
  test_assert(13, msg1 == MSG_OK, "wrong wake-up message");
 8003b30:	fab0 f180 	clz	r1, r0
 8003b34:	200d      	movs	r0, #13
 8003b36:	0949      	lsrs	r1, r1, #5
 8003b38:	f7ff fbfa 	bl	8003330 <_test_assert>
 8003b3c:	2800      	cmp	r0, #0
 8003b3e:	f47f aee9 	bne.w	8003914 <mbox1_execute.lto_priv.138+0x64>
  msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
 8003b42:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003b46:	a801      	add	r0, sp, #4
 8003b48:	f003 fd3a 	bl	80075c0 <chMBFetch.constprop.36>
  test_assert(14, msg1 == MSG_OK, "wrong wake-up message");
 8003b4c:	fab0 f180 	clz	r1, r0
 8003b50:	200e      	movs	r0, #14
 8003b52:	0949      	lsrs	r1, r1, #5
 8003b54:	f7ff fbec 	bl	8003330 <_test_assert>
 8003b58:	2800      	cmp	r0, #0
 8003b5a:	f47f aedb 	bne.w	8003914 <mbox1_execute.lto_priv.138+0x64>
  test_assert(15, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
 8003b5e:	6829      	ldr	r1, [r5, #0]
 8003b60:	68ab      	ldr	r3, [r5, #8]
 8003b62:	200f      	movs	r0, #15
 8003b64:	1ace      	subs	r6, r1, r3
 8003b66:	4271      	negs	r1, r6
 8003b68:	4171      	adcs	r1, r6
 8003b6a:	4ec2      	ldr	r6, [pc, #776]	; (8003e74 <mbox1_execute.lto_priv.138+0x5c4>)
 8003b6c:	f7ff fbe0 	bl	8003330 <_test_assert>
 8003b70:	2800      	cmp	r0, #0
 8003b72:	f47f aecf 	bne.w	8003914 <mbox1_execute.lto_priv.138+0x64>
  test_assert(16, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
 8003b76:	6831      	ldr	r1, [r6, #0]
 8003b78:	68f3      	ldr	r3, [r6, #12]
 8003b7a:	2010      	movs	r0, #16
 8003b7c:	1aca      	subs	r2, r1, r3
 8003b7e:	4251      	negs	r1, r2
 8003b80:	4151      	adcs	r1, r2
 8003b82:	f7ff fbd5 	bl	8003330 <_test_assert>
 8003b86:	2800      	cmp	r0, #0
 8003b88:	f47f aec4 	bne.w	8003914 <mbox1_execute.lto_priv.138+0x64>

  /*
   * Testing fetch timeout.
   */
  msg1 = chMBFetch(&mb1, &msg2, 1);
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	a801      	add	r0, sp, #4
 8003b90:	f003 fd16 	bl	80075c0 <chMBFetch.constprop.36>
  test_assert(17, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8003b94:	1c43      	adds	r3, r0, #1
 8003b96:	4259      	negs	r1, r3
 8003b98:	4159      	adcs	r1, r3
 8003b9a:	2011      	movs	r0, #17
 8003b9c:	f7ff fbc8 	bl	8003330 <_test_assert>
 8003ba0:	2800      	cmp	r0, #0
 8003ba2:	f47f aeb7 	bne.w	8003914 <mbox1_execute.lto_priv.138+0x64>
 8003ba6:	2720      	movs	r7, #32
 8003ba8:	f387 8811 	msr	BASEPRI, r7
  chSysLock();
  msg1 = chMBFetchI(&mb1, &msg2);
 8003bac:	a801      	add	r0, sp, #4
 8003bae:	f003 fd2f 	bl	8007610 <chMBFetchI.constprop.35>
 8003bb2:	4601      	mov	r1, r0
 8003bb4:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();
  test_assert(18, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8003bb8:	f101 0801 	add.w	r8, r1, #1
 8003bbc:	f1d8 0100 	rsbs	r1, r8, #0
 8003bc0:	eb41 0108 	adc.w	r1, r1, r8
 8003bc4:	2012      	movs	r0, #18
 8003bc6:	f7ff fbb3 	bl	8003330 <_test_assert>
 8003bca:	2800      	cmp	r0, #0
 8003bcc:	f47f aea2 	bne.w	8003914 <mbox1_execute.lto_priv.138+0x64>
 8003bd0:	f387 8811 	msr	BASEPRI, r7

  /*
   * Testing final conditions.
   */
  test_assert_lock(19, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8003bd4:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8003bd6:	2013      	movs	r0, #19
 8003bd8:	f1a1 0c05 	sub.w	ip, r1, #5
 8003bdc:	f1dc 0100 	rsbs	r1, ip, #0
 8003be0:	eb41 010c 	adc.w	r1, r1, ip
 8003be4:	f7ff fba4 	bl	8003330 <_test_assert>
 8003be8:	2800      	cmp	r0, #0
 8003bea:	f47f aefd 	bne.w	80039e8 <mbox1_execute.lto_priv.138+0x138>
 8003bee:	f04f 0800 	mov.w	r8, #0
 8003bf2:	f388 8811 	msr	BASEPRI, r8
 8003bf6:	2420      	movs	r4, #32
 8003bf8:	f384 8811 	msr	BASEPRI, r4
  test_assert_lock(20, chMBGetUsedCountI(&mb1) == 0, "still full");
 8003bfc:	69a9      	ldr	r1, [r5, #24]
 8003bfe:	2014      	movs	r0, #20
 8003c00:	fab1 f181 	clz	r1, r1
 8003c04:	0949      	lsrs	r1, r1, #5
 8003c06:	f7ff fb93 	bl	8003330 <_test_assert>
 8003c0a:	4e9a      	ldr	r6, [pc, #616]	; (8003e74 <mbox1_execute.lto_priv.138+0x5c4>)
 8003c0c:	4607      	mov	r7, r0
 8003c0e:	2800      	cmp	r0, #0
 8003c10:	f47f af43 	bne.w	8003a9a <mbox1_execute.lto_priv.138+0x1ea>
 8003c14:	f380 8811 	msr	BASEPRI, r0
 8003c18:	f384 8811 	msr	BASEPRI, r4
  test_assert_lock(21, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8003c1c:	68f1      	ldr	r1, [r6, #12]
 8003c1e:	68b3      	ldr	r3, [r6, #8]
 8003c20:	2015      	movs	r0, #21
 8003c22:	ebc3 0e01 	rsb	lr, r3, r1
 8003c26:	f1de 0100 	rsbs	r1, lr, #0
 8003c2a:	eb41 010e 	adc.w	r1, r1, lr
 8003c2e:	f7ff fb7f 	bl	8003330 <_test_assert>
 8003c32:	2800      	cmp	r0, #0
 8003c34:	f47f af43 	bne.w	8003abe <mbox1_execute.lto_priv.138+0x20e>
 8003c38:	f380 8811 	msr	BASEPRI, r0
 8003c3c:	f384 8811 	msr	BASEPRI, r4

  /*
   * Testing I-Class.
   */
  chSysLock();
  msg1 = chMBPostI(&mb1, 'A');
 8003c40:	2041      	movs	r0, #65	; 0x41
 8003c42:	f003 fc55 	bl	80074f0 <chMBPostI.constprop.39>
  test_assert(22, msg1 == MSG_OK, "wrong wake-up message");
 8003c46:	fab0 f180 	clz	r1, r0
 8003c4a:	2016      	movs	r0, #22
 8003c4c:	0949      	lsrs	r1, r1, #5
 8003c4e:	f7ff fb6f 	bl	8003330 <_test_assert>
 8003c52:	2800      	cmp	r0, #0
 8003c54:	f47f ae5e 	bne.w	8003914 <mbox1_execute.lto_priv.138+0x64>
  msg1 = chMBPostI(&mb1, 'B');
 8003c58:	2042      	movs	r0, #66	; 0x42
 8003c5a:	f003 fc49 	bl	80074f0 <chMBPostI.constprop.39>
  test_assert(23, msg1 == MSG_OK, "wrong wake-up message");
 8003c5e:	fab0 f180 	clz	r1, r0
 8003c62:	2017      	movs	r0, #23
 8003c64:	0949      	lsrs	r1, r1, #5
 8003c66:	f7ff fb63 	bl	8003330 <_test_assert>
 8003c6a:	2800      	cmp	r0, #0
 8003c6c:	f47f ae52 	bne.w	8003914 <mbox1_execute.lto_priv.138+0x64>
  msg1 = chMBPostI(&mb1, 'C');
 8003c70:	2043      	movs	r0, #67	; 0x43
 8003c72:	f003 fc3d 	bl	80074f0 <chMBPostI.constprop.39>
  test_assert(24, msg1 == MSG_OK, "wrong wake-up message");
 8003c76:	fab0 f180 	clz	r1, r0
 8003c7a:	2018      	movs	r0, #24
 8003c7c:	0949      	lsrs	r1, r1, #5
 8003c7e:	f7ff fb57 	bl	8003330 <_test_assert>
 8003c82:	2800      	cmp	r0, #0
 8003c84:	f47f ae46 	bne.w	8003914 <mbox1_execute.lto_priv.138+0x64>
  msg1 = chMBPostI(&mb1, 'D');
 8003c88:	2044      	movs	r0, #68	; 0x44
 8003c8a:	f003 fc31 	bl	80074f0 <chMBPostI.constprop.39>
  test_assert(25, msg1 == MSG_OK, "wrong wake-up message");
 8003c8e:	fab0 f180 	clz	r1, r0
 8003c92:	2019      	movs	r0, #25
 8003c94:	0949      	lsrs	r1, r1, #5
 8003c96:	f7ff fb4b 	bl	8003330 <_test_assert>
 8003c9a:	4607      	mov	r7, r0
 8003c9c:	2800      	cmp	r0, #0
 8003c9e:	f47f ae39 	bne.w	8003914 <mbox1_execute.lto_priv.138+0x64>
  msg1 = chMBPostI(&mb1, 'E');
 8003ca2:	2045      	movs	r0, #69	; 0x45
 8003ca4:	f003 fc24 	bl	80074f0 <chMBPostI.constprop.39>
 8003ca8:	f387 8811 	msr	BASEPRI, r7
  chSysUnlock();
  test_assert(26, msg1 == MSG_OK, "wrong wake-up message");
 8003cac:	fab0 f180 	clz	r1, r0
 8003cb0:	201a      	movs	r0, #26
 8003cb2:	0949      	lsrs	r1, r1, #5
 8003cb4:	f7ff fb3c 	bl	8003330 <_test_assert>
 8003cb8:	2800      	cmp	r0, #0
 8003cba:	f47f ae2b 	bne.w	8003914 <mbox1_execute.lto_priv.138+0x64>
  test_assert(27, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8003cbe:	68f1      	ldr	r1, [r6, #12]
 8003cc0:	68b3      	ldr	r3, [r6, #8]
 8003cc2:	201b      	movs	r0, #27
 8003cc4:	1ace      	subs	r6, r1, r3
 8003cc6:	4271      	negs	r1, r6
 8003cc8:	4171      	adcs	r1, r6
 8003cca:	f7ff fb31 	bl	8003330 <_test_assert>
 8003cce:	2800      	cmp	r0, #0
 8003cd0:	f47f ae20 	bne.w	8003914 <mbox1_execute.lto_priv.138+0x64>
 8003cd4:	4680      	mov	r8, r0
 8003cd6:	4626      	mov	r6, r4
 8003cd8:	2405      	movs	r4, #5
 8003cda:	2720      	movs	r7, #32
 8003cdc:	f386 8811 	msr	BASEPRI, r6
  for (i = 0; i < MB_SIZE; i++) {
    chSysLock();
    msg1 = chMBFetchI(&mb1, &msg2);
 8003ce0:	a801      	add	r0, sp, #4
 8003ce2:	f003 fc95 	bl	8007610 <chMBFetchI.constprop.35>
 8003ce6:	f388 8811 	msr	BASEPRI, r8
    chSysUnlock();
    test_assert(28, msg1 == MSG_OK, "wrong wake-up message");
 8003cea:	fab0 f180 	clz	r1, r0
 8003cee:	201c      	movs	r0, #28
 8003cf0:	0949      	lsrs	r1, r1, #5
 8003cf2:	f7ff fb1d 	bl	8003330 <_test_assert>
 8003cf6:	2800      	cmp	r0, #0
 8003cf8:	f47f ae0c 	bne.w	8003914 <mbox1_execute.lto_priv.138+0x64>
    test_emit_token(msg2);
 8003cfc:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8003d00:	f7ff fb2e 	bl	8003360 <test_emit_token>
  test_assert(25, msg1 == MSG_OK, "wrong wake-up message");
  msg1 = chMBPostI(&mb1, 'E');
  chSysUnlock();
  test_assert(26, msg1 == MSG_OK, "wrong wake-up message");
  test_assert(27, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
  for (i = 0; i < MB_SIZE; i++) {
 8003d04:	3c01      	subs	r4, #1
 8003d06:	d1e8      	bne.n	8003cda <mbox1_execute.lto_priv.138+0x42a>
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(28, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
  }
  test_assert_sequence(29, "ABCDE");
 8003d08:	201d      	movs	r0, #29
 8003d0a:	4959      	ldr	r1, [pc, #356]	; (8003e70 <mbox1_execute.lto_priv.138+0x5c0>)
 8003d0c:	f7ff fae8 	bl	80032e0 <_test_assert_sequence>
 8003d10:	2800      	cmp	r0, #0
 8003d12:	f47f adff 	bne.w	8003914 <mbox1_execute.lto_priv.138+0x64>
 8003d16:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(30, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8003d1a:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8003d1c:	201e      	movs	r0, #30
 8003d1e:	1f4a      	subs	r2, r1, #5
 8003d20:	4251      	negs	r1, r2
 8003d22:	4151      	adcs	r1, r2
 8003d24:	4e53      	ldr	r6, [pc, #332]	; (8003e74 <mbox1_execute.lto_priv.138+0x5c4>)
 8003d26:	f7ff fb03 	bl	8003330 <_test_assert>
 8003d2a:	b110      	cbz	r0, 8003d32 <mbox1_execute.lto_priv.138+0x482>
 8003d2c:	f384 8811 	msr	BASEPRI, r4
 8003d30:	e5f0      	b.n	8003914 <mbox1_execute.lto_priv.138+0x64>
 8003d32:	f384 8811 	msr	BASEPRI, r4
 8003d36:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(31, chMBGetUsedCountI(&mb1) == 0, "still full");
 8003d3a:	69b1      	ldr	r1, [r6, #24]
 8003d3c:	201f      	movs	r0, #31
 8003d3e:	fab1 f181 	clz	r1, r1
 8003d42:	0949      	lsrs	r1, r1, #5
 8003d44:	f7ff faf4 	bl	8003330 <_test_assert>
 8003d48:	2800      	cmp	r0, #0
 8003d4a:	d1ef      	bne.n	8003d2c <mbox1_execute.lto_priv.138+0x47c>
 8003d4c:	f384 8811 	msr	BASEPRI, r4
  test_assert(32, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8003d50:	68f1      	ldr	r1, [r6, #12]
 8003d52:	68b3      	ldr	r3, [r6, #8]
 8003d54:	4638      	mov	r0, r7
 8003d56:	1acb      	subs	r3, r1, r3
 8003d58:	4259      	negs	r1, r3
 8003d5a:	4159      	adcs	r1, r3
 8003d5c:	f7ff fae8 	bl	8003330 <_test_assert>
 8003d60:	2800      	cmp	r0, #0
 8003d62:	f47f add7 	bne.w	8003914 <mbox1_execute.lto_priv.138+0x64>
 8003d66:	f387 8811 	msr	BASEPRI, r7

  chSysLock();
  msg1 = chMBPostAheadI(&mb1, 'E');
 8003d6a:	2045      	movs	r0, #69	; 0x45
 8003d6c:	f003 fc08 	bl	8007580 <chMBPostAheadI.constprop.37>
  test_assert(33, msg1 == MSG_OK, "wrong wake-up message");
 8003d70:	fab0 f180 	clz	r1, r0
 8003d74:	2021      	movs	r0, #33	; 0x21
 8003d76:	0949      	lsrs	r1, r1, #5
 8003d78:	f7ff fada 	bl	8003330 <_test_assert>
 8003d7c:	2800      	cmp	r0, #0
 8003d7e:	f47f adc9 	bne.w	8003914 <mbox1_execute.lto_priv.138+0x64>
  msg1 = chMBPostAheadI(&mb1, 'D');
 8003d82:	2044      	movs	r0, #68	; 0x44
 8003d84:	f003 fbfc 	bl	8007580 <chMBPostAheadI.constprop.37>
  test_assert(34, msg1 == MSG_OK, "wrong wake-up message");
 8003d88:	fab0 f180 	clz	r1, r0
 8003d8c:	2022      	movs	r0, #34	; 0x22
 8003d8e:	0949      	lsrs	r1, r1, #5
 8003d90:	f7ff face 	bl	8003330 <_test_assert>
 8003d94:	2800      	cmp	r0, #0
 8003d96:	f47f adbd 	bne.w	8003914 <mbox1_execute.lto_priv.138+0x64>
  msg1 = chMBPostAheadI(&mb1, 'C');
 8003d9a:	2043      	movs	r0, #67	; 0x43
 8003d9c:	f003 fbf0 	bl	8007580 <chMBPostAheadI.constprop.37>
  test_assert(35, msg1 == MSG_OK, "wrong wake-up message");
 8003da0:	fab0 f180 	clz	r1, r0
 8003da4:	2023      	movs	r0, #35	; 0x23
 8003da6:	0949      	lsrs	r1, r1, #5
 8003da8:	f7ff fac2 	bl	8003330 <_test_assert>
 8003dac:	2800      	cmp	r0, #0
 8003dae:	f47f adb1 	bne.w	8003914 <mbox1_execute.lto_priv.138+0x64>
  msg1 = chMBPostAheadI(&mb1, 'B');
 8003db2:	2042      	movs	r0, #66	; 0x42
 8003db4:	f003 fbe4 	bl	8007580 <chMBPostAheadI.constprop.37>
  test_assert(36, msg1 == MSG_OK, "wrong wake-up message");
 8003db8:	fab0 f180 	clz	r1, r0
 8003dbc:	2024      	movs	r0, #36	; 0x24
 8003dbe:	0949      	lsrs	r1, r1, #5
 8003dc0:	f7ff fab6 	bl	8003330 <_test_assert>
 8003dc4:	2800      	cmp	r0, #0
 8003dc6:	f47f ada5 	bne.w	8003914 <mbox1_execute.lto_priv.138+0x64>
  msg1 = chMBPostAheadI(&mb1, 'A');
 8003dca:	2041      	movs	r0, #65	; 0x41
 8003dcc:	f003 fbd8 	bl	8007580 <chMBPostAheadI.constprop.37>
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  test_assert(37, msg1 == MSG_OK, "wrong wake-up message");
 8003dd6:	fab0 f180 	clz	r1, r0
 8003dda:	2025      	movs	r0, #37	; 0x25
 8003ddc:	0949      	lsrs	r1, r1, #5
 8003dde:	f7ff faa7 	bl	8003330 <_test_assert>
 8003de2:	2800      	cmp	r0, #0
 8003de4:	f47f ad96 	bne.w	8003914 <mbox1_execute.lto_priv.138+0x64>
  test_assert(38, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8003de8:	68e9      	ldr	r1, [r5, #12]
 8003dea:	68ab      	ldr	r3, [r5, #8]
 8003dec:	2026      	movs	r0, #38	; 0x26
 8003dee:	ebc3 0801 	rsb	r8, r3, r1
 8003df2:	f1d8 0100 	rsbs	r1, r8, #0
 8003df6:	eb41 0108 	adc.w	r1, r1, r8
 8003dfa:	f7ff fa99 	bl	8003330 <_test_assert>
 8003dfe:	2800      	cmp	r0, #0
 8003e00:	f47f ad88 	bne.w	8003914 <mbox1_execute.lto_priv.138+0x64>
 8003e04:	4604      	mov	r4, r0
 8003e06:	2605      	movs	r6, #5
 8003e08:	f04f 0820 	mov.w	r8, #32
 8003e0c:	2720      	movs	r7, #32
 8003e0e:	f388 8811 	msr	BASEPRI, r8
  for (i = 0; i < MB_SIZE; i++) {
    chSysLock();
    msg1 = chMBFetchI(&mb1, &msg2);
 8003e12:	a801      	add	r0, sp, #4
 8003e14:	f003 fbfc 	bl	8007610 <chMBFetchI.constprop.35>
 8003e18:	f384 8811 	msr	BASEPRI, r4
    chSysUnlock();
    test_assert(39, msg1 == MSG_OK, "wrong wake-up message");
 8003e1c:	fab0 f180 	clz	r1, r0
 8003e20:	2027      	movs	r0, #39	; 0x27
 8003e22:	0949      	lsrs	r1, r1, #5
 8003e24:	f7ff fa84 	bl	8003330 <_test_assert>
 8003e28:	2800      	cmp	r0, #0
 8003e2a:	f47f ad73 	bne.w	8003914 <mbox1_execute.lto_priv.138+0x64>
    test_emit_token(msg2);
 8003e2e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8003e32:	f7ff fa95 	bl	8003360 <test_emit_token>
  test_assert(36, msg1 == MSG_OK, "wrong wake-up message");
  msg1 = chMBPostAheadI(&mb1, 'A');
  chSysUnlock();
  test_assert(37, msg1 == MSG_OK, "wrong wake-up message");
  test_assert(38, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
  for (i = 0; i < MB_SIZE; i++) {
 8003e36:	3e01      	subs	r6, #1
 8003e38:	d1e8      	bne.n	8003e0c <mbox1_execute.lto_priv.138+0x55c>
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(39, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
  }
  test_assert_sequence(40, "ABCDE");
 8003e3a:	2028      	movs	r0, #40	; 0x28
 8003e3c:	490c      	ldr	r1, [pc, #48]	; (8003e70 <mbox1_execute.lto_priv.138+0x5c0>)
 8003e3e:	f7ff fa4f 	bl	80032e0 <_test_assert_sequence>
 8003e42:	2800      	cmp	r0, #0
 8003e44:	f47f ad66 	bne.w	8003914 <mbox1_execute.lto_priv.138+0x64>
 8003e48:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(41, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8003e4c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8003e4e:	2029      	movs	r0, #41	; 0x29
 8003e50:	f1a1 0c05 	sub.w	ip, r1, #5
 8003e54:	f1dc 0100 	rsbs	r1, ip, #0
 8003e58:	eb41 010c 	adc.w	r1, r1, ip
 8003e5c:	4c05      	ldr	r4, [pc, #20]	; (8003e74 <mbox1_execute.lto_priv.138+0x5c4>)
 8003e5e:	f7ff fa67 	bl	8003330 <_test_assert>
 8003e62:	2800      	cmp	r0, #0
 8003e64:	f43f ad59 	beq.w	800391a <mbox1_execute.lto_priv.138+0x6a>
 8003e68:	f386 8811 	msr	BASEPRI, r6
 8003e6c:	e552      	b.n	8003914 <mbox1_execute.lto_priv.138+0x64>
 8003e6e:	bf00      	nop
 8003e70:	080078ac 	.word	0x080078ac
 8003e74:	200008ac 	.word	0x200008ac
	...

08003e80 <thread>:
 * A thread is spawned that sends four messages back to the tester thread.<br>
 * The test expect to receive the messages in the correct sequence and to
 * not find a fifth message waiting.
 */

static THD_FUNCTION(thread, p) {
 8003e80:	b510      	push	{r4, lr}
 8003e82:	4604      	mov	r4, r0

  chMsgSend(p, 'A');
 8003e84:	2141      	movs	r1, #65	; 0x41
 8003e86:	f7fd f99b 	bl	80011c0 <chMsgSend>
  chMsgSend(p, 'B');
 8003e8a:	4620      	mov	r0, r4
 8003e8c:	2142      	movs	r1, #66	; 0x42
 8003e8e:	f7fd f997 	bl	80011c0 <chMsgSend>
  chMsgSend(p, 'C');
 8003e92:	4620      	mov	r0, r4
}
 8003e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

static THD_FUNCTION(thread, p) {

  chMsgSend(p, 'A');
  chMsgSend(p, 'B');
  chMsgSend(p, 'C');
 8003e98:	2143      	movs	r1, #67	; 0x43
 8003e9a:	f7fd b991 	b.w	80011c0 <chMsgSend>
 8003e9e:	bf00      	nop

08003ea0 <msg1_execute.lto_priv.136>:
}

static void msg1_execute(void) {
 8003ea0:	b570      	push	{r4, r5, r6, lr}
 8003ea2:	4b1f      	ldr	r3, [pc, #124]	; (8003f20 <msg1_execute.lto_priv.136+0x80>)
 8003ea4:	b082      	sub	sp, #8
 8003ea6:	699c      	ldr	r4, [r3, #24]
  msg_t msg;

  /*
   * Testing the whole messages loop.
   */
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8003ea8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003eac:	68a2      	ldr	r2, [r4, #8]
 8003eae:	4b1d      	ldr	r3, [pc, #116]	; (8003f24 <msg1_execute.lto_priv.136+0x84>)
 8003eb0:	3201      	adds	r2, #1
 8003eb2:	9400      	str	r4, [sp, #0]
 8003eb4:	481c      	ldr	r0, [pc, #112]	; (8003f28 <msg1_execute.lto_priv.136+0x88>)
 8003eb6:	f7fd f873 	bl	8000fa0 <chThdCreateStatic>
 8003eba:	4b1c      	ldr	r3, [pc, #112]	; (8003f2c <msg1_execute.lto_priv.136+0x8c>)
 8003ebc:	2520      	movs	r5, #32
 8003ebe:	6018      	str	r0, [r3, #0]
                                 thread, chThdGetSelfX());
  tp = chMsgWait();
 8003ec0:	f7fd f8c6 	bl	8001050 <chMsgWait>
 8003ec4:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8003ec6:	f385 8811 	msr	BASEPRI, r5
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 8003eca:	4631      	mov	r1, r6
 8003ecc:	f7fd f818 	bl	8000f00 <chSchWakeupS>
 8003ed0:	2400      	movs	r4, #0
 8003ed2:	f384 8811 	msr	BASEPRI, r4
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
 8003ed6:	b2f0      	uxtb	r0, r6
 8003ed8:	f7ff fa42 	bl	8003360 <test_emit_token>
  tp = chMsgWait();
 8003edc:	f7fd f8b8 	bl	8001050 <chMsgWait>
 8003ee0:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8003ee2:	f385 8811 	msr	BASEPRI, r5
 8003ee6:	4631      	mov	r1, r6
 8003ee8:	f7fd f80a 	bl	8000f00 <chSchWakeupS>
 8003eec:	f384 8811 	msr	BASEPRI, r4
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
 8003ef0:	b2f0      	uxtb	r0, r6
 8003ef2:	f7ff fa35 	bl	8003360 <test_emit_token>
  tp = chMsgWait();
 8003ef6:	f7fd f8ab 	bl	8001050 <chMsgWait>
 8003efa:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8003efc:	f385 8811 	msr	BASEPRI, r5
 8003f00:	4631      	mov	r1, r6
 8003f02:	f7fc fffd 	bl	8000f00 <chSchWakeupS>
 8003f06:	f384 8811 	msr	BASEPRI, r4
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
 8003f0a:	b2f0      	uxtb	r0, r6
 8003f0c:	f7ff fa28 	bl	8003360 <test_emit_token>
  test_assert_sequence(1, "ABC");
 8003f10:	4907      	ldr	r1, [pc, #28]	; (8003f30 <msg1_execute.lto_priv.136+0x90>)
 8003f12:	2001      	movs	r0, #1
}
 8003f14:	b002      	add	sp, #8
 8003f16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  test_emit_token(msg);
  tp = chMsgWait();
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
  test_assert_sequence(1, "ABC");
 8003f1a:	f7ff b9e1 	b.w	80032e0 <_test_assert_sequence>
 8003f1e:	bf00      	nop
 8003f20:	20001040 	.word	0x20001040
 8003f24:	08003e81 	.word	0x08003e81
 8003f28:	20001210 	.word	0x20001210
 8003f2c:	20000968 	.word	0x20000968
 8003f30:	08008390 	.word	0x08008390
	...

08003f40 <mtx8_execute.lto_priv.135>:
  chMtxLock(&m2);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m2);
}

static void mtx8_execute(void) {
 8003f40:	b570      	push	{r4, r5, r6, lr}
 8003f42:	4b19      	ldr	r3, [pc, #100]	; (8003fa8 <mtx8_execute.lto_priv.135+0x68>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
 8003f44:	4d19      	ldr	r5, [pc, #100]	; (8003fac <mtx8_execute.lto_priv.135+0x6c>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003f46:	699a      	ldr	r2, [r3, #24]
 8003f48:	4b19      	ldr	r3, [pc, #100]	; (8003fb0 <mtx8_execute.lto_priv.135+0x70>)
 8003f4a:	6896      	ldr	r6, [r2, #8]
  chMtxLock(&m2);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m2);
}

static void mtx8_execute(void) {
 8003f4c:	b082      	sub	sp, #8

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
 8003f4e:	1c72      	adds	r2, r6, #1
 8003f50:	9300      	str	r3, [sp, #0]
 8003f52:	4628      	mov	r0, r5
 8003f54:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003f58:	4b16      	ldr	r3, [pc, #88]	; (8003fb4 <mtx8_execute.lto_priv.135+0x74>)
 8003f5a:	f7fd f821 	bl	8000fa0 <chThdCreateStatic>
 8003f5e:	4c16      	ldr	r4, [pc, #88]	; (8003fb8 <mtx8_execute.lto_priv.135+0x78>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
 8003f60:	4b16      	ldr	r3, [pc, #88]	; (8003fbc <mtx8_execute.lto_priv.135+0x7c>)
}

static void mtx8_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
 8003f62:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
 8003f64:	1cb2      	adds	r2, r6, #2
 8003f66:	9300      	str	r3, [sp, #0]
 8003f68:	f505 70a4 	add.w	r0, r5, #328	; 0x148
 8003f6c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003f70:	4b13      	ldr	r3, [pc, #76]	; (8003fc0 <mtx8_execute.lto_priv.135+0x80>)
 8003f72:	f7fd f815 	bl	8000fa0 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread12, "B");
 8003f76:	4b13      	ldr	r3, [pc, #76]	; (8003fc4 <mtx8_execute.lto_priv.135+0x84>)
 8003f78:	1cf2      	adds	r2, r6, #3
 8003f7a:	f44f 71a4 	mov.w	r1, #328	; 0x148

static void mtx8_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
 8003f7e:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread12, "B");
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	f505 7024 	add.w	r0, r5, #656	; 0x290
 8003f86:	4b10      	ldr	r3, [pc, #64]	; (8003fc8 <mtx8_execute.lto_priv.135+0x88>)
 8003f88:	f7fd f80a 	bl	8000fa0 <chThdCreateStatic>
 8003f8c:	60a0      	str	r0, [r4, #8]
  chCondSignal(&c1);
 8003f8e:	f003 fa07 	bl	80073a0 <chCondSignal.constprop.68>
  chCondSignal(&c1);
 8003f92:	f003 fa05 	bl	80073a0 <chCondSignal.constprop.68>
  test_wait_threads();
 8003f96:	f7ff f94b 	bl	8003230 <test_wait_threads>
  test_assert_sequence(1, "ABC");
 8003f9a:	490c      	ldr	r1, [pc, #48]	; (8003fcc <mtx8_execute.lto_priv.135+0x8c>)
 8003f9c:	2001      	movs	r0, #1
}
 8003f9e:	b002      	add	sp, #8
 8003fa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread12, "B");
  chCondSignal(&c1);
  chCondSignal(&c1);
  test_wait_threads();
  test_assert_sequence(1, "ABC");
 8003fa4:	f7ff b99c 	b.w	80032e0 <_test_assert_sequence>
 8003fa8:	20001040 	.word	0x20001040
 8003fac:	20001210 	.word	0x20001210
 8003fb0:	080078a4 	.word	0x080078a4
 8003fb4:	08003ff1 	.word	0x08003ff1
 8003fb8:	20000968 	.word	0x20000968
 8003fbc:	080078a8 	.word	0x080078a8
 8003fc0:	08004081 	.word	0x08004081
 8003fc4:	080078a0 	.word	0x080078a0
 8003fc8:	08003fd1 	.word	0x08003fd1
 8003fcc:	08008390 	.word	0x08008390

08003fd0 <thread12>:
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
  chMtxUnlock(&m2);
}

static THD_FUNCTION(thread12, p) {
 8003fd0:	b538      	push	{r3, r4, r5, lr}
 8003fd2:	4605      	mov	r5, r0

  chMtxLock(&m2);
 8003fd4:	4c05      	ldr	r4, [pc, #20]	; (8003fec <thread12+0x1c>)
 8003fd6:	4620      	mov	r0, r4
 8003fd8:	f7fd fa3a 	bl	8001450 <chMtxLock>
  test_emit_token(*(char *)p);
 8003fdc:	7828      	ldrb	r0, [r5, #0]
 8003fde:	f7ff f9bf 	bl	8003360 <test_emit_token>
  chMtxUnlock(&m2);
 8003fe2:	4620      	mov	r0, r4
}
 8003fe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

static THD_FUNCTION(thread12, p) {

  chMtxLock(&m2);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m2);
 8003fe8:	f7fd b992 	b.w	8001310 <chMtxUnlock>
 8003fec:	20000810 	.word	0x20000810

08003ff0 <thread11>:
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}

static THD_FUNCTION(thread11, p) {
 8003ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ff2:	4607      	mov	r7, r0

  chMtxLock(&m2);
 8003ff4:	481c      	ldr	r0, [pc, #112]	; (8004068 <thread11+0x78>)
 8003ff6:	f7fd fa2b 	bl	8001450 <chMtxLock>
  chMtxLock(&m1);
 8003ffa:	481c      	ldr	r0, [pc, #112]	; (800406c <thread11+0x7c>)
 8003ffc:	f7fd fa28 	bl	8001450 <chMtxLock>
 8004000:	2320      	movs	r3, #32
 8004002:	f383 8811 	msr	BASEPRI, r3
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004006:	4d1a      	ldr	r5, [pc, #104]	; (8004070 <thread11+0x80>)
 *
 * @sclass
 */
static inline mutex_t *chMtxGetNextMutexS(void) {

  return chThdGetSelfX()->p_mtxlist;
 8004008:	69ab      	ldr	r3, [r5, #24]
 800400a:	6b9e      	ldr	r6, [r3, #56]	; 0x38
  chDbgCheck((cp != NULL) && (time != TIME_IMMEDIATE));
  chDbgAssert(currp->p_mtxlist != NULL, "not owning a mutex");

  /* Getting "current" mutex and releasing it.*/
  mp = chMtxGetNextMutexS();
  chMtxUnlockS(mp);
 800400c:	4630      	mov	r0, r6
 800400e:	f7fd f957 	bl	80012c0 <chMtxUnlockS>

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  currp->p_u.wtobjp = cp;
 8004012:	4a18      	ldr	r2, [pc, #96]	; (8004074 <thread11+0x84>)
 8004014:	69ac      	ldr	r4, [r5, #24]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8004016:	4610      	mov	r0, r2
 8004018:	4613      	mov	r3, r2
 800401a:	6222      	str	r2, [r4, #32]
 800401c:	e003      	b.n	8004026 <thread11+0x36>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 800401e:	6899      	ldr	r1, [r3, #8]
 8004020:	68a2      	ldr	r2, [r4, #8]
 8004022:	4291      	cmp	r1, r2
 8004024:	d302      	bcc.n	800402c <thread11+0x3c>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8004026:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8004028:	4283      	cmp	r3, r0
 800402a:	d1f8      	bne.n	800401e <thread11+0x2e>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800402c:	685a      	ldr	r2, [r3, #4]
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 800402e:	2007      	movs	r0, #7

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8004030:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 8004032:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 8004034:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8004036:	605c      	str	r4, [r3, #4]
 8004038:	f7fc fff2 	bl	8001020 <chSchGoSleepS>
  }

  return currp->p_u.rdymsg;
 800403c:	69ab      	ldr	r3, [r5, #24]
  queue_prio_insert(currp, &cp->c_queue);
  msg = chSchGoSleepTimeoutS(CH_STATE_WTCOND, time);
  if (msg != MSG_TIMEOUT) {
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	3301      	adds	r3, #1
 8004042:	d002      	beq.n	800404a <thread11+0x5a>
    chMtxLockS(mp);
 8004044:	4630      	mov	r0, r6
 8004046:	f7fd f99b 	bl	8001380 <chMtxLockS>
 800404a:	2300      	movs	r3, #0
 800404c:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_CONDVARS_TIMEOUT || defined(__DOXYGEN__)
  chCondWaitTimeout(&c1, TIME_INFINITE);
#else
  chCondWait(&c1);
#endif
  test_emit_token(*(char *)p);
 8004050:	7838      	ldrb	r0, [r7, #0]
 8004052:	f7ff f985 	bl	8003360 <test_emit_token>
  chMtxUnlock(&m1);
 8004056:	4805      	ldr	r0, [pc, #20]	; (800406c <thread11+0x7c>)
 8004058:	f7fd f95a 	bl	8001310 <chMtxUnlock>
  chMtxUnlock(&m2);
}
 800405c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
#else
  chCondWait(&c1);
#endif
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
  chMtxUnlock(&m2);
 8004060:	4801      	ldr	r0, [pc, #4]	; (8004068 <thread11+0x78>)
 8004062:	f7fd b955 	b.w	8001310 <chMtxUnlock>
 8004066:	bf00      	nop
 8004068:	20000810 	.word	0x20000810
 800406c:	20000800 	.word	0x20000800
 8004070:	20001040 	.word	0x20001040
 8004074:	200008d4 	.word	0x200008d4
	...

08004080 <thread10>:

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static THD_FUNCTION(thread10, p) {
 8004080:	b570      	push	{r4, r5, r6, lr}
 8004082:	4606      	mov	r6, r0

  chMtxLock(&m1);
 8004084:	4816      	ldr	r0, [pc, #88]	; (80040e0 <thread10+0x60>)
 8004086:	f7fd f9e3 	bl	8001450 <chMtxLock>
 800408a:	2320      	movs	r3, #32
 800408c:	f383 8811 	msr	BASEPRI, r3
 *                      @p chCondBroadcast().
 *
 * @sclass
 */
msg_t chCondWaitS(condition_variable_t *cp) {
  thread_t *ctp = currp;
 8004090:	4b14      	ldr	r3, [pc, #80]	; (80040e4 <thread10+0x64>)
 8004092:	699c      	ldr	r4, [r3, #24]
 8004094:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  chDbgCheck(cp != NULL);
  chDbgAssert(ctp->p_mtxlist != NULL, "not owning a mutex");

  /* Getting "current" mutex and releasing it.*/
  mp = chMtxGetNextMutexS();
  chMtxUnlockS(mp);
 8004096:	4628      	mov	r0, r5
 8004098:	f7fd f912 	bl	80012c0 <chMtxUnlockS>

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  ctp->p_u.wtobjp = cp;
 800409c:	4a12      	ldr	r2, [pc, #72]	; (80040e8 <thread10+0x68>)
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 800409e:	4610      	mov	r0, r2
 80040a0:	4613      	mov	r3, r2
 80040a2:	6222      	str	r2, [r4, #32]
 80040a4:	e003      	b.n	80040ae <thread10+0x2e>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80040a6:	6899      	ldr	r1, [r3, #8]
 80040a8:	68a2      	ldr	r2, [r4, #8]
 80040aa:	4291      	cmp	r1, r2
 80040ac:	d302      	bcc.n	80040b4 <thread10+0x34>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 80040ae:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80040b0:	4283      	cmp	r3, r0
 80040b2:	d1f8      	bne.n	80040a6 <thread10+0x26>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80040b4:	685a      	ldr	r2, [r3, #4]
  queue_prio_insert(ctp, &cp->c_queue);
  chSchGoSleepS(CH_STATE_WTCOND);
 80040b6:	2007      	movs	r0, #7

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 80040b8:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 80040ba:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 80040bc:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 80040be:	605c      	str	r4, [r3, #4]
 80040c0:	f7fc ffae 	bl	8001020 <chSchGoSleepS>
  msg = ctp->p_u.rdymsg;
  chMtxLockS(mp);
 80040c4:	4628      	mov	r0, r5
 80040c6:	f7fd f95b 	bl	8001380 <chMtxLockS>
 80040ca:	2300      	movs	r3, #0
 80040cc:	f383 8811 	msr	BASEPRI, r3
  chCondWait(&c1);
  test_emit_token(*(char *)p);
 80040d0:	7830      	ldrb	r0, [r6, #0]
 80040d2:	f7ff f945 	bl	8003360 <test_emit_token>
  chMtxUnlock(&m1);
}
 80040d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
static THD_FUNCTION(thread10, p) {

  chMtxLock(&m1);
  chCondWait(&c1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
 80040da:	4801      	ldr	r0, [pc, #4]	; (80040e0 <thread10+0x60>)
 80040dc:	f7fd b918 	b.w	8001310 <chMtxUnlock>
 80040e0:	20000800 	.word	0x20000800
 80040e4:	20001040 	.word	0x20001040
 80040e8:	200008d4 	.word	0x200008d4
 80040ec:	00000000 	.word	0x00000000

080040f0 <mtx7_execute.lto_priv.133>:

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static void mtx7_execute(void) {
 80040f0:	b530      	push	{r4, r5, lr}
 80040f2:	4a2c      	ldr	r2, [pc, #176]	; (80041a4 <mtx7_execute.lto_priv.133+0xb4>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 80040f4:	4b2c      	ldr	r3, [pc, #176]	; (80041a8 <mtx7_execute.lto_priv.133+0xb8>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80040f6:	6992      	ldr	r2, [r2, #24]

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static void mtx7_execute(void) {
 80040f8:	b083      	sub	sp, #12
 80040fa:	6895      	ldr	r5, [r2, #8]

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 80040fc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004100:	1c6a      	adds	r2, r5, #1
 8004102:	9300      	str	r3, [sp, #0]
 8004104:	4829      	ldr	r0, [pc, #164]	; (80041ac <mtx7_execute.lto_priv.133+0xbc>)
 8004106:	4b2a      	ldr	r3, [pc, #168]	; (80041b0 <mtx7_execute.lto_priv.133+0xc0>)
 8004108:	f7fc ff4a 	bl	8000fa0 <chThdCreateStatic>
 800410c:	4c29      	ldr	r4, [pc, #164]	; (80041b4 <mtx7_execute.lto_priv.133+0xc4>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 800410e:	4b2a      	ldr	r3, [pc, #168]	; (80041b8 <mtx7_execute.lto_priv.133+0xc8>)
}

static void mtx7_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8004110:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8004112:	1caa      	adds	r2, r5, #2
 8004114:	9300      	str	r3, [sp, #0]
 8004116:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800411a:	4b25      	ldr	r3, [pc, #148]	; (80041b0 <mtx7_execute.lto_priv.133+0xc0>)
 800411c:	4827      	ldr	r0, [pc, #156]	; (80041bc <mtx7_execute.lto_priv.133+0xcc>)
 800411e:	f7fc ff3f 	bl	8000fa0 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8004122:	4b27      	ldr	r3, [pc, #156]	; (80041c0 <mtx7_execute.lto_priv.133+0xd0>)

static void mtx7_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8004124:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8004126:	1cea      	adds	r2, r5, #3
 8004128:	9300      	str	r3, [sp, #0]
 800412a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800412e:	4b20      	ldr	r3, [pc, #128]	; (80041b0 <mtx7_execute.lto_priv.133+0xc0>)
 8004130:	4824      	ldr	r0, [pc, #144]	; (80041c4 <mtx7_execute.lto_priv.133+0xd4>)
 8004132:	f7fc ff35 	bl	8000fa0 <chThdCreateStatic>
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8004136:	4b24      	ldr	r3, [pc, #144]	; (80041c8 <mtx7_execute.lto_priv.133+0xd8>)
static void mtx7_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8004138:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 800413a:	1d2a      	adds	r2, r5, #4
 800413c:	9300      	str	r3, [sp, #0]
 800413e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004142:	4b1b      	ldr	r3, [pc, #108]	; (80041b0 <mtx7_execute.lto_priv.133+0xc0>)
 8004144:	4821      	ldr	r0, [pc, #132]	; (80041cc <mtx7_execute.lto_priv.133+0xdc>)
 8004146:	f7fc ff2b 	bl	8000fa0 <chThdCreateStatic>
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 800414a:	4b21      	ldr	r3, [pc, #132]	; (80041d0 <mtx7_execute.lto_priv.133+0xe0>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 800414c:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 800414e:	1d6a      	adds	r2, r5, #5
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004156:	4b16      	ldr	r3, [pc, #88]	; (80041b0 <mtx7_execute.lto_priv.133+0xc0>)
 8004158:	481e      	ldr	r0, [pc, #120]	; (80041d4 <mtx7_execute.lto_priv.133+0xe4>)
 800415a:	f7fc ff21 	bl	8000fa0 <chThdCreateStatic>
 800415e:	2320      	movs	r3, #32
 8004160:	6120      	str	r0, [r4, #16]
 8004162:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8004166:	4c1c      	ldr	r4, [pc, #112]	; (80041d8 <mtx7_execute.lto_priv.133+0xe8>)
 8004168:	6823      	ldr	r3, [r4, #0]
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (queue_notempty(&cp->c_queue)) {
 800416a:	42a3      	cmp	r3, r4
    chSchReadyI(queue_fifo_remove(&cp->c_queue))->p_u.rdymsg = MSG_RESET;
 800416c:	bf18      	it	ne
 800416e:	f06f 0501 	mvnne.w	r5, #1
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (queue_notempty(&cp->c_queue)) {
 8004172:	d009      	beq.n	8004188 <mtx7_execute.lto_priv.133+0x98>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8004174:	681a      	ldr	r2, [r3, #0]
    chSchReadyI(queue_fifo_remove(&cp->c_queue))->p_u.rdymsg = MSG_RESET;
 8004176:	4618      	mov	r0, r3
  tqp->p_next->p_prev = (thread_t *)tqp;
 8004178:	6054      	str	r4, [r2, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 800417a:	6022      	str	r2, [r4, #0]
 800417c:	f7fc ffb0 	bl	80010e0 <chSchReadyI>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8004180:	6823      	ldr	r3, [r4, #0]
 8004182:	6205      	str	r5, [r0, #32]
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (queue_notempty(&cp->c_queue)) {
 8004184:	42a3      	cmp	r3, r4
 8004186:	d1f5      	bne.n	8004174 <mtx7_execute.lto_priv.133+0x84>
 */
void chCondBroadcast(condition_variable_t *cp) {

  chSysLock();
  chCondBroadcastI(cp);
  chSchRescheduleS();
 8004188:	f7fc fe92 	bl	8000eb0 <chSchRescheduleS>
 800418c:	2300      	movs	r3, #0
 800418e:	f383 8811 	msr	BASEPRI, r3
  chCondBroadcast(&c1);
  test_wait_threads();
 8004192:	f7ff f84d 	bl	8003230 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8004196:	4911      	ldr	r1, [pc, #68]	; (80041dc <mtx7_execute.lto_priv.133+0xec>)
 8004198:	2001      	movs	r0, #1
}
 800419a:	b003      	add	sp, #12
 800419c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
  chCondBroadcast(&c1);
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 80041a0:	f7ff b89e 	b.w	80032e0 <_test_assert_sequence>
 80041a4:	20001040 	.word	0x20001040
 80041a8:	080078b0 	.word	0x080078b0
 80041ac:	20001210 	.word	0x20001210
 80041b0:	08004081 	.word	0x08004081
 80041b4:	20000968 	.word	0x20000968
 80041b8:	080087f0 	.word	0x080087f0
 80041bc:	20001358 	.word	0x20001358
 80041c0:	080078a8 	.word	0x080078a8
 80041c4:	200014a0 	.word	0x200014a0
 80041c8:	080078a0 	.word	0x080078a0
 80041cc:	200015e8 	.word	0x200015e8
 80041d0:	080078a4 	.word	0x080078a4
 80041d4:	20001730 	.word	0x20001730
 80041d8:	200008d4 	.word	0x200008d4
 80041dc:	080078ac 	.word	0x080078ac

080041e0 <mtx6_execute.lto_priv.131>:
  chCondWait(&c1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
}

static void mtx6_execute(void) {
 80041e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80041e2:	4b2c      	ldr	r3, [pc, #176]	; (8004294 <mtx6_execute.lto_priv.131+0xb4>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 80041e4:	4e2c      	ldr	r6, [pc, #176]	; (8004298 <mtx6_execute.lto_priv.131+0xb8>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	4d2c      	ldr	r5, [pc, #176]	; (800429c <mtx6_execute.lto_priv.131+0xbc>)
 80041ea:	689f      	ldr	r7, [r3, #8]
 80041ec:	492c      	ldr	r1, [pc, #176]	; (80042a0 <mtx6_execute.lto_priv.131+0xc0>)
  chCondWait(&c1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
}

static void mtx6_execute(void) {
 80041ee:	b083      	sub	sp, #12

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 80041f0:	1c7a      	adds	r2, r7, #1
 80041f2:	462b      	mov	r3, r5
 80041f4:	9100      	str	r1, [sp, #0]
 80041f6:	4630      	mov	r0, r6
 80041f8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80041fc:	f7fc fed0 	bl	8000fa0 <chThdCreateStatic>
 8004200:	4c28      	ldr	r4, [pc, #160]	; (80042a4 <mtx6_execute.lto_priv.131+0xc4>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8004202:	4929      	ldr	r1, [pc, #164]	; (80042a8 <mtx6_execute.lto_priv.131+0xc8>)
}

static void mtx6_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8004204:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8004206:	1cba      	adds	r2, r7, #2
 8004208:	462b      	mov	r3, r5
 800420a:	9100      	str	r1, [sp, #0]
 800420c:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 8004210:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004214:	f7fc fec4 	bl	8000fa0 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8004218:	4924      	ldr	r1, [pc, #144]	; (80042ac <mtx6_execute.lto_priv.131+0xcc>)

static void mtx6_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 800421a:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 800421c:	1cfa      	adds	r2, r7, #3
 800421e:	462b      	mov	r3, r5
 8004220:	9100      	str	r1, [sp, #0]
 8004222:	f506 7024 	add.w	r0, r6, #656	; 0x290
 8004226:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800422a:	f7fc feb9 	bl	8000fa0 <chThdCreateStatic>
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 800422e:	4920      	ldr	r1, [pc, #128]	; (80042b0 <mtx6_execute.lto_priv.131+0xd0>)
static void mtx6_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8004230:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8004232:	1d3a      	adds	r2, r7, #4
 8004234:	462b      	mov	r3, r5
 8004236:	9100      	str	r1, [sp, #0]
 8004238:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 800423c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004240:	f7fc feae 	bl	8000fa0 <chThdCreateStatic>
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 8004244:	491b      	ldr	r1, [pc, #108]	; (80042b4 <mtx6_execute.lto_priv.131+0xd4>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8004246:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 8004248:	462b      	mov	r3, r5
 800424a:	9100      	str	r1, [sp, #0]
 800424c:	1d7a      	adds	r2, r7, #5
 800424e:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 8004252:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004256:	f7fc fea3 	bl	8000fa0 <chThdCreateStatic>
 800425a:	2320      	movs	r3, #32
 800425c:	6120      	str	r0, [r4, #16]
 800425e:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chCondSignalI(&c1);
 8004262:	f003 f8b5 	bl	80073d0 <chCondSignalI.constprop.67>
  chCondSignalI(&c1);
 8004266:	f003 f8b3 	bl	80073d0 <chCondSignalI.constprop.67>
  chCondSignalI(&c1);
 800426a:	f003 f8b1 	bl	80073d0 <chCondSignalI.constprop.67>
  chCondSignalI(&c1);
 800426e:	f003 f8af 	bl	80073d0 <chCondSignalI.constprop.67>
  chCondSignalI(&c1);
 8004272:	f003 f8ad 	bl	80073d0 <chCondSignalI.constprop.67>
  chSchRescheduleS();
 8004276:	f7fc fe1b 	bl	8000eb0 <chSchRescheduleS>
 800427a:	2300      	movs	r3, #0
 800427c:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  test_wait_threads();
 8004280:	f7fe ffd6 	bl	8003230 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8004284:	490c      	ldr	r1, [pc, #48]	; (80042b8 <mtx6_execute.lto_priv.131+0xd8>)
 8004286:	2001      	movs	r0, #1
}
 8004288:	b003      	add	sp, #12
 800428a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  chCondSignalI(&c1);
  chCondSignalI(&c1);
  chSchRescheduleS();
  chSysUnlock();
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 800428e:	f7ff b827 	b.w	80032e0 <_test_assert_sequence>
 8004292:	bf00      	nop
 8004294:	20001040 	.word	0x20001040
 8004298:	20001210 	.word	0x20001210
 800429c:	08004081 	.word	0x08004081
 80042a0:	080078b0 	.word	0x080078b0
 80042a4:	20000968 	.word	0x20000968
 80042a8:	080087f0 	.word	0x080087f0
 80042ac:	080078a8 	.word	0x080078a8
 80042b0:	080078a0 	.word	0x080078a0
 80042b4:	080078a4 	.word	0x080078a4
 80042b8:	080078ac 	.word	0x080078ac
 80042bc:	00000000 	.word	0x00000000

080042c0 <mtx5_execute.lto_priv.129>:
static void mtx5_setup(void) {

  chMtxObjectInit(&m1);
}

static void mtx5_execute(void) {
 80042c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80042c4:	4d3b      	ldr	r5, [pc, #236]	; (80043b4 <mtx5_execute.lto_priv.129+0xf4>)
 80042c6:	2320      	movs	r3, #32
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80042c8:	69aa      	ldr	r2, [r5, #24]
 80042ca:	6896      	ldr	r6, [r2, #8]
 80042cc:	f383 8811 	msr	BASEPRI, r3
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->m_owner != NULL) {
 80042d0:	4c39      	ldr	r4, [pc, #228]	; (80043b8 <mtx5_execute.lto_priv.129+0xf8>)
    if (mp->m_owner == currp) {
      mp->m_cnt++;
      return true;
    }
#endif
    return false;
 80042d2:	2100      	movs	r1, #0
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->m_owner != NULL) {
 80042d4:	68a3      	ldr	r3, [r4, #8]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d05e      	beq.n	8004398 <mtx5_execute.lto_priv.129+0xd8>
 80042da:	2300      	movs	r3, #0
 80042dc:	f383 8811 	msr	BASEPRI, r3
#if !CH_CFG_USE_MUTEXES_RECURSIVE
  bool b;
  tprio_t prio = chThdGetPriorityX();

  b = chMtxTryLock(&m1);
  test_assert(1, b, "already locked");
 80042e0:	2001      	movs	r0, #1
 80042e2:	f7ff f825 	bl	8003330 <_test_assert>
 80042e6:	4601      	mov	r1, r0
 80042e8:	b108      	cbz	r0, 80042ee <mtx5_execute.lto_priv.129+0x2e>
 80042ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042ee:	2320      	movs	r3, #32
 80042f0:	f383 8811 	msr	BASEPRI, r3
 80042f4:	68a3      	ldr	r3, [r4, #8]
 80042f6:	4a30      	ldr	r2, [pc, #192]	; (80043b8 <mtx5_execute.lto_priv.129+0xf8>)
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d054      	beq.n	80043a6 <mtx5_execute.lto_priv.129+0xe6>
 80042fc:	2101      	movs	r1, #1
 80042fe:	2300      	movs	r3, #0
 8004300:	f383 8811 	msr	BASEPRI, r3

  b = chMtxTryLock(&m1);
  test_assert(2, !b, "not locked");
 8004304:	2002      	movs	r0, #2
 8004306:	f7ff f813 	bl	8003330 <_test_assert>
 800430a:	4607      	mov	r7, r0
 800430c:	2800      	cmp	r0, #0
 800430e:	d1ec      	bne.n	80042ea <mtx5_execute.lto_priv.129+0x2a>
 8004310:	2320      	movs	r3, #32
 8004312:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chMtxUnlockS(&m1);
 8004316:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80043b8 <mtx5_execute.lto_priv.129+0xf8>
 800431a:	4640      	mov	r0, r8
 800431c:	f7fc ffd0 	bl	80012c0 <chMtxUnlockS>
 8004320:	f387 8811 	msr	BASEPRI, r7
 *
 * @notapi
 */
static inline bool queue_isempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next == (const thread_t *)tqp);
 8004324:	6821      	ldr	r1, [r4, #0]
  chSysUnlock();

  test_assert(3, queue_isempty(&m1.m_queue), "queue not empty");
 8004326:	2003      	movs	r0, #3
 8004328:	1b09      	subs	r1, r1, r4
 800432a:	fab1 f181 	clz	r1, r1
 800432e:	0949      	lsrs	r1, r1, #5
 8004330:	f7fe fffe 	bl	8003330 <_test_assert>
 8004334:	2800      	cmp	r0, #0
 8004336:	d1d8      	bne.n	80042ea <mtx5_execute.lto_priv.129+0x2a>
  test_assert(4, m1.m_owner == NULL, "still owned");
 8004338:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800433c:	2004      	movs	r0, #4
 800433e:	fab1 f181 	clz	r1, r1
 8004342:	0949      	lsrs	r1, r1, #5
 8004344:	f7fe fff4 	bl	8003330 <_test_assert>
 8004348:	2800      	cmp	r0, #0
 800434a:	d1ce      	bne.n	80042ea <mtx5_execute.lto_priv.129+0x2a>
 800434c:	69ab      	ldr	r3, [r5, #24]
  test_assert(5, chThdGetPriorityX() == prio, "wrong priority level");
 800434e:	2005      	movs	r0, #5
 8004350:	6899      	ldr	r1, [r3, #8]
 8004352:	1a71      	subs	r1, r6, r1
 8004354:	fab1 f181 	clz	r1, r1
 8004358:	0949      	lsrs	r1, r1, #5
 800435a:	f7fe ffe9 	bl	8003330 <_test_assert>
 800435e:	2800      	cmp	r0, #0
 8004360:	d1c3      	bne.n	80042ea <mtx5_execute.lto_priv.129+0x2a>
#endif /* !CH_CFG_USE_MUTEXES_RECURSIVE */
  
  chMtxLock(&m1);
 8004362:	4640      	mov	r0, r8
 8004364:	f7fd f874 	bl	8001450 <chMtxLock>
  chMtxUnlockAll();
 8004368:	f7fc ff7a 	bl	8001260 <chMtxUnlockAll>
 800436c:	f8d8 1000 	ldr.w	r1, [r8]
  test_assert(6, queue_isempty(&m1.m_queue), "queue not empty");
 8004370:	2006      	movs	r0, #6
 8004372:	ebc8 0101 	rsb	r1, r8, r1
 8004376:	fab1 f181 	clz	r1, r1
 800437a:	0949      	lsrs	r1, r1, #5
 800437c:	f7fe ffd8 	bl	8003330 <_test_assert>
 8004380:	2800      	cmp	r0, #0
 8004382:	d1b2      	bne.n	80042ea <mtx5_execute.lto_priv.129+0x2a>
  test_assert(7, m1.m_owner == NULL, "still owned");
 8004384:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8004388:	2007      	movs	r0, #7
 800438a:	fab1 f181 	clz	r1, r1
}
 800438e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* !CH_CFG_USE_MUTEXES_RECURSIVE */
  
  chMtxLock(&m1);
  chMtxUnlockAll();
  test_assert(6, queue_isempty(&m1.m_queue), "queue not empty");
  test_assert(7, m1.m_owner == NULL, "still owned");
 8004392:	0949      	lsrs	r1, r1, #5
 8004394:	f7fe bfcc 	b.w	8003330 <_test_assert>

  chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 8004398:	69ab      	ldr	r3, [r5, #24]
  mp->m_next = currp->p_mtxlist;
  currp->p_mtxlist = mp;
 800439a:	2101      	movs	r1, #1
  chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
  mp->m_next = currp->p_mtxlist;
 800439c:	6b9a      	ldr	r2, [r3, #56]	; 0x38

  chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 800439e:	60a3      	str	r3, [r4, #8]
  mp->m_next = currp->p_mtxlist;
 80043a0:	60e2      	str	r2, [r4, #12]
  currp->p_mtxlist = mp;
 80043a2:	639c      	str	r4, [r3, #56]	; 0x38
 80043a4:	e799      	b.n	80042da <mtx5_execute.lto_priv.129+0x1a>

  chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 80043a6:	69ab      	ldr	r3, [r5, #24]
  mp->m_next = currp->p_mtxlist;
 80043a8:	6b98      	ldr	r0, [r3, #56]	; 0x38

  chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 80043aa:	6093      	str	r3, [r2, #8]
  mp->m_next = currp->p_mtxlist;
 80043ac:	60d0      	str	r0, [r2, #12]
  currp->p_mtxlist = mp;
 80043ae:	639a      	str	r2, [r3, #56]	; 0x38
 80043b0:	e7a5      	b.n	80042fe <mtx5_execute.lto_priv.129+0x3e>
 80043b2:	bf00      	nop
 80043b4:	20001040 	.word	0x20001040
 80043b8:	20000800 	.word	0x20000800
 80043bc:	00000000 	.word	0x00000000

080043c0 <bmk12_setup.lto_priv.172>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80043c0:	4b02      	ldr	r3, [pc, #8]	; (80043cc <bmk12_setup.lto_priv.172+0xc>)
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 80043c2:	2200      	movs	r2, #0
 80043c4:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80043c6:	605b      	str	r3, [r3, #4]
 80043c8:	609a      	str	r2, [r3, #8]
 80043ca:	4770      	bx	lr
 80043cc:	20000928 	.word	0x20000928

080043d0 <bmk11_setup.lto_priv.170>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80043d0:	4b02      	ldr	r3, [pc, #8]	; (80043dc <bmk11_setup.lto_priv.170+0xc>)
 80043d2:	2201      	movs	r2, #1
 80043d4:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80043d6:	605b      	str	r3, [r3, #4]
 80043d8:	609a      	str	r2, [r3, #8]
 80043da:	4770      	bx	lr
 80043dc:	2000095c 	.word	0x2000095c

080043e0 <tmo>:
 * A virtual timer is set and immediately reset into a continuous loop.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void tmo(void *param) {(void)param;}
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
	...

080043f0 <bmk7_setup.lto_priv.165>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80043f0:	4b02      	ldr	r3, [pc, #8]	; (80043fc <bmk7_setup.lto_priv.165+0xc>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80043f6:	605b      	str	r3, [r3, #4]
 80043f8:	609a      	str	r2, [r3, #8]
 80043fa:	4770      	bx	lr
 80043fc:	2000095c 	.word	0x2000095c

08004400 <sys2_execute.lto_priv.111>:
 8004400:	2320      	movs	r3, #32
 8004402:	f383 8811 	msr	BASEPRI, r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8004406:	b662      	cpsie	i
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004408:	b672      	cpsid	i

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800440a:	f383 8811 	msr	BASEPRI, r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800440e:	b662      	cpsie	i

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8004410:	2300      	movs	r3, #0
 8004412:	f383 8811 	msr	BASEPRI, r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8004416:	b662      	cpsie	i
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	0000      	movs	r0, r0
	...

08004420 <bmk13_execute.lto_priv.174>:
 *
 * <h2>Description</h2>
 * The memory size of the various kernel objects is printed.
 */

static void bmk13_execute(void) {
 8004420:	b510      	push	{r4, lr}

  test_print("--- System: ");
 8004422:	482f      	ldr	r0, [pc, #188]	; (80044e0 <bmk13_execute.lto_priv.174+0xc0>)
  test_printn(sizeof(ch_system_t));
  test_println(" bytes");
 8004424:	4c2f      	ldr	r4, [pc, #188]	; (80044e4 <bmk13_execute.lto_priv.174+0xc4>)
 * The memory size of the various kernel objects is printed.
 */

static void bmk13_execute(void) {

  test_print("--- System: ");
 8004426:	f7fe ffd3 	bl	80033d0 <test_print>
  test_printn(sizeof(ch_system_t));
 800442a:	f44f 70a8 	mov.w	r0, #336	; 0x150
 800442e:	f7fe ffdf 	bl	80033f0 <test_printn>
  test_println(" bytes");
 8004432:	4620      	mov	r0, r4
 8004434:	f7fe ffac 	bl	8003390 <test_println>
  test_print("--- Thread: ");
 8004438:	482b      	ldr	r0, [pc, #172]	; (80044e8 <bmk13_execute.lto_priv.174+0xc8>)
 800443a:	f7fe ffc9 	bl	80033d0 <test_print>
  test_printn(sizeof(thread_t));
 800443e:	2044      	movs	r0, #68	; 0x44
 8004440:	f7fe ffd6 	bl	80033f0 <test_printn>
  test_println(" bytes");
 8004444:	4620      	mov	r0, r4
 8004446:	f7fe ffa3 	bl	8003390 <test_println>
  test_print("--- Timer : ");
 800444a:	4828      	ldr	r0, [pc, #160]	; (80044ec <bmk13_execute.lto_priv.174+0xcc>)
 800444c:	f7fe ffc0 	bl	80033d0 <test_print>
  test_printn(sizeof(virtual_timer_t));
 8004450:	2014      	movs	r0, #20
 8004452:	f7fe ffcd 	bl	80033f0 <test_printn>
  test_println(" bytes");
 8004456:	4620      	mov	r0, r4
 8004458:	f7fe ff9a 	bl	8003390 <test_println>
#if CH_CFG_USE_SEMAPHORES || defined(__DOXYGEN__)
  test_print("--- Semaph: ");
 800445c:	4824      	ldr	r0, [pc, #144]	; (80044f0 <bmk13_execute.lto_priv.174+0xd0>)
 800445e:	f7fe ffb7 	bl	80033d0 <test_print>
  test_printn(sizeof(semaphore_t));
 8004462:	200c      	movs	r0, #12
 8004464:	f7fe ffc4 	bl	80033f0 <test_printn>
  test_println(" bytes");
 8004468:	4620      	mov	r0, r4
 800446a:	f7fe ff91 	bl	8003390 <test_println>
#endif
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
  test_print("--- EventS: ");
 800446e:	4821      	ldr	r0, [pc, #132]	; (80044f4 <bmk13_execute.lto_priv.174+0xd4>)
 8004470:	f7fe ffae 	bl	80033d0 <test_print>
  test_printn(sizeof(event_source_t));
 8004474:	2004      	movs	r0, #4
 8004476:	f7fe ffbb 	bl	80033f0 <test_printn>
  test_println(" bytes");
 800447a:	4620      	mov	r0, r4
 800447c:	f7fe ff88 	bl	8003390 <test_println>
  test_print("--- EventL: ");
 8004480:	481d      	ldr	r0, [pc, #116]	; (80044f8 <bmk13_execute.lto_priv.174+0xd8>)
 8004482:	f7fe ffa5 	bl	80033d0 <test_print>
  test_printn(sizeof(event_listener_t));
 8004486:	2014      	movs	r0, #20
 8004488:	f7fe ffb2 	bl	80033f0 <test_printn>
  test_println(" bytes");
 800448c:	4620      	mov	r0, r4
 800448e:	f7fe ff7f 	bl	8003390 <test_println>
#endif
#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
  test_print("--- Mutex : ");
 8004492:	481a      	ldr	r0, [pc, #104]	; (80044fc <bmk13_execute.lto_priv.174+0xdc>)
 8004494:	f7fe ff9c 	bl	80033d0 <test_print>
  test_printn(sizeof(mutex_t));
 8004498:	2010      	movs	r0, #16
 800449a:	f7fe ffa9 	bl	80033f0 <test_printn>
  test_println(" bytes");
 800449e:	4620      	mov	r0, r4
 80044a0:	f7fe ff76 	bl	8003390 <test_println>
#endif
#if CH_CFG_USE_CONDVARS || defined(__DOXYGEN__)
  test_print("--- CondV.: ");
 80044a4:	4816      	ldr	r0, [pc, #88]	; (8004500 <bmk13_execute.lto_priv.174+0xe0>)
 80044a6:	f7fe ff93 	bl	80033d0 <test_print>
  test_printn(sizeof(condition_variable_t));
 80044aa:	2008      	movs	r0, #8
 80044ac:	f7fe ffa0 	bl	80033f0 <test_printn>
  test_println(" bytes");
 80044b0:	4620      	mov	r0, r4
 80044b2:	f7fe ff6d 	bl	8003390 <test_println>
#endif
#if CH_CFG_USE_QUEUES || defined(__DOXYGEN__)
  test_print("--- Queue : ");
 80044b6:	4813      	ldr	r0, [pc, #76]	; (8004504 <bmk13_execute.lto_priv.174+0xe4>)
 80044b8:	f7fe ff8a 	bl	80033d0 <test_print>
  test_printn(sizeof(io_queue_t));
 80044bc:	2024      	movs	r0, #36	; 0x24
 80044be:	f7fe ff97 	bl	80033f0 <test_printn>
  test_println(" bytes");
 80044c2:	4620      	mov	r0, r4
 80044c4:	f7fe ff64 	bl	8003390 <test_println>
#endif
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
  test_print("--- MailB.: ");
 80044c8:	480f      	ldr	r0, [pc, #60]	; (8004508 <bmk13_execute.lto_priv.174+0xe8>)
 80044ca:	f7fe ff81 	bl	80033d0 <test_print>
  test_printn(sizeof(mailbox_t));
 80044ce:	2028      	movs	r0, #40	; 0x28
 80044d0:	f7fe ff8e 	bl	80033f0 <test_printn>
  test_println(" bytes");
 80044d4:	4620      	mov	r0, r4
#endif
}
 80044d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_println(" bytes");
#endif
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
  test_print("--- MailB.: ");
  test_printn(sizeof(mailbox_t));
  test_println(" bytes");
 80044da:	f7fe bf59 	b.w	8003390 <test_println>
 80044de:	bf00      	nop
 80044e0:	080083c0 	.word	0x080083c0
 80044e4:	080083d0 	.word	0x080083d0
 80044e8:	080083d8 	.word	0x080083d8
 80044ec:	080083e8 	.word	0x080083e8
 80044f0:	080083f8 	.word	0x080083f8
 80044f4:	08008408 	.word	0x08008408
 80044f8:	08008418 	.word	0x08008418
 80044fc:	08008428 	.word	0x08008428
 8004500:	08008438 	.word	0x08008438
 8004504:	08008448 	.word	0x08008448
 8004508:	08008458 	.word	0x08008458
 800450c:	00000000 	.word	0x00000000

08004510 <bmk12_execute.lto_priv.173>:
static void bmk12_setup(void) {

  chMtxObjectInit(&mtx1);
}

static void bmk12_execute(void) {
 8004510:	b538      	push	{r3, r4, r5, lr}
  uint32_t n = 0;

  test_wait_tick();
 8004512:	f7fe fe7d 	bl	8003210 <test_wait_tick>
  test_start_timer(1000);
 8004516:	f003 f8d3 	bl	80076c0 <test_start_timer.constprop.6>
 800451a:	4d14      	ldr	r5, [pc, #80]	; (800456c <bmk12_execute.lto_priv.173+0x5c>)

  chMtxObjectInit(&mtx1);
}

static void bmk12_execute(void) {
  uint32_t n = 0;
 800451c:	2400      	movs	r4, #0

  test_wait_tick();
  test_start_timer(1000);
  do {
    chMtxLock(&mtx1);
 800451e:	4814      	ldr	r0, [pc, #80]	; (8004570 <bmk12_execute.lto_priv.173+0x60>)
 8004520:	f7fc ff96 	bl	8001450 <chMtxLock>
    chMtxUnlock(&mtx1);
 8004524:	4812      	ldr	r0, [pc, #72]	; (8004570 <bmk12_execute.lto_priv.173+0x60>)
 8004526:	f7fc fef3 	bl	8001310 <chMtxUnlock>
    chMtxLock(&mtx1);
 800452a:	4811      	ldr	r0, [pc, #68]	; (8004570 <bmk12_execute.lto_priv.173+0x60>)
 800452c:	f7fc ff90 	bl	8001450 <chMtxLock>
    chMtxUnlock(&mtx1);
 8004530:	480f      	ldr	r0, [pc, #60]	; (8004570 <bmk12_execute.lto_priv.173+0x60>)
 8004532:	f7fc feed 	bl	8001310 <chMtxUnlock>
    chMtxLock(&mtx1);
 8004536:	480e      	ldr	r0, [pc, #56]	; (8004570 <bmk12_execute.lto_priv.173+0x60>)
 8004538:	f7fc ff8a 	bl	8001450 <chMtxLock>
    chMtxUnlock(&mtx1);
 800453c:	480c      	ldr	r0, [pc, #48]	; (8004570 <bmk12_execute.lto_priv.173+0x60>)
 800453e:	f7fc fee7 	bl	8001310 <chMtxUnlock>
    chMtxLock(&mtx1);
 8004542:	480b      	ldr	r0, [pc, #44]	; (8004570 <bmk12_execute.lto_priv.173+0x60>)
 8004544:	f7fc ff84 	bl	8001450 <chMtxLock>
    chMtxUnlock(&mtx1);
 8004548:	4809      	ldr	r0, [pc, #36]	; (8004570 <bmk12_execute.lto_priv.173+0x60>)
 800454a:	f7fc fee1 	bl	8001310 <chMtxUnlock>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800454e:	782b      	ldrb	r3, [r5, #0]
    chMtxUnlock(&mtx1);
    chMtxLock(&mtx1);
    chMtxUnlock(&mtx1);
    chMtxLock(&mtx1);
    chMtxUnlock(&mtx1);
    n++;
 8004550:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8004552:	2b00      	cmp	r3, #0
 8004554:	d0e3      	beq.n	800451e <bmk12_execute.lto_priv.173+0xe>
  test_print("--- Score : ");
 8004556:	4807      	ldr	r0, [pc, #28]	; (8004574 <bmk12_execute.lto_priv.173+0x64>)
 8004558:	f7fe ff3a 	bl	80033d0 <test_print>
  test_printn(n * 4);
 800455c:	00a0      	lsls	r0, r4, #2
 800455e:	f7fe ff47 	bl	80033f0 <test_printn>
  test_println(" lock+unlock/S");
}
 8004562:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 4);
  test_println(" lock+unlock/S");
 8004566:	4804      	ldr	r0, [pc, #16]	; (8004578 <bmk12_execute.lto_priv.173+0x68>)
 8004568:	f7fe bf12 	b.w	8003390 <test_println>
 800456c:	20001008 	.word	0x20001008
 8004570:	20000928 	.word	0x20000928
 8004574:	08008468 	.word	0x08008468
 8004578:	08008478 	.word	0x08008478
 800457c:	00000000 	.word	0x00000000

08004580 <bmk11_execute.lto_priv.171>:
static void bmk11_setup(void) {

  chSemObjectInit(&sem1, 1);
}

static void bmk11_execute(void) {
 8004580:	b538      	push	{r3, r4, r5, lr}
  uint32_t n = 0;

  test_wait_tick();
 8004582:	f7fe fe45 	bl	8003210 <test_wait_tick>
  test_start_timer(1000);
 8004586:	f003 f89b 	bl	80076c0 <test_start_timer.constprop.6>
 800458a:	4d14      	ldr	r5, [pc, #80]	; (80045dc <bmk11_execute.lto_priv.171+0x5c>)

  chSemObjectInit(&sem1, 1);
}

static void bmk11_execute(void) {
  uint32_t n = 0;
 800458c:	2400      	movs	r4, #0

  test_wait_tick();
  test_start_timer(1000);
  do {
    chSemWait(&sem1);
 800458e:	4814      	ldr	r0, [pc, #80]	; (80045e0 <bmk11_execute.lto_priv.171+0x60>)
 8004590:	f7fc fd7e 	bl	8001090 <chSemWait>
    chSemSignal(&sem1);
 8004594:	4812      	ldr	r0, [pc, #72]	; (80045e0 <bmk11_execute.lto_priv.171+0x60>)
 8004596:	f7fc fce3 	bl	8000f60 <chSemSignal>
    chSemWait(&sem1);
 800459a:	4811      	ldr	r0, [pc, #68]	; (80045e0 <bmk11_execute.lto_priv.171+0x60>)
 800459c:	f7fc fd78 	bl	8001090 <chSemWait>
    chSemSignal(&sem1);
 80045a0:	480f      	ldr	r0, [pc, #60]	; (80045e0 <bmk11_execute.lto_priv.171+0x60>)
 80045a2:	f7fc fcdd 	bl	8000f60 <chSemSignal>
    chSemWait(&sem1);
 80045a6:	480e      	ldr	r0, [pc, #56]	; (80045e0 <bmk11_execute.lto_priv.171+0x60>)
 80045a8:	f7fc fd72 	bl	8001090 <chSemWait>
    chSemSignal(&sem1);
 80045ac:	480c      	ldr	r0, [pc, #48]	; (80045e0 <bmk11_execute.lto_priv.171+0x60>)
 80045ae:	f7fc fcd7 	bl	8000f60 <chSemSignal>
    chSemWait(&sem1);
 80045b2:	480b      	ldr	r0, [pc, #44]	; (80045e0 <bmk11_execute.lto_priv.171+0x60>)
 80045b4:	f7fc fd6c 	bl	8001090 <chSemWait>
    chSemSignal(&sem1);
 80045b8:	4809      	ldr	r0, [pc, #36]	; (80045e0 <bmk11_execute.lto_priv.171+0x60>)
 80045ba:	f7fc fcd1 	bl	8000f60 <chSemSignal>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80045be:	782b      	ldrb	r3, [r5, #0]
    chSemSignal(&sem1);
    chSemWait(&sem1);
    chSemSignal(&sem1);
    chSemWait(&sem1);
    chSemSignal(&sem1);
    n++;
 80045c0:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d0e3      	beq.n	800458e <bmk11_execute.lto_priv.171+0xe>
  test_print("--- Score : ");
 80045c6:	4807      	ldr	r0, [pc, #28]	; (80045e4 <bmk11_execute.lto_priv.171+0x64>)
 80045c8:	f7fe ff02 	bl	80033d0 <test_print>
  test_printn(n * 4);
 80045cc:	00a0      	lsls	r0, r4, #2
 80045ce:	f7fe ff0f 	bl	80033f0 <test_printn>
  test_println(" wait+signal/S");
}
 80045d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 4);
  test_println(" wait+signal/S");
 80045d6:	4804      	ldr	r0, [pc, #16]	; (80045e8 <bmk11_execute.lto_priv.171+0x68>)
 80045d8:	f7fe beda 	b.w	8003390 <test_println>
 80045dc:	20001008 	.word	0x20001008
 80045e0:	2000095c 	.word	0x2000095c
 80045e4:	08008468 	.word	0x08008468
 80045e8:	08008488 	.word	0x08008488
 80045ec:	00000000 	.word	0x00000000

080045f0 <thread3>:
 * continuous loop.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static THD_FUNCTION(thread3, p) {
 80045f0:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80045f2:	4c06      	ldr	r4, [pc, #24]	; (800460c <thread3+0x1c>)
 *
 * @xclass
 */
static inline bool chThdShouldTerminateX(void) {

  return (bool)((chThdGetSelfX()->p_flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 80045f4:	69a3      	ldr	r3, [r4, #24]
 80045f6:	7f5b      	ldrb	r3, [r3, #29]

  (void)p;
  while (!chThdShouldTerminateX())
 80045f8:	075a      	lsls	r2, r3, #29
 80045fa:	d406      	bmi.n	800460a <thread3+0x1a>
    chSemWait(&sem1);
 80045fc:	4804      	ldr	r0, [pc, #16]	; (8004610 <thread3+0x20>)
 80045fe:	f7fc fd47 	bl	8001090 <chSemWait>
 8004602:	69a3      	ldr	r3, [r4, #24]
 8004604:	7f5b      	ldrb	r3, [r3, #29]
 */

static THD_FUNCTION(thread3, p) {

  (void)p;
  while (!chThdShouldTerminateX())
 8004606:	075b      	lsls	r3, r3, #29
 8004608:	d5f8      	bpl.n	80045fc <thread3+0xc>
 800460a:	bd10      	pop	{r4, pc}
 800460c:	20001040 	.word	0x20001040
 8004610:	2000095c 	.word	0x2000095c
	...

08004620 <bmk10_execute.lto_priv.169>:
 * a second of continuous operations.
 */

static void tmo(void *param) {(void)param;}

static void bmk10_execute(void) {
 8004620:	b538      	push	{r3, r4, r5, lr}
  static virtual_timer_t vt1, vt2;
  uint32_t n = 0;

  test_wait_tick();
 8004622:	f7fe fdf5 	bl	8003210 <test_wait_tick>
  test_start_timer(1000);
 8004626:	f003 f84b 	bl	80076c0 <test_start_timer.constprop.6>
 800462a:	4d15      	ldr	r5, [pc, #84]	; (8004680 <bmk10_execute.lto_priv.169+0x60>)

static void tmo(void *param) {(void)param;}

static void bmk10_execute(void) {
  static virtual_timer_t vt1, vt2;
  uint32_t n = 0;
 800462c:	2400      	movs	r4, #0

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800462e:	2320      	movs	r3, #32
 8004630:	f383 8811 	msr	BASEPRI, r3

  test_wait_tick();
  test_start_timer(1000);
  do {
    chSysLock();
    chVTDoSetI(&vt1, 1, tmo, NULL);
 8004634:	4813      	ldr	r0, [pc, #76]	; (8004684 <bmk10_execute.lto_priv.169+0x64>)
 8004636:	2101      	movs	r1, #1
 8004638:	4a13      	ldr	r2, [pc, #76]	; (8004688 <bmk10_execute.lto_priv.169+0x68>)
 800463a:	2300      	movs	r3, #0
 800463c:	f7fd f940 	bl	80018c0 <chVTDoSetI>
    chVTDoSetI(&vt2, 10000, tmo, NULL);
 8004640:	f242 7110 	movw	r1, #10000	; 0x2710
 8004644:	4a10      	ldr	r2, [pc, #64]	; (8004688 <bmk10_execute.lto_priv.169+0x68>)
 8004646:	2300      	movs	r3, #0
 8004648:	4810      	ldr	r0, [pc, #64]	; (800468c <bmk10_execute.lto_priv.169+0x6c>)
 800464a:	f7fd f939 	bl	80018c0 <chVTDoSetI>
    chVTDoResetI(&vt1);
 800464e:	480d      	ldr	r0, [pc, #52]	; (8004684 <bmk10_execute.lto_priv.169+0x64>)
 8004650:	f7fd f8f6 	bl	8001840 <chVTDoResetI>
    chVTDoResetI(&vt2);
 8004654:	480d      	ldr	r0, [pc, #52]	; (800468c <bmk10_execute.lto_priv.169+0x6c>)
 8004656:	f7fd f8f3 	bl	8001840 <chVTDoResetI>
 800465a:	2300      	movs	r3, #0
 800465c:	f383 8811 	msr	BASEPRI, r3
    chSysUnlock();
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8004660:	782b      	ldrb	r3, [r5, #0]
    chVTDoSetI(&vt1, 1, tmo, NULL);
    chVTDoSetI(&vt2, 10000, tmo, NULL);
    chVTDoResetI(&vt1);
    chVTDoResetI(&vt2);
    chSysUnlock();
    n++;
 8004662:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8004664:	2b00      	cmp	r3, #0
 8004666:	d0e2      	beq.n	800462e <bmk10_execute.lto_priv.169+0xe>
  test_print("--- Score : ");
 8004668:	4809      	ldr	r0, [pc, #36]	; (8004690 <bmk10_execute.lto_priv.169+0x70>)
 800466a:	f7fe feb1 	bl	80033d0 <test_print>
  test_printn(n * 2);
 800466e:	0060      	lsls	r0, r4, #1
 8004670:	f7fe febe 	bl	80033f0 <test_printn>
  test_println(" timers/S");
}
 8004674:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 2);
  test_println(" timers/S");
 8004678:	4806      	ldr	r0, [pc, #24]	; (8004694 <bmk10_execute.lto_priv.169+0x74>)
 800467a:	f7fe be89 	b.w	8003390 <test_println>
 800467e:	bf00      	nop
 8004680:	20001008 	.word	0x20001008
 8004684:	20000914 	.word	0x20000914
 8004688:	080043e1 	.word	0x080043e1
 800468c:	20000900 	.word	0x20000900
 8004690:	08008468 	.word	0x08008468
 8004694:	08008498 	.word	0x08008498
	...

080046a0 <bmk9_execute.lto_priv.168>:
 * loop.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk9_execute(void) {
 80046a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 80046a2:	4926      	ldr	r1, [pc, #152]	; (800473c <bmk9_execute.lto_priv.168+0x9c>)
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80046a4:	4b26      	ldr	r3, [pc, #152]	; (8004740 <bmk9_execute.lto_priv.168+0xa0>)
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 80046a6:	2200      	movs	r2, #0
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 80046a8:	f101 0010 	add.w	r0, r1, #16
 80046ac:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80046ae:	605b      	str	r3, [r3, #4]
  uint32_t n;
  static uint8_t ib[16];
  static input_queue_t iq;

  chIQObjectInit(&iq, ib, sizeof(ib), NULL, NULL);
  n = 0;
 80046b0:	4614      	mov	r4, r2
 80046b2:	6118      	str	r0, [r3, #16]
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 80046b4:	60d9      	str	r1, [r3, #12]
  iqp->q_rdptr   = bp;
 80046b6:	6199      	str	r1, [r3, #24]
  iqp->q_wrptr   = bp;
 80046b8:	6159      	str	r1, [r3, #20]
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 80046ba:	609a      	str	r2, [r3, #8]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 80046bc:	61da      	str	r2, [r3, #28]
  iqp->q_link    = link;
 80046be:	621a      	str	r2, [r3, #32]
  test_wait_tick();
  test_start_timer(1000);
  do {
    chSysLock();
    chIQPutI(&iq, 0);
 80046c0:	4617      	mov	r7, r2
  static uint8_t ib[16];
  static input_queue_t iq;

  chIQObjectInit(&iq, ib, sizeof(ib), NULL, NULL);
  n = 0;
  test_wait_tick();
 80046c2:	f7fe fda5 	bl	8003210 <test_wait_tick>
  test_start_timer(1000);
 80046c6:	f002 fffb 	bl	80076c0 <test_start_timer.constprop.6>
 80046ca:	4e1e      	ldr	r6, [pc, #120]	; (8004744 <bmk9_execute.lto_priv.168+0xa4>)
 80046cc:	2520      	movs	r5, #32
 80046ce:	f385 8811 	msr	BASEPRI, r5
  do {
    chSysLock();
    chIQPutI(&iq, 0);
 80046d2:	2100      	movs	r1, #0
 80046d4:	481a      	ldr	r0, [pc, #104]	; (8004740 <bmk9_execute.lto_priv.168+0xa0>)
 80046d6:	f7fc fd1b 	bl	8001110 <chIQPutI>
    chIQPutI(&iq, 1);
 80046da:	2101      	movs	r1, #1
 80046dc:	4818      	ldr	r0, [pc, #96]	; (8004740 <bmk9_execute.lto_priv.168+0xa0>)
 80046de:	f7fc fd17 	bl	8001110 <chIQPutI>
    chIQPutI(&iq, 2);
 80046e2:	2102      	movs	r1, #2
 80046e4:	4816      	ldr	r0, [pc, #88]	; (8004740 <bmk9_execute.lto_priv.168+0xa0>)
 80046e6:	f7fc fd13 	bl	8001110 <chIQPutI>
    chIQPutI(&iq, 3);
 80046ea:	2103      	movs	r1, #3
 80046ec:	4814      	ldr	r0, [pc, #80]	; (8004740 <bmk9_execute.lto_priv.168+0xa0>)
 80046ee:	f7fc fd0f 	bl	8001110 <chIQPutI>
 80046f2:	f387 8811 	msr	BASEPRI, r7
 *
 * @api
 */
static inline msg_t chIQGet(input_queue_t *iqp) {

  return chIQGetTimeout(iqp, TIME_INFINITE);
 80046f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80046fa:	4811      	ldr	r0, [pc, #68]	; (8004740 <bmk9_execute.lto_priv.168+0xa0>)
 80046fc:	f7fd fa30 	bl	8001b60 <chIQGetTimeout>
 8004700:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004704:	480e      	ldr	r0, [pc, #56]	; (8004740 <bmk9_execute.lto_priv.168+0xa0>)
 8004706:	f7fd fa2b 	bl	8001b60 <chIQGetTimeout>
 800470a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800470e:	480c      	ldr	r0, [pc, #48]	; (8004740 <bmk9_execute.lto_priv.168+0xa0>)
 8004710:	f7fd fa26 	bl	8001b60 <chIQGetTimeout>
 8004714:	480a      	ldr	r0, [pc, #40]	; (8004740 <bmk9_execute.lto_priv.168+0xa0>)
 8004716:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800471a:	f7fd fa21 	bl	8001b60 <chIQGetTimeout>
    (void)chIQGet(&iq);
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800471e:	7833      	ldrb	r3, [r6, #0]
    chSysUnlock();
    (void)chIQGet(&iq);
    (void)chIQGet(&iq);
    (void)chIQGet(&iq);
    (void)chIQGet(&iq);
    n++;
 8004720:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8004722:	2b00      	cmp	r3, #0
 8004724:	d0d3      	beq.n	80046ce <bmk9_execute.lto_priv.168+0x2e>
  test_print("--- Score : ");
 8004726:	4808      	ldr	r0, [pc, #32]	; (8004748 <bmk9_execute.lto_priv.168+0xa8>)
 8004728:	f7fe fe52 	bl	80033d0 <test_print>
  test_printn(n * 4);
 800472c:	00a0      	lsls	r0, r4, #2
 800472e:	f7fe fe5f 	bl	80033f0 <test_printn>
  test_println(" bytes/S");
}
 8004732:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 4);
  test_println(" bytes/S");
 8004736:	4805      	ldr	r0, [pc, #20]	; (800474c <bmk9_execute.lto_priv.168+0xac>)
 8004738:	f7fe be2a 	b.w	8003390 <test_println>
 800473c:	2000097c 	.word	0x2000097c
 8004740:	20000938 	.word	0x20000938
 8004744:	20001008 	.word	0x20001008
 8004748:	08008468 	.word	0x08008468
 800474c:	080084a4 	.word	0x080084a4

08004750 <bmk8_execute.lto_priv.167>:
    _sim_check_for_interrupts();
#endif
  } while(!chThdShouldTerminateX());
}

static void bmk8_execute(void) {
 8004750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004754:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004828 <bmk8_execute.lto_priv.167+0xd8>
 8004758:	b084      	sub	sp, #16
  uint32_t n;

  n = 0;
 800475a:	ac04      	add	r4, sp, #16
 800475c:	2300      	movs	r3, #0
 800475e:	f844 3d04 	str.w	r3, [r4, #-4]!
  test_wait_tick();
 8004762:	f7fe fd55 	bl	8003210 <test_wait_tick>
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004766:	f8d8 3018 	ldr.w	r3, [r8, #24]

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 800476a:	4f2a      	ldr	r7, [pc, #168]	; (8004814 <bmk8_execute.lto_priv.167+0xc4>)
 800476c:	4e2a      	ldr	r6, [pc, #168]	; (8004818 <bmk8_execute.lto_priv.167+0xc8>)
 800476e:	689a      	ldr	r2, [r3, #8]
 8004770:	4638      	mov	r0, r7
 8004772:	4633      	mov	r3, r6
 8004774:	3a01      	subs	r2, #1
 8004776:	9400      	str	r4, [sp, #0]
 8004778:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800477c:	f7fc fc10 	bl	8000fa0 <chThdCreateStatic>
 8004780:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8004784:	4d25      	ldr	r5, [pc, #148]	; (800481c <bmk8_execute.lto_priv.167+0xcc>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	f44f 71a4 	mov.w	r1, #328	; 0x148
  uint32_t n;

  n = 0;
  test_wait_tick();

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 800478c:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 800478e:	4633      	mov	r3, r6
 8004790:	3a01      	subs	r2, #1
 8004792:	9400      	str	r4, [sp, #0]
 8004794:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8004798:	f7fc fc02 	bl	8000fa0 <chThdCreateStatic>
 800479c:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80047a0:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 80047a2:	689a      	ldr	r2, [r3, #8]
 80047a4:	f507 7024 	add.w	r0, r7, #656	; 0x290
 80047a8:	4633      	mov	r3, r6
 80047aa:	3a01      	subs	r2, #1
 80047ac:	9400      	str	r4, [sp, #0]
 80047ae:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80047b2:	f7fc fbf5 	bl	8000fa0 <chThdCreateStatic>
 80047b6:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80047ba:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 80047bc:	689a      	ldr	r2, [r3, #8]
 80047be:	f507 7076 	add.w	r0, r7, #984	; 0x3d8
 80047c2:	4633      	mov	r3, r6
 80047c4:	3a01      	subs	r2, #1
 80047c6:	9400      	str	r4, [sp, #0]
 80047c8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80047cc:	f7fc fbe8 	bl	8000fa0 <chThdCreateStatic>
 80047d0:	f8d8 3018 	ldr.w	r3, [r8, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 80047d4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80047d8:	689a      	ldr	r2, [r3, #8]
  test_wait_tick();

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 80047da:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 80047dc:	3a01      	subs	r2, #1
 80047de:	4633      	mov	r3, r6
 80047e0:	f507 60a4 	add.w	r0, r7, #1312	; 0x520
 80047e4:	9400      	str	r4, [sp, #0]
 80047e6:	f7fc fbdb 	bl	8000fa0 <chThdCreateStatic>
 80047ea:	6128      	str	r0, [r5, #16]

  chThdSleepSeconds(1);
 80047ec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80047f0:	f7fd f9f6 	bl	8001be0 <chThdSleep>
  test_terminate_threads();
 80047f4:	f7fe fd34 	bl	8003260 <test_terminate_threads>
  test_wait_threads();
 80047f8:	f7fe fd1a 	bl	8003230 <test_wait_threads>

  test_print("--- Score : ");
 80047fc:	4808      	ldr	r0, [pc, #32]	; (8004820 <bmk8_execute.lto_priv.167+0xd0>)
 80047fe:	f7fe fde7 	bl	80033d0 <test_print>
  test_printn(n);
 8004802:	9803      	ldr	r0, [sp, #12]
 8004804:	f7fe fdf4 	bl	80033f0 <test_printn>
  test_println(" ctxswc/S");
 8004808:	4806      	ldr	r0, [pc, #24]	; (8004824 <bmk8_execute.lto_priv.167+0xd4>)
 800480a:	f7fe fdc1 	bl	8003390 <test_println>
}
 800480e:	b004      	add	sp, #16
 8004810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004814:	20001210 	.word	0x20001210
 8004818:	080048a1 	.word	0x080048a1
 800481c:	20000968 	.word	0x20000968
 8004820:	08008468 	.word	0x08008468
 8004824:	080084b0 	.word	0x080084b0
 8004828:	20001040 	.word	0x20001040
 800482c:	00000000 	.word	0x00000000

08004830 <bmk6_execute.lto_priv.164>:
 * terminate.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk6_execute(void) {
 8004830:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004832:	4b12      	ldr	r3, [pc, #72]	; (800487c <bmk6_execute.lto_priv.164+0x4c>)
 8004834:	b083      	sub	sp, #12
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004836:	699b      	ldr	r3, [r3, #24]

  uint32_t n = 0;
 8004838:	2400      	movs	r4, #0
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() + 1;
 800483a:	689d      	ldr	r5, [r3, #8]
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL);
 800483c:	4627      	mov	r7, r4
 800483e:	4e10      	ldr	r6, [pc, #64]	; (8004880 <bmk6_execute.lto_priv.164+0x50>)

static void bmk6_execute(void) {

  uint32_t n = 0;
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() + 1;
 8004840:	3501      	adds	r5, #1
  test_wait_tick();
 8004842:	f7fe fce5 	bl	8003210 <test_wait_tick>
  test_start_timer(1000);
 8004846:	f002 ff3b 	bl	80076c0 <test_start_timer.constprop.6>
  do {
    chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL);
 800484a:	4b0e      	ldr	r3, [pc, #56]	; (8004884 <bmk6_execute.lto_priv.164+0x54>)
 800484c:	9700      	str	r7, [sp, #0]
 800484e:	480e      	ldr	r0, [pc, #56]	; (8004888 <bmk6_execute.lto_priv.164+0x58>)
 8004850:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004854:	462a      	mov	r2, r5
 8004856:	f7fc fba3 	bl	8000fa0 <chThdCreateStatic>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800485a:	7833      	ldrb	r3, [r6, #0]
  tprio_t prio = chThdGetPriorityX() + 1;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL);
    n++;
 800485c:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800485e:	2b00      	cmp	r3, #0
 8004860:	d0f3      	beq.n	800484a <bmk6_execute.lto_priv.164+0x1a>
  test_print("--- Score : ");
 8004862:	480a      	ldr	r0, [pc, #40]	; (800488c <bmk6_execute.lto_priv.164+0x5c>)
 8004864:	f7fe fdb4 	bl	80033d0 <test_print>
  test_printn(n);
 8004868:	4620      	mov	r0, r4
 800486a:	f7fe fdc1 	bl	80033f0 <test_printn>
  test_println(" threads/S");
 800486e:	4808      	ldr	r0, [pc, #32]	; (8004890 <bmk6_execute.lto_priv.164+0x60>)
}
 8004870:	b003      	add	sp, #12
 8004872:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n);
  test_println(" threads/S");
 8004876:	f7fe bd8b 	b.w	8003390 <test_println>
 800487a:	bf00      	nop
 800487c:	20001040 	.word	0x20001040
 8004880:	20001008 	.word	0x20001008
 8004884:	08005211 	.word	0x08005211
 8004888:	20001210 	.word	0x20001210
 800488c:	08008468 	.word	0x08008468
 8004890:	080084bc 	.word	0x080084bc
	...

080048a0 <thread8>:
 * variable and yields.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static THD_FUNCTION(thread8, p) {
 80048a0:	b538      	push	{r3, r4, r5, lr}
 80048a2:	4604      	mov	r4, r0
 80048a4:	4d08      	ldr	r5, [pc, #32]	; (80048c8 <thread8+0x28>)

  do {
    chThdYield();
 80048a6:	f7fc facb 	bl	8000e40 <chThdYield>
    chThdYield();
 80048aa:	f7fc fac9 	bl	8000e40 <chThdYield>
    chThdYield();
 80048ae:	f7fc fac7 	bl	8000e40 <chThdYield>
    chThdYield();
 80048b2:	f7fc fac5 	bl	8000e40 <chThdYield>
    (*(uint32_t *)p) += 4;
 80048b6:	6823      	ldr	r3, [r4, #0]
 *
 * @xclass
 */
static inline bool chThdShouldTerminateX(void) {

  return (bool)((chThdGetSelfX()->p_flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 80048b8:	69aa      	ldr	r2, [r5, #24]
 80048ba:	3304      	adds	r3, #4
 80048bc:	6023      	str	r3, [r4, #0]
 80048be:	7f53      	ldrb	r3, [r2, #29]
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while(!chThdShouldTerminateX());
 80048c0:	075b      	lsls	r3, r3, #29
 80048c2:	d5f0      	bpl.n	80048a6 <thread8+0x6>
}
 80048c4:	bd38      	pop	{r3, r4, r5, pc}
 80048c6:	bf00      	nop
 80048c8:	20001040 	.word	0x20001040
 80048cc:	00000000 	.word	0x00000000

080048d0 <bmk7_execute.lto_priv.166>:
static void bmk7_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static void bmk7_execute(void) {
 80048d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80048d4:	4e3a      	ldr	r6, [pc, #232]	; (80049c0 <bmk7_execute.lto_priv.166+0xf0>)
 80048d6:	b083      	sub	sp, #12
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80048d8:	69b3      	ldr	r3, [r6, #24]
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread3, NULL);
 80048da:	2400      	movs	r4, #0
 80048dc:	689a      	ldr	r2, [r3, #8]
 80048de:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80048e2:	3205      	adds	r2, #5
 80048e4:	4b37      	ldr	r3, [pc, #220]	; (80049c4 <bmk7_execute.lto_priv.166+0xf4>)
 80048e6:	4838      	ldr	r0, [pc, #224]	; (80049c8 <bmk7_execute.lto_priv.166+0xf8>)
 80048e8:	9400      	str	r4, [sp, #0]
 80048ea:	f7fc fb59 	bl	8000fa0 <chThdCreateStatic>
 80048ee:	69b3      	ldr	r3, [r6, #24]
 80048f0:	4d36      	ldr	r5, [pc, #216]	; (80049cc <bmk7_execute.lto_priv.166+0xfc>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, thread3, NULL);
 80048f2:	689a      	ldr	r2, [r3, #8]
 80048f4:	f44f 71a4 	mov.w	r1, #328	; 0x148
}

static void bmk7_execute(void) {
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread3, NULL);
 80048f8:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, thread3, NULL);
 80048fa:	3204      	adds	r2, #4
 80048fc:	4b31      	ldr	r3, [pc, #196]	; (80049c4 <bmk7_execute.lto_priv.166+0xf4>)
 80048fe:	9400      	str	r4, [sp, #0]
 8004900:	4833      	ldr	r0, [pc, #204]	; (80049d0 <bmk7_execute.lto_priv.166+0x100>)
 8004902:	f7fc fb4d 	bl	8000fa0 <chThdCreateStatic>
 8004906:	69b3      	ldr	r3, [r6, #24]
 8004908:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread3, NULL);
 800490a:	689a      	ldr	r2, [r3, #8]
 800490c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004910:	3203      	adds	r2, #3
 8004912:	4b2c      	ldr	r3, [pc, #176]	; (80049c4 <bmk7_execute.lto_priv.166+0xf4>)
 8004914:	482f      	ldr	r0, [pc, #188]	; (80049d4 <bmk7_execute.lto_priv.166+0x104>)
 8004916:	9400      	str	r4, [sp, #0]
 8004918:	f7fc fb42 	bl	8000fa0 <chThdCreateStatic>
 800491c:	69b3      	ldr	r3, [r6, #24]
 800491e:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, thread3, NULL);
 8004920:	689a      	ldr	r2, [r3, #8]
 8004922:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004926:	3202      	adds	r2, #2
 8004928:	4b26      	ldr	r3, [pc, #152]	; (80049c4 <bmk7_execute.lto_priv.166+0xf4>)
 800492a:	482b      	ldr	r0, [pc, #172]	; (80049d8 <bmk7_execute.lto_priv.166+0x108>)
 800492c:	9400      	str	r4, [sp, #0]
 800492e:	f7fc fb37 	bl	8000fa0 <chThdCreateStatic>
 8004932:	69b3      	ldr	r3, [r6, #24]
 8004934:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, thread3, NULL);
 8004936:	689a      	ldr	r2, [r3, #8]
 8004938:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800493c:	3201      	adds	r2, #1
 800493e:	4b21      	ldr	r3, [pc, #132]	; (80049c4 <bmk7_execute.lto_priv.166+0xf4>)
 8004940:	4826      	ldr	r0, [pc, #152]	; (80049dc <bmk7_execute.lto_priv.166+0x10c>)
 8004942:	9400      	str	r4, [sp, #0]
 8004944:	f7fc fb2c 	bl	8000fa0 <chThdCreateStatic>
 * @api
 */
void chSemReset(semaphore_t *sp, cnt_t n) {

  chSysLock();
  chSemResetI(sp, n);
 8004948:	46a1      	mov	r9, r4
 800494a:	6128      	str	r0, [r5, #16]

  n = 0;
  test_wait_tick();
 800494c:	f7fe fc60 	bl	8003210 <test_wait_tick>
  test_start_timer(1000);
 8004950:	f002 feb6 	bl	80076c0 <test_start_timer.constprop.6>
 8004954:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80049f0 <bmk7_execute.lto_priv.166+0x120>
 8004958:	2720      	movs	r7, #32
 800495a:	2620      	movs	r6, #32
 800495c:	f387 8811 	msr	BASEPRI, r7
 8004960:	481f      	ldr	r0, [pc, #124]	; (80049e0 <bmk7_execute.lto_priv.166+0x110>)
 8004962:	2100      	movs	r1, #0
 8004964:	f7fc ff14 	bl	8001790 <chSemResetI>
 8004968:	2500      	movs	r5, #0
  chSchRescheduleS();
 800496a:	f7fc faa1 	bl	8000eb0 <chSchRescheduleS>
 800496e:	f389 8811 	msr	BASEPRI, r9
    chSemReset(&sem1, 0);
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8004972:	f898 3000 	ldrb.w	r3, [r8]
  n = 0;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chSemReset(&sem1, 0);
    n++;
 8004976:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8004978:	2b00      	cmp	r3, #0
 800497a:	d0ee      	beq.n	800495a <bmk7_execute.lto_priv.166+0x8a>
  test_terminate_threads();
 800497c:	f7fe fc70 	bl	8003260 <test_terminate_threads>
 8004980:	f386 8811 	msr	BASEPRI, r6
 * @api
 */
void chSemReset(semaphore_t *sp, cnt_t n) {

  chSysLock();
  chSemResetI(sp, n);
 8004984:	4816      	ldr	r0, [pc, #88]	; (80049e0 <bmk7_execute.lto_priv.166+0x110>)
 8004986:	4629      	mov	r1, r5
 8004988:	f7fc ff02 	bl	8001790 <chSemResetI>
  chSchRescheduleS();
 800498c:	f7fc fa90 	bl	8000eb0 <chSchRescheduleS>
 8004990:	f385 8811 	msr	BASEPRI, r5
  chSemReset(&sem1, 0);
  test_wait_threads();
 8004994:	f7fe fc4c 	bl	8003230 <test_wait_threads>

  test_print("--- Score : ");
 8004998:	4812      	ldr	r0, [pc, #72]	; (80049e4 <bmk7_execute.lto_priv.166+0x114>)
 800499a:	f7fe fd19 	bl	80033d0 <test_print>
  test_printn(n);
 800499e:	4620      	mov	r0, r4
 80049a0:	f7fe fd26 	bl	80033f0 <test_printn>
  test_print(" reschedules/S, ");
 80049a4:	4810      	ldr	r0, [pc, #64]	; (80049e8 <bmk7_execute.lto_priv.166+0x118>)
 80049a6:	f7fe fd13 	bl	80033d0 <test_print>
  test_printn(n * 6);
 80049aa:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 80049ae:	0040      	lsls	r0, r0, #1
 80049b0:	f7fe fd1e 	bl	80033f0 <test_printn>
  test_println(" ctxswc/S");
 80049b4:	480d      	ldr	r0, [pc, #52]	; (80049ec <bmk7_execute.lto_priv.166+0x11c>)
}
 80049b6:	b003      	add	sp, #12
 80049b8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}

  test_print("--- Score : ");
  test_printn(n);
  test_print(" reschedules/S, ");
  test_printn(n * 6);
  test_println(" ctxswc/S");
 80049bc:	f7fe bce8 	b.w	8003390 <test_println>
 80049c0:	20001040 	.word	0x20001040
 80049c4:	080045f1 	.word	0x080045f1
 80049c8:	20001210 	.word	0x20001210
 80049cc:	20000968 	.word	0x20000968
 80049d0:	20001358 	.word	0x20001358
 80049d4:	200014a0 	.word	0x200014a0
 80049d8:	200015e8 	.word	0x200015e8
 80049dc:	20001730 	.word	0x20001730
 80049e0:	2000095c 	.word	0x2000095c
 80049e4:	08008468 	.word	0x08008468
 80049e8:	080084c8 	.word	0x080084c8
 80049ec:	080084b0 	.word	0x080084b0
 80049f0:	20001008 	.word	0x20001008
	...

08004a00 <bmk5_execute.lto_priv.163>:
 * in each iteration.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk5_execute(void) {
 8004a00:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004a02:	4b13      	ldr	r3, [pc, #76]	; (8004a50 <bmk5_execute.lto_priv.163+0x50>)
 8004a04:	b083      	sub	sp, #12
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004a06:	699b      	ldr	r3, [r3, #24]

  uint32_t n = 0;
 8004a08:	2400      	movs	r4, #0
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() - 1;
 8004a0a:	689d      	ldr	r5, [r3, #8]
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdWait(chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL));
 8004a0c:	4627      	mov	r7, r4
 8004a0e:	4e11      	ldr	r6, [pc, #68]	; (8004a54 <bmk5_execute.lto_priv.163+0x54>)

static void bmk5_execute(void) {

  uint32_t n = 0;
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() - 1;
 8004a10:	3d01      	subs	r5, #1
  test_wait_tick();
 8004a12:	f7fe fbfd 	bl	8003210 <test_wait_tick>
  test_start_timer(1000);
 8004a16:	f002 fe53 	bl	80076c0 <test_start_timer.constprop.6>
  do {
    chThdWait(chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL));
 8004a1a:	4b0f      	ldr	r3, [pc, #60]	; (8004a58 <bmk5_execute.lto_priv.163+0x58>)
 8004a1c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004a20:	462a      	mov	r2, r5
 8004a22:	9700      	str	r7, [sp, #0]
 8004a24:	480d      	ldr	r0, [pc, #52]	; (8004a5c <bmk5_execute.lto_priv.163+0x5c>)
 8004a26:	f7fc fabb 	bl	8000fa0 <chThdCreateStatic>
 8004a2a:	f7fc fde9 	bl	8001600 <chThdWait>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8004a2e:	7833      	ldrb	r3, [r6, #0]
  tprio_t prio = chThdGetPriorityX() - 1;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdWait(chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL));
    n++;
 8004a30:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d0f1      	beq.n	8004a1a <bmk5_execute.lto_priv.163+0x1a>
  test_print("--- Score : ");
 8004a36:	480a      	ldr	r0, [pc, #40]	; (8004a60 <bmk5_execute.lto_priv.163+0x60>)
 8004a38:	f7fe fcca 	bl	80033d0 <test_print>
  test_printn(n);
 8004a3c:	4620      	mov	r0, r4
 8004a3e:	f7fe fcd7 	bl	80033f0 <test_printn>
  test_println(" threads/S");
 8004a42:	4808      	ldr	r0, [pc, #32]	; (8004a64 <bmk5_execute.lto_priv.163+0x64>)
}
 8004a44:	b003      	add	sp, #12
 8004a46:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n);
  test_println(" threads/S");
 8004a4a:	f7fe bca1 	b.w	8003390 <test_println>
 8004a4e:	bf00      	nop
 8004a50:	20001040 	.word	0x20001040
 8004a54:	20001008 	.word	0x20001008
 8004a58:	08005211 	.word	0x08005211
 8004a5c:	20001210 	.word	0x20001210
 8004a60:	08008468 	.word	0x08008468
 8004a64:	080084bc 	.word	0x080084bc
	...

08004a70 <bmk4_execute.lto_priv.162>:
    msg = self->p_u.rdymsg;
  } while (msg == MSG_OK);
  chSysUnlock();
}

static void bmk4_execute(void) {
 8004a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004a74:	4b25      	ldr	r3, [pc, #148]	; (8004b0c <bmk4_execute.lto_priv.162+0x9c>)
 8004a76:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004a78:	699b      	ldr	r3, [r3, #24]
  thread_t *tp;
  uint32_t n;

  tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8004a7a:	2500      	movs	r5, #0
 8004a7c:	689a      	ldr	r2, [r3, #8]
 8004a7e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004a82:	3201      	adds	r2, #1
 8004a84:	4b22      	ldr	r3, [pc, #136]	; (8004b10 <bmk4_execute.lto_priv.162+0xa0>)
 8004a86:	4823      	ldr	r0, [pc, #140]	; (8004b14 <bmk4_execute.lto_priv.162+0xa4>)
 8004a88:	9500      	str	r5, [sp, #0]
 8004a8a:	f7fc fa89 	bl	8000fa0 <chThdCreateStatic>
 8004a8e:	4b22      	ldr	r3, [pc, #136]	; (8004b18 <bmk4_execute.lto_priv.162+0xa8>)
 8004a90:	4604      	mov	r4, r0
 8004a92:	6018      	str	r0, [r3, #0]
  n = 0;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chSysLock();
    chSchWakeupS(tp, MSG_OK);
 8004a94:	46aa      	mov	sl, r5
  uint32_t n;

  tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
                                      thread4, NULL);
  n = 0;
  test_wait_tick();
 8004a96:	f7fe fbbb 	bl	8003210 <test_wait_tick>
  test_start_timer(1000);
 8004a9a:	f002 fe11 	bl	80076c0 <test_start_timer.constprop.6>
 8004a9e:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8004b24 <bmk4_execute.lto_priv.162+0xb4>
 8004aa2:	f04f 0820 	mov.w	r8, #32
 8004aa6:	2720      	movs	r7, #32
 8004aa8:	f388 8811 	msr	BASEPRI, r8
  do {
    chSysLock();
    chSchWakeupS(tp, MSG_OK);
 8004aac:	2100      	movs	r1, #0
 8004aae:	4620      	mov	r0, r4
 8004ab0:	f7fc fa26 	bl	8000f00 <chSchWakeupS>
    chSchWakeupS(tp, MSG_OK);
 8004ab4:	4620      	mov	r0, r4
 8004ab6:	2100      	movs	r1, #0
 8004ab8:	f7fc fa22 	bl	8000f00 <chSchWakeupS>
    chSchWakeupS(tp, MSG_OK);
 8004abc:	4620      	mov	r0, r4
 8004abe:	2100      	movs	r1, #0
 8004ac0:	f7fc fa1e 	bl	8000f00 <chSchWakeupS>
    chSchWakeupS(tp, MSG_OK);
 8004ac4:	4620      	mov	r0, r4
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	f7fc fa1a 	bl	8000f00 <chSchWakeupS>
 8004acc:	2600      	movs	r6, #0
 8004ace:	f38a 8811 	msr	BASEPRI, sl
    chSysUnlock();
    n += 4;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8004ad2:	f899 3000 	ldrb.w	r3, [r9]
    chSchWakeupS(tp, MSG_OK);
    chSchWakeupS(tp, MSG_OK);
    chSchWakeupS(tp, MSG_OK);
    chSchWakeupS(tp, MSG_OK);
    chSysUnlock();
    n += 4;
 8004ad6:	3504      	adds	r5, #4
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d0e4      	beq.n	8004aa6 <bmk4_execute.lto_priv.162+0x36>
 8004adc:	f387 8811 	msr	BASEPRI, r7
  chSysLock();
  chSchWakeupS(tp, MSG_TIMEOUT);
 8004ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8004ae4:	4620      	mov	r0, r4
 8004ae6:	f7fc fa0b 	bl	8000f00 <chSchWakeupS>
 8004aea:	f386 8811 	msr	BASEPRI, r6
  chSysUnlock();

  test_wait_threads();
 8004aee:	f7fe fb9f 	bl	8003230 <test_wait_threads>
  test_print("--- Score : ");
 8004af2:	480a      	ldr	r0, [pc, #40]	; (8004b1c <bmk4_execute.lto_priv.162+0xac>)
 8004af4:	f7fe fc6c 	bl	80033d0 <test_print>
  test_printn(n * 2);
 8004af8:	0068      	lsls	r0, r5, #1
 8004afa:	f7fe fc79 	bl	80033f0 <test_printn>
  test_println(" ctxswc/S");
 8004afe:	4808      	ldr	r0, [pc, #32]	; (8004b20 <bmk4_execute.lto_priv.162+0xb0>)
}
 8004b00:	b002      	add	sp, #8
 8004b02:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  chSysUnlock();

  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n * 2);
  test_println(" ctxswc/S");
 8004b06:	f7fe bc43 	b.w	8003390 <test_println>
 8004b0a:	bf00      	nop
 8004b0c:	20001040 	.word	0x20001040
 8004b10:	08004b31 	.word	0x08004b31
 8004b14:	20001210 	.word	0x20001210
 8004b18:	20000968 	.word	0x20000968
 8004b1c:	08008468 	.word	0x08008468
 8004b20:	080084b0 	.word	0x080084b0
 8004b24:	20001008 	.word	0x20001008
	...

08004b30 <thread4>:
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004b30:	4a07      	ldr	r2, [pc, #28]	; (8004b50 <thread4+0x20>)
 * the thread is awakened as fast is possible by the tester thread.<br>
 * The Context Switch performance is calculated by measuring the number of
 * iterations after a second of continuous operations.
 */

static THD_FUNCTION(thread4, p) {
 8004b32:	b510      	push	{r4, lr}
 8004b34:	2320      	movs	r3, #32
 8004b36:	6994      	ldr	r4, [r2, #24]
 8004b38:	f383 8811 	msr	BASEPRI, r3
  thread_t *self = chThdGetSelfX();

  (void)p;
  chSysLock();
  do {
    chSchGoSleepS(CH_STATE_SUSPENDED);
 8004b3c:	2003      	movs	r0, #3
 8004b3e:	f7fc fa6f 	bl	8001020 <chSchGoSleepS>
    msg = self->p_u.rdymsg;
  } while (msg == MSG_OK);
 8004b42:	6a23      	ldr	r3, [r4, #32]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d0f9      	beq.n	8004b3c <thread4+0xc>
 8004b48:	2300      	movs	r3, #0
 8004b4a:	f383 8811 	msr	BASEPRI, r3
 8004b4e:	bd10      	pop	{r4, pc}
 8004b50:	20001040 	.word	0x20001040
	...

08004b60 <thread2>:

  chThdExit((msg_t)p);
}

#if CH_CFG_USE_MESSAGES || defined(__DOXYGEN__)
static THD_FUNCTION(thread2, p) {
 8004b60:	b570      	push	{r4, r5, r6, lr}
 8004b62:	2620      	movs	r6, #32
 8004b64:	2500      	movs	r5, #0
  thread_t *tp;
  msg_t msg;

  (void)p;
  do {
    tp = chMsgWait();
 8004b66:	f7fc fa73 	bl	8001050 <chMsgWait>
 8004b6a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004b6c:	f386 8811 	msr	BASEPRI, r6
 8004b70:	4621      	mov	r1, r4
 8004b72:	f7fc f9c5 	bl	8000f00 <chSchWakeupS>
 8004b76:	f385 8811 	msr	BASEPRI, r5
    msg = chMsgGet(tp);
    chMsgRelease(tp, msg);
  } while (msg);
 8004b7a:	2c00      	cmp	r4, #0
 8004b7c:	d1f3      	bne.n	8004b66 <thread2+0x6>
}
 8004b7e:	bd70      	pop	{r4, r5, r6, pc}

08004b80 <msg_loop_test>:

#ifdef __GNUC__
__attribute__((noinline))
#endif
static unsigned int msg_loop_test(thread_t *tp) {
 8004b80:	b570      	push	{r4, r5, r6, lr}
 8004b82:	4605      	mov	r5, r0

  uint32_t n = 0;
  test_wait_tick();
 8004b84:	f7fe fb44 	bl	8003210 <test_wait_tick>
  test_start_timer(1000);
 8004b88:	f002 fd9a 	bl	80076c0 <test_start_timer.constprop.6>
 8004b8c:	4e07      	ldr	r6, [pc, #28]	; (8004bac <msg_loop_test+0x2c>)
#ifdef __GNUC__
__attribute__((noinline))
#endif
static unsigned int msg_loop_test(thread_t *tp) {

  uint32_t n = 0;
 8004b8e:	2400      	movs	r4, #0
  test_wait_tick();
  test_start_timer(1000);
  do {
    (void)chMsgSend(tp, 1);
 8004b90:	4628      	mov	r0, r5
 8004b92:	2101      	movs	r1, #1
 8004b94:	f7fc fb14 	bl	80011c0 <chMsgSend>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8004b98:	7833      	ldrb	r3, [r6, #0]
  uint32_t n = 0;
  test_wait_tick();
  test_start_timer(1000);
  do {
    (void)chMsgSend(tp, 1);
    n++;
 8004b9a:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d0f7      	beq.n	8004b90 <msg_loop_test+0x10>
  (void)chMsgSend(tp, 0);
 8004ba0:	4628      	mov	r0, r5
 8004ba2:	2100      	movs	r1, #0
 8004ba4:	f7fc fb0c 	bl	80011c0 <chMsgSend>
  return n;
}
 8004ba8:	4620      	mov	r0, r4
 8004baa:	bd70      	pop	{r4, r5, r6, pc}
 8004bac:	20001008 	.word	0x20001008

08004bb0 <bmk3_execute.lto_priv.161>:
 * thread, four lower priority threads crowd the ready list, the messages
 * throughput per second is measured while the ready list and the result
 * printed in the output log.
 */

static void bmk3_execute(void) {
 8004bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bb4:	4f2c      	ldr	r7, [pc, #176]	; (8004c68 <bmk3_execute.lto_priv.161+0xb8>)
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8004bb6:	4e2d      	ldr	r6, [pc, #180]	; (8004c6c <bmk3_execute.lto_priv.161+0xbc>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 * thread, four lower priority threads crowd the ready list, the messages
 * throughput per second is measured while the ready list and the result
 * printed in the output log.
 */

static void bmk3_execute(void) {
 8004bba:	b082      	sub	sp, #8
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8004bbc:	689a      	ldr	r2, [r3, #8]
 8004bbe:	2500      	movs	r5, #0
 8004bc0:	4630      	mov	r0, r6
 8004bc2:	3201      	adds	r2, #1
 8004bc4:	9500      	str	r5, [sp, #0]
 8004bc6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004bca:	4b29      	ldr	r3, [pc, #164]	; (8004c70 <bmk3_execute.lto_priv.161+0xc0>)
 8004bcc:	f7fc f9e8 	bl	8000fa0 <chThdCreateStatic>
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	4c28      	ldr	r4, [pc, #160]	; (8004c74 <bmk3_execute.lto_priv.161+0xc4>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
 8004bd4:	689a      	ldr	r2, [r3, #8]
 8004bd6:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8004c84 <bmk3_execute.lto_priv.161+0xd4>
 */

static void bmk3_execute(void) {
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8004bda:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
 8004bdc:	4643      	mov	r3, r8
 8004bde:	3a02      	subs	r2, #2
 8004be0:	9500      	str	r5, [sp, #0]
 8004be2:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 8004be6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004bea:	f7fc f9d9 	bl	8000fa0 <chThdCreateStatic>
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread1, NULL);
 8004bf2:	689a      	ldr	r2, [r3, #8]
 8004bf4:	f506 7024 	add.w	r0, r6, #656	; 0x290
 8004bf8:	4643      	mov	r3, r8
 8004bfa:	3a03      	subs	r2, #3
 8004bfc:	9500      	str	r5, [sp, #0]
 8004bfe:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004c02:	f7fc f9cd 	bl	8000fa0 <chThdCreateStatic>
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, thread1, NULL);
 8004c0a:	689a      	ldr	r2, [r3, #8]
 8004c0c:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 8004c10:	4643      	mov	r3, r8
 8004c12:	3a04      	subs	r2, #4
 8004c14:	9500      	str	r5, [sp, #0]
 8004c16:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004c1a:	f7fc f9c1 	bl	8000fa0 <chThdCreateStatic>
 8004c1e:	69bb      	ldr	r3, [r7, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, thread1, NULL);
 8004c20:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004c24:	689a      	ldr	r2, [r3, #8]
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread1, NULL);
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, thread1, NULL);
 8004c26:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, thread1, NULL);
 8004c28:	3a05      	subs	r2, #5
 8004c2a:	4643      	mov	r3, r8
 8004c2c:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 8004c30:	9500      	str	r5, [sp, #0]
 8004c32:	f7fc f9b5 	bl	8000fa0 <chThdCreateStatic>
 8004c36:	6120      	str	r0, [r4, #16]
  n = msg_loop_test(threads[0]);
 8004c38:	6820      	ldr	r0, [r4, #0]
 8004c3a:	f7ff ffa1 	bl	8004b80 <msg_loop_test>
 8004c3e:	4604      	mov	r4, r0
  test_wait_threads();
 8004c40:	f7fe faf6 	bl	8003230 <test_wait_threads>
  test_print("--- Score : ");
 8004c44:	480c      	ldr	r0, [pc, #48]	; (8004c78 <bmk3_execute.lto_priv.161+0xc8>)
 8004c46:	f7fe fbc3 	bl	80033d0 <test_print>
  test_printn(n);
 8004c4a:	4620      	mov	r0, r4
 8004c4c:	f7fe fbd0 	bl	80033f0 <test_printn>
  test_print(" msgs/S, ");
 8004c50:	480a      	ldr	r0, [pc, #40]	; (8004c7c <bmk3_execute.lto_priv.161+0xcc>)
 8004c52:	f7fe fbbd 	bl	80033d0 <test_print>
  test_printn(n << 1);
 8004c56:	0060      	lsls	r0, r4, #1
 8004c58:	f7fe fbca 	bl	80033f0 <test_printn>
  test_println(" ctxswc/S");
 8004c5c:	4808      	ldr	r0, [pc, #32]	; (8004c80 <bmk3_execute.lto_priv.161+0xd0>)
}
 8004c5e:	b002      	add	sp, #8
 8004c60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n);
  test_print(" msgs/S, ");
  test_printn(n << 1);
  test_println(" ctxswc/S");
 8004c64:	f7fe bb94 	b.w	8003390 <test_println>
 8004c68:	20001040 	.word	0x20001040
 8004c6c:	20001210 	.word	0x20001210
 8004c70:	08004b61 	.word	0x08004b61
 8004c74:	20000968 	.word	0x20000968
 8004c78:	08008468 	.word	0x08008468
 8004c7c:	080084dc 	.word	0x080084dc
 8004c80:	080084b0 	.word	0x080084b0
 8004c84:	08005211 	.word	0x08005211
	...

08004c90 <bmk2_execute.lto_priv.160>:
 * A message server thread is created with an higher priority than the client
 * thread, the messages throughput per second is measured and the result
 * printed in the output log.
 */

static void bmk2_execute(void) {
 8004c90:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004c92:	4a13      	ldr	r2, [pc, #76]	; (8004ce0 <bmk2_execute.lto_priv.160+0x50>)
 8004c94:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004c96:	6992      	ldr	r2, [r2, #24]
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8004c98:	2300      	movs	r3, #0
 8004c9a:	6892      	ldr	r2, [r2, #8]
 8004c9c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004ca0:	3201      	adds	r2, #1
 8004ca2:	9300      	str	r3, [sp, #0]
 8004ca4:	480f      	ldr	r0, [pc, #60]	; (8004ce4 <bmk2_execute.lto_priv.160+0x54>)
 8004ca6:	4b10      	ldr	r3, [pc, #64]	; (8004ce8 <bmk2_execute.lto_priv.160+0x58>)
 8004ca8:	f7fc f97a 	bl	8000fa0 <chThdCreateStatic>
 8004cac:	4b0f      	ldr	r3, [pc, #60]	; (8004cec <bmk2_execute.lto_priv.160+0x5c>)
 8004cae:	6018      	str	r0, [r3, #0]
  n = msg_loop_test(threads[0]);
 8004cb0:	f7ff ff66 	bl	8004b80 <msg_loop_test>
 8004cb4:	4604      	mov	r4, r0
  test_wait_threads();
 8004cb6:	f7fe fabb 	bl	8003230 <test_wait_threads>
  test_print("--- Score : ");
 8004cba:	480d      	ldr	r0, [pc, #52]	; (8004cf0 <bmk2_execute.lto_priv.160+0x60>)
 8004cbc:	f7fe fb88 	bl	80033d0 <test_print>
  test_printn(n);
 8004cc0:	4620      	mov	r0, r4
 8004cc2:	f7fe fb95 	bl	80033f0 <test_printn>
  test_print(" msgs/S, ");
 8004cc6:	480b      	ldr	r0, [pc, #44]	; (8004cf4 <bmk2_execute.lto_priv.160+0x64>)
 8004cc8:	f7fe fb82 	bl	80033d0 <test_print>
  test_printn(n << 1);
 8004ccc:	0060      	lsls	r0, r4, #1
 8004cce:	f7fe fb8f 	bl	80033f0 <test_printn>
  test_println(" ctxswc/S");
 8004cd2:	4809      	ldr	r0, [pc, #36]	; (8004cf8 <bmk2_execute.lto_priv.160+0x68>)
}
 8004cd4:	b002      	add	sp, #8
 8004cd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n);
  test_print(" msgs/S, ");
  test_printn(n << 1);
  test_println(" ctxswc/S");
 8004cda:	f7fe bb59 	b.w	8003390 <test_println>
 8004cde:	bf00      	nop
 8004ce0:	20001040 	.word	0x20001040
 8004ce4:	20001210 	.word	0x20001210
 8004ce8:	08004b61 	.word	0x08004b61
 8004cec:	20000968 	.word	0x20000968
 8004cf0:	08008468 	.word	0x08008468
 8004cf4:	080084dc 	.word	0x080084dc
 8004cf8:	080084b0 	.word	0x080084b0
 8004cfc:	00000000 	.word	0x00000000

08004d00 <bmk1_execute.lto_priv.159>:
 * A message server thread is created with a lower priority than the client
 * thread, the messages throughput per second is measured and the result
 * printed in the output log.
 */

static void bmk1_execute(void) {
 8004d00:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004d02:	4a13      	ldr	r2, [pc, #76]	; (8004d50 <bmk1_execute.lto_priv.159+0x50>)
 8004d04:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004d06:	6992      	ldr	r2, [r2, #24]
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread2, NULL);
 8004d08:	2300      	movs	r3, #0
 8004d0a:	6892      	ldr	r2, [r2, #8]
 8004d0c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004d10:	3a01      	subs	r2, #1
 8004d12:	9300      	str	r3, [sp, #0]
 8004d14:	480f      	ldr	r0, [pc, #60]	; (8004d54 <bmk1_execute.lto_priv.159+0x54>)
 8004d16:	4b10      	ldr	r3, [pc, #64]	; (8004d58 <bmk1_execute.lto_priv.159+0x58>)
 8004d18:	f7fc f942 	bl	8000fa0 <chThdCreateStatic>
 8004d1c:	4b0f      	ldr	r3, [pc, #60]	; (8004d5c <bmk1_execute.lto_priv.159+0x5c>)
 8004d1e:	6018      	str	r0, [r3, #0]
  n = msg_loop_test(threads[0]);
 8004d20:	f7ff ff2e 	bl	8004b80 <msg_loop_test>
 8004d24:	4604      	mov	r4, r0
  test_wait_threads();
 8004d26:	f7fe fa83 	bl	8003230 <test_wait_threads>
  test_print("--- Score : ");
 8004d2a:	480d      	ldr	r0, [pc, #52]	; (8004d60 <bmk1_execute.lto_priv.159+0x60>)
 8004d2c:	f7fe fb50 	bl	80033d0 <test_print>
  test_printn(n);
 8004d30:	4620      	mov	r0, r4
 8004d32:	f7fe fb5d 	bl	80033f0 <test_printn>
  test_print(" msgs/S, ");
 8004d36:	480b      	ldr	r0, [pc, #44]	; (8004d64 <bmk1_execute.lto_priv.159+0x64>)
 8004d38:	f7fe fb4a 	bl	80033d0 <test_print>
  test_printn(n << 1);
 8004d3c:	0060      	lsls	r0, r4, #1
 8004d3e:	f7fe fb57 	bl	80033f0 <test_printn>
  test_println(" ctxswc/S");
 8004d42:	4809      	ldr	r0, [pc, #36]	; (8004d68 <bmk1_execute.lto_priv.159+0x68>)
}
 8004d44:	b002      	add	sp, #8
 8004d46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n);
  test_print(" msgs/S, ");
  test_printn(n << 1);
  test_println(" ctxswc/S");
 8004d4a:	f7fe bb21 	b.w	8003390 <test_println>
 8004d4e:	bf00      	nop
 8004d50:	20001040 	.word	0x20001040
 8004d54:	20001210 	.word	0x20001210
 8004d58:	08004b61 	.word	0x08004b61
 8004d5c:	20000968 	.word	0x20000968
 8004d60:	08008468 	.word	0x08008468
 8004d64:	080084dc 	.word	0x080084dc
 8004d68:	080084b0 	.word	0x080084b0
 8004d6c:	00000000 	.word	0x00000000

08004d70 <sys3_execute.lto_priv.112>:
 * <h2>Description</h2>
 * The chSysIntegrityCheckI() API is invoked in order to asses the state of the
 * system data structures.
 */

static void sys3_execute(void) {
 8004d70:	b538      	push	{r3, r4, r5, lr}
 8004d72:	2420      	movs	r4, #32
 8004d74:	f384 8811 	msr	BASEPRI, r4
  bool result;

  chSysLock();
  result = chSysIntegrityCheckI(CH_INTEGRITY_RLIST);
 8004d78:	2001      	movs	r0, #1
 8004d7a:	f7fc ff61 	bl	8001c40 <chSysIntegrityCheckI>
 8004d7e:	2300      	movs	r3, #0
 8004d80:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  test_assert(1, result == false, "ready list check failed");
 8004d84:	f080 0101 	eor.w	r1, r0, #1
 8004d88:	b2c9      	uxtb	r1, r1
 8004d8a:	2001      	movs	r0, #1
 8004d8c:	f7fe fad0 	bl	8003330 <_test_assert>
 8004d90:	4605      	mov	r5, r0
 8004d92:	b100      	cbz	r0, 8004d96 <sys3_execute.lto_priv.112+0x26>
 8004d94:	bd38      	pop	{r3, r4, r5, pc}
 8004d96:	f384 8811 	msr	BASEPRI, r4

  chSysLock();
  result = chSysIntegrityCheckI(CH_INTEGRITY_VTLIST);
 8004d9a:	2002      	movs	r0, #2
 8004d9c:	f7fc ff50 	bl	8001c40 <chSysIntegrityCheckI>
 8004da0:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_assert(2, result == false, "virtual timers list check failed");
 8004da4:	f080 0101 	eor.w	r1, r0, #1
 8004da8:	b2c9      	uxtb	r1, r1
 8004daa:	2002      	movs	r0, #2
 8004dac:	f7fe fac0 	bl	8003330 <_test_assert>
 8004db0:	4605      	mov	r5, r0
 8004db2:	2800      	cmp	r0, #0
 8004db4:	d1ee      	bne.n	8004d94 <sys3_execute.lto_priv.112+0x24>
 8004db6:	f384 8811 	msr	BASEPRI, r4

  chSysLock();
  result = chSysIntegrityCheckI(CH_INTEGRITY_REGISTRY);
 8004dba:	2004      	movs	r0, #4
 8004dbc:	f7fc ff40 	bl	8001c40 <chSysIntegrityCheckI>
 8004dc0:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_assert(3, result == false, "registry list check failed");
 8004dc4:	f080 0101 	eor.w	r1, r0, #1
 8004dc8:	b2c9      	uxtb	r1, r1
 8004dca:	2003      	movs	r0, #3
 8004dcc:	f7fe fab0 	bl	8003330 <_test_assert>
 8004dd0:	4605      	mov	r5, r0
 8004dd2:	2800      	cmp	r0, #0
 8004dd4:	d1de      	bne.n	8004d94 <sys3_execute.lto_priv.112+0x24>
 8004dd6:	f384 8811 	msr	BASEPRI, r4

  chSysLock();
  result = chSysIntegrityCheckI(CH_INTEGRITY_PORT);
 8004dda:	2008      	movs	r0, #8
 8004ddc:	f7fc ff30 	bl	8001c40 <chSysIntegrityCheckI>
 8004de0:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_assert(4, result == false, "port layer check failed");
}
 8004de4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  test_assert(3, result == false, "registry list check failed");

  chSysLock();
  result = chSysIntegrityCheckI(CH_INTEGRITY_PORT);
  chSysUnlock();
  test_assert(4, result == false, "port layer check failed");
 8004de8:	f080 0101 	eor.w	r1, r0, #1
 8004dec:	b2c9      	uxtb	r1, r1
 8004dee:	2004      	movs	r0, #4
 8004df0:	f7fe ba9e 	b.w	8003330 <_test_assert>
	...

08004e00 <sys1_execute.lto_priv.110>:
  sts = chSysGetStatusAndLockX();
  chSysRestoreStatusX(sts);
  chSysUnlockFromISR();
}

static void sys1_execute(void) {
 8004e00:	b510      	push	{r4, lr}
 8004e02:	b086      	sub	sp, #24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e04:	f3ef 8311 	mrs	r3, BASEPRI
 * @xclass
 */
syssts_t chSysGetStatusAndLockX(void) {

  syssts_t sts = port_get_irq_status();
  if (port_irq_enabled(sts)) {
 8004e08:	b91b      	cbnz	r3, 8004e12 <sys1_execute.lto_priv.110+0x12>
 8004e0a:	f7fc ff09 	bl	8001c20 <chSysGetStatusAndLockX.part.2.lto_priv.96>
 8004e0e:	f7fc fef7 	bl	8001c00 <chSysRestoreStatusX.part.3.lto_priv.95>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8004e12:	2320      	movs	r3, #32
 8004e14:	f383 8811 	msr	BASEPRI, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e18:	f3ef 8311 	mrs	r3, BASEPRI
 8004e1c:	b91b      	cbnz	r3, 8004e26 <sys1_execute.lto_priv.110+0x26>
 8004e1e:	f7fc feff 	bl	8001c20 <chSysGetStatusAndLockX.part.2.lto_priv.96>
 8004e22:	f7fc feed 	bl	8001c00 <chSysRestoreStatusX.part.3.lto_priv.95>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8004e26:	2300      	movs	r3, #0
 8004e28:	f383 8811 	msr	BASEPRI, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e2c:	f3ef 8311 	mrs	r3, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalLock(void) {

  if (port_irq_enabled(port_get_irq_status())) {
 8004e30:	b913      	cbnz	r3, 8004e38 <sys1_execute.lto_priv.110+0x38>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8004e32:	2320      	movs	r3, #32
 8004e34:	f383 8811 	msr	BASEPRI, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e38:	f3ef 8311 	mrs	r3, BASEPRI
 8004e3c:	b913      	cbnz	r3, 8004e44 <sys1_execute.lto_priv.110+0x44>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8004e3e:	2320      	movs	r3, #32
 8004e40:	f383 8811 	msr	BASEPRI, r3
 8004e44:	2300      	movs	r3, #0
 8004e46:	f383 8811 	msr	BASEPRI, r3
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	f382 8811 	msr	BASEPRI, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e50:	f3ef 8211 	mrs	r2, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalUnlock(void) {

  if (!port_irq_enabled(port_get_irq_status())) {
 8004e54:	b10a      	cbz	r2, 8004e5a <sys1_execute.lto_priv.110+0x5a>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8004e56:	f383 8811 	msr	BASEPRI, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e5a:	f3ef 8311 	mrs	r3, BASEPRI
 8004e5e:	b113      	cbz	r3, 8004e66 <sys1_execute.lto_priv.110+0x66>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8004e60:	2300      	movs	r3, #0
 8004e62:	f383 8811 	msr	BASEPRI, r3
 *
 * @init
 */
static inline void chVTObjectInit(virtual_timer_t *vtp) {

  vtp->vt_func = NULL;
 8004e66:	2300      	movs	r3, #0
 8004e68:	9304      	str	r3, [sp, #16]
 8004e6a:	2320      	movs	r3, #32
 8004e6c:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 8004e70:	9b04      	ldr	r3, [sp, #16]
    chVTDoResetI(vtp);
 8004e72:	ac01      	add	r4, sp, #4
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 8004e74:	b113      	cbz	r3, 8004e7c <sys1_execute.lto_priv.110+0x7c>
    chVTDoResetI(vtp);
 8004e76:	4620      	mov	r0, r4
 8004e78:	f7fc fce2 	bl	8001840 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, systime_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 8004e7c:	4620      	mov	r0, r4
 8004e7e:	2101      	movs	r1, #1
 8004e80:	4a0b      	ldr	r2, [pc, #44]	; (8004eb0 <sys1_execute.lto_priv.110+0xb0>)
 8004e82:	2300      	movs	r3, #0
 8004e84:	f7fc fd1c 	bl	80018c0 <chVTDoSetI>
 8004e88:	2400      	movs	r4, #0
 8004e8a:	f384 8811 	msr	BASEPRI, r4
  chSysUnconditionalUnlock();

  /*/Testing from ISR context using a virtual timer.*/
  chVTObjectInit(&vt);
  chVTSet(&vt, 1, vtcb, NULL);
  chThdSleep(10);
 8004e8e:	200a      	movs	r0, #10
 8004e90:	f7fc fea6 	bl	8001be0 <chThdSleep>
 8004e94:	2320      	movs	r3, #32
 8004e96:	f383 8811 	msr	BASEPRI, r3
 8004e9a:	9904      	ldr	r1, [sp, #16]
 8004e9c:	f384 8811 	msr	BASEPRI, r4

  test_assert(1, chVTIsArmed(&vt) == false, "timer still armed");
 8004ea0:	fab1 f181 	clz	r1, r1
 8004ea4:	2001      	movs	r0, #1
 8004ea6:	0949      	lsrs	r1, r1, #5
 8004ea8:	f7fe fa42 	bl	8003330 <_test_assert>
}
 8004eac:	b006      	add	sp, #24
 8004eae:	bd10      	pop	{r4, pc}
 8004eb0:	08004ec1 	.word	0x08004ec1
	...

08004ec0 <vtcb>:
 *
 * <h2>Description</h2>
 * The critical zones API is invoked for coverage.
 */

static void vtcb(void *p) {
 8004ec0:	b508      	push	{r3, lr}
 8004ec2:	2320      	movs	r3, #32
 8004ec4:	f383 8811 	msr	BASEPRI, r3
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f382 8811 	msr	BASEPRI, r2
 8004ece:	f383 8811 	msr	BASEPRI, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ed2:	f3ef 8311 	mrs	r3, BASEPRI
 8004ed6:	b91b      	cbnz	r3, 8004ee0 <vtcb+0x20>
 8004ed8:	f7fc fea2 	bl	8001c20 <chSysGetStatusAndLockX.part.2.lto_priv.96>
 8004edc:	f7fc fe90 	bl	8001c00 <chSysRestoreStatusX.part.3.lto_priv.95>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	f383 8811 	msr	BASEPRI, r3
 8004ee6:	bd08      	pop	{r3, pc}
	...

08004ef0 <chprintf>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8004ef0:	b40e      	push	{r1, r2, r3}
 8004ef2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	aa0f      	add	r2, sp, #60	; 0x3c
 8004efa:	f852 9b04 	ldr.w	r9, [r2], #4
 8004efe:	4682      	mov	sl, r0
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 8004f00:	46cb      	mov	fp, r9
 8004f02:	4615      	mov	r5, r2
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8004f04:	9202      	str	r2, [sp, #8]
 8004f06:	f10d 030d 	add.w	r3, sp, #13
 8004f0a:	aa03      	add	r2, sp, #12
 8004f0c:	1a9b      	subs	r3, r3, r2
 8004f0e:	9301      	str	r3, [sp, #4]
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 8004f10:	f04f 0800 	mov.w	r8, #0
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8004f14:	f89b 1000 	ldrb.w	r1, [fp]
 8004f18:	f10b 0301 	add.w	r3, fp, #1
    if (c == 0)
 8004f1c:	b179      	cbz	r1, 8004f3e <chprintf+0x4e>
      return n;
    if (c != '%') {
 8004f1e:	2925      	cmp	r1, #37	; 0x25
 8004f20:	d013      	beq.n	8004f4a <chprintf+0x5a>
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8004f22:	469b      	mov	fp, r3
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
 8004f24:	f8da 2000 	ldr.w	r2, [sl]
 8004f28:	4650      	mov	r0, sl
 8004f2a:	6892      	ldr	r2, [r2, #8]
 8004f2c:	4790      	blx	r2
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8004f2e:	f89b 1000 	ldrb.w	r1, [fp]
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
      n++;
 8004f32:	f108 0801 	add.w	r8, r8, #1
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8004f36:	f10b 0301 	add.w	r3, fp, #1
    if (c == 0)
 8004f3a:	2900      	cmp	r1, #0
 8004f3c:	d1ef      	bne.n	8004f1e <chprintf+0x2e>
  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 8004f3e:	4640      	mov	r0, r8
 8004f40:	b006      	add	sp, #24
 8004f42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f46:	b003      	add	sp, #12
 8004f48:	4770      	bx	lr
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 8004f4a:	f89b 2001 	ldrb.w	r2, [fp, #1]
    filler = ' ';
    if (*fmt == '0') {
      fmt++;
      filler = '0';
    }
    width = 0;
 8004f4e:	2600      	movs	r6, #0
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 8004f50:	2a2d      	cmp	r2, #45	; 0x2d
 8004f52:	bf03      	ittte	eq
 8004f54:	f89b 2002 	ldrbeq.w	r2, [fp, #2]
      fmt++;
 8004f58:	f10b 0302 	addeq.w	r3, fp, #2
      left_align = TRUE;
 8004f5c:	f04f 0901 	moveq.w	r9, #1
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
 8004f60:	f04f 0900 	movne.w	r9, #0
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
 8004f64:	2a30      	cmp	r2, #48	; 0x30
 8004f66:	bf03      	ittte	eq
 8004f68:	785a      	ldrbeq	r2, [r3, #1]
      fmt++;
 8004f6a:	3301      	addeq	r3, #1
      filler = '0';
 8004f6c:	2730      	moveq	r7, #48	; 0x30
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
 8004f6e:	2720      	movne	r7, #32
 8004f70:	1c59      	adds	r1, r3, #1
 8004f72:	e006      	b.n	8004f82 <chprintf+0x92>
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
 8004f74:	782b      	ldrb	r3, [r5, #0]
 8004f76:	3504      	adds	r5, #4
 8004f78:	f89b 2000 	ldrb.w	r2, [fp]
      else
        break;
      width = width * 10 + c;
 8004f7c:	eb03 0640 	add.w	r6, r3, r0, lsl #1
 8004f80:	3101      	adds	r1, #1
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 8004f82:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	2b09      	cmp	r3, #9
      fmt++;
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
 8004f8a:	468b      	mov	fp, r1
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
      else
        break;
      width = width * 10 + c;
 8004f8c:	eb06 0086 	add.w	r0, r6, r6, lsl #2
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 8004f90:	d9f2      	bls.n	8004f78 <chprintf+0x88>
        c -= '0';
      else if (c == '*')
 8004f92:	2a2a      	cmp	r2, #42	; 0x2a
 8004f94:	d0ee      	beq.n	8004f74 <chprintf+0x84>
      else
        break;
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
 8004f96:	2a2e      	cmp	r2, #46	; 0x2e
 8004f98:	f04f 0100 	mov.w	r1, #0
 8004f9c:	d043      	beq.n	8005026 <chprintf+0x136>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 8004f9e:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8004fa2:	2b4c      	cmp	r3, #76	; 0x4c
 8004fa4:	d04e      	beq.n	8005044 <chprintf+0x154>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8004fa6:	f1a2 0044 	sub.w	r0, r2, #68	; 0x44
 8004faa:	2834      	cmp	r0, #52	; 0x34
 8004fac:	f200 80f6 	bhi.w	800519c <chprintf+0x2ac>
 8004fb0:	e8df f010 	tbh	[pc, r0, lsl #1]
 8004fb4:	00f400ea 	.word	0x00f400ea
 8004fb8:	00f400f4 	.word	0x00f400f4
 8004fbc:	00ea00f4 	.word	0x00ea00f4
 8004fc0:	00f400f4 	.word	0x00f400f4
 8004fc4:	00f400f4 	.word	0x00f400f4
 8004fc8:	00e800f4 	.word	0x00e800f4
 8004fcc:	00f400f4 	.word	0x00f400f4
 8004fd0:	00f400f4 	.word	0x00f400f4
 8004fd4:	00dd00f4 	.word	0x00dd00f4
 8004fd8:	00f400f4 	.word	0x00f400f4
 8004fdc:	00f400f1 	.word	0x00f400f1
 8004fe0:	00f400f4 	.word	0x00f400f4
 8004fe4:	00f400f4 	.word	0x00f400f4
 8004fe8:	00f400f4 	.word	0x00f400f4
 8004fec:	00f400f4 	.word	0x00f400f4
 8004ff0:	00a100f4 	.word	0x00a100f4
 8004ff4:	00f400ea 	.word	0x00f400ea
 8004ff8:	00f400f4 	.word	0x00f400f4
 8004ffc:	00ea00f4 	.word	0x00ea00f4
 8005000:	00f400f4 	.word	0x00f400f4
 8005004:	00f400f4 	.word	0x00f400f4
 8005008:	00e800f4 	.word	0x00e800f4
 800500c:	00f400f4 	.word	0x00f400f4
 8005010:	007100f4 	.word	0x007100f4
 8005014:	00dd00f4 	.word	0x00dd00f4
 8005018:	00f400f4 	.word	0x00f400f4
 800501c:	00f1      	.short	0x00f1
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
 800501e:	782b      	ldrb	r3, [r5, #0]
 8005020:	3504      	adds	r5, #4
        else
          break;
        precision *= 10;
        precision += c;
 8005022:	eb03 0140 	add.w	r1, r3, r0, lsl #1
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
 8005026:	f81b 2b01 	ldrb.w	r2, [fp], #1
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
        else
          break;
        precision *= 10;
 800502a:	eb01 0081 	add.w	r0, r1, r1, lsl #2
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
 800502e:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b09      	cmp	r3, #9
 8005036:	d9f4      	bls.n	8005022 <chprintf+0x132>
          c -= '0';
        else if (c == '*')
 8005038:	2a2a      	cmp	r2, #42	; 0x2a
 800503a:	d0f0      	beq.n	800501e <chprintf+0x12e>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 800503c:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8005040:	2b4c      	cmp	r3, #76	; 0x4c
 8005042:	d1b0      	bne.n	8004fa6 <chprintf+0xb6>
      is_long = TRUE;
      if (*fmt)
 8005044:	f89b 3000 	ldrb.w	r3, [fp]
 8005048:	2b00      	cmp	r3, #0
 800504a:	f000 80a7 	beq.w	800519c <chprintf+0x2ac>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 800504e:	f1a3 0244 	sub.w	r2, r3, #68	; 0x44
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = TRUE;
      if (*fmt)
        c = *fmt++;
 8005052:	f10b 0b01 	add.w	fp, fp, #1
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8005056:	2a34      	cmp	r2, #52	; 0x34
 8005058:	f200 809f 	bhi.w	800519a <chprintf+0x2aa>
 800505c:	e8df f002 	tbb	[pc, r2]
 8005060:	9d9d9d94 	.word	0x9d9d9d94
 8005064:	9d9d949d 	.word	0x9d9d949d
 8005068:	929d9d9d 	.word	0x929d9d9d
 800506c:	9d9d9d9d 	.word	0x9d9d9d9d
 8005070:	9d9d879d 	.word	0x9d9d879d
 8005074:	9d9d9d9b 	.word	0x9d9d9d9b
 8005078:	9d9d9d9d 	.word	0x9d9d9d9d
 800507c:	4b9d9d9d 	.word	0x4b9d9d9d
 8005080:	9d9d9d94 	.word	0x9d9d9d94
 8005084:	9d9d949d 	.word	0x9d9d949d
 8005088:	929d9d9d 	.word	0x929d9d9d
 800508c:	1b9d9d9d 	.word	0x1b9d9d9d
 8005090:	9d9d879d 	.word	0x9d9d879d
 8005094:	9b          	.byte	0x9b
 8005095:	00          	.byte	0x00
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 8005096:	682c      	ldr	r4, [r5, #0]
        s = "(null)";
 8005098:	4b59      	ldr	r3, [pc, #356]	; (8005200 <chprintf+0x310>)
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 800509a:	3504      	adds	r5, #4
        s = "(null)";
 800509c:	2c00      	cmp	r4, #0
 800509e:	bf08      	it	eq
 80050a0:	461c      	moveq	r4, r3
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 80050a2:	7823      	ldrb	r3, [r4, #0]
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
 80050a4:	2900      	cmp	r1, #0
 80050a6:	f000 8093 	beq.w	80051d0 <chprintf+0x2e0>
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	f000 8095 	beq.w	80051da <chprintf+0x2ea>
 80050b0:	3901      	subs	r1, #1
 80050b2:	4620      	mov	r0, r4
 80050b4:	e001      	b.n	80050ba <chprintf+0x1ca>
 80050b6:	3901      	subs	r1, #1
 80050b8:	d403      	bmi.n	80050c2 <chprintf+0x1d2>
 80050ba:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1f9      	bne.n	80050b6 <chprintf+0x1c6>
 80050c2:	1b00      	subs	r0, r0, r4
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 80050c4:	1a36      	subs	r6, r6, r0
 80050c6:	1e43      	subs	r3, r0, #1
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 80050c8:	2720      	movs	r7, #32
 80050ca:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 80050ce:	f1b9 0f00 	cmp.w	r9, #0
 80050d2:	d01f      	beq.n	8005114 <chprintf+0x224>
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	9300      	str	r3, [sp, #0]
 80050d8:	da34      	bge.n	8005144 <chprintf+0x254>
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 80050da:	2e00      	cmp	r6, #0
 80050dc:	f43f af1a 	beq.w	8004f14 <chprintf+0x24>
 80050e0:	4634      	mov	r4, r6
      streamPut(chp, (uint8_t)filler);
 80050e2:	f8da 3000 	ldr.w	r3, [sl]
 80050e6:	4650      	mov	r0, sl
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	4639      	mov	r1, r7
 80050ec:	4798      	blx	r3
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 80050ee:	3c01      	subs	r4, #1
 80050f0:	d1f7      	bne.n	80050e2 <chprintf+0x1f2>
 80050f2:	44b0      	add	r8, r6
 80050f4:	e70e      	b.n	8004f14 <chprintf+0x24>
 80050f6:	9a01      	ldr	r2, [sp, #4]

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
 80050f8:	682b      	ldr	r3, [r5, #0]
 80050fa:	4610      	mov	r0, r2
 80050fc:	f88d 300c 	strb.w	r3, [sp, #12]
 8005100:	3504      	adds	r5, #4
 8005102:	1e53      	subs	r3, r2, #1
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
 8005104:	2720      	movs	r7, #32
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8005106:	ac03      	add	r4, sp, #12
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 8005108:	1a36      	subs	r6, r6, r0
 800510a:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      width = 0;
    if (left_align == FALSE)
 800510e:	f1b9 0f00 	cmp.w	r9, #0
 8005112:	d1df      	bne.n	80050d4 <chprintf+0x1e4>
 8005114:	9300      	str	r3, [sp, #0]
      width = -width;
 8005116:	f1c6 0900 	rsb	r9, r6, #0
    if (width < 0) {
 800511a:	f1b9 0f00 	cmp.w	r9, #0
 800511e:	d044      	beq.n	80051aa <chprintf+0x2ba>
      if (*s == '-' && filler == '0') {
 8005120:	7821      	ldrb	r1, [r4, #0]
 8005122:	292d      	cmp	r1, #45	; 0x2d
 8005124:	d046      	beq.n	80051b4 <chprintf+0x2c4>
        streamPut(chp, (uint8_t)*s++);
        n++;
 8005126:	464e      	mov	r6, r9
        i--;
      }
      do {
        streamPut(chp, (uint8_t)filler);
 8005128:	f8da 3000 	ldr.w	r3, [sl]
 800512c:	4650      	mov	r0, sl
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	4639      	mov	r1, r7
 8005132:	4798      	blx	r3
        n++;
      } while (++width != 0);
 8005134:	3601      	adds	r6, #1
 8005136:	d1f7      	bne.n	8005128 <chprintf+0x238>
    }
    while (--i >= 0) {
 8005138:	9b00      	ldr	r3, [sp, #0]
 800513a:	ebc9 0808 	rsb	r8, r9, r8
 800513e:	2b00      	cmp	r3, #0
 8005140:	f6ff aee8 	blt.w	8004f14 <chprintf+0x24>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8005144:	f8dd 9000 	ldr.w	r9, [sp]
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
 8005148:	f8da 3000 	ldr.w	r3, [sl]
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 800514c:	f109 39ff 	add.w	r9, r9, #4294967295
      streamPut(chp, (uint8_t)*s++);
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	4650      	mov	r0, sl
 8005154:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005158:	4798      	blx	r3
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 800515a:	f1b9 3fff 	cmp.w	r9, #4294967295
 800515e:	d1f3      	bne.n	8005148 <chprintf+0x258>
 8005160:	9b00      	ldr	r3, [sp, #0]
 8005162:	f108 0801 	add.w	r8, r8, #1
 8005166:	2b00      	cmp	r3, #0
 8005168:	bfa8      	it	ge
 800516a:	4498      	addge	r8, r3
 800516c:	e7b5      	b.n	80050da <chprintf+0x1ea>
 800516e:	220a      	movs	r2, #10
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 8005170:	6829      	ldr	r1, [r5, #0]
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8005172:	a803      	add	r0, sp, #12
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 8005174:	3504      	adds	r5, #4
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8005176:	f002 fac3 	bl	8007700 <long_to_string_with_divisor.constprop.4>
 800517a:	ab03      	add	r3, sp, #12
 800517c:	1ac0      	subs	r0, r0, r3
 800517e:	1e43      	subs	r3, r0, #1
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8005180:	ac03      	add	r4, sp, #12
 8005182:	e7c1      	b.n	8005108 <chprintf+0x218>
 8005184:	2208      	movs	r2, #8
 8005186:	e7f3      	b.n	8005170 <chprintf+0x280>
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
 8005188:	6829      	ldr	r1, [r5, #0]
 800518a:	3504      	adds	r5, #4
      if (l < 0) {
 800518c:	2900      	cmp	r1, #0
 800518e:	db2e      	blt.n	80051ee <chprintf+0x2fe>
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 8005190:	a803      	add	r0, sp, #12
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8005192:	220a      	movs	r2, #10
 8005194:	e7ef      	b.n	8005176 <chprintf+0x286>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8005196:	2210      	movs	r2, #16
 8005198:	e7ea      	b.n	8005170 <chprintf+0x280>
 800519a:	461a      	mov	r2, r3
 800519c:	9b01      	ldr	r3, [sp, #4]
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 800519e:	ac03      	add	r4, sp, #12
 80051a0:	4618      	mov	r0, r3
      else
        l = va_arg(ap, unsigned int);
      p = ch_ltoa(p, l, c);
      break;
    default:
      *p++ = c;
 80051a2:	f88d 200c 	strb.w	r2, [sp, #12]
 80051a6:	3b01      	subs	r3, #1
 80051a8:	e7ae      	b.n	8005108 <chprintf+0x218>
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 80051aa:	9b00      	ldr	r3, [sp, #0]
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
 80051ac:	464e      	mov	r6, r9
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	dac8      	bge.n	8005144 <chprintf+0x254>
 80051b2:	e6af      	b.n	8004f14 <chprintf+0x24>
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
 80051b4:	2f30      	cmp	r7, #48	; 0x30
 80051b6:	d1b6      	bne.n	8005126 <chprintf+0x236>
        streamPut(chp, (uint8_t)*s++);
 80051b8:	f8da 3000 	ldr.w	r3, [sl]
 80051bc:	4650      	mov	r0, sl
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	4798      	blx	r3
 80051c2:	9b00      	ldr	r3, [sp, #0]
 80051c4:	3401      	adds	r4, #1
 80051c6:	3b01      	subs	r3, #1
        n++;
 80051c8:	f108 0801 	add.w	r8, r8, #1
 80051cc:	9300      	str	r3, [sp, #0]
 80051ce:	e7aa      	b.n	8005126 <chprintf+0x236>
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 80051d0:	f647 71fe 	movw	r1, #32766	; 0x7ffe
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	f47f af6c 	bne.w	80050b2 <chprintf+0x1c2>
 80051da:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 80051de:	f1b9 0f00 	cmp.w	r9, #0
 80051e2:	d10b      	bne.n	80051fc <chprintf+0x30c>
 80051e4:	f04f 33ff 	mov.w	r3, #4294967295
 80051e8:	9300      	str	r3, [sp, #0]
 80051ea:	2720      	movs	r7, #32
 80051ec:	e793      	b.n	8005116 <chprintf+0x226>
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 80051ee:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 80051f0:	4249      	negs	r1, r1
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 80051f2:	f88d 300c 	strb.w	r3, [sp, #12]
 80051f6:	f10d 000d 	add.w	r0, sp, #13
 80051fa:	e7ca      	b.n	8005192 <chprintf+0x2a2>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 80051fc:	2720      	movs	r7, #32
 80051fe:	e76c      	b.n	80050da <chprintf+0x1ea>
 8005200:	080084e8 	.word	0x080084e8
	...

08005210 <thread1>:
static mutex_t mtx1;
#endif

static THD_FUNCTION(thread1, p) {

  chThdExit((msg_t)p);
 8005210:	f7fc bb0e 	b.w	8001830 <chThdExit>
	...

08005220 <cmd_systime>:
}

static void cmd_systime(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc > 0) {
 8005220:	2900      	cmp	r1, #0
 8005222:	dd03      	ble.n	800522c <cmd_systime+0xc>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8005224:	4908      	ldr	r1, [pc, #32]	; (8005248 <cmd_systime+0x28>)
 8005226:	4a09      	ldr	r2, [pc, #36]	; (800524c <cmd_systime+0x2c>)
 8005228:	f7ff be62 	b.w	8004ef0 <chprintf>
 800522c:	2320      	movs	r3, #32
 800522e:	f383 8811 	msr	BASEPRI, r3
 8005232:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005236:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005238:	2300      	movs	r3, #0
 800523a:	f383 8811 	msr	BASEPRI, r3
  (void)argv;
  if (argc > 0) {
    usage(chp, "systime");
    return;
  }
  chprintf(chp, "%lu\r\n", (unsigned long)chVTGetSystemTime());
 800523e:	4904      	ldr	r1, [pc, #16]	; (8005250 <cmd_systime+0x30>)
 8005240:	b292      	uxth	r2, r2
 8005242:	f7ff be55 	b.w	8004ef0 <chprintf>
 8005246:	bf00      	nop
 8005248:	08008580 	.word	0x08008580
 800524c:	0800858c 	.word	0x0800858c
 8005250:	08008594 	.word	0x08008594
	...

08005260 <cmd_info>:
}

static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc > 0) {
 8005260:	2900      	cmp	r1, #0
 8005262:	dd03      	ble.n	800526c <cmd_info+0xc>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8005264:	4919      	ldr	r1, [pc, #100]	; (80052cc <cmd_info+0x6c>)
 8005266:	4a1a      	ldr	r2, [pc, #104]	; (80052d0 <cmd_info+0x70>)
 8005268:	f7ff be42 	b.w	8004ef0 <chprintf>
    chprintf(chp, "%s ", scp->sc_name);
    scp++;
  }
}

static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 800526c:	b510      	push	{r4, lr}
 800526e:	4604      	mov	r4, r0
 8005270:	b082      	sub	sp, #8
  if (argc > 0) {
    usage(chp, "info");
    return;
  }

  chprintf(chp, "Kernel:       %s\r\n", CH_KERNEL_VERSION);
 8005272:	4918      	ldr	r1, [pc, #96]	; (80052d4 <cmd_info+0x74>)
 8005274:	4a18      	ldr	r2, [pc, #96]	; (80052d8 <cmd_info+0x78>)
 8005276:	f7ff fe3b 	bl	8004ef0 <chprintf>
#ifdef PORT_COMPILER_NAME
  chprintf(chp, "Compiler:     %s\r\n", PORT_COMPILER_NAME);
 800527a:	4620      	mov	r0, r4
 800527c:	4917      	ldr	r1, [pc, #92]	; (80052dc <cmd_info+0x7c>)
 800527e:	4a18      	ldr	r2, [pc, #96]	; (80052e0 <cmd_info+0x80>)
 8005280:	f7ff fe36 	bl	8004ef0 <chprintf>
#endif
  chprintf(chp, "Architecture: %s\r\n", PORT_ARCHITECTURE_NAME);
 8005284:	4620      	mov	r0, r4
 8005286:	4917      	ldr	r1, [pc, #92]	; (80052e4 <cmd_info+0x84>)
 8005288:	4a17      	ldr	r2, [pc, #92]	; (80052e8 <cmd_info+0x88>)
 800528a:	f7ff fe31 	bl	8004ef0 <chprintf>
#ifdef PORT_CORE_VARIANT_NAME
  chprintf(chp, "Core Variant: %s\r\n", PORT_CORE_VARIANT_NAME);
 800528e:	4620      	mov	r0, r4
 8005290:	4916      	ldr	r1, [pc, #88]	; (80052ec <cmd_info+0x8c>)
 8005292:	4a17      	ldr	r2, [pc, #92]	; (80052f0 <cmd_info+0x90>)
 8005294:	f7ff fe2c 	bl	8004ef0 <chprintf>
#endif
#ifdef PORT_INFO
  chprintf(chp, "Port Info:    %s\r\n", PORT_INFO);
 8005298:	4620      	mov	r0, r4
 800529a:	4916      	ldr	r1, [pc, #88]	; (80052f4 <cmd_info+0x94>)
 800529c:	4a16      	ldr	r2, [pc, #88]	; (80052f8 <cmd_info+0x98>)
 800529e:	f7ff fe27 	bl	8004ef0 <chprintf>
#endif
#ifdef PLATFORM_NAME
  chprintf(chp, "Platform:     %s\r\n", PLATFORM_NAME);
 80052a2:	4620      	mov	r0, r4
 80052a4:	4915      	ldr	r1, [pc, #84]	; (80052fc <cmd_info+0x9c>)
 80052a6:	4a16      	ldr	r2, [pc, #88]	; (8005300 <cmd_info+0xa0>)
 80052a8:	f7ff fe22 	bl	8004ef0 <chprintf>
#endif
#ifdef BOARD_NAME
  chprintf(chp, "Board:        %s\r\n", BOARD_NAME);
 80052ac:	4620      	mov	r0, r4
 80052ae:	4915      	ldr	r1, [pc, #84]	; (8005304 <cmd_info+0xa4>)
 80052b0:	4a15      	ldr	r2, [pc, #84]	; (8005308 <cmd_info+0xa8>)
 80052b2:	f7ff fe1d 	bl	8004ef0 <chprintf>
#endif
#ifdef __DATE__
#ifdef __TIME__
  chprintf(chp, "Build time:   %s%s%s\r\n", __DATE__, " - ", __TIME__);
 80052b6:	4b15      	ldr	r3, [pc, #84]	; (800530c <cmd_info+0xac>)
 80052b8:	4620      	mov	r0, r4
 80052ba:	9300      	str	r3, [sp, #0]
 80052bc:	4914      	ldr	r1, [pc, #80]	; (8005310 <cmd_info+0xb0>)
 80052be:	4a15      	ldr	r2, [pc, #84]	; (8005314 <cmd_info+0xb4>)
 80052c0:	4b15      	ldr	r3, [pc, #84]	; (8005318 <cmd_info+0xb8>)
 80052c2:	f7ff fe15 	bl	8004ef0 <chprintf>
#endif
#endif
}
 80052c6:	b002      	add	sp, #8
 80052c8:	bd10      	pop	{r4, pc}
 80052ca:	bf00      	nop
 80052cc:	08008580 	.word	0x08008580
 80052d0:	0800859c 	.word	0x0800859c
 80052d4:	080085a4 	.word	0x080085a4
 80052d8:	08007dc4 	.word	0x08007dc4
 80052dc:	080085b8 	.word	0x080085b8
 80052e0:	08007de4 	.word	0x08007de4
 80052e4:	080085cc 	.word	0x080085cc
 80052e8:	08007e2c 	.word	0x08007e2c
 80052ec:	080085e0 	.word	0x080085e0
 80052f0:	08007e34 	.word	0x08007e34
 80052f4:	080085f4 	.word	0x080085f4
 80052f8:	08007e40 	.word	0x08007e40
 80052fc:	08008608 	.word	0x08008608
 8005300:	08007e58 	.word	0x08007e58
 8005304:	0800861c 	.word	0x0800861c
 8005308:	08007e84 	.word	0x08007e84
 800530c:	08008658 	.word	0x08008658
 8005310:	08008630 	.word	0x08008630
 8005314:	08008648 	.word	0x08008648
 8005318:	08008654 	.word	0x08008654
 800531c:	00000000 	.word	0x00000000

08005320 <cmd_threads>:
static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
  static const char *states[] = {CH_STATE_NAMES};
  thread_t *tp;

  (void)argv;
  if (argc > 0) {
 8005320:	2900      	cmp	r1, #0
 8005322:	dd02      	ble.n	800532a <cmd_threads+0xa>
    chprintf(chp, "Usage: threads\r\n");
 8005324:	4915      	ldr	r1, [pc, #84]	; (800537c <cmd_threads+0x5c>)
 8005326:	f7ff bde3 	b.w	8004ef0 <chprintf>
  chprintf(chp, "core free memory : %u bytes\r\n", chCoreGetStatusX());
  chprintf(chp, "heap fragments   : %u\r\n", n);
  chprintf(chp, "heap free total  : %u bytes\r\n", size);
}

static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 800532a:	b570      	push	{r4, r5, r6, lr}
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: threads\r\n");
    return;
  }
  chprintf(chp, "    addr    stack prio refs     state\r\n");
 800532c:	4914      	ldr	r1, [pc, #80]	; (8005380 <cmd_threads+0x60>)
  chprintf(chp, "core free memory : %u bytes\r\n", chCoreGetStatusX());
  chprintf(chp, "heap fragments   : %u\r\n", n);
  chprintf(chp, "heap free total  : %u bytes\r\n", size);
}

static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 800532e:	b084      	sub	sp, #16
 8005330:	4605      	mov	r5, r0
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: threads\r\n");
    return;
  }
  chprintf(chp, "    addr    stack prio refs     state\r\n");
 8005332:	f7ff fddd 	bl	8004ef0 <chprintf>
 8005336:	2320      	movs	r3, #32
 8005338:	f383 8811 	msr	BASEPRI, r3
 */
thread_t *chRegFirstThread(void) {
  thread_t *tp;

  chSysLock();
  tp = ch.rlist.r_newer;
 800533c:	4b11      	ldr	r3, [pc, #68]	; (8005384 <cmd_threads+0x64>)
 800533e:	2200      	movs	r2, #0
 8005340:	691c      	ldr	r4, [r3, #16]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs++;
 8005342:	7fa3      	ldrb	r3, [r4, #30]
 8005344:	3301      	adds	r3, #1
 8005346:	77a3      	strb	r3, [r4, #30]
 8005348:	f382 8811 	msr	BASEPRI, r2
 800534c:	4e0e      	ldr	r6, [pc, #56]	; (8005388 <cmd_threads+0x68>)
  tp = chRegFirstThread();
  do {
    chprintf(chp, "%08lx %08lx %4lu %4lu %9s %lu\r\n",
 800534e:	68a2      	ldr	r2, [r4, #8]
 8005350:	68e3      	ldr	r3, [r4, #12]
 8005352:	9200      	str	r2, [sp, #0]
             (uint32_t)tp, (uint32_t)tp->p_ctx.r13,
             (uint32_t)tp->p_prio, (uint32_t)(tp->p_refs - 1),
 8005354:	7fa2      	ldrb	r2, [r4, #30]
    return;
  }
  chprintf(chp, "    addr    stack prio refs     state\r\n");
  tp = chRegFirstThread();
  do {
    chprintf(chp, "%08lx %08lx %4lu %4lu %9s %lu\r\n",
 8005356:	490d      	ldr	r1, [pc, #52]	; (800538c <cmd_threads+0x6c>)
             (uint32_t)tp, (uint32_t)tp->p_ctx.r13,
             (uint32_t)tp->p_prio, (uint32_t)(tp->p_refs - 1),
 8005358:	3a01      	subs	r2, #1
    return;
  }
  chprintf(chp, "    addr    stack prio refs     state\r\n");
  tp = chRegFirstThread();
  do {
    chprintf(chp, "%08lx %08lx %4lu %4lu %9s %lu\r\n",
 800535a:	9201      	str	r2, [sp, #4]
 800535c:	7f22      	ldrb	r2, [r4, #28]
 800535e:	4628      	mov	r0, r5
 8005360:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8005364:	9202      	str	r2, [sp, #8]
 8005366:	4622      	mov	r2, r4
 8005368:	f7ff fdc2 	bl	8004ef0 <chprintf>
             (uint32_t)tp, (uint32_t)tp->p_ctx.r13,
             (uint32_t)tp->p_prio, (uint32_t)(tp->p_refs - 1),
             states[tp->p_state]);
    tp = chRegNextThread(tp);
 800536c:	4620      	mov	r0, r4
 800536e:	f7fc f92f 	bl	80015d0 <chRegNextThread>
  } while (tp != NULL);
 8005372:	4604      	mov	r4, r0
 8005374:	2800      	cmp	r0, #0
 8005376:	d1ea      	bne.n	800534e <cmd_threads+0x2e>
}
 8005378:	b004      	add	sp, #16
 800537a:	bd70      	pop	{r4, r5, r6, pc}
 800537c:	08008664 	.word	0x08008664
 8005380:	08008678 	.word	0x08008678
 8005384:	20001040 	.word	0x20001040
 8005388:	080084f0 	.word	0x080084f0
 800538c:	080086a0 	.word	0x080086a0

08005390 <cmd_mem>:
/*===========================================================================*/

#define SHELL_WA_SIZE   THD_WORKING_AREA_SIZE(2048)
#define TEST_WA_SIZE    THD_WORKING_AREA_SIZE(256)

static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
 8005390:	b530      	push	{r4, r5, lr}
  size_t n, size;

  (void)argv;
  if (argc > 0) {
 8005392:	2900      	cmp	r1, #0
/*===========================================================================*/

#define SHELL_WA_SIZE   THD_WORKING_AREA_SIZE(2048)
#define TEST_WA_SIZE    THD_WORKING_AREA_SIZE(256)

static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
 8005394:	b083      	sub	sp, #12
  size_t n, size;

  (void)argv;
  if (argc > 0) {
 8005396:	dd04      	ble.n	80053a2 <cmd_mem+0x12>
    chprintf(chp, "Usage: mem\r\n");
 8005398:	490f      	ldr	r1, [pc, #60]	; (80053d8 <cmd_mem+0x48>)
 800539a:	f7ff fda9 	bl	8004ef0 <chprintf>
  }
  n = chHeapStatus(NULL, &size);
  chprintf(chp, "core free memory : %u bytes\r\n", chCoreGetStatusX());
  chprintf(chp, "heap fragments   : %u\r\n", n);
  chprintf(chp, "heap free total  : %u bytes\r\n", size);
}
 800539e:	b003      	add	sp, #12
 80053a0:	bd30      	pop	{r4, r5, pc}
 80053a2:	4604      	mov	r4, r0
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: mem\r\n");
    return;
  }
  n = chHeapStatus(NULL, &size);
 80053a4:	a901      	add	r1, sp, #4
 80053a6:	2000      	movs	r0, #0
 80053a8:	f7fc f862 	bl	8001470 <chHeapStatus>
 80053ac:	4605      	mov	r5, r0
 * @xclass
 */
size_t chCoreGetStatusX(void) {

  /*lint -save -e9033 [10.8] The cast is safe.*/
  return (size_t)(endmem - nextmem);
 80053ae:	4a0b      	ldr	r2, [pc, #44]	; (80053dc <cmd_mem+0x4c>)
 80053b0:	4b0b      	ldr	r3, [pc, #44]	; (80053e0 <cmd_mem+0x50>)
 80053b2:	6812      	ldr	r2, [r2, #0]
 80053b4:	681b      	ldr	r3, [r3, #0]
  chprintf(chp, "core free memory : %u bytes\r\n", chCoreGetStatusX());
 80053b6:	4620      	mov	r0, r4
 80053b8:	1ad2      	subs	r2, r2, r3
 80053ba:	490a      	ldr	r1, [pc, #40]	; (80053e4 <cmd_mem+0x54>)
 80053bc:	f7ff fd98 	bl	8004ef0 <chprintf>
  chprintf(chp, "heap fragments   : %u\r\n", n);
 80053c0:	462a      	mov	r2, r5
 80053c2:	4620      	mov	r0, r4
 80053c4:	4908      	ldr	r1, [pc, #32]	; (80053e8 <cmd_mem+0x58>)
 80053c6:	f7ff fd93 	bl	8004ef0 <chprintf>
  chprintf(chp, "heap free total  : %u bytes\r\n", size);
 80053ca:	4620      	mov	r0, r4
 80053cc:	4907      	ldr	r1, [pc, #28]	; (80053ec <cmd_mem+0x5c>)
 80053ce:	9a01      	ldr	r2, [sp, #4]
 80053d0:	f7ff fd8e 	bl	8004ef0 <chprintf>
}
 80053d4:	b003      	add	sp, #12
 80053d6:	bd30      	pop	{r4, r5, pc}
 80053d8:	080086c0 	.word	0x080086c0
 80053dc:	20000a20 	.word	0x20000a20
 80053e0:	20000a1c 	.word	0x20000a1c
 80053e4:	080086d0 	.word	0x080086d0
 80053e8:	080086f0 	.word	0x080086f0
 80053ec:	08008708 	.word	0x08008708

080053f0 <shell_thread>:
/**
 * @brief   Shell thread function.
 *
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
static THD_FUNCTION(shell_thread, p) {
 80053f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 80053f4:	4b79      	ldr	r3, [pc, #484]	; (80055dc <shell_thread+0x1ec>)
  int n;
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
 80053f6:	6804      	ldr	r4, [r0, #0]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	4a79      	ldr	r2, [pc, #484]	; (80055e0 <shell_thread+0x1f0>)
/**
 * @brief   Shell thread function.
 *
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
static THD_FUNCTION(shell_thread, p) {
 80053fc:	b098      	sub	sp, #96	; 0x60
  int n;
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
  const ShellCommand *scp = ((ShellConfig *)p)->sc_commands;
 80053fe:	f8d0 8004 	ldr.w	r8, [r0, #4]
  char *lp, *cmd, *tokp, line[SHELL_MAX_LINE_LENGTH];
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
  chprintf(chp, "\r\nChibiOS/RT Shell\r\n");
 8005402:	4978      	ldr	r1, [pc, #480]	; (80055e4 <shell_thread+0x1f4>)
 8005404:	4620      	mov	r0, r4
 8005406:	619a      	str	r2, [r3, #24]
 8005408:	f7ff fd72 	bl	8004ef0 <chprintf>
 800540c:	ae08      	add	r6, sp, #32
      *p = 0;
      return false;
    }
    if (c < 0x20)
      continue;
    if (p < line + size - 1) {
 800540e:	f10d 075f 	add.w	r7, sp, #95	; 0x5f
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
  chprintf(chp, "\r\nChibiOS/RT Shell\r\n");
  while (true) {
    chprintf(chp, "ch> ");
 8005412:	4620      	mov	r0, r4
 8005414:	4974      	ldr	r1, [pc, #464]	; (80055e8 <shell_thread+0x1f8>)
 8005416:	f7ff fd6b 	bl	8004ef0 <chprintf>
 * @retval false        operation successful.
 *
 * @api
 */
bool shellGetLine(BaseSequentialStream *chp, char *line, unsigned size) {
  char *p = line;
 800541a:	4635      	mov	r5, r6

  while (true) {
    char c;

    if (chSequentialStreamRead(chp, (uint8_t *)&c, 1) == 0)
 800541c:	6823      	ldr	r3, [r4, #0]
 800541e:	4620      	mov	r0, r4
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f10d 0107 	add.w	r1, sp, #7
 8005426:	2201      	movs	r2, #1
 8005428:	4798      	blx	r3
 800542a:	b370      	cbz	r0, 800548a <shell_thread+0x9a>
      return true;
    if (c == 4) {
 800542c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8005430:	2904      	cmp	r1, #4
 8005432:	d026      	beq.n	8005482 <shell_thread+0x92>
      chprintf(chp, "^D");
      return true;
    }
    if ((c == 8) || (c == 127)) {
 8005434:	2908      	cmp	r1, #8
 8005436:	d011      	beq.n	800545c <shell_thread+0x6c>
 8005438:	297f      	cmp	r1, #127	; 0x7f
 800543a:	d00f      	beq.n	800545c <shell_thread+0x6c>
        chSequentialStreamPut(chp, c);
        p--;
      }
      continue;
    }
    if (c == '\r') {
 800543c:	290d      	cmp	r1, #13
 800543e:	d035      	beq.n	80054ac <shell_thread+0xbc>
      chprintf(chp, "\r\n");
      *p = 0;
      return false;
    }
    if (c < 0x20)
 8005440:	291f      	cmp	r1, #31
 8005442:	d9eb      	bls.n	800541c <shell_thread+0x2c>
      continue;
    if (p < line + size - 1) {
 8005444:	42bd      	cmp	r5, r7
 8005446:	d2e9      	bcs.n	800541c <shell_thread+0x2c>
      chSequentialStreamPut(chp, c);
 8005448:	6823      	ldr	r3, [r4, #0]
 800544a:	4620      	mov	r0, r4
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	4798      	blx	r3
      *p++ = (char)c;
 8005450:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005454:	3501      	adds	r5, #1
 8005456:	f805 3c01 	strb.w	r3, [r5, #-1]
 800545a:	e7df      	b.n	800541c <shell_thread+0x2c>
    if (c == 4) {
      chprintf(chp, "^D");
      return true;
    }
    if ((c == 8) || (c == 127)) {
      if (p != line) {
 800545c:	42b5      	cmp	r5, r6
 800545e:	d0dd      	beq.n	800541c <shell_thread+0x2c>
        chSequentialStreamPut(chp, c);
 8005460:	6823      	ldr	r3, [r4, #0]
 8005462:	4620      	mov	r0, r4
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	4798      	blx	r3
        chSequentialStreamPut(chp, 0x20);
 8005468:	6823      	ldr	r3, [r4, #0]
 800546a:	4620      	mov	r0, r4
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	2120      	movs	r1, #32
 8005470:	4798      	blx	r3
        chSequentialStreamPut(chp, c);
 8005472:	6823      	ldr	r3, [r4, #0]
 8005474:	4620      	mov	r0, r4
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f89d 1007 	ldrb.w	r1, [sp, #7]
        p--;
 800547c:	3d01      	subs	r5, #1
    }
    if ((c == 8) || (c == 127)) {
      if (p != line) {
        chSequentialStreamPut(chp, c);
        chSequentialStreamPut(chp, 0x20);
        chSequentialStreamPut(chp, c);
 800547e:	4798      	blx	r3
 8005480:	e7cc      	b.n	800541c <shell_thread+0x2c>
    char c;

    if (chSequentialStreamRead(chp, (uint8_t *)&c, 1) == 0)
      return true;
    if (c == 4) {
      chprintf(chp, "^D");
 8005482:	4620      	mov	r0, r4
 8005484:	4959      	ldr	r1, [pc, #356]	; (80055ec <shell_thread+0x1fc>)
 8005486:	f7ff fd33 	bl	8004ef0 <chprintf>
  chRegSetThreadName("shell");
  chprintf(chp, "\r\nChibiOS/RT Shell\r\n");
  while (true) {
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
 800548a:	4620      	mov	r0, r4
 800548c:	4958      	ldr	r1, [pc, #352]	; (80055f0 <shell_thread+0x200>)
 800548e:	f7ff fd2f 	bl	8004ef0 <chprintf>
 8005492:	2320      	movs	r3, #32
 8005494:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void chEvtBroadcastI(event_source_t *esp) {

  chEvtBroadcastFlagsI(esp, (eventflags_t)0);
 8005498:	2100      	movs	r1, #0
 800549a:	4856      	ldr	r0, [pc, #344]	; (80055f4 <shell_thread+0x204>)
 800549c:	f7fb fec8 	bl	8001230 <chEvtBroadcastFlagsI>

  /* Atomically broadcasting the event source and terminating the thread,
     there is not a chSysUnlock() because the thread terminates upon return.*/
  chSysLock();
  chEvtBroadcastI(&shell_terminated);
  chThdExitS(msg);
 80054a0:	2000      	movs	r0, #0
 80054a2:	f7fc f9a5 	bl	80017f0 <chThdExitS>
        chprintf(chp, " ?\r\n");
      }
    }
  }
  shellExit(MSG_OK);
}
 80054a6:	b018      	add	sp, #96	; 0x60
 80054a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p--;
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, "\r\n");
 80054ac:	4952      	ldr	r1, [pc, #328]	; (80055f8 <shell_thread+0x208>)
 80054ae:	4620      	mov	r0, r4
 80054b0:	f7ff fd1e 	bl	8004ef0 <chprintf>
      *p = 0;
 80054b4:	2300      	movs	r3, #0
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 80054b6:	a902      	add	r1, sp, #8
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, "\r\n");
      *p = 0;
 80054b8:	702b      	strb	r3, [r5, #0]
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 80054ba:	4630      	mov	r0, r6
    cmd = lp;
    n = 0;
 80054bc:	461d      	mov	r5, r3
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 80054be:	f002 f947 	bl	8007750 <_strtok.constprop.3>
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 80054c2:	a902      	add	r1, sp, #8
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 80054c4:	4682      	mov	sl, r0
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 80054c6:	2000      	movs	r0, #0
 80054c8:	f10d 090c 	add.w	r9, sp, #12
 80054cc:	f002 f940 	bl	8007750 <_strtok.constprop.3>
 80054d0:	b150      	cbz	r0, 80054e8 <shell_thread+0xf8>
      if (n >= SHELL_MAX_ARGUMENTS) {
 80054d2:	2d04      	cmp	r5, #4
 80054d4:	d01d      	beq.n	8005512 <shell_thread+0x122>
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 80054d6:	f849 0b04 	str.w	r0, [r9], #4
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 80054da:	a902      	add	r1, sp, #8
 80054dc:	2000      	movs	r0, #0
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 80054de:	3501      	adds	r5, #1
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 80054e0:	f002 f936 	bl	8007750 <_strtok.constprop.3>
 80054e4:	2800      	cmp	r0, #0
 80054e6:	d1f4      	bne.n	80054d2 <shell_thread+0xe2>
        cmd = NULL;
        break;
      }
      args[n++] = lp;
    }
    args[n] = NULL;
 80054e8:	ab18      	add	r3, sp, #96	; 0x60
 80054ea:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80054ee:	f843 0c54 	str.w	r0, [r3, #-84]
    if (cmd != NULL) {
 80054f2:	f1ba 0f00 	cmp.w	sl, #0
 80054f6:	d08c      	beq.n	8005412 <shell_thread+0x22>
      if (strcmp(cmd, "exit") == 0) {
 80054f8:	4650      	mov	r0, sl
 80054fa:	4940      	ldr	r1, [pc, #256]	; (80055fc <shell_thread+0x20c>)
 80054fc:	f7fb faa8 	bl	8000a50 <strcmp>
 8005500:	b970      	cbnz	r0, 8005520 <shell_thread+0x130>
        if (n > 0) {
 8005502:	2d00      	cmp	r5, #0
 8005504:	d0c5      	beq.n	8005492 <shell_thread+0xa2>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8005506:	4620      	mov	r0, r4
 8005508:	493d      	ldr	r1, [pc, #244]	; (8005600 <shell_thread+0x210>)
 800550a:	4a3c      	ldr	r2, [pc, #240]	; (80055fc <shell_thread+0x20c>)
 800550c:	f7ff fcf0 	bl	8004ef0 <chprintf>
 8005510:	e77f      	b.n	8005412 <shell_thread+0x22>
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
 8005512:	4620      	mov	r0, r4
 8005514:	493b      	ldr	r1, [pc, #236]	; (8005604 <shell_thread+0x214>)
 8005516:	f7ff fceb 	bl	8004ef0 <chprintf>
        cmd = NULL;
        break;
      }
      args[n++] = lp;
    }
    args[n] = NULL;
 800551a:	2300      	movs	r3, #0
 800551c:	9307      	str	r3, [sp, #28]
 800551e:	e778      	b.n	8005412 <shell_thread+0x22>
          usage(chp, "exit");
          continue;
        }
        break;
      }
      else if (strcmp(cmd, "help") == 0) {
 8005520:	4650      	mov	r0, sl
 8005522:	4939      	ldr	r1, [pc, #228]	; (8005608 <shell_thread+0x218>)
 8005524:	f7fb fa94 	bl	8000a50 <strcmp>
 8005528:	b930      	cbnz	r0, 8005538 <shell_thread+0x148>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 800552a:	4620      	mov	r0, r4
          continue;
        }
        break;
      }
      else if (strcmp(cmd, "help") == 0) {
        if (n > 0) {
 800552c:	b1c5      	cbz	r5, 8005560 <shell_thread+0x170>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 800552e:	4934      	ldr	r1, [pc, #208]	; (8005600 <shell_thread+0x210>)
 8005530:	4a35      	ldr	r2, [pc, #212]	; (8005608 <shell_thread+0x218>)
 8005532:	f7ff fcdd 	bl	8004ef0 <chprintf>
 8005536:	e76c      	b.n	8005412 <shell_thread+0x22>
};

static bool cmdexec(const ShellCommand *scp, BaseSequentialStream *chp,
                      char *name, int argc, char *argv[]) {

  while (scp->sc_name != NULL) {
 8005538:	4b34      	ldr	r3, [pc, #208]	; (800560c <shell_thread+0x21c>)
 800553a:	6818      	ldr	r0, [r3, #0]
 800553c:	4699      	mov	r9, r3
 800553e:	b918      	cbnz	r0, 8005548 <shell_thread+0x158>
 8005540:	e031      	b.n	80055a6 <shell_thread+0x1b6>
 8005542:	f859 0f08 	ldr.w	r0, [r9, #8]!
 8005546:	b370      	cbz	r0, 80055a6 <shell_thread+0x1b6>
    if (strcmp(scp->sc_name, name) == 0) {
 8005548:	4651      	mov	r1, sl
 800554a:	f7fb fa81 	bl	8000a50 <strcmp>
 800554e:	2800      	cmp	r0, #0
 8005550:	d1f7      	bne.n	8005542 <shell_thread+0x152>
      scp->sc_function(chp, argc, argv);
 8005552:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005556:	4629      	mov	r1, r5
 8005558:	aa03      	add	r2, sp, #12
 800555a:	4620      	mov	r0, r4
 800555c:	4798      	blx	r3
 800555e:	e758      	b.n	8005412 <shell_thread+0x22>
      else if (strcmp(cmd, "help") == 0) {
        if (n > 0) {
          usage(chp, "help");
          continue;
        }
        chprintf(chp, "Commands: help exit ");
 8005560:	492b      	ldr	r1, [pc, #172]	; (8005610 <shell_thread+0x220>)
 8005562:	f7ff fcc5 	bl	8004ef0 <chprintf>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8005566:	4b29      	ldr	r3, [pc, #164]	; (800560c <shell_thread+0x21c>)
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	461d      	mov	r5, r3
 800556c:	b13a      	cbz	r2, 800557e <shell_thread+0x18e>
    chprintf(chp, "%s ", scp->sc_name);
 800556e:	4620      	mov	r0, r4
 8005570:	4928      	ldr	r1, [pc, #160]	; (8005614 <shell_thread+0x224>)
 8005572:	f7ff fcbd 	bl	8004ef0 <chprintf>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8005576:	f855 2f08 	ldr.w	r2, [r5, #8]!
 800557a:	2a00      	cmp	r2, #0
 800557c:	d1f7      	bne.n	800556e <shell_thread+0x17e>
          usage(chp, "help");
          continue;
        }
        chprintf(chp, "Commands: help exit ");
        list_commands(chp, local_commands);
        if (scp != NULL)
 800557e:	f1b8 0f00 	cmp.w	r8, #0
 8005582:	d00b      	beq.n	800559c <shell_thread+0x1ac>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8005584:	f8d8 2000 	ldr.w	r2, [r8]
 8005588:	b142      	cbz	r2, 800559c <shell_thread+0x1ac>
 800558a:	4645      	mov	r5, r8
    chprintf(chp, "%s ", scp->sc_name);
 800558c:	4620      	mov	r0, r4
 800558e:	4921      	ldr	r1, [pc, #132]	; (8005614 <shell_thread+0x224>)
 8005590:	f7ff fcae 	bl	8004ef0 <chprintf>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8005594:	f855 2f08 	ldr.w	r2, [r5, #8]!
 8005598:	2a00      	cmp	r2, #0
 800559a:	d1f7      	bne.n	800558c <shell_thread+0x19c>
        }
        chprintf(chp, "Commands: help exit ");
        list_commands(chp, local_commands);
        if (scp != NULL)
          list_commands(chp, scp);
        chprintf(chp, "\r\n");
 800559c:	4620      	mov	r0, r4
 800559e:	4916      	ldr	r1, [pc, #88]	; (80055f8 <shell_thread+0x208>)
 80055a0:	f7ff fca6 	bl	8004ef0 <chprintf>
 80055a4:	e735      	b.n	8005412 <shell_thread+0x22>
      }
      else if (cmdexec(local_commands, chp, cmd, n, args) &&
 80055a6:	f1b8 0f00 	cmp.w	r8, #0
 80055aa:	d00d      	beq.n	80055c8 <shell_thread+0x1d8>
};

static bool cmdexec(const ShellCommand *scp, BaseSequentialStream *chp,
                      char *name, int argc, char *argv[]) {

  while (scp->sc_name != NULL) {
 80055ac:	f8d8 0000 	ldr.w	r0, [r8]
 80055b0:	b150      	cbz	r0, 80055c8 <shell_thread+0x1d8>
 80055b2:	46c1      	mov	r9, r8
 80055b4:	e002      	b.n	80055bc <shell_thread+0x1cc>
 80055b6:	f859 0f08 	ldr.w	r0, [r9, #8]!
 80055ba:	b128      	cbz	r0, 80055c8 <shell_thread+0x1d8>
    if (strcmp(scp->sc_name, name) == 0) {
 80055bc:	4651      	mov	r1, sl
 80055be:	f7fb fa47 	bl	8000a50 <strcmp>
 80055c2:	2800      	cmp	r0, #0
 80055c4:	d1f7      	bne.n	80055b6 <shell_thread+0x1c6>
 80055c6:	e7c4      	b.n	8005552 <shell_thread+0x162>
          list_commands(chp, scp);
        chprintf(chp, "\r\n");
      }
      else if (cmdexec(local_commands, chp, cmd, n, args) &&
          ((scp == NULL) || cmdexec(scp, chp, cmd, n, args))) {
        chprintf(chp, "%s", cmd);
 80055c8:	4652      	mov	r2, sl
 80055ca:	4620      	mov	r0, r4
 80055cc:	4912      	ldr	r1, [pc, #72]	; (8005618 <shell_thread+0x228>)
 80055ce:	f7ff fc8f 	bl	8004ef0 <chprintf>
        chprintf(chp, " ?\r\n");
 80055d2:	4620      	mov	r0, r4
 80055d4:	4911      	ldr	r1, [pc, #68]	; (800561c <shell_thread+0x22c>)
 80055d6:	f7ff fc8b 	bl	8004ef0 <chprintf>
 80055da:	e71a      	b.n	8005412 <shell_thread+0x22>
 80055dc:	20001040 	.word	0x20001040
 80055e0:	08008728 	.word	0x08008728
 80055e4:	08008730 	.word	0x08008730
 80055e8:	08008748 	.word	0x08008748
 80055ec:	08008750 	.word	0x08008750
 80055f0:	080087a4 	.word	0x080087a4
 80055f4:	20000a24 	.word	0x20000a24
 80055f8:	080089c0 	.word	0x080089c0
 80055fc:	0800876c 	.word	0x0800876c
 8005600:	08008580 	.word	0x08008580
 8005604:	08008754 	.word	0x08008754
 8005608:	08008774 	.word	0x08008774
 800560c:	20000820 	.word	0x20000820
 8005610:	0800877c 	.word	0x0800877c
 8005614:	08008794 	.word	0x08008794
 8005618:	08008798 	.word	0x08008798
 800561c:	0800879c 	.word	0x0800879c

08005620 <main>:
}

/*
 * Application entry point.
 */
int main(void) {
 8005620:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8005624:	f8df e33c 	ldr.w	lr, [pc, #828]	; 8005964 <main+0x344>
 * @notapi
 */
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
 8005628:	2100      	movs	r1, #0
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0U;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 800562a:	460a      	mov	r2, r1
    _stm32_dma_streams[i].channel->CCR = 0U;
 800562c:	460d      	mov	r5, r1
 800562e:	4674      	mov	r4, lr
 8005630:	4bb7      	ldr	r3, [pc, #732]	; (8005910 <main+0x2f0>)
 8005632:	f04f 30ff 	mov.w	r0, #4294967295
 8005636:	691e      	ldr	r6, [r3, #16]
 8005638:	6118      	str	r0, [r3, #16]
 800563a:	6119      	str	r1, [r3, #16]
  rccResetAPB2(0xFFFFFFFF);
 800563c:	68de      	ldr	r6, [r3, #12]
 800563e:	60d8      	str	r0, [r3, #12]
 8005640:	60d9      	str	r1, [r3, #12]

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
 8005642:	69d8      	ldr	r0, [r3, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8005644:	4eb3      	ldr	r6, [pc, #716]	; (8005914 <main+0x2f4>)
  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
  rccResetAPB2(0xFFFFFFFF);

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
 8005646:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 800564a:	61d8      	str	r0, [r3, #28]
  rccEnableBKPInterface(FALSE);
 800564c:	69d8      	ldr	r0, [r3, #28]
 800564e:	f8df 9318 	ldr.w	r9, [pc, #792]	; 8005968 <main+0x348>
 8005652:	f040 6000 	orr.w	r0, r0, #134217728	; 0x8000000
 8005656:	61d8      	str	r0, [r3, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8005658:	6833      	ldr	r3, [r6, #0]
 800565a:	b08d      	sub	sp, #52	; 0x34
 800565c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005660:	6033      	str	r3, [r6, #0]
 * @init
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0U;
 8005662:	4bad      	ldr	r3, [pc, #692]	; (8005918 <main+0x2f8>)
 8005664:	6019      	str	r1, [r3, #0]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0U;
 8005666:	6861      	ldr	r1, [r4, #4]
 8005668:	2300      	movs	r3, #0
 800566a:	600d      	str	r5, [r1, #0]
    _stm32_dma_isr_redir[i].dma_func = NULL;
 800566c:	f849 5032 	str.w	r5, [r9, r2, lsl #3]
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0U;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8005670:	3201      	adds	r2, #1
 8005672:	2a07      	cmp	r2, #7
 8005674:	f104 0414 	add.w	r4, r4, #20
 8005678:	d1f5      	bne.n	8005666 <main+0x46>
void adc_lld_init(void) {

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
  ADCD1.adc = ADC1;
 800567a:	4aa8      	ldr	r2, [pc, #672]	; (800591c <main+0x2fc>)
  ADCD1.dmastp  = STM32_DMA1_STREAM1;
  ADCD1.dmamode = STM32_DMA_CR_PL(STM32_ADC_ADC1_DMA_PRIORITY) |
 800567c:	f242 5c8a 	movw	ip, #9610	; 0x258a
  ADC1->CR1 = 0;
  ADC1->CR2 = ADC_CR2_ADON;

  /* Reset calibration just to be safe.*/
  ADC1->CR2 = ADC_CR2_ADON | ADC_CR2_RSTCAL;
  while ((ADC1->CR2 & ADC_CR2_RSTCAL) != 0)
 8005680:	4692      	mov	sl, r2
    _stm32_dma_streams[i].channel->CCR = 0U;
    _stm32_dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->IFCR = 0xFFFFFFFFU;
 8005682:	48a7      	ldr	r0, [pc, #668]	; (8005920 <main+0x300>)
 8005684:	f04f 37ff 	mov.w	r7, #4294967295
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 8005688:	49a1      	ldr	r1, [pc, #644]	; (8005910 <main+0x2f0>)
 800568a:	6047      	str	r7, [r0, #4]
 800568c:	698c      	ldr	r4, [r1, #24]

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
 800568e:	f8df b2dc 	ldr.w	fp, [pc, #732]	; 800596c <main+0x34c>
  rccEnableAPB2(APB2_EN_MASK, FALSE);

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 8005692:	f5a0 4078 	sub.w	r0, r0, #63488	; 0xf800
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
 8005696:	4ea3      	ldr	r6, [pc, #652]	; (8005924 <main+0x304>)
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 8005698:	f044 047d 	orr.w	r4, r4, #125	; 0x7d
 800569c:	618c      	str	r4, [r1, #24]
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
 800569e:	4da2      	ldr	r5, [pc, #648]	; (8005928 <main+0x308>)
  rccEnableAPB2(APB2_EN_MASK, FALSE);

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 80056a0:	60c7      	str	r7, [r0, #12]
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
 80056a2:	4ca2      	ldr	r4, [pc, #648]	; (800592c <main+0x30c>)

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
 80056a4:	f8c0 b004 	str.w	fp, [r0, #4]
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
 80056a8:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 8005970 <main+0x350>
  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
 80056ac:	f04f 4b88 	mov.w	fp, #1140850688	; 0x44000000
 80056b0:	f8c0 b000 	str.w	fp, [r0]
  GPIOB->ODR = config->PBData.odr;
 80056b4:	60f7      	str	r7, [r6, #12]
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 80056b6:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
 80056ba:	f04f 3788 	mov.w	r7, #2290649224	; 0x88888888
 80056be:	6077      	str	r7, [r6, #4]
  GPIOB->CRL = config->PBData.crl;
 80056c0:	f8c6 8000 	str.w	r8, [r6]
  GPIOC->ODR = config->PCData.odr;
 80056c4:	60eb      	str	r3, [r5, #12]
  GPIOC->CRH = config->PCData.crh;
 80056c6:	606b      	str	r3, [r5, #4]
  GPIOC->CRL = config->PCData.crl;
 80056c8:	602b      	str	r3, [r5, #0]
  GPIOD->ODR = config->PDData.odr;
 80056ca:	60e3      	str	r3, [r4, #12]
  GPIOD->CRH = config->PDData.crh;
 80056cc:	6063      	str	r3, [r4, #4]
  GPIOD->CRL = config->PDData.crl;
 80056ce:	6023      	str	r3, [r4, #0]
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 80056d0:	60c3      	str	r3, [r0, #12]
  GPIOE->CRH = config->PEData.crh;
 80056d2:	6043      	str	r3, [r0, #4]
  GPIOE->CRL = config->PEData.crl;
 80056d4:	6003      	str	r3, [r0, #0]
                  STM32_DMA_CR_MSIZE_HWORD | STM32_DMA_CR_PSIZE_HWORD |
                  STM32_DMA_CR_MINC        | STM32_DMA_CR_TCIE        |
                  STM32_DMA_CR_TEIE;

  /* Temporary activation.*/
  rccEnableADC1(FALSE);
 80056d6:	6988      	ldr	r0, [r1, #24]
 *
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
 80056d8:	4f95      	ldr	r7, [pc, #596]	; (8005930 <main+0x310>)
 80056da:	2601      	movs	r6, #1
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80056dc:	f107 0418 	add.w	r4, r7, #24
 80056e0:	f440 7000 	orr.w	r0, r0, #512	; 0x200
  ADC1->CR1 = 0;
  ADC1->CR2 = ADC_CR2_ADON;

  /* Reset calibration just to be safe.*/
  ADC1->CR2 = ADC_CR2_ADON | ADC_CR2_RSTCAL;
 80056e4:	2509      	movs	r5, #9
 80056e6:	703e      	strb	r6, [r7, #0]
  adcp->config   = NULL;
 80056e8:	607b      	str	r3, [r7, #4]
  adcp->samples  = NULL;
 80056ea:	60bb      	str	r3, [r7, #8]
  adcp->depth    = 0;
 80056ec:	60fb      	str	r3, [r7, #12]
  adcp->grpp     = NULL;
 80056ee:	613b      	str	r3, [r7, #16]
#if ADC_USE_WAIT == TRUE
  adcp->thread   = NULL;
 80056f0:	617b      	str	r3, [r7, #20]
 80056f2:	623b      	str	r3, [r7, #32]

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
  ADCD1.adc = ADC1;
  ADCD1.dmastp  = STM32_DMA1_STREAM1;
 80056f4:	f8c7 e02c 	str.w	lr, [r7, #44]	; 0x2c
                  STM32_DMA_CR_MSIZE_HWORD | STM32_DMA_CR_PSIZE_HWORD |
                  STM32_DMA_CR_MINC        | STM32_DMA_CR_TCIE        |
                  STM32_DMA_CR_TEIE;

  /* Temporary activation.*/
  rccEnableADC1(FALSE);
 80056f8:	6188      	str	r0, [r1, #24]
#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
  ADCD1.adc = ADC1;
  ADCD1.dmastp  = STM32_DMA1_STREAM1;
  ADCD1.dmamode = STM32_DMA_CR_PL(STM32_ADC_ADC1_DMA_PRIORITY) |
 80056fa:	f8c7 c030 	str.w	ip, [r7, #48]	; 0x30
 80056fe:	61bc      	str	r4, [r7, #24]
  tqp->p_prev = (thread_t *)tqp;
 8005700:	61fc      	str	r4, [r7, #28]
void adc_lld_init(void) {

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
  ADCD1.adc = ADC1;
 8005702:	62ba      	str	r2, [r7, #40]	; 0x28
                  STM32_DMA_CR_MINC        | STM32_DMA_CR_TCIE        |
                  STM32_DMA_CR_TEIE;

  /* Temporary activation.*/
  rccEnableADC1(FALSE);
  ADC1->CR1 = 0;
 8005704:	6053      	str	r3, [r2, #4]
  ADC1->CR2 = ADC_CR2_ADON;
 8005706:	6096      	str	r6, [r2, #8]

  /* Reset calibration just to be safe.*/
  ADC1->CR2 = ADC_CR2_ADON | ADC_CR2_RSTCAL;
 8005708:	6095      	str	r5, [r2, #8]
  while ((ADC1->CR2 & ADC_CR2_RSTCAL) != 0)
 800570a:	f8da 2008 	ldr.w	r2, [sl, #8]
 800570e:	4b83      	ldr	r3, [pc, #524]	; (800591c <main+0x2fc>)
 8005710:	0716      	lsls	r6, r2, #28
 8005712:	d4fa      	bmi.n	800570a <main+0xea>
    ;

  /* Calibration.*/
  ADC1->CR2 = ADC_CR2_ADON | ADC_CR2_CAL;
  while ((ADC1->CR2 & ADC_CR2_CAL) != 0)
 8005714:	4619      	mov	r1, r3
  ADC1->CR2 = ADC_CR2_ADON | ADC_CR2_RSTCAL;
  while ((ADC1->CR2 & ADC_CR2_RSTCAL) != 0)
    ;

  /* Calibration.*/
  ADC1->CR2 = ADC_CR2_ADON | ADC_CR2_CAL;
 8005716:	2205      	movs	r2, #5
 8005718:	609a      	str	r2, [r3, #8]
  while ((ADC1->CR2 & ADC_CR2_CAL) != 0)
 800571a:	688d      	ldr	r5, [r1, #8]
 800571c:	4b7f      	ldr	r3, [pc, #508]	; (800591c <main+0x2fc>)
 800571e:	f015 0504 	ands.w	r5, r5, #4
 8005722:	d1fa      	bne.n	800571a <main+0xfa>
    ;

  /* Return the ADC in low power mode.*/
  ADC1->CR2 = 0;
  rccDisableADC1(FALSE);
 8005724:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8005910 <main+0x2f0>
  ADC1->CR2 = ADC_CR2_ADON | ADC_CR2_CAL;
  while ((ADC1->CR2 & ADC_CR2_CAL) != 0)
    ;

  /* Return the ADC in low power mode.*/
  ADC1->CR2 = 0;
 8005728:	609d      	str	r5, [r3, #8]
  rccDisableADC1(FALSE);
 800572a:	f8d8 3018 	ldr.w	r3, [r8, #24]
 *
 * @init
 */
void canObjectInit(CANDriver *canp) {

  canp->state    = CAN_STOP;
 800572e:	4e81      	ldr	r6, [pc, #516]	; (8005934 <main+0x314>)
 8005730:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005734:	f8c8 3018 	str.w	r3, [r8, #24]
static void can_lld_set_filters(uint32_t can2sb,
                                uint32_t num,
                                const CANFilter *cfp) {

  /* Temporarily enabling CAN1 clock.*/
  rccEnableCAN1(FALSE);
 8005738:	f8d8 101c 	ldr.w	r1, [r8, #28]
void can_lld_init(void) {

#if STM32_CAN_USE_CAN1
  /* Driver initialization.*/
  canObjectInit(&CAND1);
  CAND1.can = CAN1;
 800573c:	4b7e      	ldr	r3, [pc, #504]	; (8005938 <main+0x318>)
 800573e:	2201      	movs	r2, #1
static void can_lld_set_filters(uint32_t can2sb,
                                uint32_t num,
                                const CANFilter *cfp) {

  /* Temporarily enabling CAN1 clock.*/
  rccEnableCAN1(FALSE);
 8005740:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8005744:	7032      	strb	r2, [r6, #0]
 8005746:	f8c8 101c 	str.w	r1, [r8, #28]

  /* Filters initialization.*/
  CAN1->FMR = (CAN1->FMR & 0xFFFF0000) | (can2sb << 8) | CAN_FMR_FINIT;
 800574a:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800574e:	f106 0008 	add.w	r0, r6, #8
 8005752:	0c09      	lsrs	r1, r1, #16
 8005754:	0409      	lsls	r1, r1, #16
 8005756:	f441 6160 	orr.w	r1, r1, #3584	; 0xe00
 800575a:	4311      	orrs	r1, r2
 800575c:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    }
  }
  else {
    /* Setting up a single default filter that enables everything for both
       CANs.*/
    CAN1->sFilterRegister[0].FR1 = 0;
 8005760:	f8c3 5240 	str.w	r5, [r3, #576]	; 0x240
    CAN1->sFilterRegister[0].FR2 = 0;
 8005764:	f8c3 5244 	str.w	r5, [r3, #580]	; 0x244
#if STM32_HAS_CAN2
    CAN1->sFilterRegister[can2sb].FR1 = 0;
    CAN1->sFilterRegister[can2sb].FR2 = 0;
#endif
    CAN1->FM1R = 0;
 8005768:	f8c3 5204 	str.w	r5, [r3, #516]	; 0x204
    CAN1->FFA1R = 0;
 800576c:	f8c3 5214 	str.w	r5, [r3, #532]	; 0x214
#if STM32_HAS_CAN2
    CAN1->FS1R = 1 | (1 << can2sb);
    CAN1->FA1R = 1 | (1 << can2sb);
#else
    CAN1->FS1R = 1;
 8005770:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    CAN1->FA1R = 1;
 8005774:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
#endif
  }
  CAN1->FMR &= ~CAN_FMR_FINIT;
 8005778:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
#if STM32_HAS_CAN2
    CAN1->FS1R = 1 | (1 << can2sb);
    CAN1->FA1R = 1 | (1 << can2sb);
#else
    CAN1->FS1R = 1;
    CAN1->FA1R = 1;
 800577c:	9202      	str	r2, [sp, #8]
#endif
  }
  CAN1->FMR &= ~CAN_FMR_FINIT;
 800577e:	f021 0101 	bic.w	r1, r1, #1
 8005782:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200

  /* Clock disabled, it will be enabled again in can_lld_start().*/
  rccDisableCAN1(FALSE);
 8005786:	f8d8 101c 	ldr.w	r1, [r8, #28]
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 800578a:	f106 0c20 	add.w	ip, r6, #32
 800578e:	f021 7100 	bic.w	r1, r1, #33554432	; 0x2000000
 8005792:	f8c8 101c 	str.w	r1, [r8, #28]
 8005796:	f106 0e24 	add.w	lr, r6, #36	; 0x24
 800579a:	f106 0110 	add.w	r1, r6, #16
 800579e:	f106 0b18 	add.w	fp, r6, #24
 80057a2:	f106 0a1c 	add.w	sl, r6, #28
 80057a6:	f106 0428 	add.w	r4, r6, #40	; 0x28
 80057aa:	f8c6 b018 	str.w	fp, [r6, #24]
 80057ae:	f8c6 a01c 	str.w	sl, [r6, #28]
 80057b2:	f8c6 c020 	str.w	ip, [r6, #32]
 80057b6:	f8c6 e024 	str.w	lr, [r6, #36]	; 0x24
 80057ba:	62b4      	str	r4, [r6, #40]	; 0x28
 80057bc:	60b0      	str	r0, [r6, #8]
  tqp->p_prev = (thread_t *)tqp;
 80057be:	60f0      	str	r0, [r6, #12]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80057c0:	6131      	str	r1, [r6, #16]
  tqp->p_prev = (thread_t *)tqp;
 80057c2:	6171      	str	r1, [r6, #20]
void can_lld_init(void) {

#if STM32_CAN_USE_CAN1
  /* Driver initialization.*/
  canObjectInit(&CAND1);
  CAND1.can = CAN1;
 80057c4:	62f3      	str	r3, [r6, #44]	; 0x2c
  canp->config   = NULL;
 80057c6:	6075      	str	r5, [r6, #4]

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80057c8:	f648 4b9f 	movw	fp, #35999	; 0x8c9f
 * @notapi
 */
void sd_lld_init(void) {

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1, NULL, notify1);
 80057cc:	f001 ff40 	bl	8007650 <sdObjectInit.constprop.30>
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 80057d0:	f64f 7cff 	movw	ip, #65535	; 0xffff
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 80057d4:	f64f 00ff 	movw	r0, #63743	; 0xf8ff

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 80057d8:	f8d8 301c 	ldr.w	r3, [r8, #28]

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80057dc:	f8df e194 	ldr.w	lr, [pc, #404]	; 8005974 <main+0x354>

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 80057e0:	f043 0301 	orr.w	r3, r3, #1
 80057e4:	f8c8 301c 	str.w	r3, [r8, #28]

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80057e8:	f8de 4004 	ldr.w	r4, [lr, #4]
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  STM32_ST_TIM->CCMR1  = 0;
  STM32_ST_TIM->CCR[0] = 0;
  STM32_ST_TIM->DIER   = 0;
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 80057ec:	9a02      	ldr	r2, [sp, #8]
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 80057ee:	4953      	ldr	r1, [pc, #332]	; (800593c <main+0x31c>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80057f0:	f8df a184 	ldr.w	sl, [pc, #388]	; 8005978 <main+0x358>

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80057f4:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 80057f8:	f8ce 4004 	str.w	r4, [lr, #4]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80057fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005800:	f04f 0e80 	mov.w	lr, #128	; 0x80
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8005804:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
 8005808:	f8c3 b028 	str.w	fp, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 800580c:	f8c3 c02c 	str.w	ip, [r3, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 8005810:	619d      	str	r5, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8005812:	635d      	str	r5, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8005814:	60dd      	str	r5, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 8005816:	605d      	str	r5, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8005818:	615a      	str	r2, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 800581a:	601a      	str	r2, [r3, #0]
 800581c:	9205      	str	r2, [sp, #20]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800581e:	f88a e31c 	strb.w	lr, [sl, #796]	; 0x31c
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8005822:	f8ca 4180 	str.w	r4, [sl, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8005826:	f8ca 4000 	str.w	r4, [sl]
 800582a:	608d      	str	r5, [r1, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800582c:	68cc      	ldr	r4, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800582e:	4b44      	ldr	r3, [pc, #272]	; (8005940 <main+0x320>)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 8005830:	4020      	ands	r0, r4
  reg_value  =  (reg_value                                   |
 8005832:	4303      	orrs	r3, r0

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8005834:	4c43      	ldr	r4, [pc, #268]	; (8005944 <main+0x324>)
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8005836:	60cb      	str	r3, [r1, #12]
 8005838:	68e3      	ldr	r3, [r4, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800583a:	4843      	ldr	r0, [pc, #268]	; (8005948 <main+0x328>)

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800583c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005840:	60e3      	str	r3, [r4, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8005842:	6803      	ldr	r3, [r0, #0]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8005844:	4c41      	ldr	r4, [pc, #260]	; (800594c <main+0x32c>)
 8005846:	f043 0301 	orr.w	r3, r3, #1
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 800584a:	f8a4 c024 	strh.w	ip, [r4, #36]	; 0x24
  tqp->p_prev = (thread_t *)tqp;
 800584e:	6064      	str	r4, [r4, #4]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 8005850:	60a5      	str	r5, [r4, #8]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 8005852:	6124      	str	r4, [r4, #16]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 8005854:	6164      	str	r4, [r4, #20]
  SD1.usart = USART1;
 8005856:	f8df b124 	ldr.w	fp, [pc, #292]	; 800597c <main+0x35c>
 800585a:	6003      	str	r3, [r0, #0]
 800585c:	4a3c      	ldr	r2, [pc, #240]	; (8005950 <main+0x330>)
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)IRQn < 0) {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800585e:	2310      	movs	r3, #16
 8005860:	77cb      	strb	r3, [r1, #31]
 8005862:	f04f 0c20 	mov.w	ip, #32
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8005866:	f104 031c 	add.w	r3, r4, #28
 800586a:	f881 c022 	strb.w	ip, [r1, #34]	; 0x22
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 800586e:	a806      	add	r0, sp, #24
 8005870:	f8cd c010 	str.w	ip, [sp, #16]
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8005874:	f04f 31ff 	mov.w	r1, #4294967295
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8005878:	6024      	str	r4, [r4, #0]
 800587a:	61e3      	str	r3, [r4, #28]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 800587c:	6223      	str	r3, [r4, #32]
 800587e:	f8cb 22ac 	str.w	r2, [fp, #684]	; 0x2ac
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8005882:	2300      	movs	r3, #0
 8005884:	2200      	movs	r2, #0
 8005886:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 800588a:	9106      	str	r1, [sp, #24]
  ch.vtlist.vt_delta = (systime_t)-1;
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = (systime_t)0;
 800588c:	84e5      	strh	r5, [r4, #38]	; 0x26
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 800588e:	6725      	str	r5, [r4, #112]	; 0x70
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 8005890:	9507      	str	r5, [sp, #28]
  tmp->last       = (rtcnt_t)0;
 8005892:	9508      	str	r5, [sp, #32]
  tmp->n          = (ucnt_t)0;
 8005894:	9509      	str	r5, [sp, #36]	; 0x24
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8005896:	f001 fcf3 	bl	8007280 <chTMStartMeasurementX.constprop.78>
  chTMStopMeasurementX(&tm);
 800589a:	a806      	add	r0, sp, #24
 800589c:	f7fb faa8 	bl	8000df0 <chTMStopMeasurementX>
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 80058a0:	482c      	ldr	r0, [pc, #176]	; (8005954 <main+0x334>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 80058a2:	492d      	ldr	r1, [pc, #180]	; (8005958 <main+0x338>)
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 80058a4:	f020 0207 	bic.w	r2, r0, #7
  ch.tm.offset = tm.last;
 80058a8:	9808      	ldr	r0, [sp, #32]
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 80058aa:	4b2c      	ldr	r3, [pc, #176]	; (800595c <main+0x33c>)
 80058ac:	6720      	str	r0, [r4, #112]	; 0x70
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80058ae:	6960      	ldr	r0, [r4, #20]
 80058b0:	9202      	str	r2, [sp, #8]
 80058b2:	6420      	str	r0, [r4, #64]	; 0x40
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 80058b4:	2040      	movs	r0, #64	; 0x40
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80058b6:	9a05      	ldr	r2, [sp, #20]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 80058b8:	6360      	str	r0, [r4, #52]	; 0x34
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 80058ba:	66a0      	str	r0, [r4, #104]	; 0x68
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 80058bc:	f021 0107 	bic.w	r1, r1, #7
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80058c0:	6960      	ldr	r0, [r4, #20]
 80058c2:	f103 0e10 	add.w	lr, r3, #16
 80058c6:	9103      	str	r1, [sp, #12]
 80058c8:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 80058cc:	f8c3 e010 	str.w	lr, [r3, #16]
  tqp->p_prev = (thread_t *)tqp;
 80058d0:	f8c3 e014 	str.w	lr, [r3, #20]
 80058d4:	619d      	str	r5, [r3, #24]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 80058d6:	f884 5049 	strb.w	r5, [r4, #73]	; 0x49
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 80058da:	6665      	str	r5, [r4, #100]	; 0x64
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 80058dc:	6625      	str	r5, [r4, #96]	; 0x60
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80058de:	f884 204a 	strb.w	r2, [r4, #74]	; 0x4a
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 80058e2:	6465      	str	r5, [r4, #68]	; 0x44
  REG_INSERT(tp);
 80058e4:	63e4      	str	r4, [r4, #60]	; 0x3c
 80058e6:	6101      	str	r1, [r0, #16]
 80058e8:	481d      	ldr	r0, [pc, #116]	; (8005960 <main+0x340>)
  default_heap.h_free.h.u.next = NULL;
 80058ea:	609d      	str	r5, [r3, #8]
  default_heap.h_free.h.size = 0;
 80058ec:	60dd      	str	r5, [r3, #12]
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 80058ee:	6018      	str	r0, [r3, #0]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80058f0:	f104 0354 	add.w	r3, r4, #84	; 0x54
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 80058f4:	f8df e088 	ldr.w	lr, [pc, #136]	; 8005980 <main+0x360>
 80058f8:	6563      	str	r3, [r4, #84]	; 0x54
  tqp->p_prev = (thread_t *)tqp;
 80058fa:	65a3      	str	r3, [r4, #88]	; 0x58
 80058fc:	9b02      	ldr	r3, [sp, #8]
 80058fe:	6161      	str	r1, [r4, #20]
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8005900:	61a1      	str	r1, [r4, #24]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8005902:	f104 0150 	add.w	r1, r4, #80	; 0x50
 8005906:	6521      	str	r1, [r4, #80]	; 0x50
 8005908:	f8ce 3000 	str.w	r3, [lr]
 800590c:	e03a      	b.n	8005984 <main+0x364>
 800590e:	bf00      	nop
 8005910:	40021000 	.word	0x40021000
 8005914:	40007000 	.word	0x40007000
 8005918:	20000cf0 	.word	0x20000cf0
 800591c:	40012400 	.word	0x40012400
 8005920:	40020000 	.word	0x40020000
 8005924:	40010c00 	.word	0x40010c00
 8005928:	40011000 	.word	0x40011000
 800592c:	40011400 	.word	0x40011400
 8005930:	2000100c 	.word	0x2000100c
 8005934:	200009ec 	.word	0x200009ec
 8005938:	40006400 	.word	0x40006400
 800593c:	e000ed00 	.word	0xe000ed00
 8005940:	05fa0300 	.word	0x05fa0300
 8005944:	e000edf0 	.word	0xe000edf0
 8005948:	e0001000 	.word	0xe0001000
 800594c:	20001040 	.word	0x20001040
 8005950:	40013800 	.word	0x40013800
 8005954:	2000187f 	.word	0x2000187f
 8005958:	20005000 	.word	0x20005000
 800595c:	200009c8 	.word	0x200009c8
 8005960:	08000c31 	.word	0x08000c31
 8005964:	08008860 	.word	0x08008860
 8005968:	2000098c 	.word	0x2000098c
 800596c:	888944b4 	.word	0x888944b4
 8005970:	33333844 	.word	0x33333844
 8005974:	e0042000 	.word	0xe0042000
 8005978:	e000e100 	.word	0xe000e100
 800597c:	20000d58 	.word	0x20000d58
 8005980:	20000a1c 	.word	0x20000a1c
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8005984:	49b9      	ldr	r1, [pc, #740]	; (8005c6c <main+0x64c>)
 8005986:	9b03      	ldr	r3, [sp, #12]
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 8005988:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
 800598c:	600b      	str	r3, [r1, #0]
 800598e:	f385 8811 	msr	BASEPRI, r5
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8005992:	b662      	cpsie	i
 8005994:	49b6      	ldr	r1, [pc, #728]	; (8005c70 <main+0x650>)
 8005996:	69a3      	ldr	r3, [r4, #24]
#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
    thread_t *tp =  chThdCreateStatic(ch.idle_thread_wa,
 8005998:	f104 0078 	add.w	r0, r4, #120	; 0x78
 800599c:	6199      	str	r1, [r3, #24]
 800599e:	21d8      	movs	r1, #216	; 0xd8
 80059a0:	9500      	str	r5, [sp, #0]
 80059a2:	4bb4      	ldr	r3, [pc, #720]	; (8005c74 <main+0x654>)
 80059a4:	f7fb fafc 	bl	8000fa0 <chThdCreateStatic>
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 80059a8:	4bb3      	ldr	r3, [pc, #716]	; (8005c78 <main+0x658>)
 80059aa:	6183      	str	r3, [r0, #24]
 * @notapi
 */
void sd_lld_init(void) {

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1, NULL, notify1);
 80059ac:	f001 fe50 	bl	8007650 <sdObjectInit.constprop.30>
  SD1.usart = USART1;
 80059b0:	4bb2      	ldr	r3, [pc, #712]	; (8005c7c <main+0x65c>)

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80059b2:	f8dd c010 	ldr.w	ip, [sp, #16]
 80059b6:	f8cb 32ac 	str.w	r3, [fp, #684]	; 0x2ac
 80059ba:	f38c 8811 	msr	BASEPRI, ip
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 80059be:	f89b 3008 	ldrb.w	r3, [fp, #8]
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	f000 8144 	beq.w	8005c50 <main+0x630>
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
#else
  if (sdp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / config->speed;
 80059c8:	49ad      	ldr	r1, [pc, #692]	; (8005c80 <main+0x660>)
 80059ca:	4aae      	ldr	r2, [pc, #696]	; (8005c84 <main+0x664>)
 80059cc:	6808      	ldr	r0, [r1, #0]
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] config    the architecture-dependent serial driver configuration
 */
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
  USART_TypeDef *u = sdp->usart;
 80059ce:	f8db 32ac 	ldr.w	r3, [fp, #684]	; 0x2ac
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
#else
  if (sdp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / config->speed;
 80059d2:	fbb2 f2f0 	udiv	r2, r2, r0
 80059d6:	609a      	str	r2, [r3, #8]

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 80059d8:	888a      	ldrh	r2, [r1, #4]
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80059da:	88cc      	ldrh	r4, [r1, #6]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80059dc:	8908      	ldrh	r0, [r1, #8]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 80059de:	f442 5204 	orr.w	r2, r2, #8448	; 0x2100
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80059e2:	f044 0440 	orr.w	r4, r4, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 80059e6:	f042 022c 	orr.w	r2, r2, #44	; 0x2c
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80059ea:	f040 0001 	orr.w	r0, r0, #1
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80059ee:	b2a4      	uxth	r4, r4
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 80059f0:	b292      	uxth	r2, r2
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80059f2:	b280      	uxth	r0, r0
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->SR = 0;
 80059f4:	2100      	movs	r1, #0
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80059f6:	611c      	str	r4, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80059f8:	6158      	str	r0, [r3, #20]

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
  sdp->state = SD_READY;
 80059fa:	2402      	movs	r4, #2
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 80059fc:	60da      	str	r2, [r3, #12]
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->SR = 0;
 80059fe:	6019      	str	r1, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 8005a00:	681a      	ldr	r2, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	f88b 4008 	strb.w	r4, [fp, #8]
 8005a08:	f381 8811 	msr	BASEPRI, r1
  consoleInit();
  chThdSleepMilliseconds(100);



  palClearPad(GPIOB, GPIOB_LED3);
 8005a0c:	f8df b2b0 	ldr.w	fp, [pc, #688]	; 8005cc0 <main+0x6a0>
 8005a10:	4b9d      	ldr	r3, [pc, #628]	; (8005c88 <main+0x668>)
void consoleInit(void){
  sdInit();
  /* Shell initialization.*/
  sdStart(&SD1, &ser_cfg);
  shellInit();
  consoleThread = NULL;
 8005a12:	4c9e      	ldr	r4, [pc, #632]	; (8005c8c <main+0x66c>)
 8005a14:	2520      	movs	r5, #32
  palClearPad(GPIOB, GPIOB_LED1);
  palClearPad(GPIOB, GPIOB_LED2);
 8005a16:	f04f 0840 	mov.w	r8, #64	; 0x40
  chThdSleepMilliseconds(100);



  palClearPad(GPIOB, GPIOB_LED3);
  palClearPad(GPIOB, GPIOB_LED1);
 8005a1a:	f04f 0a80 	mov.w	sl, #128	; 0x80
   */
  halInit();
  chSysInit();

  consoleInit();
  chThdSleepMilliseconds(100);
 8005a1e:	20c8      	movs	r0, #200	; 0xc8
 8005a20:	6021      	str	r1, [r4, #0]
 8005a22:	9102      	str	r1, [sp, #8]
 8005a24:	601b      	str	r3, [r3, #0]
 8005a26:	f7fc f8db 	bl	8001be0 <chThdSleep>



  palClearPad(GPIOB, GPIOB_LED3);
 8005a2a:	f8cb 5014 	str.w	r5, [fp, #20]
  palClearPad(GPIOB, GPIOB_LED2);
}

void SwitchOnAnimation(){

  chThdSleepMilliseconds(ANIMATION_SPEED);
 8005a2e:	f44f 7016 	mov.w	r0, #600	; 0x258
  chThdSleepMilliseconds(100);



  palClearPad(GPIOB, GPIOB_LED3);
  palClearPad(GPIOB, GPIOB_LED1);
 8005a32:	f8cb a014 	str.w	sl, [fp, #20]
  palClearPad(GPIOB, GPIOB_LED2);
 8005a36:	f8cb 8014 	str.w	r8, [fp, #20]
  palClearPad(GPIOB, GPIOB_LED2);
}

void SwitchOnAnimation(){

  chThdSleepMilliseconds(ANIMATION_SPEED);
 8005a3a:	f7fc f8d1 	bl	8001be0 <chThdSleep>
#include "measure.h"

#define ANIMATION_SPEED 300

void SwitchOffLeds(){
  palClearPad(GPIOB, GPIOB_LED3);
 8005a3e:	f8cb 5014 	str.w	r5, [fp, #20]

  chThdSleepMilliseconds(ANIMATION_SPEED);
  SwitchOffLeds();
  palSetPad(GPIOB, GPIOB_LED3);

  chThdSleepMilliseconds(ANIMATION_SPEED);
 8005a42:	f44f 7016 	mov.w	r0, #600	; 0x258

#define ANIMATION_SPEED 300

void SwitchOffLeds(){
  palClearPad(GPIOB, GPIOB_LED3);
  palClearPad(GPIOB, GPIOB_LED1);
 8005a46:	f8cb a014 	str.w	sl, [fp, #20]
  palClearPad(GPIOB, GPIOB_LED2);
 8005a4a:	f8cb 8014 	str.w	r8, [fp, #20]

void SwitchOnAnimation(){

  chThdSleepMilliseconds(ANIMATION_SPEED);
  SwitchOffLeds();
  palSetPad(GPIOB, GPIOB_LED3);
 8005a4e:	f8cb 5010 	str.w	r5, [fp, #16]

  chThdSleepMilliseconds(ANIMATION_SPEED);
 8005a52:	f7fc f8c5 	bl	8001be0 <chThdSleep>
#include "measure.h"

#define ANIMATION_SPEED 300

void SwitchOffLeds(){
  palClearPad(GPIOB, GPIOB_LED3);
 8005a56:	f8cb 5014 	str.w	r5, [fp, #20]

  chThdSleepMilliseconds(ANIMATION_SPEED);
  SwitchOffLeds();
  palSetPad(GPIOB, GPIOB_LED2);

  chThdSleepMilliseconds(ANIMATION_SPEED);
 8005a5a:	f44f 7016 	mov.w	r0, #600	; 0x258

#define ANIMATION_SPEED 300

void SwitchOffLeds(){
  palClearPad(GPIOB, GPIOB_LED3);
  palClearPad(GPIOB, GPIOB_LED1);
 8005a5e:	f8cb a014 	str.w	sl, [fp, #20]
  palClearPad(GPIOB, GPIOB_LED2);
 8005a62:	f8cb 8014 	str.w	r8, [fp, #20]
  SwitchOffLeds();
  palSetPad(GPIOB, GPIOB_LED3);

  chThdSleepMilliseconds(ANIMATION_SPEED);
  SwitchOffLeds();
  palSetPad(GPIOB, GPIOB_LED2);
 8005a66:	f8cb 8010 	str.w	r8, [fp, #16]

  chThdSleepMilliseconds(ANIMATION_SPEED);
 8005a6a:	f7fc f8b9 	bl	8001be0 <chThdSleep>
#include "measure.h"

#define ANIMATION_SPEED 300

void SwitchOffLeds(){
  palClearPad(GPIOB, GPIOB_LED3);
 8005a6e:	f8cb 5014 	str.w	r5, [fp, #20]

  chThdSleepMilliseconds(ANIMATION_SPEED);
  SwitchOffLeds();
  palSetPad(GPIOB, GPIOB_LED1);

  chThdSleepMilliseconds(ANIMATION_SPEED);
 8005a72:	f44f 7016 	mov.w	r0, #600	; 0x258

#define ANIMATION_SPEED 300

void SwitchOffLeds(){
  palClearPad(GPIOB, GPIOB_LED3);
  palClearPad(GPIOB, GPIOB_LED1);
 8005a76:	f8cb a014 	str.w	sl, [fp, #20]
  palClearPad(GPIOB, GPIOB_LED2);
 8005a7a:	f8cb 8014 	str.w	r8, [fp, #20]
  SwitchOffLeds();
  palSetPad(GPIOB, GPIOB_LED2);

  chThdSleepMilliseconds(ANIMATION_SPEED);
  SwitchOffLeds();
  palSetPad(GPIOB, GPIOB_LED1);
 8005a7e:	f8cb a010 	str.w	sl, [fp, #16]

  chThdSleepMilliseconds(ANIMATION_SPEED);
 8005a82:	f7fc f8ad 	bl	8001be0 <chThdSleep>
#include "measure.h"

#define ANIMATION_SPEED 300

void SwitchOffLeds(){
  palClearPad(GPIOB, GPIOB_LED3);
 8005a86:	f8cb 5014 	str.w	r5, [fp, #20]

  chThdSleepMilliseconds(ANIMATION_SPEED);
  SwitchOffLeds();
  palSetPad(GPIOB, GPIOB_LED2);

  chThdSleepMilliseconds(ANIMATION_SPEED);
 8005a8a:	f44f 7016 	mov.w	r0, #600	; 0x258

#define ANIMATION_SPEED 300

void SwitchOffLeds(){
  palClearPad(GPIOB, GPIOB_LED3);
  palClearPad(GPIOB, GPIOB_LED1);
 8005a8e:	f8cb a014 	str.w	sl, [fp, #20]
  palClearPad(GPIOB, GPIOB_LED2);
 8005a92:	f8cb 8014 	str.w	r8, [fp, #20]
  SwitchOffLeds();
  palSetPad(GPIOB, GPIOB_LED1);

  chThdSleepMilliseconds(ANIMATION_SPEED);
  SwitchOffLeds();
  palSetPad(GPIOB, GPIOB_LED2);
 8005a96:	f8cb 8010 	str.w	r8, [fp, #16]

  chThdSleepMilliseconds(ANIMATION_SPEED);
 8005a9a:	f7fc f8a1 	bl	8001be0 <chThdSleep>
#include "measure.h"

#define ANIMATION_SPEED 300

void SwitchOffLeds(){
  palClearPad(GPIOB, GPIOB_LED3);
 8005a9e:	f8cb 5014 	str.w	r5, [fp, #20]

  chThdSleepMilliseconds(ANIMATION_SPEED);
  SwitchOffLeds();
  palSetPad(GPIOB, GPIOB_LED3);

  chThdSleepMilliseconds(ANIMATION_SPEED);
 8005aa2:	f44f 7016 	mov.w	r0, #600	; 0x258

#define ANIMATION_SPEED 300

void SwitchOffLeds(){
  palClearPad(GPIOB, GPIOB_LED3);
  palClearPad(GPIOB, GPIOB_LED1);
 8005aa6:	f8cb a014 	str.w	sl, [fp, #20]
  palClearPad(GPIOB, GPIOB_LED2);
 8005aaa:	f8cb 8014 	str.w	r8, [fp, #20]
  SwitchOffLeds();
  palSetPad(GPIOB, GPIOB_LED2);

  chThdSleepMilliseconds(ANIMATION_SPEED);
  SwitchOffLeds();
  palSetPad(GPIOB, GPIOB_LED3);
 8005aae:	f8cb 5010 	str.w	r5, [fp, #16]

  chThdSleepMilliseconds(ANIMATION_SPEED);
 8005ab2:	f7fc f895 	bl	8001be0 <chThdSleep>
 8005ab6:	f385 8811 	msr	BASEPRI, r5
 * @notapi
 */
void adc_lld_start(ADCDriver *adcp) {

  /* If in stopped state then enables the ADC and DMA clocks.*/
  if (adcp->state == ADC_STOP) {
 8005aba:	783a      	ldrb	r2, [r7, #0]
  osalDbgCheck(adcp != NULL);

  osalSysLock();
  osalDbgAssert((adcp->state == ADC_STOP) || (adcp->state == ADC_READY),
                "invalid state");
  adcp->config = config;
 8005abc:	9902      	ldr	r1, [sp, #8]
 8005abe:	2a01      	cmp	r2, #1
 8005ac0:	6079      	str	r1, [r7, #4]
 8005ac2:	4d73      	ldr	r5, [pc, #460]	; (8005c90 <main+0x670>)
 8005ac4:	d06e      	beq.n	8005ba4 <main+0x584>
  adc_lld_start(adcp);
  adcp->state = ADC_READY;
 8005ac6:	f04f 0802 	mov.w	r8, #2
 8005aca:	f887 8000 	strb.w	r8, [r7]
 8005ace:	2300      	movs	r3, #0
 8005ad0:	f383 8811 	msr	BASEPRI, r3


void init_measures()
{
  adcStart(&ADCD1, NULL);
  chThdCreateStatic(waSampleThread, sizeof(waSampleThread), NORMALPRIO, SampleThread, NULL);
 8005ad4:	f44f 7132 	mov.w	r1, #712	; 0x2c8
 8005ad8:	9300      	str	r3, [sp, #0]
 8005ada:	2240      	movs	r2, #64	; 0x40
 8005adc:	4b6d      	ldr	r3, [pc, #436]	; (8005c94 <main+0x674>)
 8005ade:	486e      	ldr	r0, [pc, #440]	; (8005c98 <main+0x678>)
 8005ae0:	f7fb fa5e 	bl	8000fa0 <chThdCreateStatic>
 8005ae4:	2320      	movs	r3, #32
 8005ae6:	f383 8811 	msr	BASEPRI, r3

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8005aea:	4b6c      	ldr	r3, [pc, #432]	; (8005c9c <main+0x67c>)
 8005aec:	22b0      	movs	r2, #176	; 0xb0
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8005aee:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
 8005af2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    nvicEnableVector(STM32_CAN1_TX_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
    nvicEnableVector(STM32_CAN1_RX0_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
    nvicEnableVector(STM32_CAN1_RX1_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
    nvicEnableVector(STM32_CAN1_SCE_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
#endif
    rccEnableCAN1(FALSE);
 8005af6:	486a      	ldr	r0, [pc, #424]	; (8005ca0 <main+0x680>)
 8005af8:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
 8005afc:	f44f 1780 	mov.w	r7, #1048576	; 0x100000

  osalSysLock();
  osalDbgAssert(canp->state == CAN_STOP, "invalid state");

  /* Entering initialization mode. */
  canp->state = CAN_STARTING;
 8005b00:	f886 8000 	strb.w	r8, [r6]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8005b04:	f883 2313 	strb.w	r2, [r3, #787]	; 0x313
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8005b08:	f8c3 e180 	str.w	lr, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8005b0c:	f8c3 e000 	str.w	lr, [r3]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8005b10:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8005b14:	f8c3 7180 	str.w	r7, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8005b18:	601f      	str	r7, [r3, #0]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8005b1a:	f883 2315 	strb.w	r2, [r3, #789]	; 0x315
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8005b1e:	f8c3 5180 	str.w	r5, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8005b22:	601d      	str	r5, [r3, #0]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8005b24:	f883 2316 	strb.w	r2, [r3, #790]	; 0x316
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8005b28:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8005b2c:	6019      	str	r1, [r3, #0]
 8005b2e:	69c1      	ldr	r1, [r0, #28]
    rccEnableCAN2(FALSE);
  }
#endif

  /* Configuring CAN. */
  canp->can->MCR = CAN_MCR_INRQ;
 8005b30:	6af2      	ldr	r2, [r6, #44]	; 0x2c
  canp->config = config;
 8005b32:	4b5c      	ldr	r3, [pc, #368]	; (8005ca4 <main+0x684>)
    nvicEnableVector(STM32_CAN1_TX_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
    nvicEnableVector(STM32_CAN1_RX0_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
    nvicEnableVector(STM32_CAN1_RX1_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
    nvicEnableVector(STM32_CAN1_SCE_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
#endif
    rccEnableCAN1(FALSE);
 8005b34:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
    rccEnableCAN2(FALSE);
  }
#endif

  /* Configuring CAN. */
  canp->can->MCR = CAN_MCR_INRQ;
 8005b38:	2501      	movs	r5, #1
    nvicEnableVector(STM32_CAN1_TX_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
    nvicEnableVector(STM32_CAN1_RX0_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
    nvicEnableVector(STM32_CAN1_RX1_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
    nvicEnableVector(STM32_CAN1_SCE_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
#endif
    rccEnableCAN1(FALSE);
 8005b3a:	61c1      	str	r1, [r0, #28]
 8005b3c:	6073      	str	r3, [r6, #4]
    rccEnableCAN2(FALSE);
  }
#endif

  /* Configuring CAN. */
  canp->can->MCR = CAN_MCR_INRQ;
 8005b3e:	6015      	str	r5, [r2, #0]
  while ((canp->can->MSR & CAN_MSR_INAK) == 0)
 8005b40:	6851      	ldr	r1, [r2, #4]
 8005b42:	07c8      	lsls	r0, r1, #31
 8005b44:	d409      	bmi.n	8005b5a <main+0x53a>
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 8005b46:	2101      	movs	r1, #1
 8005b48:	2008      	movs	r0, #8
 8005b4a:	f7fb fef9 	bl	8001940 <chSchGoSleepTimeoutS>
 8005b4e:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8005b50:	4b55      	ldr	r3, [pc, #340]	; (8005ca8 <main+0x688>)
 8005b52:	6851      	ldr	r1, [r2, #4]
 8005b54:	07c9      	lsls	r1, r1, #31
 8005b56:	d5f6      	bpl.n	8005b46 <main+0x526>
 8005b58:	685b      	ldr	r3, [r3, #4]
  canp->can->IER = CAN_IER_TMEIE  | CAN_IER_FMPIE0 | CAN_IER_FMPIE1 |
                   CAN_IER_WKUIE  | CAN_IER_ERRIE  | CAN_IER_LECIE  |
                   CAN_IER_BOFIE  | CAN_IER_EPVIE  | CAN_IER_EWGIE  |
                   CAN_IER_FOVIE0 | CAN_IER_FOVIE1;
#else
  canp->can->IER = CAN_IER_TMEIE  | CAN_IER_FMPIE0 | CAN_IER_FMPIE1 |
 8005b5a:	4854      	ldr	r0, [pc, #336]	; (8005cac <main+0x68c>)
  /* Low level initialization, could be a slow process and sleeps could
     be performed inside.*/
  can_lld_start(canp);

  /* The driver finally goes into the ready state.*/
  canp->state = CAN_READY;
 8005b5c:	2103      	movs	r1, #3
  /* Configuring CAN. */
  canp->can->MCR = CAN_MCR_INRQ;
  while ((canp->can->MSR & CAN_MSR_INAK) == 0)
    osalThreadSleepS(1);
  canp->can->BTR = canp->config->btr;
  canp->can->MCR = canp->config->mcr;
 8005b5e:	e893 00a0 	ldmia.w	r3, {r5, r7}
 8005b62:	2300      	movs	r3, #0

  /* Configuring CAN. */
  canp->can->MCR = CAN_MCR_INRQ;
  while ((canp->can->MSR & CAN_MSR_INAK) == 0)
    osalThreadSleepS(1);
  canp->can->BTR = canp->config->btr;
 8005b64:	61d7      	str	r7, [r2, #28]
  canp->can->MCR = canp->config->mcr;
 8005b66:	6015      	str	r5, [r2, #0]
  canp->can->IER = CAN_IER_TMEIE  | CAN_IER_FMPIE0 | CAN_IER_FMPIE1 |
                   CAN_IER_WKUIE  | CAN_IER_ERRIE  | CAN_IER_LECIE  |
                   CAN_IER_BOFIE  | CAN_IER_EPVIE  | CAN_IER_EWGIE  |
                   CAN_IER_FOVIE0 | CAN_IER_FOVIE1;
#else
  canp->can->IER = CAN_IER_TMEIE  | CAN_IER_FMPIE0 | CAN_IER_FMPIE1 |
 8005b68:	6150      	str	r0, [r2, #20]
 8005b6a:	7031      	strb	r1, [r6, #0]
 8005b6c:	f383 8811 	msr	BASEPRI, r3
 8005b70:	4f4f      	ldr	r7, [pc, #316]	; (8005cb0 <main+0x690>)
  if (!consoleThread) {
    consoleThread = shellCreate(&shCfg, SHELL_WA_SIZE, NORMALPRIO);
  }
  else if (chThdTerminatedX(consoleThread)) {
    chThdRelease(consoleThread);    /* Recovers memory of the previous shell.   */
    consoleThread = NULL;           /* Triggers spawning of a new shell.        */
 8005b72:	461e      	mov	r6, r3
  shellInit();
  consoleThread = NULL;
}

void consoleStart(void){
  if (!consoleThread) {
 8005b74:	4d45      	ldr	r5, [pc, #276]	; (8005c8c <main+0x66c>)
 8005b76:	e003      	b.n	8005b80 <main+0x560>
   * sleeping in a loop and check the button state, when the button is
   * pressed the test procedure is launched.
   */
  while (true) {
    consoleStart();
    chThdSleepMilliseconds(200);
 8005b78:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8005b7c:	f7fc f830 	bl	8001be0 <chThdSleep>
 8005b80:	6820      	ldr	r0, [r4, #0]
 8005b82:	b130      	cbz	r0, 8005b92 <main+0x572>
    consoleThread = shellCreate(&shCfg, SHELL_WA_SIZE, NORMALPRIO);
  }
  else if (chThdTerminatedX(consoleThread)) {
 8005b84:	7f03      	ldrb	r3, [r0, #28]
 8005b86:	2b0f      	cmp	r3, #15
 8005b88:	d1f6      	bne.n	8005b78 <main+0x558>
    chThdRelease(consoleThread);    /* Recovers memory of the previous shell.   */
 8005b8a:	f7fb fce1 	bl	8001550 <chThdRelease>
    consoleThread = NULL;           /* Triggers spawning of a new shell.        */
 8005b8e:	602e      	str	r6, [r5, #0]
 8005b90:	e7f2      	b.n	8005b78 <main+0x558>
 * @api
 */
#if CH_CFG_USE_HEAP && CH_CFG_USE_DYNAMIC
thread_t *shellCreate(const ShellConfig *scp, size_t size, tprio_t prio) {

  return chThdCreateFromHeap(NULL, size, prio, shell_thread, (void *)scp);
 8005b92:	9700      	str	r7, [sp, #0]
 8005b94:	f640 01c8 	movw	r1, #2248	; 0x8c8
 8005b98:	2240      	movs	r2, #64	; 0x40
 8005b9a:	4b46      	ldr	r3, [pc, #280]	; (8005cb4 <main+0x694>)
 8005b9c:	f7fb fd98 	bl	80016d0 <chThdCreateFromHeap>
  consoleThread = NULL;
}

void consoleStart(void){
  if (!consoleThread) {
    consoleThread = shellCreate(&shCfg, SHELL_WA_SIZE, NORMALPRIO);
 8005ba0:	6028      	str	r0, [r5, #0]
 8005ba2:	e7e9      	b.n	8005b78 <main+0x558>
#if STM32_ADC_USE_ADC1
    if (&ADCD1 == adcp) {
      bool b;
      b = dmaStreamAllocate(adcp->dmastp,
 8005ba4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
                       void *param) {

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
 8005ba6:	4944      	ldr	r1, [pc, #272]	; (8005cb8 <main+0x698>)
 8005ba8:	7c58      	ldrb	r0, [r3, #17]
 8005baa:	6809      	ldr	r1, [r1, #0]
 8005bac:	4082      	lsls	r2, r0
 8005bae:	420a      	tst	r2, r1
 8005bb0:	d14c      	bne.n	8005c4c <main+0x62c>
    return true;

  /* Installs the DMA handler.*/
  _stm32_dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8005bb2:	f8df e110 	ldr.w	lr, [pc, #272]	; 8005cc4 <main+0x6a4>
  _stm32_dma_isr_redir[dmastp->selfindex].dma_param = param;
 8005bb6:	eb09 02c0 	add.w	r2, r9, r0, lsl #3
 8005bba:	6055      	str	r5, [r2, #4]

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 8005bbc:	064d      	lsls	r5, r1, #25
  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
    return true;

  /* Installs the DMA handler.*/
  _stm32_dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8005bbe:	f849 e030 	str.w	lr, [r9, r0, lsl #3]
  _stm32_dma_isr_redir[dmastp->selfindex].dma_param = param;

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 8005bc2:	d104      	bne.n	8005bce <main+0x5ae>
    rccEnableDMA1(false);
 8005bc4:	4836      	ldr	r0, [pc, #216]	; (8005ca0 <main+0x680>)
 8005bc6:	6942      	ldr	r2, [r0, #20]
 8005bc8:	f042 0201 	orr.w	r2, r2, #1
 8005bcc:	6142      	str	r2, [r0, #20]
    rccEnableDMA2(false);
  }
#endif

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 8005bce:	685a      	ldr	r2, [r3, #4]
 8005bd0:	f8d3 c000 	ldr.w	ip, [r3]
 8005bd4:	6815      	ldr	r5, [r2, #0]
 8005bd6:	200f      	movs	r0, #15
 8005bd8:	f025 050f 	bic.w	r5, r5, #15
 8005bdc:	6015      	str	r5, [r2, #0]
 8005bde:	f893 e010 	ldrb.w	lr, [r3, #16]
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;

  /* Enables the associated IRQ vector if not alread enabled and if a
     callback is defined.*/
  if (((dma_streams_mask & dmastp->cmask) == 0U) &&
 8005be2:	689d      	ldr	r5, [r3, #8]
    rccEnableDMA2(false);
  }
#endif

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 8005be4:	fa00 f00e 	lsl.w	r0, r0, lr
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;

  /* Enables the associated IRQ vector if not alread enabled and if a
     callback is defined.*/
  if (((dma_streams_mask & dmastp->cmask) == 0U) &&
 8005be8:	4229      	tst	r1, r5
  }
#endif

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 8005bea:	f04f 0e00 	mov.w	lr, #0
    rccEnableDMA2(false);
  }
#endif

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 8005bee:	f8cc 0004 	str.w	r0, [ip, #4]
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 8005bf2:	f8c2 e000 	str.w	lr, [r2]

  /* Enables the associated IRQ vector if not alread enabled and if a
     callback is defined.*/
  if (((dma_streams_mask & dmastp->cmask) == 0U) &&
 8005bf6:	d117      	bne.n	8005c28 <main+0x608>
      (func != NULL)) {
    nvicEnableVector(dmastp->vector, priority);
 8005bf8:	7c98      	ldrb	r0, [r3, #18]
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8005bfa:	2501      	movs	r5, #1
 8005bfc:	0942      	lsrs	r2, r0, #5
 8005bfe:	0092      	lsls	r2, r2, #2

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8005c00:	f100 4e60 	add.w	lr, r0, #3758096384	; 0xe0000000
 8005c04:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8005c08:	f000 001f 	and.w	r0, r0, #31
 8005c0c:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
 8005c10:	fa05 f000 	lsl.w	r0, r5, r0

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8005c14:	f50e 4e61 	add.w	lr, lr, #57600	; 0xe100
 8005c18:	f04f 0c60 	mov.w	ip, #96	; 0x60
 8005c1c:	f88e c300 	strb.w	ip, [lr, #768]	; 0x300
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8005c20:	f8c2 0180 	str.w	r0, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8005c24:	6010      	str	r0, [r2, #0]
 8005c26:	685a      	ldr	r2, [r3, #4]
  }

  /* Marks the stream as allocated.*/
  dma_streams_mask |= (1U << dmastp->selfindex);
 8005c28:	7c58      	ldrb	r0, [r3, #17]
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	4083      	lsls	r3, r0
 8005c2e:	4319      	orrs	r1, r3
 8005c30:	4b21      	ldr	r3, [pc, #132]	; (8005cb8 <main+0x698>)
 8005c32:	6019      	str	r1, [r3, #0]
                            STM32_ADC_ADC1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)adc_lld_serve_rx_interrupt,
                            (void *)adcp);
      osalDbgAssert(!b, "stream already allocated");
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
 8005c34:	4b21      	ldr	r3, [pc, #132]	; (8005cbc <main+0x69c>)
      rccEnableADC1(FALSE);
 8005c36:	481a      	ldr	r0, [pc, #104]	; (8005ca0 <main+0x680>)
      b = dmaStreamAllocate(adcp->dmastp,
                            STM32_ADC_ADC1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)adc_lld_serve_rx_interrupt,
                            (void *)adcp);
      osalDbgAssert(!b, "stream already allocated");
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
 8005c38:	6093      	str	r3, [r2, #8]
      rccEnableADC1(FALSE);
 8005c3a:	6983      	ldr	r3, [r0, #24]
    }
#endif

    /* ADC setup, the calibration procedure has already been performed
       during initialization.*/
    adcp->adc->CR1 = 0;
 8005c3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c3e:	2100      	movs	r1, #0
                            STM32_ADC_ADC1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)adc_lld_serve_rx_interrupt,
                            (void *)adcp);
      osalDbgAssert(!b, "stream already allocated");
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
      rccEnableADC1(FALSE);
 8005c40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c44:	6183      	str	r3, [r0, #24]
    }
#endif

    /* ADC setup, the calibration procedure has already been performed
       during initialization.*/
    adcp->adc->CR1 = 0;
 8005c46:	6051      	str	r1, [r2, #4]
    adcp->adc->CR2 = 0;
 8005c48:	6091      	str	r1, [r2, #8]
 8005c4a:	e73c      	b.n	8005ac6 <main+0x4a6>
 8005c4c:	685a      	ldr	r2, [r3, #4]
 8005c4e:	e7f1      	b.n	8005c34 <main+0x614>
    config = &default_config;

  if (sdp->state == SD_STOP) {
#if STM32_SERIAL_USE_USART1
    if (&SD1 == sdp) {
      rccEnableUSART1(FALSE);
 8005c50:	f8d8 3018 	ldr.w	r3, [r8, #24]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8005c54:	22c0      	movs	r2, #192	; 0xc0
 8005c56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c5a:	f8c8 3018 	str.w	r3, [r8, #24]
 8005c5e:	f88a 2325 	strb.w	r2, [sl, #805]	; 0x325
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8005c62:	f8ca c184 	str.w	ip, [sl, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8005c66:	f8ca c004 	str.w	ip, [sl, #4]
 8005c6a:	e6ad      	b.n	80059c8 <main+0x3a8>
 8005c6c:	20000a20 	.word	0x20000a20
 8005c70:	08008530 	.word	0x08008530
 8005c74:	08000ce1 	.word	0x08000ce1
 8005c78:	080087b0 	.word	0x080087b0
 8005c7c:	40013800 	.word	0x40013800
 8005c80:	20000838 	.word	0x20000838
 8005c84:	02255100 	.word	0x02255100
 8005c88:	20000a24 	.word	0x20000a24
 8005c8c:	200009e8 	.word	0x200009e8
 8005c90:	2000100c 	.word	0x2000100c
 8005c94:	08007051 	.word	0x08007051
 8005c98:	20000a28 	.word	0x20000a28
 8005c9c:	e000e100 	.word	0xe000e100
 8005ca0:	40021000 	.word	0x40021000
 8005ca4:	080088f0 	.word	0x080088f0
 8005ca8:	200009ec 	.word	0x200009ec
 8005cac:	0001875b 	.word	0x0001875b
 8005cb0:	08008900 	.word	0x08008900
 8005cb4:	080053f1 	.word	0x080053f1
 8005cb8:	20000cf0 	.word	0x20000cf0
 8005cbc:	4001244c 	.word	0x4001244c
 8005cc0:	40010c00 	.word	0x40010c00
 8005cc4:	08003081 	.word	0x08003081
	...

08005cd0 <notify>:

#if CH_CFG_USE_QUEUES || defined(__DOXYGEN__)

#define TEST_QUEUES_SIZE 4

static void notify(io_queue_t *qp) {
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
	...

08005ce0 <queues2_setup.lto_priv.157>:
 * This test case tests synchronous and asynchronous operations on an
 * @p OutputQueue object including timeouts. The queue state must remain
 * consistent through the whole test.
 */

static void queues2_setup(void) {
 8005ce0:	b430      	push	{r4, r5}
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
 8005ce2:	4a08      	ldr	r2, [pc, #32]	; (8005d04 <queues2_setup.lto_priv.157+0x24>)
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8005ce4:	4b08      	ldr	r3, [pc, #32]	; (8005d08 <queues2_setup.lto_priv.157+0x28>)
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 8005ce6:	4809      	ldr	r0, [pc, #36]	; (8005d0c <queues2_setup.lto_priv.157+0x2c>)
  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8005ce8:	1d15      	adds	r5, r2, #4
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8005cea:	2404      	movs	r4, #4
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
 8005cec:	2100      	movs	r1, #0
  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8005cee:	611d      	str	r5, [r3, #16]
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8005cf0:	609c      	str	r4, [r3, #8]
 8005cf2:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8005cf4:	605b      	str	r3, [r3, #4]
  oqp->q_buffer  = bp;
 8005cf6:	60da      	str	r2, [r3, #12]
  oqp->q_rdptr   = bp;
 8005cf8:	619a      	str	r2, [r3, #24]
  oqp->q_wrptr   = bp;
 8005cfa:	615a      	str	r2, [r3, #20]
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 8005cfc:	61d8      	str	r0, [r3, #28]
  oqp->q_link    = link;
 8005cfe:	6219      	str	r1, [r3, #32]

  chOQObjectInit(&oq, wa[0], TEST_QUEUES_SIZE, notify, NULL);
}
 8005d00:	bc30      	pop	{r4, r5}
 8005d02:	4770      	bx	lr
 8005d04:	20001210 	.word	0x20001210
 8005d08:	20000850 	.word	0x20000850
 8005d0c:	08005cd1 	.word	0x08005cd1

08005d10 <queues1_setup.lto_priv.155>:
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 8005d10:	4a08      	ldr	r2, [pc, #32]	; (8005d34 <queues1_setup.lto_priv.155+0x24>)
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8005d12:	4b09      	ldr	r3, [pc, #36]	; (8005d38 <queues1_setup.lto_priv.155+0x28>)
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 8005d14:	4809      	ldr	r0, [pc, #36]	; (8005d3c <queues1_setup.lto_priv.155+0x2c>)
 * This test case tests synchronous and asynchronous operations on an
 * @p InputQueue object including timeouts. The queue state must remain
 * consistent through the whole test.
 */

static void queues1_setup(void) {
 8005d16:	b410      	push	{r4}
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8005d18:	2100      	movs	r1, #0
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 8005d1a:	1d14      	adds	r4, r2, #4
 8005d1c:	611c      	str	r4, [r3, #16]
 8005d1e:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8005d20:	605b      	str	r3, [r3, #4]
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 8005d22:	60da      	str	r2, [r3, #12]
  iqp->q_rdptr   = bp;
 8005d24:	619a      	str	r2, [r3, #24]
  iqp->q_wrptr   = bp;
 8005d26:	615a      	str	r2, [r3, #20]
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 8005d28:	61d8      	str	r0, [r3, #28]
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8005d2a:	6099      	str	r1, [r3, #8]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
  iqp->q_link    = link;
 8005d2c:	6219      	str	r1, [r3, #32]

  chIQObjectInit(&iq, wa[0], TEST_QUEUES_SIZE, notify, NULL);
}
 8005d2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d32:	4770      	bx	lr
 8005d34:	20001210 	.word	0x20001210
 8005d38:	20000874 	.word	0x20000874
 8005d3c:	08005cd1 	.word	0x08005cd1

08005d40 <dyn3_setup.lto_priv.153>:
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
  heapp->h_free.h.u.next = hp;
 8005d40:	4909      	ldr	r1, [pc, #36]	; (8005d68 <dyn3_setup.lto_priv.153+0x28>)
    ftp = chRegNextThread(ftp);
  } while (ftp != NULL);
  return found;
}

static void dyn3_setup(void) {
 8005d42:	b410      	push	{r4}
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 8005d44:	2200      	movs	r2, #0
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 8005d46:	f44f 64cc 	mov.w	r4, #1632	; 0x660
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 8005d4a:	4b08      	ldr	r3, [pc, #32]	; (8005d6c <dyn3_setup.lto_priv.153+0x2c>)
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 8005d4c:	e881 0014 	stmia.w	r1, {r2, r4}
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8005d50:	f103 0010 	add.w	r0, r3, #16

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
 8005d54:	60da      	str	r2, [r3, #12]
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
  heapp->h_free.h.u.next = hp;
 8005d56:	6099      	str	r1, [r3, #8]
 8005d58:	6118      	str	r0, [r3, #16]
  tqp->p_prev = (thread_t *)tqp;
 8005d5a:	6158      	str	r0, [r3, #20]
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 8005d5c:	601a      	str	r2, [r3, #0]
 8005d5e:	619a      	str	r2, [r3, #24]

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}
 8005d60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	20001210 	.word	0x20001210
 8005d6c:	20000cf8 	.word	0x20000cf8

08005d70 <dyn2_setup.lto_priv.151>:
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 8005d70:	4b03      	ldr	r3, [pc, #12]	; (8005d80 <dyn2_setup.lto_priv.151+0x10>)
 8005d72:	2200      	movs	r2, #0
  mp->mp_object_size = size;
 8005d74:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005d78:	6059      	str	r1, [r3, #4]
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 8005d7a:	601a      	str	r2, [r3, #0]
  mp->mp_object_size = size;
  mp->mp_provider = provider;
 8005d7c:	609a      	str	r2, [r3, #8]
 8005d7e:	4770      	bx	lr
 8005d80:	20001190 	.word	0x20001190
	...

08005d90 <dyn1_setup.lto_priv.149>:
  heapp->h_free.h.u.next = hp;
 8005d90:	4909      	ldr	r1, [pc, #36]	; (8005db8 <dyn1_setup.lto_priv.149+0x28>)

  test_emit_token(*(char *)p);
}

#if CH_CFG_USE_HEAP || defined(__DOXYGEN__)
static void dyn1_setup(void) {
 8005d92:	b410      	push	{r4}
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 8005d94:	2200      	movs	r2, #0
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 8005d96:	f44f 64cc 	mov.w	r4, #1632	; 0x660
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 8005d9a:	4b08      	ldr	r3, [pc, #32]	; (8005dbc <dyn1_setup.lto_priv.149+0x2c>)
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 8005d9c:	e881 0014 	stmia.w	r1, {r2, r4}
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8005da0:	f103 0010 	add.w	r0, r3, #16

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
 8005da4:	60da      	str	r2, [r3, #12]
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
  heapp->h_free.h.u.next = hp;
 8005da6:	6099      	str	r1, [r3, #8]
 8005da8:	6118      	str	r0, [r3, #16]
  tqp->p_prev = (thread_t *)tqp;
 8005daa:	6158      	str	r0, [r3, #20]
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 8005dac:	601a      	str	r2, [r3, #0]
 8005dae:	619a      	str	r2, [r3, #24]

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}
 8005db0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	20001210 	.word	0x20001210
 8005dbc:	20000cf8 	.word	0x20000cf8

08005dc0 <thread2>:
}

static THD_FUNCTION(thread2, p) {

  (void)p;
  chOQPutTimeout(&oq, 0, MS2ST(200));
 8005dc0:	4802      	ldr	r0, [pc, #8]	; (8005dcc <thread2+0xc>)
 8005dc2:	2100      	movs	r1, #0
 8005dc4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005dc8:	f7fb be5a 	b.w	8001a80 <chOQPutTimeout>
 8005dcc:	20000850 	.word	0x20000850

08005dd0 <thread.lto_priv.80>:
 * one to fail.
 */

static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
 8005dd0:	7800      	ldrb	r0, [r0, #0]
 8005dd2:	f7fd bac5 	b.w	8003360 <test_emit_token>
 8005dd6:	bf00      	nop
	...

08005de0 <queues2_execute.lto_priv.158>:
}

static void queues2_execute(void) {
 8005de0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005de4:	2320      	movs	r3, #32
 8005de6:	b083      	sub	sp, #12
 8005de8:	f383 8811 	msr	BASEPRI, r3
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 8005dec:	4b86      	ldr	r3, [pc, #536]	; (8006008 <queues2_execute.lto_priv.158+0x228>)
 8005dee:	6959      	ldr	r1, [r3, #20]
 8005df0:	699a      	ldr	r2, [r3, #24]
 8005df2:	4291      	cmp	r1, r2
 8005df4:	d05d      	beq.n	8005eb2 <queues2_execute.lto_priv.158+0xd2>
 8005df6:	2100      	movs	r1, #0
  unsigned i;
  size_t n;

  /* Initial empty state */
  test_assert_lock(1, chOQIsEmptyI(&oq), "not empty");
 8005df8:	2001      	movs	r0, #1
 8005dfa:	f7fd fa99 	bl	8003330 <_test_assert>
 8005dfe:	bbb8      	cbnz	r0, 8005e70 <queues2_execute.lto_priv.158+0x90>
 8005e00:	f380 8811 	msr	BASEPRI, r0
 8005e04:	2441      	movs	r4, #65	; 0x41
 *
 * @api
 */
static inline msg_t chOQPut(output_queue_t *oqp, uint8_t b) {

  return chOQPutTimeout(oqp, b, TIME_INFINITE);
 8005e06:	4d80      	ldr	r5, [pc, #512]	; (8006008 <queues2_execute.lto_priv.158+0x228>)
 8005e08:	4621      	mov	r1, r4
 8005e0a:	3401      	adds	r4, #1
 8005e0c:	4628      	mov	r0, r5
 8005e0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e12:	b2e4      	uxtb	r4, r4
 8005e14:	f7fb fe34 	bl	8001a80 <chOQPutTimeout>

  /* Queue filling */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 8005e18:	2c45      	cmp	r4, #69	; 0x45
 8005e1a:	d1f4      	bne.n	8005e06 <queues2_execute.lto_priv.158+0x26>
 8005e1c:	2620      	movs	r6, #32
 8005e1e:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 8005e22:	68a9      	ldr	r1, [r5, #8]
    chOQPut(&oq, 'A' + i);
  test_assert_lock(2, chOQIsFullI(&oq), "still has space");
 8005e24:	2002      	movs	r0, #2
 8005e26:	fab1 f181 	clz	r1, r1
 8005e2a:	0949      	lsrs	r1, r1, #5
 8005e2c:	f7fd fa80 	bl	8003330 <_test_assert>
 8005e30:	4607      	mov	r7, r0
 8005e32:	b9e8      	cbnz	r0, 8005e70 <queues2_execute.lto_priv.158+0x90>
 8005e34:	f380 8811 	msr	BASEPRI, r0
 8005e38:	4681      	mov	r9, r0
 8005e3a:	2404      	movs	r4, #4
 8005e3c:	f04f 0820 	mov.w	r8, #32
 8005e40:	f386 8811 	msr	BASEPRI, r6
  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++) {
    char c;

    chSysLock();
    c = chOQGetI(&oq);
 8005e44:	4d70      	ldr	r5, [pc, #448]	; (8006008 <queues2_execute.lto_priv.158+0x228>)
 8005e46:	4628      	mov	r0, r5
 8005e48:	f7fb f992 	bl	8001170 <chOQGetI>
 8005e4c:	f389 8811 	msr	BASEPRI, r9
    chSysUnlock();
    test_emit_token(c);
 8005e50:	b2c0      	uxtb	r0, r0
 8005e52:	f7fd fa85 	bl	8003360 <test_emit_token>
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chOQPut(&oq, 'A' + i);
  test_assert_lock(2, chOQIsFullI(&oq), "still has space");

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++) {
 8005e56:	3c01      	subs	r4, #1
 8005e58:	d1f0      	bne.n	8005e3c <queues2_execute.lto_priv.158+0x5c>
 8005e5a:	f388 8811 	msr	BASEPRI, r8
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 8005e5e:	696a      	ldr	r2, [r5, #20]
 8005e60:	69ab      	ldr	r3, [r5, #24]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d02a      	beq.n	8005ebc <queues2_execute.lto_priv.158+0xdc>
    chSysLock();
    c = chOQGetI(&oq);
    chSysUnlock();
    test_emit_token(c);
  }
  test_assert_lock(3, chOQIsEmptyI(&oq), "still full");
 8005e66:	4639      	mov	r1, r7
 8005e68:	2003      	movs	r0, #3
 8005e6a:	f7fd fa61 	bl	8003330 <_test_assert>
 8005e6e:	b128      	cbz	r0, 8005e7c <queues2_execute.lto_priv.158+0x9c>
 8005e70:	2300      	movs	r3, #0
 8005e72:	f383 8811 	msr	BASEPRI, r3
  test_assert(11, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
  test_assert_lock(12, chOQIsFullI(&oq), "not full");

  /* Timeout */
  test_assert(13, chOQPutTimeout(&oq, 0, 10) == Q_TIMEOUT, "wrong timeout return");
}
 8005e76:	b003      	add	sp, #12
 8005e78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e7c:	f380 8811 	msr	BASEPRI, r0
    c = chOQGetI(&oq);
    chSysUnlock();
    test_emit_token(c);
  }
  test_assert_lock(3, chOQIsEmptyI(&oq), "still full");
  test_assert_sequence(4, "ABCD");
 8005e80:	2004      	movs	r0, #4
 8005e82:	4962      	ldr	r1, [pc, #392]	; (800600c <queues2_execute.lto_priv.158+0x22c>)
 8005e84:	f7fd fa2c 	bl	80032e0 <_test_assert_sequence>
 8005e88:	4604      	mov	r4, r0
 8005e8a:	2800      	cmp	r0, #0
 8005e8c:	d1f3      	bne.n	8005e76 <queues2_execute.lto_priv.158+0x96>
 8005e8e:	2620      	movs	r6, #32
 8005e90:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(5, chOQGetI(&oq) == Q_EMPTY, "failed to report Q_EMPTY");
 8005e94:	4d5c      	ldr	r5, [pc, #368]	; (8006008 <queues2_execute.lto_priv.158+0x228>)
 8005e96:	4628      	mov	r0, r5
 8005e98:	f7fb f96a 	bl	8001170 <chOQGetI>
 8005e9c:	3003      	adds	r0, #3
 8005e9e:	bf14      	ite	ne
 8005ea0:	2100      	movne	r1, #0
 8005ea2:	2101      	moveq	r1, #1
 8005ea4:	2005      	movs	r0, #5
 8005ea6:	f7fd fa43 	bl	8003330 <_test_assert>
 8005eaa:	b160      	cbz	r0, 8005ec6 <queues2_execute.lto_priv.158+0xe6>
 8005eac:	f384 8811 	msr	BASEPRI, r4
 8005eb0:	e7e1      	b.n	8005e76 <queues2_execute.lto_priv.158+0x96>
 8005eb2:	6899      	ldr	r1, [r3, #8]
 8005eb4:	3100      	adds	r1, #0
 8005eb6:	bf18      	it	ne
 8005eb8:	2101      	movne	r1, #1
 8005eba:	e79d      	b.n	8005df8 <queues2_execute.lto_priv.158+0x18>
 8005ebc:	68af      	ldr	r7, [r5, #8]
 8005ebe:	3700      	adds	r7, #0
 8005ec0:	bf18      	it	ne
 8005ec2:	2701      	movne	r7, #1
 8005ec4:	e7cf      	b.n	8005e66 <queues2_execute.lto_priv.158+0x86>
 8005ec6:	f380 8811 	msr	BASEPRI, r0

  /* Writing the whole thing */
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE * 2, TIME_IMMEDIATE);
 8005eca:	4951      	ldr	r1, [pc, #324]	; (8006010 <queues2_execute.lto_priv.158+0x230>)
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2208      	movs	r2, #8
 8005ed0:	4628      	mov	r0, r5
 8005ed2:	f7fb fd95 	bl	8001a00 <chOQWriteTimeout>
  test_assert(6, n == TEST_QUEUES_SIZE, "wrong returned size");
 8005ed6:	f1a0 0104 	sub.w	r1, r0, #4
 8005eda:	fab1 f181 	clz	r1, r1
 8005ede:	2006      	movs	r0, #6
 8005ee0:	0949      	lsrs	r1, r1, #5
 8005ee2:	f7fd fa25 	bl	8003330 <_test_assert>
 8005ee6:	4604      	mov	r4, r0
 8005ee8:	2800      	cmp	r0, #0
 8005eea:	d1c4      	bne.n	8005e76 <queues2_execute.lto_priv.158+0x96>
 8005eec:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 8005ef0:	68a9      	ldr	r1, [r5, #8]
  test_assert_lock(7, chOQIsFullI(&oq), "not full");
 8005ef2:	2007      	movs	r0, #7
 8005ef4:	fab1 f181 	clz	r1, r1
 8005ef8:	0949      	lsrs	r1, r1, #5
 8005efa:	f7fd fa19 	bl	8003330 <_test_assert>
 8005efe:	4607      	mov	r7, r0
 8005f00:	2800      	cmp	r0, #0
 8005f02:	d1d3      	bne.n	8005eac <queues2_execute.lto_priv.158+0xcc>
 8005f04:	f380 8811 	msr	BASEPRI, r0
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005f08:	4b42      	ldr	r3, [pc, #264]	; (8006014 <queues2_execute.lto_priv.158+0x234>)
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8005f0a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005f0e:	699b      	ldr	r3, [r3, #24]
 8005f10:	4841      	ldr	r0, [pc, #260]	; (8006018 <queues2_execute.lto_priv.158+0x238>)
 8005f12:	689a      	ldr	r2, [r3, #8]
 8005f14:	4b41      	ldr	r3, [pc, #260]	; (800601c <queues2_execute.lto_priv.158+0x23c>)
 8005f16:	3201      	adds	r2, #1
 8005f18:	9700      	str	r7, [sp, #0]
 8005f1a:	f7fb f841 	bl	8000fa0 <chThdCreateStatic>
 8005f1e:	4b40      	ldr	r3, [pc, #256]	; (8006020 <queues2_execute.lto_priv.158+0x240>)
 8005f20:	6018      	str	r0, [r3, #0]
 8005f22:	f386 8811 	msr	BASEPRI, r6
 */
static inline size_t chOQGetFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeX(oqp) - chQSpaceI(oqp));
 8005f26:	68e9      	ldr	r1, [r5, #12]
 8005f28:	692b      	ldr	r3, [r5, #16]
 8005f2a:	68aa      	ldr	r2, [r5, #8]
 8005f2c:	1a5b      	subs	r3, r3, r1
 8005f2e:	1a99      	subs	r1, r3, r2
  test_assert_lock(8, chOQGetFullI(&oq) == TEST_QUEUES_SIZE, "not empty");
 8005f30:	f1a1 0104 	sub.w	r1, r1, #4
 8005f34:	fab1 f181 	clz	r1, r1
 8005f38:	2008      	movs	r0, #8
 8005f3a:	0949      	lsrs	r1, r1, #5
 8005f3c:	f7fd f9f8 	bl	8003330 <_test_assert>
 8005f40:	4604      	mov	r4, r0
 8005f42:	b110      	cbz	r0, 8005f4a <queues2_execute.lto_priv.158+0x16a>
 8005f44:	f387 8811 	msr	BASEPRI, r7
 8005f48:	e795      	b.n	8005e76 <queues2_execute.lto_priv.158+0x96>
 8005f4a:	f380 8811 	msr	BASEPRI, r0
  test_wait_threads();
 8005f4e:	f7fd f96f 	bl	8003230 <test_wait_threads>
 8005f52:	f386 8811 	msr	BASEPRI, r6
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
 8005f56:	68ea      	ldr	r2, [r5, #12]
  oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeX(oqp);
 8005f58:	692b      	ldr	r3, [r5, #16]
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 8005f5a:	4628      	mov	r0, r5

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
  oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeX(oqp);
 8005f5c:	1a9b      	subs	r3, r3, r2
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 8005f5e:	f06f 0101 	mvn.w	r1, #1
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
 8005f62:	61aa      	str	r2, [r5, #24]
  oqp->q_wrptr = oqp->q_buffer;
 8005f64:	616a      	str	r2, [r5, #20]
  oqp->q_counter = chQSizeX(oqp);
 8005f66:	60ab      	str	r3, [r5, #8]
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 8005f68:	f7fb fc2a 	bl	80017c0 <chThdDequeueAllI>
 8005f6c:	f384 8811 	msr	BASEPRI, r4
 8005f70:	f386 8811 	msr	BASEPRI, r6
 8005f74:	692b      	ldr	r3, [r5, #16]
 8005f76:	68ea      	ldr	r2, [r5, #12]
 8005f78:	68a9      	ldr	r1, [r5, #8]
 8005f7a:	1a9b      	subs	r3, r3, r2

  /* Testing reset */
  chSysLock();
  chOQResetI(&oq);
  chSysUnlock();
  test_assert_lock(9, chOQGetFullI(&oq) == 0, "still full");
 8005f7c:	1a59      	subs	r1, r3, r1
 8005f7e:	fab1 f181 	clz	r1, r1
 8005f82:	2009      	movs	r0, #9
 8005f84:	0949      	lsrs	r1, r1, #5
 8005f86:	f7fd f9d3 	bl	8003330 <_test_assert>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2800      	cmp	r0, #0
 8005f8e:	d18d      	bne.n	8005eac <queues2_execute.lto_priv.158+0xcc>
 8005f90:	f380 8811 	msr	BASEPRI, r0

  /* Partial writes */
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8005f94:	491e      	ldr	r1, [pc, #120]	; (8006010 <queues2_execute.lto_priv.158+0x230>)
 8005f96:	2202      	movs	r2, #2
 8005f98:	4628      	mov	r0, r5
 8005f9a:	f7fb fd31 	bl	8001a00 <chOQWriteTimeout>
  test_assert(10, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 8005f9e:	3802      	subs	r0, #2
 8005fa0:	4241      	negs	r1, r0
 8005fa2:	4141      	adcs	r1, r0
 8005fa4:	200a      	movs	r0, #10
 8005fa6:	f7fd f9c3 	bl	8003330 <_test_assert>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2800      	cmp	r0, #0
 8005fae:	f47f af62 	bne.w	8005e76 <queues2_execute.lto_priv.158+0x96>
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8005fb2:	4917      	ldr	r1, [pc, #92]	; (8006010 <queues2_execute.lto_priv.158+0x230>)
 8005fb4:	2202      	movs	r2, #2
 8005fb6:	4628      	mov	r0, r5
 8005fb8:	f7fb fd22 	bl	8001a00 <chOQWriteTimeout>
  test_assert(11, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 8005fbc:	1e82      	subs	r2, r0, #2
 8005fbe:	4251      	negs	r1, r2
 8005fc0:	4151      	adcs	r1, r2
 8005fc2:	200b      	movs	r0, #11
 8005fc4:	f7fd f9b4 	bl	8003330 <_test_assert>
 8005fc8:	2800      	cmp	r0, #0
 8005fca:	f47f af54 	bne.w	8005e76 <queues2_execute.lto_priv.158+0x96>
 8005fce:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 8005fd2:	68a9      	ldr	r1, [r5, #8]
  test_assert_lock(12, chOQIsFullI(&oq), "not full");
 8005fd4:	200c      	movs	r0, #12
 8005fd6:	fab1 f181 	clz	r1, r1
 8005fda:	0949      	lsrs	r1, r1, #5
 8005fdc:	f7fd f9a8 	bl	8003330 <_test_assert>
 8005fe0:	2800      	cmp	r0, #0
 8005fe2:	f47f af45 	bne.w	8005e70 <queues2_execute.lto_priv.158+0x90>
 8005fe6:	2100      	movs	r1, #0
 8005fe8:	f381 8811 	msr	BASEPRI, r1

  /* Timeout */
  test_assert(13, chOQPutTimeout(&oq, 0, 10) == Q_TIMEOUT, "wrong timeout return");
 8005fec:	220a      	movs	r2, #10
 8005fee:	4806      	ldr	r0, [pc, #24]	; (8006008 <queues2_execute.lto_priv.158+0x228>)
 8005ff0:	f7fb fd46 	bl	8001a80 <chOQPutTimeout>
 8005ff4:	1c43      	adds	r3, r0, #1
 8005ff6:	4259      	negs	r1, r3
 8005ff8:	4159      	adcs	r1, r3
 8005ffa:	200d      	movs	r0, #13
}
 8005ffc:	b003      	add	sp, #12
 8005ffe:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
  test_assert(11, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
  test_assert_lock(12, chOQIsFullI(&oq), "not full");

  /* Timeout */
  test_assert(13, chOQPutTimeout(&oq, 0, 10) == Q_TIMEOUT, "wrong timeout return");
 8006002:	f7fd b995 	b.w	8003330 <_test_assert>
 8006006:	bf00      	nop
 8006008:	20000850 	.word	0x20000850
 800600c:	08008910 	.word	0x08008910
 8006010:	20001358 	.word	0x20001358
 8006014:	20001040 	.word	0x20001040
 8006018:	20001210 	.word	0x20001210
 800601c:	08005dc1 	.word	0x08005dc1
 8006020:	20000968 	.word	0x20000968
	...

08006030 <thread1>:
}

static THD_FUNCTION(thread1, p) {

  (void)p;
  chIQGetTimeout(&iq, MS2ST(200));
 8006030:	4802      	ldr	r0, [pc, #8]	; (800603c <thread1+0xc>)
 8006032:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006036:	f7fb bd93 	b.w	8001b60 <chIQGetTimeout>
 800603a:	bf00      	nop
 800603c:	20000874 	.word	0x20000874

08006040 <queues1_execute.lto_priv.156>:
}

static void queues1_execute(void) {
 8006040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006042:	2420      	movs	r4, #32
 8006044:	b083      	sub	sp, #12
 8006046:	f384 8811 	msr	BASEPRI, r4
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 800604a:	4b90      	ldr	r3, [pc, #576]	; (800628c <queues1_execute.lto_priv.156+0x24c>)
  unsigned i;
  size_t n;

  /* Initial empty state */
  test_assert_lock(1, chIQIsEmptyI(&iq), "not empty");
 800604c:	2001      	movs	r0, #1
 800604e:	6899      	ldr	r1, [r3, #8]
 8006050:	fab1 f181 	clz	r1, r1
 8006054:	0949      	lsrs	r1, r1, #5
 8006056:	f7fd f96b 	bl	8003330 <_test_assert>
 800605a:	4606      	mov	r6, r0
 800605c:	b9e8      	cbnz	r0, 800609a <queues1_execute.lto_priv.156+0x5a>
 800605e:	f380 8811 	msr	BASEPRI, r0
 8006062:	f384 8811 	msr	BASEPRI, r4
 8006066:	2441      	movs	r4, #65	; 0x41

  /* Queue filling */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
 8006068:	4d88      	ldr	r5, [pc, #544]	; (800628c <queues1_execute.lto_priv.156+0x24c>)
 800606a:	4621      	mov	r1, r4
 800606c:	3401      	adds	r4, #1
 800606e:	4628      	mov	r0, r5
 8006070:	b2e4      	uxtb	r4, r4
 8006072:	f7fb f84d 	bl	8001110 <chIQPutI>
  /* Initial empty state */
  test_assert_lock(1, chIQIsEmptyI(&iq), "not empty");

  /* Queue filling */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 8006076:	2c45      	cmp	r4, #69	; 0x45
 8006078:	d1f6      	bne.n	8006068 <queues1_execute.lto_priv.156+0x28>
 800607a:	2300      	movs	r3, #0
 800607c:	f383 8811 	msr	BASEPRI, r3
 8006080:	2320      	movs	r3, #32
 8006082:	f383 8811 	msr	BASEPRI, r3
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 8006086:	69aa      	ldr	r2, [r5, #24]
 8006088:	696b      	ldr	r3, [r5, #20]
 800608a:	429a      	cmp	r2, r3
 800608c:	d038      	beq.n	8006100 <queues1_execute.lto_priv.156+0xc0>
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();
  test_assert_lock(2, chIQIsFullI(&iq), "still has space");
 800608e:	4631      	mov	r1, r6
 8006090:	2002      	movs	r0, #2
 8006092:	f7fd f94d 	bl	8003330 <_test_assert>
 8006096:	4604      	mov	r4, r0
 8006098:	b120      	cbz	r0, 80060a4 <queues1_execute.lto_priv.156+0x64>
 800609a:	2300      	movs	r3, #0
 800609c:	f383 8811 	msr	BASEPRI, r3
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
  test_wait_threads();

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
}
 80060a0:	b003      	add	sp, #12
 80060a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060a4:	f380 8811 	msr	BASEPRI, r0
 80060a8:	2320      	movs	r3, #32
 80060aa:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();
  test_assert_lock(2, chIQIsFullI(&iq), "still has space");
  test_assert_lock(3, chIQPutI(&iq, 0) == Q_FULL, "failed to report Q_FULL");
 80060ae:	4877      	ldr	r0, [pc, #476]	; (800628c <queues1_execute.lto_priv.156+0x24c>)
 80060b0:	4621      	mov	r1, r4
 80060b2:	f7fb f82d 	bl	8001110 <chIQPutI>
 80060b6:	3004      	adds	r0, #4
 80060b8:	bf14      	ite	ne
 80060ba:	2100      	movne	r1, #0
 80060bc:	2101      	moveq	r1, #1
 80060be:	2003      	movs	r0, #3
 80060c0:	f7fd f936 	bl	8003330 <_test_assert>
 80060c4:	b9c0      	cbnz	r0, 80060f8 <queues1_execute.lto_priv.156+0xb8>
 80060c6:	f380 8811 	msr	BASEPRI, r0
 80060ca:	2404      	movs	r4, #4
 *
 * @api
 */
static inline msg_t chIQGet(input_queue_t *iqp) {

  return chIQGetTimeout(iqp, TIME_INFINITE);
 80060cc:	4d6f      	ldr	r5, [pc, #444]	; (800628c <queues1_execute.lto_priv.156+0x24c>)
 80060ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80060d2:	4628      	mov	r0, r5
 80060d4:	f7fb fd44 	bl	8001b60 <chIQGetTimeout>

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    test_emit_token(chIQGet(&iq));
 80060d8:	b2c0      	uxtb	r0, r0
 80060da:	f7fd f941 	bl	8003360 <test_emit_token>
  chSysUnlock();
  test_assert_lock(2, chIQIsFullI(&iq), "still has space");
  test_assert_lock(3, chIQPutI(&iq, 0) == Q_FULL, "failed to report Q_FULL");

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 80060de:	3c01      	subs	r4, #1
 80060e0:	d1f4      	bne.n	80060cc <queues1_execute.lto_priv.156+0x8c>
 80060e2:	2620      	movs	r6, #32
 80060e4:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 80060e8:	68a9      	ldr	r1, [r5, #8]
    test_emit_token(chIQGet(&iq));
  test_assert_lock(4, chIQIsEmptyI(&iq), "still full");
 80060ea:	2004      	movs	r0, #4
 80060ec:	fab1 f181 	clz	r1, r1
 80060f0:	0949      	lsrs	r1, r1, #5
 80060f2:	f7fd f91d 	bl	8003330 <_test_assert>
 80060f6:	b140      	cbz	r0, 800610a <queues1_execute.lto_priv.156+0xca>
 80060f8:	f384 8811 	msr	BASEPRI, r4
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
  test_wait_threads();

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
}
 80060fc:	b003      	add	sp, #12
 80060fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 8006100:	68ae      	ldr	r6, [r5, #8]
 8006102:	3600      	adds	r6, #0
 8006104:	bf18      	it	ne
 8006106:	2601      	movne	r6, #1
 8006108:	e7c1      	b.n	800608e <queues1_execute.lto_priv.156+0x4e>
 800610a:	f384 8811 	msr	BASEPRI, r4

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    test_emit_token(chIQGet(&iq));
  test_assert_lock(4, chIQIsEmptyI(&iq), "still full");
  test_assert_sequence(5, "ABCD");
 800610e:	2005      	movs	r0, #5
 8006110:	495f      	ldr	r1, [pc, #380]	; (8006290 <queues1_execute.lto_priv.156+0x250>)
 8006112:	f7fd f8e5 	bl	80032e0 <_test_assert_sequence>
 8006116:	2800      	cmp	r0, #0
 8006118:	d1c2      	bne.n	80060a0 <queues1_execute.lto_priv.156+0x60>
 800611a:	f386 8811 	msr	BASEPRI, r6
 800611e:	2441      	movs	r4, #65	; 0x41

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
 8006120:	4d5a      	ldr	r5, [pc, #360]	; (800628c <queues1_execute.lto_priv.156+0x24c>)
 8006122:	4621      	mov	r1, r4
 8006124:	3401      	adds	r4, #1
 8006126:	4628      	mov	r0, r5
 8006128:	b2e4      	uxtb	r4, r4
 800612a:	f7fa fff1 	bl	8001110 <chIQPutI>
  test_assert_lock(4, chIQIsEmptyI(&iq), "still full");
  test_assert_sequence(5, "ABCD");

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 800612e:	2c45      	cmp	r4, #69	; 0x45
 8006130:	d1f6      	bne.n	8006120 <queues1_execute.lto_priv.156+0xe0>
 8006132:	2300      	movs	r3, #0
 8006134:	f383 8811 	msr	BASEPRI, r3
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();

  /* Reading the whole thing */
  n = chIQReadTimeout(&iq, wa[1], TEST_QUEUES_SIZE * 2, TIME_IMMEDIATE);
 8006138:	4956      	ldr	r1, [pc, #344]	; (8006294 <queues1_execute.lto_priv.156+0x254>)
 800613a:	2208      	movs	r2, #8
 800613c:	4628      	mov	r0, r5
 800613e:	f7fb fccf 	bl	8001ae0 <chIQReadTimeout>
  test_assert(6, n == TEST_QUEUES_SIZE, "wrong returned size");
 8006142:	f1a0 0104 	sub.w	r1, r0, #4
 8006146:	fab1 f181 	clz	r1, r1
 800614a:	2006      	movs	r0, #6
 800614c:	0949      	lsrs	r1, r1, #5
 800614e:	f7fd f8ef 	bl	8003330 <_test_assert>
 8006152:	4604      	mov	r4, r0
 8006154:	2800      	cmp	r0, #0
 8006156:	d1a3      	bne.n	80060a0 <queues1_execute.lto_priv.156+0x60>
 8006158:	2620      	movs	r6, #32
 800615a:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 800615e:	68a9      	ldr	r1, [r5, #8]
  test_assert_lock(7, chIQIsEmptyI(&iq), "still full");
 8006160:	2007      	movs	r0, #7
 8006162:	fab1 f181 	clz	r1, r1
 8006166:	0949      	lsrs	r1, r1, #5
 8006168:	f7fd f8e2 	bl	8003330 <_test_assert>
 800616c:	2800      	cmp	r0, #0
 800616e:	d1c3      	bne.n	80060f8 <queues1_execute.lto_priv.156+0xb8>
 8006170:	f380 8811 	msr	BASEPRI, r0
 8006174:	f386 8811 	msr	BASEPRI, r6
 8006178:	2441      	movs	r4, #65	; 0x41

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
 800617a:	4d44      	ldr	r5, [pc, #272]	; (800628c <queues1_execute.lto_priv.156+0x24c>)
 800617c:	4621      	mov	r1, r4
 800617e:	3401      	adds	r4, #1
 8006180:	4628      	mov	r0, r5
 8006182:	b2e4      	uxtb	r4, r4
 8006184:	f7fa ffc4 	bl	8001110 <chIQPutI>
  test_assert(6, n == TEST_QUEUES_SIZE, "wrong returned size");
  test_assert_lock(7, chIQIsEmptyI(&iq), "still full");

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 8006188:	2c45      	cmp	r4, #69	; 0x45
 800618a:	d1f6      	bne.n	800617a <queues1_execute.lto_priv.156+0x13a>
 800618c:	2300      	movs	r3, #0
 800618e:	f383 8811 	msr	BASEPRI, r3
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();

  /* Partial reads */
  n = chIQReadTimeout(&iq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8006192:	4940      	ldr	r1, [pc, #256]	; (8006294 <queues1_execute.lto_priv.156+0x254>)
 8006194:	4628      	mov	r0, r5
 8006196:	2202      	movs	r2, #2
 8006198:	f7fb fca2 	bl	8001ae0 <chIQReadTimeout>
  test_assert(8, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 800619c:	f1a0 0102 	sub.w	r1, r0, #2
 80061a0:	fab1 f181 	clz	r1, r1
 80061a4:	2008      	movs	r0, #8
 80061a6:	0949      	lsrs	r1, r1, #5
 80061a8:	f7fd f8c2 	bl	8003330 <_test_assert>
 80061ac:	2800      	cmp	r0, #0
 80061ae:	f47f af77 	bne.w	80060a0 <queues1_execute.lto_priv.156+0x60>
  n = chIQReadTimeout(&iq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 80061b2:	4603      	mov	r3, r0
 80061b4:	4937      	ldr	r1, [pc, #220]	; (8006294 <queues1_execute.lto_priv.156+0x254>)
 80061b6:	2202      	movs	r2, #2
 80061b8:	4628      	mov	r0, r5
 80061ba:	f7fb fc91 	bl	8001ae0 <chIQReadTimeout>
  test_assert(9, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 80061be:	f1a0 0102 	sub.w	r1, r0, #2
 80061c2:	fab1 f181 	clz	r1, r1
 80061c6:	2009      	movs	r0, #9
 80061c8:	0949      	lsrs	r1, r1, #5
 80061ca:	f7fd f8b1 	bl	8003330 <_test_assert>
 80061ce:	4606      	mov	r6, r0
 80061d0:	2800      	cmp	r0, #0
 80061d2:	f47f af65 	bne.w	80060a0 <queues1_execute.lto_priv.156+0x60>
 80061d6:	2720      	movs	r7, #32
 80061d8:	f387 8811 	msr	BASEPRI, r7
 80061dc:	68a9      	ldr	r1, [r5, #8]
  test_assert_lock(10, chIQIsEmptyI(&iq), "still full");
 80061de:	200a      	movs	r0, #10
 80061e0:	fab1 f181 	clz	r1, r1
 80061e4:	0949      	lsrs	r1, r1, #5
 80061e6:	f7fd f8a3 	bl	8003330 <_test_assert>
 80061ea:	4604      	mov	r4, r0
 80061ec:	b110      	cbz	r0, 80061f4 <queues1_execute.lto_priv.156+0x1b4>
 80061ee:	f386 8811 	msr	BASEPRI, r6
 80061f2:	e755      	b.n	80060a0 <queues1_execute.lto_priv.156+0x60>
 80061f4:	f380 8811 	msr	BASEPRI, r0
 80061f8:	f387 8811 	msr	BASEPRI, r7

  /* Testing reset */
  chSysLock();
  chIQPutI(&iq, 0);
 80061fc:	4621      	mov	r1, r4
 80061fe:	4628      	mov	r0, r5
 8006200:	f7fa ff86 	bl	8001110 <chIQPutI>
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
 8006204:	68eb      	ldr	r3, [r5, #12]
  iqp->q_wrptr = iqp->q_buffer;
  iqp->q_counter = 0;
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 8006206:	4628      	mov	r0, r5
 8006208:	f06f 0101 	mvn.w	r1, #1

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
  iqp->q_wrptr = iqp->q_buffer;
  iqp->q_counter = 0;
 800620c:	60ac      	str	r4, [r5, #8]
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
 800620e:	61ab      	str	r3, [r5, #24]
  iqp->q_wrptr = iqp->q_buffer;
 8006210:	616b      	str	r3, [r5, #20]
  iqp->q_counter = 0;
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 8006212:	f7fb fad5 	bl	80017c0 <chThdDequeueAllI>
 8006216:	f384 8811 	msr	BASEPRI, r4
 800621a:	f387 8811 	msr	BASEPRI, r7
 */
static inline size_t chIQGetFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (size_t)chQSpaceI(iqp);
 800621e:	68a9      	ldr	r1, [r5, #8]
  chIQResetI(&iq);
  chSysUnlock();
  test_assert_lock(11, chIQGetFullI(&iq) == 0, "still full");
 8006220:	200b      	movs	r0, #11
 8006222:	fab1 f181 	clz	r1, r1
 8006226:	0949      	lsrs	r1, r1, #5
 8006228:	f7fd f882 	bl	8003330 <_test_assert>
 800622c:	4606      	mov	r6, r0
 800622e:	2800      	cmp	r0, #0
 8006230:	f47f af62 	bne.w	80060f8 <queues1_execute.lto_priv.156+0xb8>
 8006234:	f380 8811 	msr	BASEPRI, r0
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8006238:	4b17      	ldr	r3, [pc, #92]	; (8006298 <queues1_execute.lto_priv.156+0x258>)
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, NULL);
 800623a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 800623e:	699b      	ldr	r3, [r3, #24]
 8006240:	4816      	ldr	r0, [pc, #88]	; (800629c <queues1_execute.lto_priv.156+0x25c>)
 8006242:	689a      	ldr	r2, [r3, #8]
 8006244:	4b16      	ldr	r3, [pc, #88]	; (80062a0 <queues1_execute.lto_priv.156+0x260>)
 8006246:	3201      	adds	r2, #1
 8006248:	9600      	str	r6, [sp, #0]
 800624a:	f7fa fea9 	bl	8000fa0 <chThdCreateStatic>
 800624e:	4b15      	ldr	r3, [pc, #84]	; (80062a4 <queues1_execute.lto_priv.156+0x264>)
 8006250:	6018      	str	r0, [r3, #0]
 8006252:	f387 8811 	msr	BASEPRI, r7
 8006256:	68a9      	ldr	r1, [r5, #8]
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
 8006258:	200c      	movs	r0, #12
 800625a:	fab1 f181 	clz	r1, r1
 800625e:	0949      	lsrs	r1, r1, #5
 8006260:	f7fd f866 	bl	8003330 <_test_assert>
 8006264:	2800      	cmp	r0, #0
 8006266:	d1c2      	bne.n	80061ee <queues1_execute.lto_priv.156+0x1ae>
 8006268:	f380 8811 	msr	BASEPRI, r0
  test_wait_threads();
 800626c:	f7fc ffe0 	bl	8003230 <test_wait_threads>

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
 8006270:	4628      	mov	r0, r5
 8006272:	210a      	movs	r1, #10
 8006274:	f7fb fc74 	bl	8001b60 <chIQGetTimeout>
 8006278:	1c43      	adds	r3, r0, #1
 800627a:	4259      	negs	r1, r3
 800627c:	4159      	adcs	r1, r3
 800627e:	200d      	movs	r0, #13
}
 8006280:	b003      	add	sp, #12
 8006282:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, NULL);
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
  test_wait_threads();

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
 8006286:	f7fd b853 	b.w	8003330 <_test_assert>
 800628a:	bf00      	nop
 800628c:	20000874 	.word	0x20000874
 8006290:	08008910 	.word	0x08008910
 8006294:	20001358 	.word	0x20001358
 8006298:	20001040 	.word	0x20001040
 800629c:	20001210 	.word	0x20001210
 80062a0:	08006031 	.word	0x08006031
 80062a4:	20000968 	.word	0x20000968
	...

080062b0 <regfind>:
 * <h2>Description</h2>
 * Registry and Thread References APIs are tested for functionality and
 * coverage.
 */

static bool regfind(thread_t *tp) {
 80062b0:	b538      	push	{r3, r4, r5, lr}
 80062b2:	4605      	mov	r5, r0
 80062b4:	2320      	movs	r3, #32
 80062b6:	f383 8811 	msr	BASEPRI, r3
 */
thread_t *chRegFirstThread(void) {
  thread_t *tp;

  chSysLock();
  tp = ch.rlist.r_newer;
 80062ba:	4b0a      	ldr	r3, [pc, #40]	; (80062e4 <regfind+0x34>)
 80062bc:	2400      	movs	r4, #0
 80062be:	691b      	ldr	r3, [r3, #16]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs++;
 80062c0:	7f9a      	ldrb	r2, [r3, #30]
 80062c2:	3201      	adds	r2, #1
 80062c4:	779a      	strb	r2, [r3, #30]
 80062c6:	f384 8811 	msr	BASEPRI, r4
  bool found = false;

  ftp = chRegFirstThread();
  do {
    found |= ftp == tp;
    ftp = chRegNextThread(ftp);
 80062ca:	4618      	mov	r0, r3
  thread_t *ftp;
  bool found = false;

  ftp = chRegFirstThread();
  do {
    found |= ftp == tp;
 80062cc:	42ab      	cmp	r3, r5
 80062ce:	bf08      	it	eq
 80062d0:	f044 0401 	orreq.w	r4, r4, #1
    ftp = chRegNextThread(ftp);
 80062d4:	f7fb f97c 	bl	80015d0 <chRegNextThread>
  } while (ftp != NULL);
 80062d8:	4603      	mov	r3, r0
 80062da:	2800      	cmp	r0, #0
 80062dc:	d1f5      	bne.n	80062ca <regfind+0x1a>
  return found;
}
 80062de:	4620      	mov	r0, r4
 80062e0:	bd38      	pop	{r3, r4, r5, pc}
 80062e2:	bf00      	nop
 80062e4:	20001040 	.word	0x20001040
	...

080062f0 <dyn3_execute.lto_priv.154>:
static void dyn3_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}

static void dyn3_execute(void) {
 80062f0:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80062f2:	4a4a      	ldr	r2, [pc, #296]	; (800641c <dyn3_execute.lto_priv.154+0x12c>)
  thread_t *tp;
  tprio_t prio = chThdGetPriorityX();

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
 80062f4:	4b4a      	ldr	r3, [pc, #296]	; (8006420 <dyn3_execute.lto_priv.154+0x130>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80062f6:	6992      	ldr	r2, [r2, #24]
static void dyn3_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}

static void dyn3_execute(void) {
 80062f8:	b082      	sub	sp, #8
  thread_t *tp;
  tprio_t prio = chThdGetPriorityX();

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
 80062fa:	6892      	ldr	r2, [r2, #8]
 80062fc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006300:	9300      	str	r3, [sp, #0]
 8006302:	4848      	ldr	r0, [pc, #288]	; (8006424 <dyn3_execute.lto_priv.154+0x134>)
 8006304:	3a01      	subs	r2, #1
 8006306:	4b48      	ldr	r3, [pc, #288]	; (8006428 <dyn3_execute.lto_priv.154+0x138>)
 8006308:	f7fb f9e2 	bl	80016d0 <chThdCreateFromHeap>
  test_assert(1, tp->p_refs == 1, "wrong initial reference counter");
 800630c:	7f81      	ldrb	r1, [r0, #30]
static void dyn3_execute(void) {
  thread_t *tp;
  tprio_t prio = chThdGetPriorityX();

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
 800630e:	4604      	mov	r4, r0
  test_assert(1, tp->p_refs == 1, "wrong initial reference counter");
 8006310:	2001      	movs	r0, #1
 8006312:	1a09      	subs	r1, r1, r0
 8006314:	fab1 f181 	clz	r1, r1
 8006318:	0949      	lsrs	r1, r1, #5
 800631a:	f7fd f809 	bl	8003330 <_test_assert>
 800631e:	b108      	cbz	r0, 8006324 <dyn3_execute.lto_priv.154+0x34>
  test_assert(10, tp->p_state == CH_STATE_FINAL, "invalid state");

  /* Clearing the zombie by scanning the registry.*/
  test_assert(11, regfind(tp), "thread disappeared");
  test_assert(12, !regfind(tp), "thread still in registry");
}
 8006320:	b002      	add	sp, #8
 8006322:	bd10      	pop	{r4, pc}
 8006324:	2320      	movs	r3, #32
 8006326:	f383 8811 	msr	BASEPRI, r3
 */
thread_t *chThdAddRef(thread_t *tp) {

  chSysLock();
  chDbgAssert(tp->p_refs < (trefs_t)255, "too many references");
  tp->p_refs++;
 800632a:	7fa3      	ldrb	r3, [r4, #30]
 800632c:	3301      	adds	r3, #1
 800632e:	77a3      	strb	r3, [r4, #30]
 8006330:	f380 8811 	msr	BASEPRI, r0

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
  test_assert(1, tp->p_refs == 1, "wrong initial reference counter");
  chThdAddRef(tp);
  test_assert(2, tp->p_refs == 2, "references increase failure");
 8006334:	7fa1      	ldrb	r1, [r4, #30]
 8006336:	2002      	movs	r0, #2
 8006338:	1a09      	subs	r1, r1, r0
 800633a:	fab1 f181 	clz	r1, r1
 800633e:	0949      	lsrs	r1, r1, #5
 8006340:	f7fc fff6 	bl	8003330 <_test_assert>
 8006344:	2800      	cmp	r0, #0
 8006346:	d1eb      	bne.n	8006320 <dyn3_execute.lto_priv.154+0x30>
  chThdRelease(tp);
 8006348:	4620      	mov	r0, r4
 800634a:	f7fb f901 	bl	8001550 <chThdRelease>
  test_assert(3, tp->p_refs == 1, "references decrease failure");
 800634e:	7fa1      	ldrb	r1, [r4, #30]
 8006350:	2003      	movs	r0, #3
 8006352:	f1a1 0101 	sub.w	r1, r1, #1
 8006356:	fab1 f181 	clz	r1, r1
 800635a:	0949      	lsrs	r1, r1, #5
 800635c:	f7fc ffe8 	bl	8003330 <_test_assert>
 8006360:	2800      	cmp	r0, #0
 8006362:	d1dd      	bne.n	8006320 <dyn3_execute.lto_priv.154+0x30>

  /* Verify the new threads count.*/
  test_assert(4, regfind(tp), "thread missing from registry");
 8006364:	4620      	mov	r0, r4
 8006366:	f7ff ffa3 	bl	80062b0 <regfind>
 800636a:	4601      	mov	r1, r0
 800636c:	2004      	movs	r0, #4
 800636e:	f7fc ffdf 	bl	8003330 <_test_assert>
 8006372:	2800      	cmp	r0, #0
 8006374:	d1d4      	bne.n	8006320 <dyn3_execute.lto_priv.154+0x30>
  test_assert(5, regfind(tp), "thread disappeared");
 8006376:	4620      	mov	r0, r4
 8006378:	f7ff ff9a 	bl	80062b0 <regfind>
 800637c:	4601      	mov	r1, r0
 800637e:	2005      	movs	r0, #5
 8006380:	f7fc ffd6 	bl	8003330 <_test_assert>
 8006384:	2800      	cmp	r0, #0
 8006386:	d1cb      	bne.n	8006320 <dyn3_execute.lto_priv.154+0x30>

  /* Detach and let the thread execute and terminate.*/
  chThdRelease(tp);
 8006388:	4620      	mov	r0, r4
 800638a:	f7fb f8e1 	bl	8001550 <chThdRelease>
  test_assert(6, tp->p_refs == 0, "detach failure");
 800638e:	7fa1      	ldrb	r1, [r4, #30]
 8006390:	2006      	movs	r0, #6
 8006392:	fab1 f181 	clz	r1, r1
 8006396:	0949      	lsrs	r1, r1, #5
 8006398:	f7fc ffca 	bl	8003330 <_test_assert>
 800639c:	2800      	cmp	r0, #0
 800639e:	d1bf      	bne.n	8006320 <dyn3_execute.lto_priv.154+0x30>
  test_assert(7, tp->p_state == CH_STATE_READY, "invalid state");
 80063a0:	7f21      	ldrb	r1, [r4, #28]
 80063a2:	2007      	movs	r0, #7
 80063a4:	fab1 f181 	clz	r1, r1
 80063a8:	0949      	lsrs	r1, r1, #5
 80063aa:	f7fc ffc1 	bl	8003330 <_test_assert>
 80063ae:	2800      	cmp	r0, #0
 80063b0:	d1b6      	bne.n	8006320 <dyn3_execute.lto_priv.154+0x30>
  test_assert(8, regfind(tp), "thread disappeared");
 80063b2:	4620      	mov	r0, r4
 80063b4:	f7ff ff7c 	bl	80062b0 <regfind>
 80063b8:	4601      	mov	r1, r0
 80063ba:	2008      	movs	r0, #8
 80063bc:	f7fc ffb8 	bl	8003330 <_test_assert>
 80063c0:	2800      	cmp	r0, #0
 80063c2:	d1ad      	bne.n	8006320 <dyn3_execute.lto_priv.154+0x30>
  test_assert(9, regfind(tp), "thread disappeared");
 80063c4:	4620      	mov	r0, r4
 80063c6:	f7ff ff73 	bl	80062b0 <regfind>
 80063ca:	4601      	mov	r1, r0
 80063cc:	2009      	movs	r0, #9
 80063ce:	f7fc ffaf 	bl	8003330 <_test_assert>
 80063d2:	2800      	cmp	r0, #0
 80063d4:	d1a4      	bne.n	8006320 <dyn3_execute.lto_priv.154+0x30>
  chThdSleepMilliseconds(50);           /* The thread just terminates.      */
 80063d6:	2064      	movs	r0, #100	; 0x64
 80063d8:	f7fb fc02 	bl	8001be0 <chThdSleep>
  test_assert(10, tp->p_state == CH_STATE_FINAL, "invalid state");
 80063dc:	7f21      	ldrb	r1, [r4, #28]
 80063de:	200a      	movs	r0, #10
 80063e0:	f1a1 030f 	sub.w	r3, r1, #15
 80063e4:	4259      	negs	r1, r3
 80063e6:	4159      	adcs	r1, r3
 80063e8:	f7fc ffa2 	bl	8003330 <_test_assert>
 80063ec:	2800      	cmp	r0, #0
 80063ee:	d197      	bne.n	8006320 <dyn3_execute.lto_priv.154+0x30>

  /* Clearing the zombie by scanning the registry.*/
  test_assert(11, regfind(tp), "thread disappeared");
 80063f0:	4620      	mov	r0, r4
 80063f2:	f7ff ff5d 	bl	80062b0 <regfind>
 80063f6:	4601      	mov	r1, r0
 80063f8:	200b      	movs	r0, #11
 80063fa:	f7fc ff99 	bl	8003330 <_test_assert>
 80063fe:	2800      	cmp	r0, #0
 8006400:	d18e      	bne.n	8006320 <dyn3_execute.lto_priv.154+0x30>
  test_assert(12, !regfind(tp), "thread still in registry");
 8006402:	4620      	mov	r0, r4
 8006404:	f7ff ff54 	bl	80062b0 <regfind>
 8006408:	f080 0101 	eor.w	r1, r0, #1
 800640c:	b2c9      	uxtb	r1, r1
 800640e:	200c      	movs	r0, #12
}
 8006410:	b002      	add	sp, #8
 8006412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chThdSleepMilliseconds(50);           /* The thread just terminates.      */
  test_assert(10, tp->p_state == CH_STATE_FINAL, "invalid state");

  /* Clearing the zombie by scanning the registry.*/
  test_assert(11, regfind(tp), "thread disappeared");
  test_assert(12, !regfind(tp), "thread still in registry");
 8006416:	f7fc bf8b 	b.w	8003330 <_test_assert>
 800641a:	bf00      	nop
 800641c:	20001040 	.word	0x20001040
 8006420:	080078a4 	.word	0x080078a4
 8006424:	20000cf8 	.word	0x20000cf8
 8006428:	08005dd1 	.word	0x08005dd1
 800642c:	00000000 	.word	0x00000000

08006430 <pools1_execute.lto_priv.148>:
static void pools1_setup(void) {

  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}

static void pools1_execute(void) {
 8006430:	b570      	push	{r4, r5, r6, lr}
 8006432:	4b2f      	ldr	r3, [pc, #188]	; (80064f0 <pools1_execute.lto_priv.148+0xc0>)
 8006434:	4c2f      	ldr	r4, [pc, #188]	; (80064f4 <pools1_execute.lto_priv.148+0xc4>)
 8006436:	2205      	movs	r2, #5
 8006438:	2520      	movs	r5, #32
 800643a:	2000      	movs	r0, #0
 800643c:	f385 8811 	msr	BASEPRI, r5
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8006440:	6821      	ldr	r1, [r4, #0]
  mp->mp_next = php;
 8006442:	6023      	str	r3, [r4, #0]
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8006444:	6019      	str	r1, [r3, #0]
 8006446:	f380 8811 	msr	BASEPRI, r0
  chDbgCheck((mp != NULL) && (n != 0U));

  while (n != 0U) {
    chPoolAdd(mp, p);
    /*lint -save -e9087 [11.3] Safe cast.*/
    p = (void *)(((uint8_t *)p) + mp->mp_object_size);
 800644a:	6861      	ldr	r1, [r4, #4]
 */
void chPoolLoadArray(memory_pool_t *mp, void *p, size_t n) {

  chDbgCheck((mp != NULL) && (n != 0U));

  while (n != 0U) {
 800644c:	3a01      	subs	r2, #1
    chPoolAdd(mp, p);
    /*lint -save -e9087 [11.3] Safe cast.*/
    p = (void *)(((uint8_t *)p) + mp->mp_object_size);
 800644e:	440b      	add	r3, r1
 */
void chPoolLoadArray(memory_pool_t *mp, void *p, size_t n) {

  chDbgCheck((mp != NULL) && (n != 0U));

  while (n != 0U) {
 8006450:	d1f4      	bne.n	800643c <pools1_execute.lto_priv.148+0xc>
 8006452:	2505      	movs	r5, #5
  /* Adding the WAs to the pool.*/
  chPoolLoadArray(&mp1, wa[0], MAX_THREADS);

  /* Emptying the pool.*/
  for (i = 0; i < MAX_THREADS; i++)
    test_assert(1, chPoolAlloc(&mp1) != NULL, "list empty");
 8006454:	4827      	ldr	r0, [pc, #156]	; (80064f4 <pools1_execute.lto_priv.148+0xc4>)
 8006456:	f7fa fc9b 	bl	8000d90 <chPoolAlloc>
 800645a:	1c01      	adds	r1, r0, #0
 800645c:	bf18      	it	ne
 800645e:	2101      	movne	r1, #1
 8006460:	2001      	movs	r0, #1
 8006462:	f7fc ff65 	bl	8003330 <_test_assert>
 8006466:	bb90      	cbnz	r0, 80064ce <pools1_execute.lto_priv.148+0x9e>

  /* Adding the WAs to the pool.*/
  chPoolLoadArray(&mp1, wa[0], MAX_THREADS);

  /* Emptying the pool.*/
  for (i = 0; i < MAX_THREADS; i++)
 8006468:	3d01      	subs	r5, #1
 800646a:	d1f3      	bne.n	8006454 <pools1_execute.lto_priv.148+0x24>
    test_assert(1, chPoolAlloc(&mp1) != NULL, "list empty");

  /* Now must be empty.*/
  test_assert(2, chPoolAlloc(&mp1) == NULL, "list not empty");
 800646c:	4821      	ldr	r0, [pc, #132]	; (80064f4 <pools1_execute.lto_priv.148+0xc4>)
 800646e:	f7fa fc8f 	bl	8000d90 <chPoolAlloc>
 8006472:	fab0 f180 	clz	r1, r0
 8006476:	2002      	movs	r0, #2
 8006478:	0949      	lsrs	r1, r1, #5
 800647a:	f7fc ff59 	bl	8003330 <_test_assert>
 800647e:	bb30      	cbnz	r0, 80064ce <pools1_execute.lto_priv.148+0x9e>
 8006480:	4b1d      	ldr	r3, [pc, #116]	; (80064f8 <pools1_execute.lto_priv.148+0xc8>)
 8006482:	2620      	movs	r6, #32
 8006484:	f103 0014 	add.w	r0, r3, #20

  /* Adding the WAs to the pool, one by one this time.*/
  for (i = 0; i < MAX_THREADS; i++)
    chPoolFree(&mp1, wa[i]);
 8006488:	f853 2b04 	ldr.w	r2, [r3], #4
 800648c:	f386 8811 	msr	BASEPRI, r6
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8006490:	6821      	ldr	r1, [r4, #0]
 8006492:	6011      	str	r1, [r2, #0]
  mp->mp_next = php;
 8006494:	6022      	str	r2, [r4, #0]
 8006496:	f385 8811 	msr	BASEPRI, r5

  /* Now must be empty.*/
  test_assert(2, chPoolAlloc(&mp1) == NULL, "list not empty");

  /* Adding the WAs to the pool, one by one this time.*/
  for (i = 0; i < MAX_THREADS; i++)
 800649a:	4283      	cmp	r3, r0
 800649c:	d1f4      	bne.n	8006488 <pools1_execute.lto_priv.148+0x58>
 800649e:	2405      	movs	r4, #5
    chPoolFree(&mp1, wa[i]);

  /* Emptying the pool again.*/
  for (i = 0; i < MAX_THREADS; i++)
    test_assert(3, chPoolAlloc(&mp1) != NULL, "list empty");
 80064a0:	4d14      	ldr	r5, [pc, #80]	; (80064f4 <pools1_execute.lto_priv.148+0xc4>)
 80064a2:	4628      	mov	r0, r5
 80064a4:	f7fa fc74 	bl	8000d90 <chPoolAlloc>
 80064a8:	1c01      	adds	r1, r0, #0
 80064aa:	bf18      	it	ne
 80064ac:	2101      	movne	r1, #1
 80064ae:	2003      	movs	r0, #3
 80064b0:	f7fc ff3e 	bl	8003330 <_test_assert>
 80064b4:	b958      	cbnz	r0, 80064ce <pools1_execute.lto_priv.148+0x9e>
  /* Adding the WAs to the pool, one by one this time.*/
  for (i = 0; i < MAX_THREADS; i++)
    chPoolFree(&mp1, wa[i]);

  /* Emptying the pool again.*/
  for (i = 0; i < MAX_THREADS; i++)
 80064b6:	3c01      	subs	r4, #1
 80064b8:	d1f2      	bne.n	80064a0 <pools1_execute.lto_priv.148+0x70>
    test_assert(3, chPoolAlloc(&mp1) != NULL, "list empty");

  /* Now must be empty again.*/
  test_assert(4, chPoolAlloc(&mp1) == NULL, "list not empty");
 80064ba:	4628      	mov	r0, r5
 80064bc:	f7fa fc68 	bl	8000d90 <chPoolAlloc>
 80064c0:	fab0 f180 	clz	r1, r0
 80064c4:	2004      	movs	r0, #4
 80064c6:	0949      	lsrs	r1, r1, #5
 80064c8:	f7fc ff32 	bl	8003330 <_test_assert>
 80064cc:	b100      	cbz	r0, 80064d0 <pools1_execute.lto_priv.148+0xa0>
 80064ce:	bd70      	pop	{r4, r5, r6, pc}

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
  mp->mp_object_size = size;
  mp->mp_provider = provider;
 80064d0:	4a0a      	ldr	r2, [pc, #40]	; (80064fc <pools1_execute.lto_priv.148+0xcc>)
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
  mp->mp_object_size = size;
 80064d2:	2310      	movs	r3, #16

  /* Covering the case where a provider is unable to return more memory.*/
  chPoolObjectInit(&mp1, 16, null_provider);
  test_assert(5, chPoolAlloc(&mp1) == NULL, "provider returned memory");
 80064d4:	4628      	mov	r0, r5
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 80064d6:	602c      	str	r4, [r5, #0]
  mp->mp_object_size = size;
  mp->mp_provider = provider;
 80064d8:	60aa      	str	r2, [r5, #8]
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
  mp->mp_object_size = size;
 80064da:	606b      	str	r3, [r5, #4]
 80064dc:	f7fa fc58 	bl	8000d90 <chPoolAlloc>
}
 80064e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  /* Now must be empty again.*/
  test_assert(4, chPoolAlloc(&mp1) == NULL, "list not empty");

  /* Covering the case where a provider is unable to return more memory.*/
  chPoolObjectInit(&mp1, 16, null_provider);
  test_assert(5, chPoolAlloc(&mp1) == NULL, "provider returned memory");
 80064e4:	fab0 f180 	clz	r1, r0
 80064e8:	2005      	movs	r0, #5
 80064ea:	0949      	lsrs	r1, r1, #5
 80064ec:	f7fc bf20 	b.w	8003330 <_test_assert>
 80064f0:	20001210 	.word	0x20001210
 80064f4:	20000844 	.word	0x20000844
 80064f8:	080083a0 	.word	0x080083a0
 80064fc:	08006711 	.word	0x08006711

08006500 <dyn2_execute.lto_priv.152>:
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8006500:	4a2f      	ldr	r2, [pc, #188]	; (80065c0 <dyn2_execute.lto_priv.152+0xc0>)
static void dyn2_setup(void) {

  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}

static void dyn2_execute(void) {
 8006502:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8006504:	6992      	ldr	r2, [r2, #24]
 8006506:	4b2f      	ldr	r3, [pc, #188]	; (80065c4 <dyn2_execute.lto_priv.152+0xc4>)
 8006508:	492f      	ldr	r1, [pc, #188]	; (80065c8 <dyn2_execute.lto_priv.152+0xc8>)
 800650a:	6895      	ldr	r5, [r2, #8]
 800650c:	f103 0710 	add.w	r7, r3, #16
 8006510:	2620      	movs	r6, #32
 8006512:	2400      	movs	r4, #0
  int i;
  tprio_t prio = chThdGetPriorityX();

  /* Adding the WAs to the pool. */
  for (i = 0; i < 4; i++)
    chPoolFree(&mp1, wa[i]);
 8006514:	f853 2b04 	ldr.w	r2, [r3], #4
 8006518:	f386 8811 	msr	BASEPRI, r6
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 800651c:	6808      	ldr	r0, [r1, #0]
 800651e:	6010      	str	r0, [r2, #0]
  mp->mp_next = php;
 8006520:	600a      	str	r2, [r1, #0]
 8006522:	f384 8811 	msr	BASEPRI, r4
static void dyn2_execute(void) {
  int i;
  tprio_t prio = chThdGetPriorityX();

  /* Adding the WAs to the pool. */
  for (i = 0; i < 4; i++)
 8006526:	42bb      	cmp	r3, r7
 8006528:	d1f4      	bne.n	8006514 <dyn2_execute.lto_priv.152+0x14>
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
 800652a:	4928      	ldr	r1, [pc, #160]	; (80065cc <dyn2_execute.lto_priv.152+0xcc>)
 800652c:	1e68      	subs	r0, r5, #1
 800652e:	f000 feaf 	bl	8007290 <chThdCreateFromMemoryPool.constprop.76>
 8006532:	4c27      	ldr	r4, [pc, #156]	; (80065d0 <dyn2_execute.lto_priv.152+0xd0>)
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
 8006534:	4927      	ldr	r1, [pc, #156]	; (80065d4 <dyn2_execute.lto_priv.152+0xd4>)
  /* Adding the WAs to the pool. */
  for (i = 0; i < 4; i++)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
 8006536:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
 8006538:	1ea8      	subs	r0, r5, #2
 800653a:	f000 fea9 	bl	8007290 <chThdCreateFromMemoryPool.constprop.76>
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
 800653e:	4926      	ldr	r1, [pc, #152]	; (80065d8 <dyn2_execute.lto_priv.152+0xd8>)
  for (i = 0; i < 4; i++)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
 8006540:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
 8006542:	1ee8      	subs	r0, r5, #3
 8006544:	f000 fea4 	bl	8007290 <chThdCreateFromMemoryPool.constprop.76>
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
 8006548:	4924      	ldr	r1, [pc, #144]	; (80065dc <dyn2_execute.lto_priv.152+0xdc>)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
 800654a:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
 800654c:	1f28      	subs	r0, r5, #4
 800654e:	f000 fe9f 	bl	8007290 <chThdCreateFromMemoryPool.constprop.76>
  threads[4] = chThdCreateFromMemoryPool(&mp1, prio-5, thread, "E");
 8006552:	4923      	ldr	r1, [pc, #140]	; (80065e0 <dyn2_execute.lto_priv.152+0xe0>)

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
 8006554:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateFromMemoryPool(&mp1, prio-5, thread, "E");
 8006556:	1f68      	subs	r0, r5, #5
 8006558:	f000 fe9a 	bl	8007290 <chThdCreateFromMemoryPool.constprop.76>

  test_assert(1, (threads[0] != NULL) &&
 800655c:	6821      	ldr	r1, [r4, #0]
  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
  threads[4] = chThdCreateFromMemoryPool(&mp1, prio-5, thread, "E");
 800655e:	6120      	str	r0, [r4, #16]

  test_assert(1, (threads[0] != NULL) &&
 8006560:	b141      	cbz	r1, 8006574 <dyn2_execute.lto_priv.152+0x74>
 8006562:	6861      	ldr	r1, [r4, #4]
 8006564:	b131      	cbz	r1, 8006574 <dyn2_execute.lto_priv.152+0x74>
 8006566:	68a1      	ldr	r1, [r4, #8]
 8006568:	b121      	cbz	r1, 8006574 <dyn2_execute.lto_priv.152+0x74>
 800656a:	68e1      	ldr	r1, [r4, #12]
 800656c:	b111      	cbz	r1, 8006574 <dyn2_execute.lto_priv.152+0x74>
 800656e:	fab0 f180 	clz	r1, r0
 8006572:	0949      	lsrs	r1, r1, #5
 8006574:	2001      	movs	r0, #1
 8006576:	f7fc fedb 	bl	8003330 <_test_assert>
 800657a:	b100      	cbz	r0, 800657e <dyn2_execute.lto_priv.152+0x7e>
 800657c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                 (threads[3] != NULL) &&
                 (threads[4] == NULL),
                 "thread creation failed");

  /* Claiming the memory from terminated threads. */
  test_wait_threads();
 800657e:	f7fc fe57 	bl	8003230 <test_wait_threads>
  test_assert_sequence(2, "ABCD");
 8006582:	2002      	movs	r0, #2
 8006584:	4917      	ldr	r1, [pc, #92]	; (80065e4 <dyn2_execute.lto_priv.152+0xe4>)
 8006586:	f7fc feab 	bl	80032e0 <_test_assert_sequence>
 800658a:	2800      	cmp	r0, #0
 800658c:	d1f6      	bne.n	800657c <dyn2_execute.lto_priv.152+0x7c>
 800658e:	2404      	movs	r4, #4

  /* Now the pool must be full again. */
  for (i = 0; i < 4; i++)
    test_assert(3, chPoolAlloc(&mp1) != NULL, "pool list empty");
 8006590:	480d      	ldr	r0, [pc, #52]	; (80065c8 <dyn2_execute.lto_priv.152+0xc8>)
 8006592:	f7fa fbfd 	bl	8000d90 <chPoolAlloc>
 8006596:	1c01      	adds	r1, r0, #0
 8006598:	bf18      	it	ne
 800659a:	2101      	movne	r1, #1
 800659c:	2003      	movs	r0, #3
 800659e:	f7fc fec7 	bl	8003330 <_test_assert>
 80065a2:	2800      	cmp	r0, #0
 80065a4:	d1ea      	bne.n	800657c <dyn2_execute.lto_priv.152+0x7c>
  /* Claiming the memory from terminated threads. */
  test_wait_threads();
  test_assert_sequence(2, "ABCD");

  /* Now the pool must be full again. */
  for (i = 0; i < 4; i++)
 80065a6:	3c01      	subs	r4, #1
 80065a8:	d1f2      	bne.n	8006590 <dyn2_execute.lto_priv.152+0x90>
    test_assert(3, chPoolAlloc(&mp1) != NULL, "pool list empty");
  test_assert(4, chPoolAlloc(&mp1) == NULL, "pool list not empty");
 80065aa:	4807      	ldr	r0, [pc, #28]	; (80065c8 <dyn2_execute.lto_priv.152+0xc8>)
 80065ac:	f7fa fbf0 	bl	8000d90 <chPoolAlloc>
}
 80065b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  test_assert_sequence(2, "ABCD");

  /* Now the pool must be full again. */
  for (i = 0; i < 4; i++)
    test_assert(3, chPoolAlloc(&mp1) != NULL, "pool list empty");
  test_assert(4, chPoolAlloc(&mp1) == NULL, "pool list not empty");
 80065b4:	fab0 f180 	clz	r1, r0
 80065b8:	2004      	movs	r0, #4
 80065ba:	0949      	lsrs	r1, r1, #5
 80065bc:	f7fc beb8 	b.w	8003330 <_test_assert>
 80065c0:	20001040 	.word	0x20001040
 80065c4:	080083a0 	.word	0x080083a0
 80065c8:	20001190 	.word	0x20001190
 80065cc:	080078a4 	.word	0x080078a4
 80065d0:	20000968 	.word	0x20000968
 80065d4:	080078a0 	.word	0x080078a0
 80065d8:	080078a8 	.word	0x080078a8
 80065dc:	080087f0 	.word	0x080087f0
 80065e0:	080078b0 	.word	0x080078b0
 80065e4:	08008910 	.word	0x08008910
	...

080065f0 <dyn1_execute.lto_priv.150>:
static void dyn1_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}

static void dyn1_execute(void) {
 80065f0:	b570      	push	{r4, r5, r6, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80065f2:	4b34      	ldr	r3, [pc, #208]	; (80066c4 <dyn1_execute.lto_priv.150+0xd4>)
 80065f4:	b084      	sub	sp, #16
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80065f6:	699b      	ldr	r3, [r3, #24]
  size_t n, sz;
  void *p1;
  tprio_t prio = chThdGetPriorityX();

  (void)chHeapStatus(&heap1, &sz);
 80065f8:	a903      	add	r1, sp, #12
 80065fa:	4833      	ldr	r0, [pc, #204]	; (80066c8 <dyn1_execute.lto_priv.150+0xd8>)
 80065fc:	689d      	ldr	r5, [r3, #8]
 80065fe:	f7fa ff37 	bl	8001470 <chHeapStatus>
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
 8006602:	4b32      	ldr	r3, [pc, #200]	; (80066cc <dyn1_execute.lto_priv.150+0xdc>)
 8006604:	1e6a      	subs	r2, r5, #1
 8006606:	9300      	str	r3, [sp, #0]
 8006608:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800660c:	4b30      	ldr	r3, [pc, #192]	; (80066d0 <dyn1_execute.lto_priv.150+0xe0>)
 800660e:	482e      	ldr	r0, [pc, #184]	; (80066c8 <dyn1_execute.lto_priv.150+0xd8>)
 8006610:	f7fb f85e 	bl	80016d0 <chThdCreateFromHeap>
 8006614:	4c2f      	ldr	r4, [pc, #188]	; (80066d4 <dyn1_execute.lto_priv.150+0xe4>)
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-1, thread, "A");
  threads[1] = chThdCreateFromHeap(&heap1,
 8006616:	4b30      	ldr	r3, [pc, #192]	; (80066d8 <dyn1_execute.lto_priv.150+0xe8>)
 8006618:	1eaa      	subs	r2, r5, #2
  void *p1;
  tprio_t prio = chThdGetPriorityX();

  (void)chHeapStatus(&heap1, &sz);
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
 800661a:	6020      	str	r0, [r4, #0]
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-1, thread, "A");
  threads[1] = chThdCreateFromHeap(&heap1,
 800661c:	9300      	str	r3, [sp, #0]
 800661e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006622:	4b2b      	ldr	r3, [pc, #172]	; (80066d0 <dyn1_execute.lto_priv.150+0xe0>)
 8006624:	4828      	ldr	r0, [pc, #160]	; (80066c8 <dyn1_execute.lto_priv.150+0xd8>)
 8006626:	f7fb f853 	bl	80016d0 <chThdCreateFromHeap>
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-2, thread, "B");
  /* Allocating the whole heap in order to make the thread creation fail.*/
  (void)chHeapStatus(&heap1, &n);
 800662a:	a902      	add	r1, sp, #8
  (void)chHeapStatus(&heap1, &sz);
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-1, thread, "A");
  threads[1] = chThdCreateFromHeap(&heap1,
 800662c:	6060      	str	r0, [r4, #4]
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-2, thread, "B");
  /* Allocating the whole heap in order to make the thread creation fail.*/
  (void)chHeapStatus(&heap1, &n);
 800662e:	4826      	ldr	r0, [pc, #152]	; (80066c8 <dyn1_execute.lto_priv.150+0xd8>)
 8006630:	f7fa ff1e 	bl	8001470 <chHeapStatus>
  p1 = chHeapAlloc(&heap1, n);
 8006634:	9902      	ldr	r1, [sp, #8]
 8006636:	4824      	ldr	r0, [pc, #144]	; (80066c8 <dyn1_execute.lto_priv.150+0xd8>)
 8006638:	f7fb f802 	bl	8001640 <chHeapAlloc>
  threads[2] = chThdCreateFromHeap(&heap1,
 800663c:	4b27      	ldr	r3, [pc, #156]	; (80066dc <dyn1_execute.lto_priv.150+0xec>)
 800663e:	f44f 71a4 	mov.w	r1, #328	; 0x148
  threads[1] = chThdCreateFromHeap(&heap1,
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-2, thread, "B");
  /* Allocating the whole heap in order to make the thread creation fail.*/
  (void)chHeapStatus(&heap1, &n);
  p1 = chHeapAlloc(&heap1, n);
 8006642:	4606      	mov	r6, r0
  threads[2] = chThdCreateFromHeap(&heap1,
 8006644:	1eea      	subs	r2, r5, #3
 8006646:	9300      	str	r3, [sp, #0]
 8006648:	481f      	ldr	r0, [pc, #124]	; (80066c8 <dyn1_execute.lto_priv.150+0xd8>)
 800664a:	4b21      	ldr	r3, [pc, #132]	; (80066d0 <dyn1_execute.lto_priv.150+0xe0>)
 800664c:	f7fb f840 	bl	80016d0 <chThdCreateFromHeap>
 8006650:	60a0      	str	r0, [r4, #8]
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-3, thread, "C");
  chHeapFree(p1);
 8006652:	4630      	mov	r0, r6
 8006654:	f7fa ff34 	bl	80014c0 <chHeapFree>

  test_assert(1, (threads[0] != NULL) &&
 8006658:	6821      	ldr	r1, [r4, #0]
 800665a:	b121      	cbz	r1, 8006666 <dyn1_execute.lto_priv.150+0x76>
 800665c:	6861      	ldr	r1, [r4, #4]
 800665e:	b111      	cbz	r1, 8006666 <dyn1_execute.lto_priv.150+0x76>
 8006660:	68a1      	ldr	r1, [r4, #8]
 8006662:	b331      	cbz	r1, 80066b2 <dyn1_execute.lto_priv.150+0xc2>
 8006664:	2100      	movs	r1, #0
 8006666:	2001      	movs	r0, #1
 8006668:	f7fc fe62 	bl	8003330 <_test_assert>
 800666c:	b108      	cbz	r0, 8006672 <dyn1_execute.lto_priv.150+0x82>
  test_assert_sequence(2, "AB");

  /* Heap status checked again.*/
  test_assert(3, chHeapStatus(&heap1, &n) == 1, "heap fragmented");
  test_assert(4, n == sz, "heap size changed");
}
 800666e:	b004      	add	sp, #16
 8006670:	bd70      	pop	{r4, r5, r6, pc}
                 (threads[3] == NULL) &&
                 (threads[4] == NULL),
                 "thread creation failed");

  /* Claiming the memory from terminated threads. */
  test_wait_threads();
 8006672:	f7fc fddd 	bl	8003230 <test_wait_threads>
  test_assert_sequence(2, "AB");
 8006676:	2002      	movs	r0, #2
 8006678:	4919      	ldr	r1, [pc, #100]	; (80066e0 <dyn1_execute.lto_priv.150+0xf0>)
 800667a:	f7fc fe31 	bl	80032e0 <_test_assert_sequence>
 800667e:	2800      	cmp	r0, #0
 8006680:	d1f5      	bne.n	800666e <dyn1_execute.lto_priv.150+0x7e>

  /* Heap status checked again.*/
  test_assert(3, chHeapStatus(&heap1, &n) == 1, "heap fragmented");
 8006682:	a902      	add	r1, sp, #8
 8006684:	4810      	ldr	r0, [pc, #64]	; (80066c8 <dyn1_execute.lto_priv.150+0xd8>)
 8006686:	f7fa fef3 	bl	8001470 <chHeapStatus>
 800668a:	f1a0 0101 	sub.w	r1, r0, #1
 800668e:	fab1 f181 	clz	r1, r1
 8006692:	2003      	movs	r0, #3
 8006694:	0949      	lsrs	r1, r1, #5
 8006696:	f7fc fe4b 	bl	8003330 <_test_assert>
 800669a:	2800      	cmp	r0, #0
 800669c:	d1e7      	bne.n	800666e <dyn1_execute.lto_priv.150+0x7e>
  test_assert(4, n == sz, "heap size changed");
 800669e:	9902      	ldr	r1, [sp, #8]
 80066a0:	9b03      	ldr	r3, [sp, #12]
 80066a2:	2004      	movs	r0, #4
 80066a4:	1ac9      	subs	r1, r1, r3
 80066a6:	fab1 f181 	clz	r1, r1
 80066aa:	0949      	lsrs	r1, r1, #5
 80066ac:	f7fc fe40 	bl	8003330 <_test_assert>
 80066b0:	e7dd      	b.n	800666e <dyn1_execute.lto_priv.150+0x7e>
  threads[2] = chThdCreateFromHeap(&heap1,
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-3, thread, "C");
  chHeapFree(p1);

  test_assert(1, (threads[0] != NULL) &&
 80066b2:	68e3      	ldr	r3, [r4, #12]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1d6      	bne.n	8006666 <dyn1_execute.lto_priv.150+0x76>
 80066b8:	6921      	ldr	r1, [r4, #16]
 80066ba:	fab1 f181 	clz	r1, r1
 80066be:	0949      	lsrs	r1, r1, #5
 80066c0:	e7d1      	b.n	8006666 <dyn1_execute.lto_priv.150+0x76>
 80066c2:	bf00      	nop
 80066c4:	20001040 	.word	0x20001040
 80066c8:	20000cf8 	.word	0x20000cf8
 80066cc:	080078a4 	.word	0x080078a4
 80066d0:	08005dd1 	.word	0x08005dd1
 80066d4:	20000968 	.word	0x20000968
 80066d8:	080078a0 	.word	0x080078a0
 80066dc:	080078a8 	.word	0x080078a8
 80066e0:	08008918 	.word	0x08008918
	...

080066f0 <pools1_setup.lto_priv.147>:
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 80066f0:	4b03      	ldr	r3, [pc, #12]	; (8006700 <pools1_setup.lto_priv.147+0x10>)
 80066f2:	2200      	movs	r2, #0
  mp->mp_object_size = size;
 80066f4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80066f8:	6059      	str	r1, [r3, #4]
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 80066fa:	601a      	str	r2, [r3, #0]
  mp->mp_object_size = size;
  mp->mp_provider = provider;
 80066fc:	609a      	str	r2, [r3, #8]
 80066fe:	4770      	bx	lr
 8006700:	20000844 	.word	0x20000844
	...

08006710 <null_provider.lto_priv.99>:

static void *null_provider(size_t size) {

  (void)size;
  return NULL;
}
 8006710:	2000      	movs	r0, #0
 8006712:	4770      	bx	lr
	...

08006720 <heap1_setup.lto_priv.145>:
  heapp->h_free.h.u.next = hp;
 8006720:	4909      	ldr	r1, [pc, #36]	; (8006748 <heap1_setup.lto_priv.145+0x28>)
 * allocator.<br>
 * The test expects to find the heap back to the initial status after each
 * sequence.
 */

static void heap1_setup(void) {
 8006722:	b410      	push	{r4}
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 8006724:	2200      	movs	r2, #0
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 8006726:	f44f 64cc 	mov.w	r4, #1632	; 0x660
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 800672a:	4b08      	ldr	r3, [pc, #32]	; (800674c <heap1_setup.lto_priv.145+0x2c>)
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 800672c:	e881 0014 	stmia.w	r1, {r2, r4}
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8006730:	f103 0010 	add.w	r0, r3, #16

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
 8006734:	60da      	str	r2, [r3, #12]
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
  heapp->h_free.h.u.next = hp;
 8006736:	6099      	str	r1, [r3, #8]
 8006738:	6118      	str	r0, [r3, #16]
  tqp->p_prev = (thread_t *)tqp;
 800673a:	6158      	str	r0, [r3, #20]
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 800673c:	601a      	str	r2, [r3, #0]
 800673e:	619a      	str	r2, [r3, #24]

  chHeapObjectInit(&test_heap, test.buffer, sizeof(union test_buffers));
}
 8006740:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006744:	4770      	bx	lr
 8006746:	bf00      	nop
 8006748:	20001210 	.word	0x20001210
 800674c:	20000d18 	.word	0x20000d18

08006750 <heap1_execute.lto_priv.146>:

static void heap1_execute(void) {
 8006750:	b570      	push	{r4, r5, r6, lr}
 8006752:	b082      	sub	sp, #8

  /*
   * Test on the default heap in order to cover the core allocator at
   * least one time.
   */
  (void)chHeapStatus(NULL, &sz);
 8006754:	a901      	add	r1, sp, #4
 8006756:	2000      	movs	r0, #0
 8006758:	f7fa fe8a 	bl	8001470 <chHeapStatus>
  p1 = chHeapAlloc(NULL, SIZE);
 800675c:	2110      	movs	r1, #16
 800675e:	2000      	movs	r0, #0
 8006760:	f7fa ff6e 	bl	8001640 <chHeapAlloc>
  test_assert(1, p1 != NULL, "allocation failed");
 8006764:	1c01      	adds	r1, r0, #0
 8006766:	4605      	mov	r5, r0
 8006768:	bf18      	it	ne
 800676a:	2101      	movne	r1, #1
 800676c:	2001      	movs	r0, #1
 800676e:	f7fc fddf 	bl	8003330 <_test_assert>
 8006772:	4604      	mov	r4, r0
 8006774:	b108      	cbz	r0, 800677a <heap1_execute.lto_priv.146+0x2a>
  test_assert(10, chHeapStatus(&test_heap, &n) == 0, "not empty");
  chHeapFree(p1);

  test_assert(11, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
  test_assert(12, n == sz, "size changed");
}
 8006776:	b002      	add	sp, #8
 8006778:	bd70      	pop	{r4, r5, r6, pc}
   * least one time.
   */
  (void)chHeapStatus(NULL, &sz);
  p1 = chHeapAlloc(NULL, SIZE);
  test_assert(1, p1 != NULL, "allocation failed");
  chHeapFree(p1);
 800677a:	4628      	mov	r0, r5
 800677c:	f7fa fea0 	bl	80014c0 <chHeapFree>
  p1 = chHeapAlloc(NULL, (size_t)-256);
 8006780:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 8006784:	4620      	mov	r0, r4
 8006786:	f7fa ff5b 	bl	8001640 <chHeapAlloc>
  test_assert(2, p1 == NULL, "allocation not failed");
 800678a:	fab0 f180 	clz	r1, r0
 800678e:	2002      	movs	r0, #2
 8006790:	0949      	lsrs	r1, r1, #5
 8006792:	f7fc fdcd 	bl	8003330 <_test_assert>
 8006796:	2800      	cmp	r0, #0
 8006798:	d1ed      	bne.n	8006776 <heap1_execute.lto_priv.146+0x26>

  /* Initial local heap state.*/
  (void)chHeapStatus(&test_heap, &sz);
 800679a:	a901      	add	r1, sp, #4
 800679c:	487b      	ldr	r0, [pc, #492]	; (800698c <heap1_execute.lto_priv.146+0x23c>)
 800679e:	f7fa fe67 	bl	8001470 <chHeapStatus>

  /* Same order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 80067a2:	2110      	movs	r1, #16
 80067a4:	4879      	ldr	r0, [pc, #484]	; (800698c <heap1_execute.lto_priv.146+0x23c>)
 80067a6:	f7fa ff4b 	bl	8001640 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 80067aa:	2110      	movs	r1, #16

  /* Initial local heap state.*/
  (void)chHeapStatus(&test_heap, &sz);

  /* Same order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 80067ac:	4606      	mov	r6, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 80067ae:	4877      	ldr	r0, [pc, #476]	; (800698c <heap1_execute.lto_priv.146+0x23c>)
 80067b0:	f7fa ff46 	bl	8001640 <chHeapAlloc>
  p3 = chHeapAlloc(&test_heap, SIZE);
 80067b4:	2110      	movs	r1, #16
  /* Initial local heap state.*/
  (void)chHeapStatus(&test_heap, &sz);

  /* Same order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
  p2 = chHeapAlloc(&test_heap, SIZE);
 80067b6:	4605      	mov	r5, r0
  p3 = chHeapAlloc(&test_heap, SIZE);
 80067b8:	4874      	ldr	r0, [pc, #464]	; (800698c <heap1_execute.lto_priv.146+0x23c>)
 80067ba:	f7fa ff41 	bl	8001640 <chHeapAlloc>
 80067be:	4604      	mov	r4, r0
  chHeapFree(p1);                               /* Does not merge.*/
 80067c0:	4630      	mov	r0, r6
 80067c2:	f7fa fe7d 	bl	80014c0 <chHeapFree>
  chHeapFree(p2);                               /* Merges backward.*/
 80067c6:	4628      	mov	r0, r5
 80067c8:	f7fa fe7a 	bl	80014c0 <chHeapFree>
  chHeapFree(p3);                               /* Merges both sides.*/
 80067cc:	4620      	mov	r0, r4
 80067ce:	f7fa fe77 	bl	80014c0 <chHeapFree>
  test_assert(3, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 80067d2:	4669      	mov	r1, sp
 80067d4:	486d      	ldr	r0, [pc, #436]	; (800698c <heap1_execute.lto_priv.146+0x23c>)
 80067d6:	f7fa fe4b 	bl	8001470 <chHeapStatus>
 80067da:	f1a0 0101 	sub.w	r1, r0, #1
 80067de:	fab1 f181 	clz	r1, r1
 80067e2:	2003      	movs	r0, #3
 80067e4:	0949      	lsrs	r1, r1, #5
 80067e6:	f7fc fda3 	bl	8003330 <_test_assert>
 80067ea:	2800      	cmp	r0, #0
 80067ec:	d1c3      	bne.n	8006776 <heap1_execute.lto_priv.146+0x26>

  /* Reverse order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 80067ee:	2110      	movs	r1, #16
 80067f0:	4866      	ldr	r0, [pc, #408]	; (800698c <heap1_execute.lto_priv.146+0x23c>)
 80067f2:	f7fa ff25 	bl	8001640 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 80067f6:	2110      	movs	r1, #16
  chHeapFree(p2);                               /* Merges backward.*/
  chHeapFree(p3);                               /* Merges both sides.*/
  test_assert(3, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Reverse order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 80067f8:	4604      	mov	r4, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 80067fa:	4864      	ldr	r0, [pc, #400]	; (800698c <heap1_execute.lto_priv.146+0x23c>)
 80067fc:	f7fa ff20 	bl	8001640 <chHeapAlloc>
 8006800:	4605      	mov	r5, r0
  p3 = chHeapAlloc(&test_heap, SIZE);
 8006802:	2110      	movs	r1, #16
 8006804:	4861      	ldr	r0, [pc, #388]	; (800698c <heap1_execute.lto_priv.146+0x23c>)
 8006806:	f7fa ff1b 	bl	8001640 <chHeapAlloc>
  chHeapFree(p3);                               /* Merges forward.*/
 800680a:	f7fa fe59 	bl	80014c0 <chHeapFree>
  chHeapFree(p2);                               /* Merges forward.*/
 800680e:	4628      	mov	r0, r5
 8006810:	f7fa fe56 	bl	80014c0 <chHeapFree>
  chHeapFree(p1);                               /* Merges forward.*/
 8006814:	4620      	mov	r0, r4
 8006816:	f7fa fe53 	bl	80014c0 <chHeapFree>
  test_assert(4, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 800681a:	4669      	mov	r1, sp
 800681c:	485b      	ldr	r0, [pc, #364]	; (800698c <heap1_execute.lto_priv.146+0x23c>)
 800681e:	f7fa fe27 	bl	8001470 <chHeapStatus>
 8006822:	f1a0 0101 	sub.w	r1, r0, #1
 8006826:	fab1 f181 	clz	r1, r1
 800682a:	2004      	movs	r0, #4
 800682c:	0949      	lsrs	r1, r1, #5
 800682e:	f7fc fd7f 	bl	8003330 <_test_assert>
 8006832:	2800      	cmp	r0, #0
 8006834:	d19f      	bne.n	8006776 <heap1_execute.lto_priv.146+0x26>

  /* Small fragments handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE + 1);
 8006836:	2111      	movs	r1, #17
 8006838:	4854      	ldr	r0, [pc, #336]	; (800698c <heap1_execute.lto_priv.146+0x23c>)
 800683a:	f7fa ff01 	bl	8001640 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 800683e:	2110      	movs	r1, #16
  chHeapFree(p2);                               /* Merges forward.*/
  chHeapFree(p1);                               /* Merges forward.*/
  test_assert(4, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Small fragments handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE + 1);
 8006840:	4604      	mov	r4, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 8006842:	4852      	ldr	r0, [pc, #328]	; (800698c <heap1_execute.lto_priv.146+0x23c>)
 8006844:	f7fa fefc 	bl	8001640 <chHeapAlloc>
 8006848:	4605      	mov	r5, r0
  chHeapFree(p1);
 800684a:	4620      	mov	r0, r4
 800684c:	f7fa fe38 	bl	80014c0 <chHeapFree>
  test_assert(5, chHeapStatus(&test_heap, &n) == 2, "invalid state");
 8006850:	4669      	mov	r1, sp
 8006852:	484e      	ldr	r0, [pc, #312]	; (800698c <heap1_execute.lto_priv.146+0x23c>)
 8006854:	f7fa fe0c 	bl	8001470 <chHeapStatus>
 8006858:	f1a0 0102 	sub.w	r1, r0, #2
 800685c:	fab1 f181 	clz	r1, r1
 8006860:	2005      	movs	r0, #5
 8006862:	0949      	lsrs	r1, r1, #5
 8006864:	f7fc fd64 	bl	8003330 <_test_assert>
 8006868:	2800      	cmp	r0, #0
 800686a:	d184      	bne.n	8006776 <heap1_execute.lto_priv.146+0x26>
  p1 = chHeapAlloc(&test_heap, SIZE);
 800686c:	2110      	movs	r1, #16
 800686e:	4847      	ldr	r0, [pc, #284]	; (800698c <heap1_execute.lto_priv.146+0x23c>)
 8006870:	f7fa fee6 	bl	8001640 <chHeapAlloc>
  /* Note, the first situation happens when the alignment size is smaller
     than the header size, the second in the other cases.*/
  test_assert(6, (chHeapStatus(&test_heap, &n) == 1) ||
 8006874:	4669      	mov	r1, sp
  /* Small fragments handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE + 1);
  p2 = chHeapAlloc(&test_heap, SIZE);
  chHeapFree(p1);
  test_assert(5, chHeapStatus(&test_heap, &n) == 2, "invalid state");
  p1 = chHeapAlloc(&test_heap, SIZE);
 8006876:	4604      	mov	r4, r0
  /* Note, the first situation happens when the alignment size is smaller
     than the header size, the second in the other cases.*/
  test_assert(6, (chHeapStatus(&test_heap, &n) == 1) ||
 8006878:	4844      	ldr	r0, [pc, #272]	; (800698c <heap1_execute.lto_priv.146+0x23c>)
 800687a:	f7fa fdf9 	bl	8001470 <chHeapStatus>
 800687e:	2801      	cmp	r0, #1
 8006880:	f000 8081 	beq.w	8006986 <heap1_execute.lto_priv.146+0x236>
 8006884:	4669      	mov	r1, sp
 8006886:	4841      	ldr	r0, [pc, #260]	; (800698c <heap1_execute.lto_priv.146+0x23c>)
 8006888:	f7fa fdf2 	bl	8001470 <chHeapStatus>
 800688c:	f1a0 0102 	sub.w	r1, r0, #2
 8006890:	fab1 f181 	clz	r1, r1
 8006894:	0949      	lsrs	r1, r1, #5
 8006896:	2006      	movs	r0, #6
 8006898:	f7fc fd4a 	bl	8003330 <_test_assert>
 800689c:	2800      	cmp	r0, #0
 800689e:	f47f af6a 	bne.w	8006776 <heap1_execute.lto_priv.146+0x26>
                 (chHeapStatus(&test_heap, &n) == 2), "heap fragmented");
  chHeapFree(p2);
 80068a2:	4628      	mov	r0, r5
 80068a4:	f7fa fe0c 	bl	80014c0 <chHeapFree>
  chHeapFree(p1);
 80068a8:	4620      	mov	r0, r4
 80068aa:	f7fa fe09 	bl	80014c0 <chHeapFree>
  test_assert(7, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 80068ae:	4669      	mov	r1, sp
 80068b0:	4836      	ldr	r0, [pc, #216]	; (800698c <heap1_execute.lto_priv.146+0x23c>)
 80068b2:	f7fa fddd 	bl	8001470 <chHeapStatus>
 80068b6:	1e46      	subs	r6, r0, #1
 80068b8:	4271      	negs	r1, r6
 80068ba:	4171      	adcs	r1, r6
 80068bc:	2007      	movs	r0, #7
 80068be:	f7fc fd37 	bl	8003330 <_test_assert>
 80068c2:	2800      	cmp	r0, #0
 80068c4:	f47f af57 	bne.w	8006776 <heap1_execute.lto_priv.146+0x26>

  /* Skip fragment handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 80068c8:	2110      	movs	r1, #16
 80068ca:	4830      	ldr	r0, [pc, #192]	; (800698c <heap1_execute.lto_priv.146+0x23c>)
 80068cc:	f7fa feb8 	bl	8001640 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 80068d0:	2110      	movs	r1, #16
  chHeapFree(p2);
  chHeapFree(p1);
  test_assert(7, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Skip fragment handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 80068d2:	4605      	mov	r5, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 80068d4:	482d      	ldr	r0, [pc, #180]	; (800698c <heap1_execute.lto_priv.146+0x23c>)
 80068d6:	f7fa feb3 	bl	8001640 <chHeapAlloc>
 80068da:	4604      	mov	r4, r0
  chHeapFree(p1);
 80068dc:	4628      	mov	r0, r5
 80068de:	f7fa fdef 	bl	80014c0 <chHeapFree>
  test_assert(8, chHeapStatus(&test_heap, &n) == 2, "invalid state");
 80068e2:	4669      	mov	r1, sp
 80068e4:	4829      	ldr	r0, [pc, #164]	; (800698c <heap1_execute.lto_priv.146+0x23c>)
 80068e6:	f7fa fdc3 	bl	8001470 <chHeapStatus>
 80068ea:	1e85      	subs	r5, r0, #2
 80068ec:	4269      	negs	r1, r5
 80068ee:	4169      	adcs	r1, r5
 80068f0:	2008      	movs	r0, #8
 80068f2:	f7fc fd1d 	bl	8003330 <_test_assert>
 80068f6:	2800      	cmp	r0, #0
 80068f8:	f47f af3d 	bne.w	8006776 <heap1_execute.lto_priv.146+0x26>
  p1 = chHeapAlloc(&test_heap, SIZE * 2);       /* Skips first fragment.*/
 80068fc:	2120      	movs	r1, #32
 80068fe:	4823      	ldr	r0, [pc, #140]	; (800698c <heap1_execute.lto_priv.146+0x23c>)
 8006900:	f7fa fe9e 	bl	8001640 <chHeapAlloc>
  chHeapFree(p1);
 8006904:	f7fa fddc 	bl	80014c0 <chHeapFree>
  chHeapFree(p2);
 8006908:	4620      	mov	r0, r4
 800690a:	f7fa fdd9 	bl	80014c0 <chHeapFree>
  test_assert(9, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 800690e:	4669      	mov	r1, sp
 8006910:	481e      	ldr	r0, [pc, #120]	; (800698c <heap1_execute.lto_priv.146+0x23c>)
 8006912:	f7fa fdad 	bl	8001470 <chHeapStatus>
 8006916:	3801      	subs	r0, #1
 8006918:	4241      	negs	r1, r0
 800691a:	4141      	adcs	r1, r0
 800691c:	2009      	movs	r0, #9
 800691e:	f7fc fd07 	bl	8003330 <_test_assert>
 8006922:	2800      	cmp	r0, #0
 8006924:	f47f af27 	bne.w	8006776 <heap1_execute.lto_priv.146+0x26>

  /* Allocate all handling.*/
  (void)chHeapStatus(&test_heap, &n);
 8006928:	4669      	mov	r1, sp
 800692a:	4818      	ldr	r0, [pc, #96]	; (800698c <heap1_execute.lto_priv.146+0x23c>)
 800692c:	f7fa fda0 	bl	8001470 <chHeapStatus>
  p1 = chHeapAlloc(&test_heap, n);
 8006930:	9900      	ldr	r1, [sp, #0]
 8006932:	4816      	ldr	r0, [pc, #88]	; (800698c <heap1_execute.lto_priv.146+0x23c>)
 8006934:	f7fa fe84 	bl	8001640 <chHeapAlloc>
  test_assert(10, chHeapStatus(&test_heap, &n) == 0, "not empty");
 8006938:	4669      	mov	r1, sp
  chHeapFree(p2);
  test_assert(9, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Allocate all handling.*/
  (void)chHeapStatus(&test_heap, &n);
  p1 = chHeapAlloc(&test_heap, n);
 800693a:	4604      	mov	r4, r0
  test_assert(10, chHeapStatus(&test_heap, &n) == 0, "not empty");
 800693c:	4813      	ldr	r0, [pc, #76]	; (800698c <heap1_execute.lto_priv.146+0x23c>)
 800693e:	f7fa fd97 	bl	8001470 <chHeapStatus>
 8006942:	fab0 f180 	clz	r1, r0
 8006946:	200a      	movs	r0, #10
 8006948:	0949      	lsrs	r1, r1, #5
 800694a:	f7fc fcf1 	bl	8003330 <_test_assert>
 800694e:	2800      	cmp	r0, #0
 8006950:	f47f af11 	bne.w	8006776 <heap1_execute.lto_priv.146+0x26>
  chHeapFree(p1);
 8006954:	4620      	mov	r0, r4
 8006956:	f7fa fdb3 	bl	80014c0 <chHeapFree>

  test_assert(11, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 800695a:	4669      	mov	r1, sp
 800695c:	480b      	ldr	r0, [pc, #44]	; (800698c <heap1_execute.lto_priv.146+0x23c>)
 800695e:	f7fa fd87 	bl	8001470 <chHeapStatus>
 8006962:	1e42      	subs	r2, r0, #1
 8006964:	4251      	negs	r1, r2
 8006966:	4151      	adcs	r1, r2
 8006968:	200b      	movs	r0, #11
 800696a:	f7fc fce1 	bl	8003330 <_test_assert>
 800696e:	2800      	cmp	r0, #0
 8006970:	f47f af01 	bne.w	8006776 <heap1_execute.lto_priv.146+0x26>
  test_assert(12, n == sz, "size changed");
 8006974:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8006978:	1acb      	subs	r3, r1, r3
 800697a:	4259      	negs	r1, r3
 800697c:	4159      	adcs	r1, r3
 800697e:	200c      	movs	r0, #12
 8006980:	f7fc fcd6 	bl	8003330 <_test_assert>
 8006984:	e6f7      	b.n	8006776 <heap1_execute.lto_priv.146+0x26>
  chHeapFree(p1);
  test_assert(5, chHeapStatus(&test_heap, &n) == 2, "invalid state");
  p1 = chHeapAlloc(&test_heap, SIZE);
  /* Note, the first situation happens when the alignment size is smaller
     than the header size, the second in the other cases.*/
  test_assert(6, (chHeapStatus(&test_heap, &n) == 1) ||
 8006986:	4601      	mov	r1, r0
 8006988:	e785      	b.n	8006896 <heap1_execute.lto_priv.146+0x146>
 800698a:	bf00      	nop
 800698c:	20000d18 	.word	0x20000d18

08006990 <evt3_execute.lto_priv.144>:
static void evt3_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void evt3_execute(void) {
 8006990:	b570      	push	{r4, r5, r6, lr}
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8006992:	4c55      	ldr	r4, [pc, #340]	; (8006ae8 <evt3_execute.lto_priv.144+0x158>)
 8006994:	2320      	movs	r3, #32
 8006996:	69a2      	ldr	r2, [r4, #24]
 8006998:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 800699c:	6b53      	ldr	r3, [r2, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800699e:	b93b      	cbnz	r3, 80069b0 <evt3_execute.lto_priv.144+0x20>
 80069a0:	f383 8811 	msr	BASEPRI, r3
 80069a4:	2101      	movs	r1, #1

  /*
   * Tests various timeout situations.
   */
  m = chEvtWaitOneTimeout(ALL_EVENTS, TIME_IMMEDIATE);
  test_assert(1, m == 0, "spurious event");
 80069a6:	2001      	movs	r0, #1
 80069a8:	f7fc fcc2 	bl	8003330 <_test_assert>
 80069ac:	b180      	cbz	r0, 80069d0 <evt3_execute.lto_priv.144+0x40>
 80069ae:	bd70      	pop	{r4, r5, r6, pc}
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
  }
  m ^= m & (m - (eventmask_t)1);
 80069b0:	4259      	negs	r1, r3
 80069b2:	4019      	ands	r1, r3
  ctp->p_epending &= ~m;
 80069b4:	ea23 0301 	bic.w	r3, r3, r1
 80069b8:	6353      	str	r3, [r2, #52]	; 0x34
 80069ba:	2300      	movs	r3, #0
 80069bc:	f383 8811 	msr	BASEPRI, r3
 80069c0:	fab1 f181 	clz	r1, r1
 80069c4:	2001      	movs	r0, #1
 80069c6:	0949      	lsrs	r1, r1, #5
 80069c8:	f7fc fcb2 	bl	8003330 <_test_assert>
 80069cc:	2800      	cmp	r0, #0
 80069ce:	d1ee      	bne.n	80069ae <evt3_execute.lto_priv.144+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 80069d0:	69a3      	ldr	r3, [r4, #24]
 80069d2:	2220      	movs	r2, #32
 80069d4:	f382 8811 	msr	BASEPRI, r2
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
  if (m == (eventmask_t)0) {
 80069d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069da:	2a00      	cmp	r2, #0
 80069dc:	d06f      	beq.n	8006abe <evt3_execute.lto_priv.144+0x12e>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
  }
  ctp->p_epending &= ~m;
 80069de:	6358      	str	r0, [r3, #52]	; 0x34
 80069e0:	f380 8811 	msr	BASEPRI, r0
  m = chEvtWaitAnyTimeout(ALL_EVENTS, TIME_IMMEDIATE);
  test_assert(2, m == 0, "spurious event");
 80069e4:	4601      	mov	r1, r0
 80069e6:	2002      	movs	r0, #2
 80069e8:	f7fc fca2 	bl	8003330 <_test_assert>
 80069ec:	2800      	cmp	r0, #0
 80069ee:	d1de      	bne.n	80069ae <evt3_execute.lto_priv.144+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 80069f0:	69a3      	ldr	r3, [r4, #24]
 80069f2:	2220      	movs	r2, #32
 80069f4:	f382 8811 	msr	BASEPRI, r2

  chSysLock();
  if ((ctp->p_epending & events) != events) {
 80069f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069fa:	3201      	adds	r2, #1
 80069fc:	d063      	beq.n	8006ac6 <evt3_execute.lto_priv.144+0x136>
 80069fe:	f380 8811 	msr	BASEPRI, r0
 8006a02:	2001      	movs	r0, #1
  m = chEvtWaitAllTimeout(ALL_EVENTS, TIME_IMMEDIATE);
  test_assert(3, m == 0, "spurious event");
 8006a04:	4601      	mov	r1, r0
 8006a06:	2003      	movs	r0, #3
 8006a08:	f7fc fc92 	bl	8003330 <_test_assert>
 8006a0c:	2800      	cmp	r0, #0
 8006a0e:	d1ce      	bne.n	80069ae <evt3_execute.lto_priv.144+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8006a10:	69a6      	ldr	r6, [r4, #24]
 8006a12:	2320      	movs	r3, #32
 8006a14:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 8006a18:	6b75      	ldr	r5, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8006a1a:	b94d      	cbnz	r5, 8006a30 <evt3_execute.lto_priv.144+0xa0>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 8006a1c:	f04f 33ff 	mov.w	r3, #4294967295
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8006a20:	200a      	movs	r0, #10
  if (m == (eventmask_t)0) {
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 8006a22:	6233      	str	r3, [r6, #32]
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8006a24:	4601      	mov	r1, r0
 8006a26:	f7fa ff8b 	bl	8001940 <chSchGoSleepTimeoutS>
 8006a2a:	2800      	cmp	r0, #0
 8006a2c:	db4f      	blt.n	8006ace <evt3_execute.lto_priv.144+0x13e>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
 8006a2e:	6b75      	ldr	r5, [r6, #52]	; 0x34
  }
  m ^= m & (m - (eventmask_t)1);
 8006a30:	4269      	negs	r1, r5
 8006a32:	4029      	ands	r1, r5
  ctp->p_epending &= ~m;
 8006a34:	ea25 0501 	bic.w	r5, r5, r1
 8006a38:	6375      	str	r5, [r6, #52]	; 0x34
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	f383 8811 	msr	BASEPRI, r3
 8006a40:	fab1 f181 	clz	r1, r1
 8006a44:	0949      	lsrs	r1, r1, #5
  m = chEvtWaitOneTimeout(ALL_EVENTS, 10);
  test_assert(4, m == 0, "spurious event");
 8006a46:	2004      	movs	r0, #4
 8006a48:	f7fc fc72 	bl	8003330 <_test_assert>
 8006a4c:	2800      	cmp	r0, #0
 8006a4e:	d1ae      	bne.n	80069ae <evt3_execute.lto_priv.144+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8006a50:	69a6      	ldr	r6, [r4, #24]
 8006a52:	2320      	movs	r3, #32
 8006a54:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 8006a58:	6b75      	ldr	r5, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8006a5a:	b94d      	cbnz	r5, 8006a70 <evt3_execute.lto_priv.144+0xe0>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 8006a5c:	f04f 33ff 	mov.w	r3, #4294967295
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8006a60:	200a      	movs	r0, #10
  if (m == (eventmask_t)0) {
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 8006a62:	6233      	str	r3, [r6, #32]
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8006a64:	4601      	mov	r1, r0
 8006a66:	f7fa ff6b 	bl	8001940 <chSchGoSleepTimeoutS>
 8006a6a:	2800      	cmp	r0, #0
 8006a6c:	db33      	blt.n	8006ad6 <evt3_execute.lto_priv.144+0x146>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
 8006a6e:	6b75      	ldr	r5, [r6, #52]	; 0x34
  }
  ctp->p_epending &= ~m;
 8006a70:	2300      	movs	r3, #0
 8006a72:	6373      	str	r3, [r6, #52]	; 0x34
 8006a74:	f383 8811 	msr	BASEPRI, r3
 8006a78:	fab5 f185 	clz	r1, r5
 8006a7c:	0949      	lsrs	r1, r1, #5
  m = chEvtWaitAnyTimeout(ALL_EVENTS, 10);
  test_assert(5, m == 0, "spurious event");
 8006a7e:	2005      	movs	r0, #5
 8006a80:	f7fc fc56 	bl	8003330 <_test_assert>
 8006a84:	4605      	mov	r5, r0
 8006a86:	2800      	cmp	r0, #0
 8006a88:	d191      	bne.n	80069ae <evt3_execute.lto_priv.144+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8006a8a:	69a4      	ldr	r4, [r4, #24]
 8006a8c:	2320      	movs	r3, #32
 8006a8e:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if ((ctp->p_epending & events) != events) {
 8006a92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a94:	3301      	adds	r3, #1
 8006a96:	d008      	beq.n	8006aaa <evt3_execute.lto_priv.144+0x11a>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 8006a98:	f04f 33ff 	mov.w	r3, #4294967295
 8006a9c:	6223      	str	r3, [r4, #32]
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, time) < MSG_OK) {
 8006a9e:	200b      	movs	r0, #11
 8006aa0:	210a      	movs	r1, #10
 8006aa2:	f7fa ff4d 	bl	8001940 <chSchGoSleepTimeoutS>
 8006aa6:	2800      	cmp	r0, #0
 8006aa8:	db19      	blt.n	8006ade <evt3_execute.lto_priv.144+0x14e>
      chSysUnlock();
      return (eventmask_t)0;
    }
  }
  ctp->p_epending &= ~events;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	6363      	str	r3, [r4, #52]	; 0x34
 8006aae:	f383 8811 	msr	BASEPRI, r3
  m = chEvtWaitAllTimeout(ALL_EVENTS, 10);
  test_assert(6, m == 0, "spurious event");
 8006ab2:	4629      	mov	r1, r5
}
 8006ab4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  m = chEvtWaitOneTimeout(ALL_EVENTS, 10);
  test_assert(4, m == 0, "spurious event");
  m = chEvtWaitAnyTimeout(ALL_EVENTS, 10);
  test_assert(5, m == 0, "spurious event");
  m = chEvtWaitAllTimeout(ALL_EVENTS, 10);
  test_assert(6, m == 0, "spurious event");
 8006ab8:	2006      	movs	r0, #6
 8006aba:	f7fc bc39 	b.w	8003330 <_test_assert>
 8006abe:	f380 8811 	msr	BASEPRI, r0
 8006ac2:	2001      	movs	r0, #1
 8006ac4:	e78e      	b.n	80069e4 <evt3_execute.lto_priv.144+0x54>
 8006ac6:	6358      	str	r0, [r3, #52]	; 0x34
 8006ac8:	f380 8811 	msr	BASEPRI, r0
 8006acc:	e79a      	b.n	8006a04 <evt3_execute.lto_priv.144+0x74>
 8006ace:	f385 8811 	msr	BASEPRI, r5
 8006ad2:	2101      	movs	r1, #1
 8006ad4:	e7b7      	b.n	8006a46 <evt3_execute.lto_priv.144+0xb6>
 8006ad6:	f385 8811 	msr	BASEPRI, r5
 8006ada:	2101      	movs	r1, #1
 8006adc:	e7cf      	b.n	8006a7e <evt3_execute.lto_priv.144+0xee>
 8006ade:	f385 8811 	msr	BASEPRI, r5
 8006ae2:	2501      	movs	r5, #1
 8006ae4:	e7e5      	b.n	8006ab2 <evt3_execute.lto_priv.144+0x122>
 8006ae6:	bf00      	nop
 8006ae8:	20001040 	.word	0x20001040
 8006aec:	00000000 	.word	0x00000000

08006af0 <evt3_setup.lto_priv.143>:
 * After each test phase the test verifies that there are no stuck event flags.
 */

static void evt3_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
 8006af0:	f000 bc86 	b.w	8007400 <chEvtGetAndClearEvents.constprop.59>
	...

08006b00 <evt2_setup.lto_priv.141>:
 * the expected time and that there are no stuck event flags.
 */

static void evt2_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
 8006b00:	f000 bc7e 	b.w	8007400 <chEvtGetAndClearEvents.constprop.59>
	...

08006b10 <evt1_setup.lto_priv.139>:
 * the associated event handlers are invoked in LSb-first order.
 */

static void evt1_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
 8006b10:	f000 bc76 	b.w	8007400 <chEvtGetAndClearEvents.constprop.59>
	...

08006b20 <evt2_execute.lto_priv.142>:
  chEvtBroadcast(&es1);
  chThdSleepMilliseconds(50);
  chEvtBroadcast(&es2);
}

static void evt2_execute(void) {
 8006b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b24:	2520      	movs	r5, #32
 8006b26:	b08d      	sub	sp, #52	; 0x34
 8006b28:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
eventmask_t chEvtAddEvents(eventmask_t events) {

  chSysLock();
  currp->p_epending |= events;
 8006b2c:	4cad      	ldr	r4, [pc, #692]	; (8006de4 <evt2_execute.lto_priv.142+0x2c4>)
 8006b2e:	2100      	movs	r1, #0
 8006b30:	69a2      	ldr	r2, [r4, #24]
 8006b32:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8006b34:	f043 0307 	orr.w	r3, r3, #7
 8006b38:	6353      	str	r3, [r2, #52]	; 0x34
 8006b3a:	f381 8811 	msr	BASEPRI, r1

  /*
   * Test on chEvtWaitOne() without wait.
   */
  chEvtAddEvents(7);
  m = chEvtWaitOne(ALL_EVENTS);
 8006b3e:	f000 fc6f 	bl	8007420 <chEvtWaitOne.constprop.55>
  test_assert(1, m == 1, "single event error");
 8006b42:	f1a0 0101 	sub.w	r1, r0, #1
 8006b46:	fab1 f181 	clz	r1, r1
 8006b4a:	2001      	movs	r0, #1
 8006b4c:	0949      	lsrs	r1, r1, #5
 8006b4e:	f7fc fbef 	bl	8003330 <_test_assert>
 8006b52:	b110      	cbz	r0, 8006b5a <evt2_execute.lto_priv.142+0x3a>
  test_wait_threads();
  chEvtUnregister(&es1, &el1);
  chEvtUnregister(&es2, &el2);
  test_assert(15, !chEvtIsListeningI(&es1), "stuck listener");
  test_assert(16, !chEvtIsListeningI(&es2), "stuck listener");
}
 8006b54:	b00d      	add	sp, #52	; 0x34
 8006b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   * Test on chEvtWaitOne() without wait.
   */
  chEvtAddEvents(7);
  m = chEvtWaitOne(ALL_EVENTS);
  test_assert(1, m == 1, "single event error");
  m = chEvtWaitOne(ALL_EVENTS);
 8006b5a:	f000 fc61 	bl	8007420 <chEvtWaitOne.constprop.55>
  test_assert(2, m == 2, "single event error");
 8006b5e:	f1a0 0102 	sub.w	r1, r0, #2
 8006b62:	fab1 f181 	clz	r1, r1
 8006b66:	2002      	movs	r0, #2
 8006b68:	0949      	lsrs	r1, r1, #5
 8006b6a:	f7fc fbe1 	bl	8003330 <_test_assert>
 8006b6e:	2800      	cmp	r0, #0
 8006b70:	d1f0      	bne.n	8006b54 <evt2_execute.lto_priv.142+0x34>
  m = chEvtWaitOne(ALL_EVENTS);
 8006b72:	f000 fc55 	bl	8007420 <chEvtWaitOne.constprop.55>
  test_assert(3, m == 4, "single event error");
 8006b76:	f1a0 0104 	sub.w	r1, r0, #4
 8006b7a:	fab1 f181 	clz	r1, r1
 8006b7e:	2003      	movs	r0, #3
 8006b80:	0949      	lsrs	r1, r1, #5
 8006b82:	f7fc fbd5 	bl	8003330 <_test_assert>
 8006b86:	2800      	cmp	r0, #0
 8006b88:	d1e4      	bne.n	8006b54 <evt2_execute.lto_priv.142+0x34>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 8006b8a:	f000 fc39 	bl	8007400 <chEvtGetAndClearEvents.constprop.59>
  test_assert(4, m == 0, "stuck event");
 8006b8e:	fab0 f180 	clz	r1, r0
 8006b92:	2004      	movs	r0, #4
 8006b94:	0949      	lsrs	r1, r1, #5
 8006b96:	f7fc fbcb 	bl	8003330 <_test_assert>
 8006b9a:	4606      	mov	r6, r0
 8006b9c:	2800      	cmp	r0, #0
 8006b9e:	d1d9      	bne.n	8006b54 <evt2_execute.lto_priv.142+0x34>

  /*
   * Test on chEvtWaitOne() with wait.
   */
  test_wait_tick();
 8006ba0:	f7fc fb36 	bl	8003210 <test_wait_tick>
 8006ba4:	f385 8811 	msr	BASEPRI, r5
 8006ba8:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 8006bac:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
 8006bb0:	b2bf      	uxth	r7, r7
 8006bb2:	f386 8811 	msr	BASEPRI, r6
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8006bb6:	69a3      	ldr	r3, [r4, #24]
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8006bb8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006bbc:	689a      	ldr	r2, [r3, #8]
 8006bbe:	488a      	ldr	r0, [pc, #552]	; (8006de8 <evt2_execute.lto_priv.142+0x2c8>)
 8006bc0:	3a01      	subs	r2, #1
 8006bc2:	9300      	str	r3, [sp, #0]
 8006bc4:	4b89      	ldr	r3, [pc, #548]	; (8006dec <evt2_execute.lto_priv.142+0x2cc>)
 8006bc6:	f7fa f9eb 	bl	8000fa0 <chThdCreateStatic>
 8006bca:	4e89      	ldr	r6, [pc, #548]	; (8006df0 <evt2_execute.lto_priv.142+0x2d0>)
 8006bcc:	6030      	str	r0, [r6, #0]
                                 thread1, chThdGetSelfX());
  m = chEvtWaitOne(ALL_EVENTS);
 8006bce:	f000 fc27 	bl	8007420 <chEvtWaitOne.constprop.55>

  /*
   * Test on chEvtWaitOne() with wait.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
 8006bd2:	f107 0164 	add.w	r1, r7, #100	; 0x64
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitOne(ALL_EVENTS);
  test_assert_time_window(5, target_time, target_time + ALLOWED_DELAY);
 8006bd6:	f107 026e 	add.w	r2, r7, #110	; 0x6e
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitOne(ALL_EVENTS);
 8006bda:	4681      	mov	r9, r0
  test_assert_time_window(5, target_time, target_time + ALLOWED_DELAY);
 8006bdc:	b289      	uxth	r1, r1
 8006bde:	b292      	uxth	r2, r2
 8006be0:	2005      	movs	r0, #5
 8006be2:	f7fc fb55 	bl	8003290 <_test_assert_time_window>
 8006be6:	2800      	cmp	r0, #0
 8006be8:	d1b4      	bne.n	8006b54 <evt2_execute.lto_priv.142+0x34>
  test_assert(6, m == 1, "single event error");
 8006bea:	f1a9 0101 	sub.w	r1, r9, #1
 8006bee:	fab1 f181 	clz	r1, r1
 8006bf2:	2006      	movs	r0, #6
 8006bf4:	0949      	lsrs	r1, r1, #5
 8006bf6:	f7fc fb9b 	bl	8003330 <_test_assert>
 8006bfa:	2800      	cmp	r0, #0
 8006bfc:	d1aa      	bne.n	8006b54 <evt2_execute.lto_priv.142+0x34>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 8006bfe:	f000 fbff 	bl	8007400 <chEvtGetAndClearEvents.constprop.59>
  test_assert(7, m == 0, "stuck event");
 8006c02:	fab0 f180 	clz	r1, r0
 8006c06:	2007      	movs	r0, #7
 8006c08:	0949      	lsrs	r1, r1, #5
 8006c0a:	f7fc fb91 	bl	8003330 <_test_assert>
 8006c0e:	4607      	mov	r7, r0
 8006c10:	2800      	cmp	r0, #0
 8006c12:	d19f      	bne.n	8006b54 <evt2_execute.lto_priv.142+0x34>
  test_wait_threads();
 8006c14:	f7fc fb0c 	bl	8003230 <test_wait_threads>
 8006c18:	f385 8811 	msr	BASEPRI, r5
 8006c1c:	69a2      	ldr	r2, [r4, #24]
 8006c1e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8006c20:	f043 0305 	orr.w	r3, r3, #5
 8006c24:	6353      	str	r3, [r2, #52]	; 0x34
 8006c26:	f387 8811 	msr	BASEPRI, r7

  /*
   * Test on chEvtWaitAny() without wait.
   */
  chEvtAddEvents(5);
  m = chEvtWaitAny(ALL_EVENTS);
 8006c2a:	f000 fc19 	bl	8007460 <chEvtWaitAny.constprop.54>
  test_assert(8, m == 5, "unexpected pending bit");
 8006c2e:	1f47      	subs	r7, r0, #5
 8006c30:	4279      	negs	r1, r7
 8006c32:	4179      	adcs	r1, r7
 8006c34:	2008      	movs	r0, #8
 8006c36:	f7fc fb7b 	bl	8003330 <_test_assert>
 8006c3a:	2800      	cmp	r0, #0
 8006c3c:	d18a      	bne.n	8006b54 <evt2_execute.lto_priv.142+0x34>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 8006c3e:	f000 fbdf 	bl	8007400 <chEvtGetAndClearEvents.constprop.59>
  test_assert(9, m == 0, "stuck event");
 8006c42:	fab0 f180 	clz	r1, r0
 8006c46:	2009      	movs	r0, #9
 8006c48:	0949      	lsrs	r1, r1, #5
 8006c4a:	f7fc fb71 	bl	8003330 <_test_assert>
 8006c4e:	4607      	mov	r7, r0
 8006c50:	2800      	cmp	r0, #0
 8006c52:	f47f af7f 	bne.w	8006b54 <evt2_execute.lto_priv.142+0x34>

  /*
   * Test on chEvtWaitAny() with wait.
   */
  test_wait_tick();
 8006c56:	f7fc fadb 	bl	8003210 <test_wait_tick>
 8006c5a:	f385 8811 	msr	BASEPRI, r5
 8006c5e:	f8d8 5024 	ldr.w	r5, [r8, #36]	; 0x24
 8006c62:	b2ad      	uxth	r5, r5
 8006c64:	f387 8811 	msr	BASEPRI, r7
 8006c68:	69a3      	ldr	r3, [r4, #24]
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8006c6a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006c6e:	689a      	ldr	r2, [r3, #8]
 8006c70:	485d      	ldr	r0, [pc, #372]	; (8006de8 <evt2_execute.lto_priv.142+0x2c8>)
 8006c72:	3a01      	subs	r2, #1
 8006c74:	9300      	str	r3, [sp, #0]
 8006c76:	4b5d      	ldr	r3, [pc, #372]	; (8006dec <evt2_execute.lto_priv.142+0x2cc>)
 8006c78:	f7fa f992 	bl	8000fa0 <chThdCreateStatic>
 8006c7c:	6030      	str	r0, [r6, #0]
                                 thread1, chThdGetSelfX());
  m = chEvtWaitAny(ALL_EVENTS);
 8006c7e:	f000 fbef 	bl	8007460 <chEvtWaitAny.constprop.54>

  /*
   * Test on chEvtWaitAny() with wait.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
 8006c82:	f105 0164 	add.w	r1, r5, #100	; 0x64
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitAny(ALL_EVENTS);
  test_assert_time_window(10, target_time, target_time + ALLOWED_DELAY);
 8006c86:	f105 026e 	add.w	r2, r5, #110	; 0x6e
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitAny(ALL_EVENTS);
 8006c8a:	4607      	mov	r7, r0
  test_assert_time_window(10, target_time, target_time + ALLOWED_DELAY);
 8006c8c:	b289      	uxth	r1, r1
 8006c8e:	b292      	uxth	r2, r2
 8006c90:	200a      	movs	r0, #10
 8006c92:	f7fc fafd 	bl	8003290 <_test_assert_time_window>
 8006c96:	2800      	cmp	r0, #0
 8006c98:	f47f af5c 	bne.w	8006b54 <evt2_execute.lto_priv.142+0x34>
  test_assert(11, m == 1, "single event error");
 8006c9c:	1e78      	subs	r0, r7, #1
 8006c9e:	4241      	negs	r1, r0
 8006ca0:	4141      	adcs	r1, r0
 8006ca2:	200b      	movs	r0, #11
 8006ca4:	f7fc fb44 	bl	8003330 <_test_assert>
 8006ca8:	2800      	cmp	r0, #0
 8006caa:	f47f af53 	bne.w	8006b54 <evt2_execute.lto_priv.142+0x34>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 8006cae:	f000 fba7 	bl	8007400 <chEvtGetAndClearEvents.constprop.59>
  test_assert(12, m == 0, "stuck event");
 8006cb2:	fab0 f180 	clz	r1, r0
 8006cb6:	200c      	movs	r0, #12
 8006cb8:	0949      	lsrs	r1, r1, #5
 8006cba:	f7fc fb39 	bl	8003330 <_test_assert>
 8006cbe:	4680      	mov	r8, r0
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	f47f af47 	bne.w	8006b54 <evt2_execute.lto_priv.142+0x34>
  test_wait_threads();
 8006cc6:	f7fc fab3 	bl	8003230 <test_wait_threads>
 8006cca:	4d4a      	ldr	r5, [pc, #296]	; (8006df4 <evt2_execute.lto_priv.142+0x2d4>)
 8006ccc:	4b4a      	ldr	r3, [pc, #296]	; (8006df8 <evt2_execute.lto_priv.142+0x2d8>)
 8006cce:	602d      	str	r5, [r5, #0]
 8006cd0:	601b      	str	r3, [r3, #0]
 8006cd2:	f04f 0b20 	mov.w	fp, #32
 8006cd6:	f38b 8811 	msr	BASEPRI, fp
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8006cda:	6829      	ldr	r1, [r5, #0]
 8006cdc:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
  esp->es_next     = elp;
  elp->el_listener = currp;
 8006ce0:	69a2      	ldr	r2, [r4, #24]
  elp->el_events   = events;
 8006ce2:	2701      	movs	r7, #1
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8006ce4:	f84a 1d28 	str.w	r1, [sl, #-40]!
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = (eventflags_t)0;
  elp->el_wflags   = wflags;
 8006ce8:	f04f 30ff 	mov.w	r0, #4294967295
  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = (eventflags_t)0;
 8006cec:	f8cd 8014 	str.w	r8, [sp, #20]
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 8006cf0:	9203      	str	r2, [sp, #12]
  elp->el_events   = events;
 8006cf2:	9704      	str	r7, [sp, #16]

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 8006cf4:	f8c5 a000 	str.w	sl, [r5]
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = (eventflags_t)0;
  elp->el_wflags   = wflags;
 8006cf8:	9006      	str	r0, [sp, #24]
 8006cfa:	f388 8811 	msr	BASEPRI, r8
 8006cfe:	f38b 8811 	msr	BASEPRI, fp
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8006d02:	6819      	ldr	r1, [r3, #0]
 8006d04:	f10d 0930 	add.w	r9, sp, #48	; 0x30
  esp->es_next     = elp;
  elp->el_listener = currp;
 8006d08:	69a2      	ldr	r2, [r4, #24]
  elp->el_events   = events;
 8006d0a:	2704      	movs	r7, #4
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8006d0c:	f849 1d14 	str.w	r1, [r9, #-20]!
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = (eventflags_t)0;
 8006d10:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  elp->el_wflags   = wflags;
 8006d14:	900b      	str	r0, [sp, #44]	; 0x2c
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 8006d16:	9208      	str	r2, [sp, #32]
  elp->el_events   = events;
 8006d18:	9709      	str	r7, [sp, #36]	; 0x24

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 8006d1a:	f8c3 9000 	str.w	r9, [r3]
 8006d1e:	f388 8811 	msr	BASEPRI, r8
   */
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es2, &el2, 4);
  test_wait_tick();
 8006d22:	f7fc fa75 	bl	8003210 <test_wait_tick>
 8006d26:	f38b 8811 	msr	BASEPRI, fp
 8006d2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006d2e:	6a5f      	ldr	r7, [r3, #36]	; 0x24
 8006d30:	b2bf      	uxth	r7, r7
 8006d32:	f388 8811 	msr	BASEPRI, r8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8006d36:	69a2      	ldr	r2, [r4, #24]
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8006d38:	4b30      	ldr	r3, [pc, #192]	; (8006dfc <evt2_execute.lto_priv.142+0x2dc>)
 8006d3a:	6892      	ldr	r2, [r2, #8]
 8006d3c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006d40:	9300      	str	r3, [sp, #0]
 8006d42:	3a01      	subs	r2, #1
 8006d44:	4b2e      	ldr	r3, [pc, #184]	; (8006e00 <evt2_execute.lto_priv.142+0x2e0>)
 8006d46:	4828      	ldr	r0, [pc, #160]	; (8006de8 <evt2_execute.lto_priv.142+0x2c8>)
 8006d48:	f7fa f92a 	bl	8000fa0 <chThdCreateStatic>
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es2, &el2, 4);
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
 8006d4c:	f107 0864 	add.w	r8, r7, #100	; 0x64
 8006d50:	fa1f f888 	uxth.w	r8, r8
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAll(eventmask_t events) {
  thread_t *ctp = currp;
 8006d54:	69a4      	ldr	r4, [r4, #24]
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8006d56:	6030      	str	r0, [r6, #0]
 8006d58:	f38b 8811 	msr	BASEPRI, fp

  chSysLock();
  if ((ctp->p_epending & events) != events) {
 8006d5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d5e:	f003 0205 	and.w	r2, r3, #5
 8006d62:	2a05      	cmp	r2, #5
 8006d64:	d005      	beq.n	8006d72 <evt2_execute.lto_priv.142+0x252>
    ctp->p_u.ewmask = events;
 8006d66:	2305      	movs	r3, #5
 8006d68:	6223      	str	r3, [r4, #32]
    chSchGoSleepS(CH_STATE_WTANDEVT);
 8006d6a:	200b      	movs	r0, #11
 8006d6c:	f7fa f958 	bl	8001020 <chSchGoSleepS>
 8006d70:	6b63      	ldr	r3, [r4, #52]	; 0x34
  }
  ctp->p_epending &= ~events;
 8006d72:	f023 0305 	bic.w	r3, r3, #5
 8006d76:	6363      	str	r3, [r4, #52]	; 0x34
 8006d78:	2300      	movs	r3, #0
 8006d7a:	f383 8811 	msr	BASEPRI, r3
                                 thread2, "A");
  m = chEvtWaitAll(5);
  test_assert_time_window(13, target_time, target_time + ALLOWED_DELAY);
 8006d7e:	f107 026e 	add.w	r2, r7, #110	; 0x6e
 8006d82:	b292      	uxth	r2, r2
 8006d84:	4641      	mov	r1, r8
 8006d86:	200d      	movs	r0, #13
 8006d88:	f7fc fa82 	bl	8003290 <_test_assert_time_window>
 8006d8c:	2800      	cmp	r0, #0
 8006d8e:	f47f aee1 	bne.w	8006b54 <evt2_execute.lto_priv.142+0x34>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 8006d92:	f000 fb35 	bl	8007400 <chEvtGetAndClearEvents.constprop.59>
  test_assert(14, m == 0, "stuck event");
 8006d96:	fab0 f180 	clz	r1, r0
 8006d9a:	200e      	movs	r0, #14
 8006d9c:	0949      	lsrs	r1, r1, #5
 8006d9e:	f7fc fac7 	bl	8003330 <_test_assert>
 8006da2:	2800      	cmp	r0, #0
 8006da4:	f47f aed6 	bne.w	8006b54 <evt2_execute.lto_priv.142+0x34>
  test_wait_threads();
  chEvtUnregister(&es1, &el1);
  chEvtUnregister(&es2, &el2);
 8006da8:	4c13      	ldr	r4, [pc, #76]	; (8006df8 <evt2_execute.lto_priv.142+0x2d8>)
                                 thread2, "A");
  m = chEvtWaitAll(5);
  test_assert_time_window(13, target_time, target_time + ALLOWED_DELAY);
  m = chEvtGetAndClearEvents(ALL_EVENTS);
  test_assert(14, m == 0, "stuck event");
  test_wait_threads();
 8006daa:	f7fc fa41 	bl	8003230 <test_wait_threads>
  chEvtUnregister(&es1, &el1);
 8006dae:	4651      	mov	r1, sl
 8006db0:	4810      	ldr	r0, [pc, #64]	; (8006df4 <evt2_execute.lto_priv.142+0x2d4>)
 8006db2:	f7fa f805 	bl	8000dc0 <chEvtUnregister>
  chEvtUnregister(&es2, &el2);
 8006db6:	4649      	mov	r1, r9
 8006db8:	4620      	mov	r0, r4
 8006dba:	f7fa f801 	bl	8000dc0 <chEvtUnregister>
  test_assert(15, !chEvtIsListeningI(&es1), "stuck listener");
 8006dbe:	6829      	ldr	r1, [r5, #0]
 8006dc0:	200f      	movs	r0, #15
 8006dc2:	1b4a      	subs	r2, r1, r5
 8006dc4:	4251      	negs	r1, r2
 8006dc6:	4151      	adcs	r1, r2
 8006dc8:	f7fc fab2 	bl	8003330 <_test_assert>
 8006dcc:	2800      	cmp	r0, #0
 8006dce:	f47f aec1 	bne.w	8006b54 <evt2_execute.lto_priv.142+0x34>
  test_assert(16, !chEvtIsListeningI(&es2), "stuck listener");
 8006dd2:	6821      	ldr	r1, [r4, #0]
 8006dd4:	2010      	movs	r0, #16
 8006dd6:	1b0b      	subs	r3, r1, r4
 8006dd8:	4259      	negs	r1, r3
 8006dda:	4159      	adcs	r1, r3
 8006ddc:	f7fc faa8 	bl	8003330 <_test_assert>
 8006de0:	e6b8      	b.n	8006b54 <evt2_execute.lto_priv.142+0x34>
 8006de2:	bf00      	nop
 8006de4:	20001040 	.word	0x20001040
 8006de8:	20001210 	.word	0x20001210
 8006dec:	08006e51 	.word	0x08006e51
 8006df0:	20000968 	.word	0x20000968
 8006df4:	20000898 	.word	0x20000898
 8006df8:	2000089c 	.word	0x2000089c
 8006dfc:	080078a4 	.word	0x080078a4
 8006e00:	08006e11 	.word	0x08006e11
	...

08006e10 <thread2>:

  chThdSleepMilliseconds(50);
  chEvtSignal((thread_t *)p, 1);
}

static THD_FUNCTION(thread2, p) {
 8006e10:	b538      	push	{r3, r4, r5, lr}
 8006e12:	2520      	movs	r5, #32
 8006e14:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags) {

  chSysLock();
  chEvtBroadcastFlagsI(esp, flags);
 8006e18:	480b      	ldr	r0, [pc, #44]	; (8006e48 <thread2+0x38>)
 8006e1a:	2100      	movs	r1, #0
 8006e1c:	f7fa fa08 	bl	8001230 <chEvtBroadcastFlagsI>
 8006e20:	2400      	movs	r4, #0
  chSchRescheduleS();
 8006e22:	f7fa f845 	bl	8000eb0 <chSchRescheduleS>
 8006e26:	f384 8811 	msr	BASEPRI, r4

  (void)p;
  chEvtBroadcast(&es1);
  chThdSleepMilliseconds(50);
 8006e2a:	2064      	movs	r0, #100	; 0x64
 8006e2c:	f7fa fed8 	bl	8001be0 <chThdSleep>
 8006e30:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags) {

  chSysLock();
  chEvtBroadcastFlagsI(esp, flags);
 8006e34:	4805      	ldr	r0, [pc, #20]	; (8006e4c <thread2+0x3c>)
 8006e36:	4621      	mov	r1, r4
 8006e38:	f7fa f9fa 	bl	8001230 <chEvtBroadcastFlagsI>
  chSchRescheduleS();
 8006e3c:	f7fa f838 	bl	8000eb0 <chSchRescheduleS>
 8006e40:	f384 8811 	msr	BASEPRI, r4
 8006e44:	bd38      	pop	{r3, r4, r5, pc}
 8006e46:	bf00      	nop
 8006e48:	20000898 	.word	0x20000898
 8006e4c:	2000089c 	.word	0x2000089c

08006e50 <thread1>:
static void evt2_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static THD_FUNCTION(thread1, p) {
 8006e50:	b510      	push	{r4, lr}
 8006e52:	4604      	mov	r4, r0

  chThdSleepMilliseconds(50);
 8006e54:	2064      	movs	r0, #100	; 0x64
 8006e56:	f7fa fec3 	bl	8001be0 <chThdSleep>
 8006e5a:	2320      	movs	r3, #32
 8006e5c:	f383 8811 	msr	BASEPRI, r3
void chEvtSignal(thread_t *tp, eventmask_t events) {

  chDbgCheck(tp != NULL);

  chSysLock();
  chEvtSignalI(tp, events);
 8006e60:	2101      	movs	r1, #1
 8006e62:	4620      	mov	r0, r4
 8006e64:	f7fa f9cc 	bl	8001200 <chEvtSignalI>
  chSchRescheduleS();
 8006e68:	f7fa f822 	bl	8000eb0 <chSchRescheduleS>
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	f383 8811 	msr	BASEPRI, r3
 8006e72:	bd10      	pop	{r4, pc}
	...

08006e80 <evt1_execute.lto_priv.140>:
static void h1(eventid_t id) {(void)id;test_emit_token('A');}
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
static ROMCONST evhandler_t evhndl[] = {h1, h2, h3};

static void evt1_execute(void) {
 8006e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e84:	4c32      	ldr	r4, [pc, #200]	; (8006f50 <evt1_execute.lto_priv.140+0xd0>)
 8006e86:	b08a      	sub	sp, #40	; 0x28
 8006e88:	2020      	movs	r0, #32
 8006e8a:	6024      	str	r4, [r4, #0]
 8006e8c:	f380 8811 	msr	BASEPRI, r0
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 8006e90:	4930      	ldr	r1, [pc, #192]	; (8006f54 <evt1_execute.lto_priv.140+0xd4>)
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8006e92:	6823      	ldr	r3, [r4, #0]
 8006e94:	ad0a      	add	r5, sp, #40	; 0x28
  esp->es_next     = elp;
  elp->el_listener = currp;
 8006e96:	698e      	ldr	r6, [r1, #24]
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8006e98:	f845 3d28 	str.w	r3, [r5, #-40]!
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
 8006e9c:	2701      	movs	r7, #1
  elp->el_flags    = (eventflags_t)0;
 8006e9e:	2300      	movs	r3, #0
  elp->el_wflags   = wflags;
 8006ea0:	f04f 32ff 	mov.w	r2, #4294967295
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 8006ea4:	9601      	str	r6, [sp, #4]

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 8006ea6:	6025      	str	r5, [r4, #0]
  elp->el_listener = currp;
  elp->el_events   = events;
 8006ea8:	9702      	str	r7, [sp, #8]
  elp->el_flags    = (eventflags_t)0;
 8006eaa:	9303      	str	r3, [sp, #12]
  elp->el_wflags   = wflags;
 8006eac:	9204      	str	r2, [sp, #16]
 8006eae:	f383 8811 	msr	BASEPRI, r3
 8006eb2:	f380 8811 	msr	BASEPRI, r0
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8006eb6:	6820      	ldr	r0, [r4, #0]
 8006eb8:	ae0a      	add	r6, sp, #40	; 0x28
  esp->es_next     = elp;
  elp->el_listener = currp;
 8006eba:	6989      	ldr	r1, [r1, #24]
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8006ebc:	f846 0d14 	str.w	r0, [r6, #-20]!
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
 8006ec0:	f04f 0802 	mov.w	r8, #2
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 8006ec4:	9106      	str	r1, [sp, #24]
  elp->el_events   = events;
  elp->el_flags    = (eventflags_t)0;
 8006ec6:	9308      	str	r3, [sp, #32]
  elp->el_wflags   = wflags;
 8006ec8:	9209      	str	r2, [sp, #36]	; 0x24

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 8006eca:	6026      	str	r6, [r4, #0]
  elp->el_listener = currp;
  elp->el_events   = events;
 8006ecc:	f8cd 801c 	str.w	r8, [sp, #28]
 8006ed0:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline bool chEvtIsListeningI(event_source_t *esp) {

  return (bool)(esp != (event_source_t *)esp->es_next);
 8006ed4:	6821      	ldr	r1, [r4, #0]
   * Testing chEvtRegisterMask() and chEvtUnregister().
   */
  chEvtObjectInit(&es1);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es1, &el2, 2);
  test_assert(1, chEvtIsListeningI(&es1), "no listener");
 8006ed6:	4638      	mov	r0, r7
 8006ed8:	1b09      	subs	r1, r1, r4
 8006eda:	bf18      	it	ne
 8006edc:	2101      	movne	r1, #1
 8006ede:	f7fc fa27 	bl	8003330 <_test_assert>
 8006ee2:	b110      	cbz	r0, 8006eea <evt1_execute.lto_priv.140+0x6a>
  /*
   * Testing chEvtDispatch().
   */
  chEvtDispatch(evhndl, 7);
  test_assert_sequence(4, "ABC");
}
 8006ee4:	b00a      	add	sp, #40	; 0x28
 8006ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   */
  chEvtObjectInit(&es1);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es1, &el2, 2);
  test_assert(1, chEvtIsListeningI(&es1), "no listener");
  chEvtUnregister(&es1, &el1);
 8006eea:	4629      	mov	r1, r5
 8006eec:	4620      	mov	r0, r4
 8006eee:	f7f9 ff67 	bl	8000dc0 <chEvtUnregister>
 8006ef2:	6821      	ldr	r1, [r4, #0]
  test_assert(2, chEvtIsListeningI(&es1), "no listener");
 8006ef4:	4640      	mov	r0, r8
 8006ef6:	1b09      	subs	r1, r1, r4
 8006ef8:	bf18      	it	ne
 8006efa:	2101      	movne	r1, #1
 8006efc:	f7fc fa18 	bl	8003330 <_test_assert>
 8006f00:	2800      	cmp	r0, #0
 8006f02:	d1ef      	bne.n	8006ee4 <evt1_execute.lto_priv.140+0x64>
  chEvtUnregister(&es1, &el2);
 8006f04:	4631      	mov	r1, r6
 8006f06:	4620      	mov	r0, r4
 8006f08:	f7f9 ff5a 	bl	8000dc0 <chEvtUnregister>
  test_assert(3, !chEvtIsListeningI(&es1), "stuck listener");
 8006f0c:	6821      	ldr	r1, [r4, #0]
 8006f0e:	2003      	movs	r0, #3
 8006f10:	1b09      	subs	r1, r1, r4
 8006f12:	fab1 f181 	clz	r1, r1
 8006f16:	0949      	lsrs	r1, r1, #5
 8006f18:	f7fc fa0a 	bl	8003330 <_test_assert>
 8006f1c:	2800      	cmp	r0, #0
 8006f1e:	d1e1      	bne.n	8006ee4 <evt1_execute.lto_priv.140+0x64>
 8006f20:	4604      	mov	r4, r0
  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
      handlers[eid](eid);
 8006f22:	4e0d      	ldr	r6, [pc, #52]	; (8006f58 <evt1_execute.lto_priv.140+0xd8>)
 8006f24:	2507      	movs	r5, #7
 8006f26:	e001      	b.n	8006f2c <evt1_execute.lto_priv.140+0xac>
    }
    eid++;
 8006f28:	3401      	adds	r4, #1
  eventid_t eid;

  chDbgCheck(handlers != NULL);

  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
 8006f2a:	b165      	cbz	r5, 8006f46 <evt1_execute.lto_priv.140+0xc6>
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 8006f2c:	fa25 f304 	lsr.w	r3, r5, r4
 8006f30:	07db      	lsls	r3, r3, #31
 8006f32:	d5f9      	bpl.n	8006f28 <evt1_execute.lto_priv.140+0xa8>
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
 8006f34:	fa07 f304 	lsl.w	r3, r7, r4
      handlers[eid](eid);
 8006f38:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006f3c:	4620      	mov	r0, r4

  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
 8006f3e:	ea25 0503 	bic.w	r5, r5, r3
      handlers[eid](eid);
 8006f42:	4790      	blx	r2
 8006f44:	e7f0      	b.n	8006f28 <evt1_execute.lto_priv.140+0xa8>

  /*
   * Testing chEvtDispatch().
   */
  chEvtDispatch(evhndl, 7);
  test_assert_sequence(4, "ABC");
 8006f46:	4905      	ldr	r1, [pc, #20]	; (8006f5c <evt1_execute.lto_priv.140+0xdc>)
 8006f48:	2004      	movs	r0, #4
 8006f4a:	f7fc f9c9 	bl	80032e0 <_test_assert_sequence>
 8006f4e:	e7c9      	b.n	8006ee4 <evt1_execute.lto_priv.140+0x64>
 8006f50:	20000898 	.word	0x20000898
 8006f54:	20001040 	.word	0x20001040
 8006f58:	08008920 	.word	0x08008920
 8006f5c:	08008390 	.word	0x08008390

08006f60 <h3>:
  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
 8006f60:	2043      	movs	r0, #67	; 0x43
 8006f62:	f7fc b9fd 	b.w	8003360 <test_emit_token>
 8006f66:	bf00      	nop
	...

08006f70 <h2>:

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
 8006f70:	2042      	movs	r0, #66	; 0x42
 8006f72:	f7fc b9f5 	b.w	8003360 <test_emit_token>
 8006f76:	bf00      	nop
	...

08006f80 <h1>:
static void evt1_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
 8006f80:	2041      	movs	r0, #65	; 0x41
 8006f82:	f7fc b9ed 	b.w	8003360 <test_emit_token>
 8006f86:	bf00      	nop
	...

08006f90 <cmd_getAdcValues>:
}

void cmd_getAdcValues(BaseSequentialStream *chp, int argc, char *argv[]) {
 8006f90:	b538      	push	{r3, r4, r5, lr}
 8006f92:	4604      	mov	r4, r0

  (void)argc;
  (void)argv;
  chprintf(chp, "\x1B\x63");
 8006f94:	4923      	ldr	r1, [pc, #140]	; (8007024 <cmd_getAdcValues+0x94>)
 8006f96:	f7fd ffab 	bl	8004ef0 <chprintf>
  chprintf(chp, "\x1B[2J");
 8006f9a:	4620      	mov	r0, r4
 8006f9c:	4922      	ldr	r1, [pc, #136]	; (8007028 <cmd_getAdcValues+0x98>)
 8006f9e:	f7fd ffa7 	bl	8004ef0 <chprintf>
 8006fa2:	e034      	b.n	800700e <cmd_getAdcValues+0x7e>
  while (chnGetTimeout((BaseChannel *)chp, TIME_IMMEDIATE) == Q_TIMEOUT) {
    chprintf(chp, "\x1B\x63");
 8006fa4:	4620      	mov	r0, r4
 8006fa6:	f7fd ffa3 	bl	8004ef0 <chprintf>
    chprintf(chp, "\x1B[2J");
 8006faa:	491f      	ldr	r1, [pc, #124]	; (8007028 <cmd_getAdcValues+0x98>)
 8006fac:	4620      	mov	r0, r4
 8006fae:	f7fd ff9f 	bl	8004ef0 <chprintf>

    chprintf(chp, "CHANNELS: %d, BUFFER: %d\r\n", MEAS_NUM_CH, ADC_GRP1_BUF_DEPTH);
 8006fb2:	2308      	movs	r3, #8
 8006fb4:	491d      	ldr	r1, [pc, #116]	; (800702c <cmd_getAdcValues+0x9c>)
 8006fb6:	2206      	movs	r2, #6
 8006fb8:	4620      	mov	r0, r4
 8006fba:	f7fd ff99 	bl	8004ef0 <chprintf>
    chprintf(chp, "NTC1: %d\r\n", measGetValue(MEAS_NTC1));
 8006fbe:	491c      	ldr	r1, [pc, #112]	; (8007030 <cmd_getAdcValues+0xa0>)
 8006fc0:	f9b5 2000 	ldrsh.w	r2, [r5]
 8006fc4:	4620      	mov	r0, r4
 8006fc6:	f7fd ff93 	bl	8004ef0 <chprintf>
    chprintf(chp, "NTC2: %d\r\n", measGetValue(MEAS_NTC2));
 8006fca:	491a      	ldr	r1, [pc, #104]	; (8007034 <cmd_getAdcValues+0xa4>)
 8006fcc:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	f7fd ff8d 	bl	8004ef0 <chprintf>
    chprintf(chp, "NTC3: %d\r\n", measGetValue(MEAS_NTC3));
 8006fd6:	4918      	ldr	r1, [pc, #96]	; (8007038 <cmd_getAdcValues+0xa8>)
 8006fd8:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8006fdc:	4620      	mov	r0, r4
 8006fde:	f7fd ff87 	bl	8004ef0 <chprintf>
    chprintf(chp, "CURR1: %d\r\n", measGetValue(MEAS_CURR1));
 8006fe2:	4916      	ldr	r1, [pc, #88]	; (800703c <cmd_getAdcValues+0xac>)
 8006fe4:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
 8006fe8:	4620      	mov	r0, r4
 8006fea:	f7fd ff81 	bl	8004ef0 <chprintf>
    chprintf(chp, "CURR2: %d\r\n", measGetValue(MEAS_CURR2));
 8006fee:	4914      	ldr	r1, [pc, #80]	; (8007040 <cmd_getAdcValues+0xb0>)
 8006ff0:	f9b5 2010 	ldrsh.w	r2, [r5, #16]
 8006ff4:	4620      	mov	r0, r4
 8006ff6:	f7fd ff7b 	bl	8004ef0 <chprintf>
    chprintf(chp, "CURR3: %d\r\n", measGetValue(MEAS_CURR3));
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	f9b5 2014 	ldrsh.w	r2, [r5, #20]
 8007000:	4910      	ldr	r1, [pc, #64]	; (8007044 <cmd_getAdcValues+0xb4>)
 8007002:	f7fd ff75 	bl	8004ef0 <chprintf>

    chThdSleepMilliseconds(200);
 8007006:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800700a:	f7fa fde9 	bl	8001be0 <chThdSleep>

  (void)argc;
  (void)argv;
  chprintf(chp, "\x1B\x63");
  chprintf(chp, "\x1B[2J");
  while (chnGetTimeout((BaseChannel *)chp, TIME_IMMEDIATE) == Q_TIMEOUT) {
 800700e:	6823      	ldr	r3, [r4, #0]
 8007010:	2100      	movs	r1, #0
 8007012:	4620      	mov	r0, r4
 8007014:	695b      	ldr	r3, [r3, #20]
 8007016:	4798      	blx	r3
 8007018:	3001      	adds	r0, #1
    chprintf(chp, "\x1B\x63");
 800701a:	4902      	ldr	r1, [pc, #8]	; (8007024 <cmd_getAdcValues+0x94>)
  }
}


int16_t measGetValue(enum measChannels ch){
      return measValue[ch];
 800701c:	4d0a      	ldr	r5, [pc, #40]	; (8007048 <cmd_getAdcValues+0xb8>)

  (void)argc;
  (void)argv;
  chprintf(chp, "\x1B\x63");
  chprintf(chp, "\x1B[2J");
  while (chnGetTimeout((BaseChannel *)chp, TIME_IMMEDIATE) == Q_TIMEOUT) {
 800701e:	d0c1      	beq.n	8006fa4 <cmd_getAdcValues+0x14>
    chprintf(chp, "CURR3: %d\r\n", measGetValue(MEAS_CURR3));

    chThdSleepMilliseconds(200);
  }

}
 8007020:	bd38      	pop	{r3, r4, r5, pc}
 8007022:	bf00      	nop
 8007024:	08008990 	.word	0x08008990
 8007028:	08008994 	.word	0x08008994
 800702c:	0800899c 	.word	0x0800899c
 8007030:	080089b8 	.word	0x080089b8
 8007034:	080089c4 	.word	0x080089c4
 8007038:	080089d0 	.word	0x080089d0
 800703c:	080089dc 	.word	0x080089dc
 8007040:	080089e8 	.word	0x080089e8
 8007044:	080089f4 	.word	0x080089f4
 8007048:	20000d38 	.word	0x20000d38
 800704c:	00000000 	.word	0x00000000

08007050 <SampleThread.lto_priv.91>:
  return value;
}


static THD_WORKING_AREA(waSampleThread, 512);
static THD_FUNCTION(SampleThread, arg) {
 8007050:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 8007054:	4b66      	ldr	r3, [pc, #408]	; (80071f0 <SampleThread.lto_priv.91+0x1a0>)
 8007056:	4967      	ldr	r1, [pc, #412]	; (80071f4 <SampleThread.lto_priv.91+0x1a4>)
 8007058:	699a      	ldr	r2, [r3, #24]
 800705a:	2320      	movs	r3, #32
 800705c:	6191      	str	r1, [r2, #24]
 800705e:	f383 8811 	msr	BASEPRI, r3
 8007062:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007068:	2700      	movs	r7, #0
 800706a:	fa1f f883 	uxth.w	r8, r3
 800706e:	f387 8811 	msr	BASEPRI, r7
 8007072:	4c61      	ldr	r4, [pc, #388]	; (80071f8 <SampleThread.lto_priv.91+0x1a8>)
 8007074:	f8df b19c 	ldr.w	fp, [pc, #412]	; 8007214 <SampleThread.lto_priv.91+0x1c4>
 8007078:	f8df 919c 	ldr.w	r9, [pc, #412]	; 8007218 <SampleThread.lto_priv.91+0x1c8>
  chRegSetThreadName("SampleThread");
  systime_t time;
  time = chVTGetSystemTime();
  while(true)
  {
    time += MS2ST(SAMPLE_FREQUENCY_MS);
 800707c:	f108 0864 	add.w	r8, r8, #100	; 0x64
 8007080:	fa1f f888 	uxth.w	r8, r8
 8007084:	2320      	movs	r3, #32
 8007086:	f383 8811 	msr	BASEPRI, r3
  /* ADC setup.*/
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_SCAN;
  cr2 = grpp->cr2 | ADC_CR2_DMA | ADC_CR2_ADON;
  if ((cr2 & (ADC_CR2_EXTTRIG | ADC_CR2_JEXTTRIG)) == 0)
    cr2 |= ADC_CR2_CONT;
  adcp->adc->CR2   = grpp->cr2 | cr2;
 800708a:	f240 1503 	movw	r5, #259	; 0x103
      /* If circular buffer depth > 1, then the half transfer interrupt
         is enabled in order to allow streaming processing.*/
      mode |= STM32_DMA_CR_HTIE;
    }
  }
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 800708e:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
                (adcp->state == ADC_ERROR),
                "not ready");

  adcp->samples  = samples;
  adcp->depth    = depth;
  adcp->grpp     = grpp;
 8007092:	4e5a      	ldr	r6, [pc, #360]	; (80071fc <SampleThread.lto_priv.91+0x1ac>)
 8007094:	6852      	ldr	r2, [r2, #4]
void adc_lld_start_conversion(ADCDriver *adcp) {
  uint32_t mode, cr2;
  const ADCConversionGroup *grpp = adcp->grpp;

  /* DMA setup.*/
  mode = adcp->dmamode;
 8007096:	f8db 3030 	ldr.w	r3, [fp, #48]	; 0x30
 800709a:	f8cb 6010 	str.w	r6, [fp, #16]
                (adcp->state == ADC_COMPLETE) ||
                (adcp->state == ADC_ERROR),
                "not ready");

  adcp->samples  = samples;
  adcp->depth    = depth;
 800709e:	2008      	movs	r0, #8
      /* If circular buffer depth > 1, then the half transfer interrupt
         is enabled in order to allow streaming processing.*/
      mode |= STM32_DMA_CR_HTIE;
    }
  }
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 80070a0:	4e55      	ldr	r6, [pc, #340]	; (80071f8 <SampleThread.lto_priv.91+0x1a8>)
 80070a2:	f8cb 000c 	str.w	r0, [fp, #12]
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
 80070a6:	2130      	movs	r1, #48	; 0x30
  adcp->grpp     = grpp;
  adcp->state    = ADC_ACTIVE;
 80070a8:	2003      	movs	r0, #3
      /* If circular buffer depth > 1, then the half transfer interrupt
         is enabled in order to allow streaming processing.*/
      mode |= STM32_DMA_CR_HTIE;
    }
  }
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 80070aa:	60d6      	str	r6, [r2, #12]
  osalDbgAssert((adcp->state == ADC_READY) ||
                (adcp->state == ADC_COMPLETE) ||
                (adcp->state == ADC_ERROR),
                "not ready");

  adcp->samples  = samples;
 80070ac:	f8cb 4008 	str.w	r4, [fp, #8]
  adcp->depth    = depth;
  adcp->grpp     = grpp;
  adcp->state    = ADC_ACTIVE;
 80070b0:	f88b 0000 	strb.w	r0, [fp]
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
 80070b4:	6051      	str	r1, [r2, #4]
                                            (uint32_t)adcp->depth);
  dmaStreamSetMode(adcp->dmastp, mode);
 80070b6:	6013      	str	r3, [r2, #0]
  dmaStreamEnable(adcp->dmastp);
 80070b8:	6811      	ldr	r1, [r2, #0]

  /* ADC setup.*/
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_SCAN;
 80070ba:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
  }
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
                                            (uint32_t)adcp->depth);
  dmaStreamSetMode(adcp->dmastp, mode);
  dmaStreamEnable(adcp->dmastp);
 80070be:	f041 0101 	orr.w	r1, r1, #1
 80070c2:	6011      	str	r1, [r2, #0]
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80070c4:	4a4a      	ldr	r2, [pc, #296]	; (80071f0 <SampleThread.lto_priv.91+0x1a0>)

  /* ADC setup.*/
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_SCAN;
 80070c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80070ca:	6992      	ldr	r2, [r2, #24]
 80070cc:	6059      	str	r1, [r3, #4]
  if ((cr2 & (ADC_CR2_EXTTRIG | ADC_CR2_JEXTTRIG)) == 0)
    cr2 |= ADC_CR2_CONT;
  adcp->adc->CR2   = grpp->cr2 | cr2;
  adcp->adc->SMPR1 = grpp->smpr1;
  adcp->adc->SMPR2 = grpp->smpr2;
  adcp->adc->SQR1  = grpp->sqr1;
 80070ce:	f44f 01a0 	mov.w	r1, #5242880	; 0x500000
  /* ADC setup.*/
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_SCAN;
  cr2 = grpp->cr2 | ADC_CR2_DMA | ADC_CR2_ADON;
  if ((cr2 & (ADC_CR2_EXTTRIG | ADC_CR2_JEXTTRIG)) == 0)
    cr2 |= ADC_CR2_CONT;
  adcp->adc->CR2   = grpp->cr2 | cr2;
 80070d2:	609d      	str	r5, [r3, #8]
  adcp->adc->SMPR1 = grpp->smpr1;
 80070d4:	60df      	str	r7, [r3, #12]
  adcp->adc->SMPR2 = grpp->smpr2;
 80070d6:	611f      	str	r7, [r3, #16]
  adcp->adc->SQR1  = grpp->sqr1;
 80070d8:	62d9      	str	r1, [r3, #44]	; 0x2c
  adcp->adc->SQR2  = grpp->sqr2;
  adcp->adc->SQR3  = grpp->sqr3;
 80070da:	4949      	ldr	r1, [pc, #292]	; (8007200 <SampleThread.lto_priv.91+0x1b0>)
    cr2 |= ADC_CR2_CONT;
  adcp->adc->CR2   = grpp->cr2 | cr2;
  adcp->adc->SMPR1 = grpp->smpr1;
  adcp->adc->SMPR2 = grpp->smpr2;
  adcp->adc->SQR1  = grpp->sqr1;
  adcp->adc->SQR2  = grpp->sqr2;
 80070dc:	631f      	str	r7, [r3, #48]	; 0x30
  adcp->adc->SQR3  = grpp->sqr3;
 80070de:	6359      	str	r1, [r3, #52]	; 0x34

  /* ADC start by writing ADC_CR2_ADON a second time.*/
  adcp->adc->CR2   = cr2;
 80070e0:	609d      	str	r5, [r3, #8]
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
  tp->p_u.wttrp = trp;
 80070e2:	4b48      	ldr	r3, [pc, #288]	; (8007204 <SampleThread.lto_priv.91+0x1b4>)
msg_t chThdSuspendS(thread_reference_t *trp) {
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
 80070e4:	f8cb 2014 	str.w	r2, [fp, #20]
  tp->p_u.wttrp = trp;
 80070e8:	6213      	str	r3, [r2, #32]
  chSchGoSleepS(CH_STATE_SUSPENDED);
 80070ea:	f7f9 ff99 	bl	8001020 <chSchGoSleepS>
 80070ee:	f387 8811 	msr	BASEPRI, r7
int16_t measInterpolateNTC(adcsample_t rawvalue){
  int16_t value = 0;
  adcsample_t left, right;
  int i;

  if(rawvalue >= measNTCcalib[0]){
 80070f2:	f640 76d5 	movw	r6, #4053	; 0xfd5
 80070f6:	f8df a120 	ldr.w	sl, [pc, #288]	; 8007218 <SampleThread.lto_priv.91+0x1c8>
    int avg, ch, i;
    double temp = 0;

    adcConvert(&ADCD1, &adcgrpcfg, samples, ADC_GRP1_BUF_DEPTH);

    for(ch = 0; ch < MEAS_NUM_CH; ch++) {
 80070fa:	2500      	movs	r5, #0
  return value;
}


static THD_WORKING_AREA(waSampleThread, 512);
static THD_FUNCTION(SampleThread, arg) {
 80070fc:	2300      	movs	r3, #0
 80070fe:	4618      	mov	r0, r3
 8007100:	0069      	lsls	r1, r5, #1
 8007102:	18e2      	adds	r2, r4, r3
    adcConvert(&ADCD1, &adcgrpcfg, samples, ADC_GRP1_BUF_DEPTH);

    for(ch = 0; ch < MEAS_NUM_CH; ch++) {
      avg = 0;
      for(i = 0; i < ADC_GRP1_BUF_DEPTH; i++) {
        avg += samples[ch + MEAS_NUM_CH * i];
 8007104:	5a52      	ldrh	r2, [r2, r1]
 8007106:	330c      	adds	r3, #12

    adcConvert(&ADCD1, &adcgrpcfg, samples, ADC_GRP1_BUF_DEPTH);

    for(ch = 0; ch < MEAS_NUM_CH; ch++) {
      avg = 0;
      for(i = 0; i < ADC_GRP1_BUF_DEPTH; i++) {
 8007108:	2b60      	cmp	r3, #96	; 0x60
        avg += samples[ch + MEAS_NUM_CH * i];
 800710a:	4410      	add	r0, r2

    adcConvert(&ADCD1, &adcgrpcfg, samples, ADC_GRP1_BUF_DEPTH);

    for(ch = 0; ch < MEAS_NUM_CH; ch++) {
      avg = 0;
      for(i = 0; i < ADC_GRP1_BUF_DEPTH; i++) {
 800710c:	d1f9      	bne.n	8007102 <SampleThread.lto_priv.91+0xb2>
        avg += samples[ch + MEAS_NUM_CH * i];
      }
      avg /= ADC_GRP1_BUF_DEPTH;

      switch(ch)
 800710e:	1eeb      	subs	r3, r5, #3
 8007110:	2b02      	cmp	r3, #2
    for(ch = 0; ch < MEAS_NUM_CH; ch++) {
      avg = 0;
      for(i = 0; i < ADC_GRP1_BUF_DEPTH; i++) {
        avg += samples[ch + MEAS_NUM_CH * i];
      }
      avg /= ADC_GRP1_BUF_DEPTH;
 8007112:	ea4f 00e0 	mov.w	r0, r0, asr #3

      switch(ch)
 8007116:	d946      	bls.n	80071a6 <SampleThread.lto_priv.91+0x156>
      {
        case MEAS_NTC1:
        case MEAS_NTC2:
        case MEAS_NTC3:
          avg = measInterpolateNTC(avg);
 8007118:	b280      	uxth	r0, r0
int16_t measInterpolateNTC(adcsample_t rawvalue){
  int16_t value = 0;
  adcsample_t left, right;
  int i;

  if(rawvalue >= measNTCcalib[0]){
 800711a:	42b0      	cmp	r0, r6
 800711c:	d856      	bhi.n	80071cc <SampleThread.lto_priv.91+0x17c>
    value = MEAS_NTCCAL_START;
  }
  else if(rawvalue < measNTCcalib[MEAS_NTCCAL_NUM - 1]){
 800711e:	2841      	cmp	r0, #65	; 0x41
 8007120:	d957      	bls.n	80071d2 <SampleThread.lto_priv.91+0x182>
  }
  else {
    i = 0;
    left = measNTCcalib[i];
    right = measNTCcalib[i + 1];
    while(rawvalue < right && i < MEAS_NTCCAL_NUM - 1){
 8007122:	f640 73c3 	movw	r3, #4035	; 0xfc3
 8007126:	4298      	cmp	r0, r3
 8007128:	d855      	bhi.n	80071d6 <SampleThread.lto_priv.91+0x186>
 800712a:	4b37      	ldr	r3, [pc, #220]	; (8007208 <SampleThread.lto_priv.91+0x1b8>)
 800712c:	f640 7ec4 	movw	lr, #4036	; 0xfc4
 8007130:	2100      	movs	r1, #0
 8007132:	e000      	b.n	8007136 <SampleThread.lto_priv.91+0xe6>
 8007134:	4696      	mov	lr, r2
      i++;
      left = right;
      right = measNTCcalib[i + 1];
 8007136:	f833 2f02 	ldrh.w	r2, [r3, #2]!
  else {
    i = 0;
    left = measNTCcalib[i];
    right = measNTCcalib[i + 1];
    while(rawvalue < right && i < MEAS_NTCCAL_NUM - 1){
      i++;
 800713a:	3101      	adds	r1, #1
  }
  else {
    i = 0;
    left = measNTCcalib[i];
    right = measNTCcalib[i + 1];
    while(rawvalue < right && i < MEAS_NTCCAL_NUM - 1){
 800713c:	4290      	cmp	r0, r2
 800713e:	d3f9      	bcc.n	8007134 <SampleThread.lto_priv.91+0xe4>
 8007140:	4673      	mov	r3, lr
 8007142:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8007146:	3937      	subs	r1, #55	; 0x37
 8007148:	b289      	uxth	r1, r1
 800714a:	1a9a      	subs	r2, r3, r2
      left = right;
      right = measNTCcalib[i + 1];
    }
    value = MEAS_NTCCAL_START +
            i * MEAS_NTCCAL_STEP +
            (MEAS_NTCCAL_STEP * (left - rawvalue)) / (left - right);
 800714c:	1a1b      	subs	r3, r3, r0
 800714e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007152:	fb93 f2f2 	sdiv	r2, r3, r2
    while(rawvalue < right && i < MEAS_NTCCAL_NUM - 1){
      i++;
      left = right;
      right = measNTCcalib[i + 1];
    }
    value = MEAS_NTCCAL_START +
 8007156:	4411      	add	r1, r2
 8007158:	b208      	sxth	r0, r1
 800715a:	2320      	movs	r3, #32
 800715c:	f383 8811 	msr	BASEPRI, r3
          temp = -temp;
          avg = (int)(temp * 10);
          break;
      }
      chSysLock();
      measValue[ch] = (int16_t)avg;
 8007160:	f84a 0b04 	str.w	r0, [sl], #4
 8007164:	f387 8811 	msr	BASEPRI, r7
    int avg, ch, i;
    double temp = 0;

    adcConvert(&ADCD1, &adcgrpcfg, samples, ADC_GRP1_BUF_DEPTH);

    for(ch = 0; ch < MEAS_NUM_CH; ch++) {
 8007168:	3501      	adds	r5, #1
 800716a:	2d06      	cmp	r5, #6
 800716c:	d1c6      	bne.n	80070fc <SampleThread.lto_priv.91+0xac>
      chSysLock();
      measValue[ch] = (int16_t)avg;
      chSysUnlock();
    }

    if(measGetValue(MEAS_CURR1) >= LED_ON_AMP)
 800716e:	f9b9 300c 	ldrsh.w	r3, [r9, #12]
      palSetPad(GPIOB, GPIOB_LED1);
 8007172:	2280      	movs	r2, #128	; 0x80
      chSysLock();
      measValue[ch] = (int16_t)avg;
      chSysUnlock();
    }

    if(measGetValue(MEAS_CURR1) >= LED_ON_AMP)
 8007174:	2b09      	cmp	r3, #9
      palSetPad(GPIOB, GPIOB_LED1);
 8007176:	4b25      	ldr	r3, [pc, #148]	; (800720c <SampleThread.lto_priv.91+0x1bc>)

    if(measGetValue(MEAS_CURR3) >= LED_ON_AMP)
      palSetPad(GPIOB, GPIOB_LED3);
    else
      palClearPad(GPIOB, GPIOB_LED3);
    chThdSleepUntil(time);
 8007178:	4640      	mov	r0, r8
      measValue[ch] = (int16_t)avg;
      chSysUnlock();
    }

    if(measGetValue(MEAS_CURR1) >= LED_ON_AMP)
      palSetPad(GPIOB, GPIOB_LED1);
 800717a:	bfcc      	ite	gt
 800717c:	611a      	strgt	r2, [r3, #16]
    else
      palClearPad(GPIOB, GPIOB_LED1);
 800717e:	615a      	strle	r2, [r3, #20]

    if(measGetValue(MEAS_CURR2) >= LED_ON_AMP)
 8007180:	f9b9 3010 	ldrsh.w	r3, [r9, #16]
      palSetPad(GPIOB, GPIOB_LED2);
 8007184:	2240      	movs	r2, #64	; 0x40
    if(measGetValue(MEAS_CURR1) >= LED_ON_AMP)
      palSetPad(GPIOB, GPIOB_LED1);
    else
      palClearPad(GPIOB, GPIOB_LED1);

    if(measGetValue(MEAS_CURR2) >= LED_ON_AMP)
 8007186:	2b09      	cmp	r3, #9
      palSetPad(GPIOB, GPIOB_LED2);
 8007188:	4b20      	ldr	r3, [pc, #128]	; (800720c <SampleThread.lto_priv.91+0x1bc>)
 800718a:	bfcc      	ite	gt
 800718c:	611a      	strgt	r2, [r3, #16]
    else
      palClearPad(GPIOB, GPIOB_LED2);
 800718e:	615a      	strle	r2, [r3, #20]

    if(measGetValue(MEAS_CURR3) >= LED_ON_AMP)
 8007190:	f9b9 3014 	ldrsh.w	r3, [r9, #20]
      palSetPad(GPIOB, GPIOB_LED3);
 8007194:	2220      	movs	r2, #32
    if(measGetValue(MEAS_CURR2) >= LED_ON_AMP)
      palSetPad(GPIOB, GPIOB_LED2);
    else
      palClearPad(GPIOB, GPIOB_LED2);

    if(measGetValue(MEAS_CURR3) >= LED_ON_AMP)
 8007196:	2b09      	cmp	r3, #9
      palSetPad(GPIOB, GPIOB_LED3);
 8007198:	4b1c      	ldr	r3, [pc, #112]	; (800720c <SampleThread.lto_priv.91+0x1bc>)
 800719a:	bfcc      	ite	gt
 800719c:	611a      	strgt	r2, [r3, #16]
    else
      palClearPad(GPIOB, GPIOB_LED3);
 800719e:	615a      	strle	r2, [r3, #20]
    chThdSleepUntil(time);
 80071a0:	f7fa fd06 	bl	8001bb0 <chThdSleepUntil>
 80071a4:	e76a      	b.n	800707c <SampleThread.lto_priv.91+0x2c>
          avg = measInterpolateNTC(avg);
          break;
        case MEAS_CURR1:
        case MEAS_CURR2:
        case MEAS_CURR3:
          temp = avg - NULL_AMPER_ADC;
 80071a6:	f5a0 60ff 	sub.w	r0, r0, #2040	; 0x7f8
 80071aa:	f7f9 f9ab 	bl	8000504 <__aeabi_i2d>
          temp /= AMP_PER_ADC;
 80071ae:	a30e      	add	r3, pc, #56	; (adr r3, 80071e8 <SampleThread.lto_priv.91+0x198>)
 80071b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b4:	f7f9 fb36 	bl	8000824 <__aeabi_ddiv>
          temp = -temp;
          avg = (int)(temp * 10);
 80071b8:	2200      	movs	r2, #0
 80071ba:	4b15      	ldr	r3, [pc, #84]	; (8007210 <SampleThread.lto_priv.91+0x1c0>)
 80071bc:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80071c0:	f7f9 fa06 	bl	80005d0 <__aeabi_dmul>
 80071c4:	f7f9 fc1c 	bl	8000a00 <__aeabi_d2iz>
 80071c8:	b200      	sxth	r0, r0
 80071ca:	e7c6      	b.n	800715a <SampleThread.lto_priv.91+0x10a>
int16_t measInterpolateNTC(adcsample_t rawvalue){
  int16_t value = 0;
  adcsample_t left, right;
  int i;

  if(rawvalue >= measNTCcalib[0]){
 80071cc:	f06f 0036 	mvn.w	r0, #54	; 0x36
 80071d0:	e7c3      	b.n	800715a <SampleThread.lto_priv.91+0x10a>
    value = MEAS_NTCCAL_START;
  }
  else if(rawvalue < measNTCcalib[MEAS_NTCCAL_NUM - 1]){
 80071d2:	209b      	movs	r0, #155	; 0x9b
 80071d4:	e7c1      	b.n	800715a <SampleThread.lto_priv.91+0x10a>
  }
  else {
    i = 0;
    left = measNTCcalib[i];
    right = measNTCcalib[i + 1];
    while(rawvalue < right && i < MEAS_NTCCAL_NUM - 1){
 80071d6:	f640 73d6 	movw	r3, #4054	; 0xfd6
 80071da:	f64f 71c9 	movw	r1, #65481	; 0xffc9
 80071de:	2212      	movs	r2, #18
 80071e0:	e7b4      	b.n	800714c <SampleThread.lto_priv.91+0xfc>
 80071e2:	bf00      	nop
 80071e4:	f3af 8000 	nop.w
 80071e8:	66666666 	.word	0x66666666
 80071ec:	4045a666 	.word	0x4045a666
 80071f0:	20001040 	.word	0x20001040
 80071f4:	08008a00 	.word	0x08008a00
 80071f8:	200011b0 	.word	0x200011b0
 80071fc:	08008a40 	.word	0x08008a40
 8007200:	0a418820 	.word	0x0a418820
 8007204:	20001020 	.word	0x20001020
 8007208:	08008932 	.word	0x08008932
 800720c:	40010c00 	.word	0x40010c00
 8007210:	40240000 	.word	0x40240000
 8007214:	2000100c 	.word	0x2000100c
 8007218:	20000d38 	.word	0x20000d38
 800721c:	00000000 	.word	0x00000000

08007220 <cmd_test.lto_priv.94>:
}

static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
  thread_t *tp;

  palSetPad(GPIOB, GPIOB_LED1);
 8007220:	4b10      	ldr	r3, [pc, #64]	; (8007264 <cmd_test.lto_priv.94+0x44>)
 8007222:	2280      	movs	r2, #128	; 0x80
  (void)argv;
  if (argc > 0) {
 8007224:	2900      	cmp	r1, #0
}

static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
  thread_t *tp;

  palSetPad(GPIOB, GPIOB_LED1);
 8007226:	611a      	str	r2, [r3, #16]
  (void)argv;
  if (argc > 0) {
 8007228:	dd02      	ble.n	8007230 <cmd_test.lto_priv.94+0x10>
    chprintf(chp, "Usage: test\r\n");
 800722a:	490f      	ldr	r1, [pc, #60]	; (8007268 <cmd_test.lto_priv.94+0x48>)
 800722c:	f7fd be60 	b.w	8004ef0 <chprintf>
             states[tp->p_state]);
    tp = chRegNextThread(tp);
  } while (tp != NULL);
}

static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 8007230:	b510      	push	{r4, lr}
 8007232:	4604      	mov	r4, r0
 8007234:	4b0d      	ldr	r3, [pc, #52]	; (800726c <cmd_test.lto_priv.94+0x4c>)
 8007236:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8007238:	699b      	ldr	r3, [r3, #24]
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: test\r\n");
    return;
  }
  tp = chThdCreateFromHeap(NULL, TEST_WA_SIZE, chThdGetPriorityX(),
 800723a:	2000      	movs	r0, #0
 800723c:	689a      	ldr	r2, [r3, #8]
 800723e:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 8007242:	4b0b      	ldr	r3, [pc, #44]	; (8007270 <cmd_test.lto_priv.94+0x50>)
 8007244:	9400      	str	r4, [sp, #0]
 8007246:	f7fa fa43 	bl	80016d0 <chThdCreateFromHeap>
                           TestThread, chp);
  if (tp == NULL) {
 800724a:	b120      	cbz	r0, 8007256 <cmd_test.lto_priv.94+0x36>
    chprintf(chp, "out of memory\r\n");
    return;
  }
  chThdWait(tp);
}
 800724c:	b002      	add	sp, #8
 800724e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                           TestThread, chp);
  if (tp == NULL) {
    chprintf(chp, "out of memory\r\n");
    return;
  }
  chThdWait(tp);
 8007252:	f7fa b9d5 	b.w	8001600 <chThdWait>
    return;
  }
  tp = chThdCreateFromHeap(NULL, TEST_WA_SIZE, chThdGetPriorityX(),
                           TestThread, chp);
  if (tp == NULL) {
    chprintf(chp, "out of memory\r\n");
 8007256:	4620      	mov	r0, r4
 8007258:	4906      	ldr	r1, [pc, #24]	; (8007274 <cmd_test.lto_priv.94+0x54>)
    return;
  }
  chThdWait(tp);
}
 800725a:	b002      	add	sp, #8
 800725c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return;
  }
  tp = chThdCreateFromHeap(NULL, TEST_WA_SIZE, chThdGetPriorityX(),
                           TestThread, chp);
  if (tp == NULL) {
    chprintf(chp, "out of memory\r\n");
 8007260:	f7fd be46 	b.w	8004ef0 <chprintf>
 8007264:	40010c00 	.word	0x40010c00
 8007268:	08008a10 	.word	0x08008a10
 800726c:	20001040 	.word	0x20001040
 8007270:	08003451 	.word	0x08003451
 8007274:	08008a20 	.word	0x08008a20
	...

08007280 <chTMStartMeasurementX.constprop.78>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8007280:	4b01      	ldr	r3, [pc, #4]	; (8007288 <chTMStartMeasurementX.constprop.78+0x8>)
 8007282:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8007284:	6083      	str	r3, [r0, #8]
 8007286:	4770      	bx	lr
 8007288:	e0001000 	.word	0xe0001000
 800728c:	00000000 	.word	0x00000000

08007290 <chThdCreateFromMemoryPool.constprop.76>:
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, tprio_t prio,
 8007290:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  void *wsp;
  thread_t *tp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 8007294:	4e21      	ldr	r6, [pc, #132]	; (800731c <chThdCreateFromMemoryPool.constprop.76+0x8c>)
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, tprio_t prio,
 8007296:	4680      	mov	r8, r0
  void *wsp;
  thread_t *tp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 8007298:	4630      	mov	r0, r6
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, tprio_t prio,
 800729a:	4689      	mov	r9, r1
  void *wsp;
  thread_t *tp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 800729c:	f7f9 fd78 	bl	8000d90 <chPoolAlloc>
  if (wsp == NULL) {
 80072a0:	4604      	mov	r4, r0
 80072a2:	2800      	cmp	r0, #0
 80072a4:	d037      	beq.n	8007316 <chThdCreateFromMemoryPool.constprop.76+0x86>
 80072a6:	2320      	movs	r3, #32
 80072a8:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80072ac:	6873      	ldr	r3, [r6, #4]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80072ae:	4a1c      	ldr	r2, [pc, #112]	; (8007320 <chThdCreateFromMemoryPool.constprop.76+0x90>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80072b0:	3b24      	subs	r3, #36	; 0x24
 80072b2:	4d1c      	ldr	r5, [pc, #112]	; (8007324 <chThdCreateFromMemoryPool.constprop.76+0x94>)
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80072b4:	f8d2 a014 	ldr.w	sl, [r2, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80072b8:	eb00 0e03 	add.w	lr, r0, r3
 80072bc:	491a      	ldr	r1, [pc, #104]	; (8007328 <chThdCreateFromMemoryPool.constprop.76+0x98>)
 80072be:	f8c0 e00c 	str.w	lr, [r0, #12]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80072c2:	f04f 0c02 	mov.w	ip, #2

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80072c6:	50c5      	str	r5, [r0, r3]
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 80072c8:	f100 0724 	add.w	r7, r0, #36	; 0x24
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 80072cc:	2500      	movs	r5, #0
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 80072ce:	f100 0328 	add.w	r3, r0, #40	; 0x28
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80072d2:	f04f 0b01 	mov.w	fp, #1

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80072d6:	f8ce 9004 	str.w	r9, [lr, #4]
 80072da:	f8ce 1020 	str.w	r1, [lr, #32]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 80072de:	f8c0 8008 	str.w	r8, [r0, #8]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80072e2:	6102      	str	r2, [r0, #16]
 80072e4:	f8c0 a014 	str.w	sl, [r0, #20]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 80072e8:	f8c0 803c 	str.w	r8, [r0, #60]	; 0x3c
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80072ec:	f880 b01e 	strb.w	fp, [r0, #30]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80072f0:	f880 c01c 	strb.w	ip, [r0, #28]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 80072f4:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 80072f6:	6345      	str	r5, [r0, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 80072f8:	6185      	str	r5, [r0, #24]

  chSysLock();
  tp = chThdCreateI(wsp, mp->mp_object_size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_MPOOL;
  tp->p_mpool = mp;
  chSchWakeupS(tp, MSG_OK);
 80072fa:	4629      	mov	r1, r5
  REG_INSERT(tp);
 80072fc:	f8ca 0010 	str.w	r0, [sl, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8007300:	6247      	str	r7, [r0, #36]	; 0x24
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, mp->mp_object_size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_MPOOL;
 8007302:	f880 c01d 	strb.w	ip, [r0, #29]
  tp->p_mpool = mp;
 8007306:	6406      	str	r6, [r0, #64]	; 0x40
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8007308:	6283      	str	r3, [r0, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 800730a:	62c3      	str	r3, [r0, #44]	; 0x2c
 800730c:	6150      	str	r0, [r2, #20]
  chSchWakeupS(tp, MSG_OK);
 800730e:	f7f9 fdf7 	bl	8000f00 <chSchWakeupS>
 8007312:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  return tp;
}
 8007316:	4620      	mov	r0, r4
 8007318:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800731c:	20001190 	.word	0x20001190
 8007320:	20001040 	.word	0x20001040
 8007324:	08005dd1 	.word	0x08005dd1
 8007328:	08000241 	.word	0x08000241
 800732c:	00000000 	.word	0x00000000

08007330 <chSemSignalWait.constprop.72>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw) {
 8007330:	b510      	push	{r4, lr}
 8007332:	2320      	movs	r3, #32
 8007334:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert(((spw->s_cnt >= (cnt_t)0) && queue_isempty(&spw->s_queue)) ||
              ((spw->s_cnt < (cnt_t)0) && queue_notempty(&spw->s_queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sps->s_cnt <= (cnt_t)0) {
 8007338:	4c15      	ldr	r4, [pc, #84]	; (8007390 <chSemSignalWait.constprop.72+0x60>)
 800733a:	68a3      	ldr	r3, [r4, #8]
 800733c:	3301      	adds	r3, #1
 800733e:	2b00      	cmp	r3, #0
 8007340:	60a3      	str	r3, [r4, #8]
 8007342:	dd1b      	ble.n	800737c <chSemSignalWait.constprop.72+0x4c>
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
  }
  if (--spw->s_cnt < (cnt_t)0) {
 8007344:	3b01      	subs	r3, #1
 8007346:	2b00      	cmp	r3, #0
 8007348:	60a3      	str	r3, [r4, #8]
 800734a:	4a11      	ldr	r2, [pc, #68]	; (8007390 <chSemSignalWait.constprop.72+0x60>)
 800734c:	db06      	blt.n	800735c <chSemSignalWait.constprop.72+0x2c>
    ctp->p_u.wtsemp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
    msg = ctp->p_u.rdymsg;
  }
  else {
    chSchRescheduleS();
 800734e:	f7f9 fdaf 	bl	8000eb0 <chSchRescheduleS>
    msg = MSG_OK;
 8007352:	2000      	movs	r0, #0
 8007354:	2300      	movs	r3, #0
 8007356:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return msg;
}
 800735a:	bd10      	pop	{r4, pc}
  chSysLock();
  if (++sps->s_cnt <= (cnt_t)0) {
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
  }
  if (--spw->s_cnt < (cnt_t)0) {
    thread_t *ctp = currp;
 800735c:	490d      	ldr	r1, [pc, #52]	; (8007394 <chSemSignalWait.constprop.72+0x64>)
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 800735e:	6853      	ldr	r3, [r2, #4]
 8007360:	698c      	ldr	r4, [r1, #24]
    sem_insert(ctp, &spw->s_queue);
    ctp->p_u.wtsemp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
 8007362:	2005      	movs	r0, #5
 8007364:	e884 000c 	stmia.w	r4, {r2, r3}
  tp->p_prev->p_next = tp;
 8007368:	601c      	str	r4, [r3, #0]
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
  }
  if (--spw->s_cnt < (cnt_t)0) {
    thread_t *ctp = currp;
    sem_insert(ctp, &spw->s_queue);
    ctp->p_u.wtsemp = spw;
 800736a:	6222      	str	r2, [r4, #32]
  tqp->p_prev = tp;
 800736c:	6054      	str	r4, [r2, #4]
    chSchGoSleepS(CH_STATE_WTSEM);
 800736e:	f7f9 fe57 	bl	8001020 <chSchGoSleepS>
    msg = ctp->p_u.rdymsg;
 8007372:	6a20      	ldr	r0, [r4, #32]
 8007374:	2300      	movs	r3, #0
 8007376:	f383 8811 	msr	BASEPRI, r3
    msg = MSG_OK;
  }
  chSysUnlock();

  return msg;
}
 800737a:	bd10      	pop	{r4, pc}
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 800737c:	6820      	ldr	r0, [r4, #0]

  tqp->p_next = tp->p_next;
 800737e:	6803      	ldr	r3, [r0, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8007380:	605c      	str	r4, [r3, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8007382:	6023      	str	r3, [r4, #0]
              ((spw->s_cnt < (cnt_t)0) && queue_notempty(&spw->s_queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sps->s_cnt <= (cnt_t)0) {
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
 8007384:	f7f9 feac 	bl	80010e0 <chSchReadyI>
 8007388:	2200      	movs	r2, #0
 800738a:	68a3      	ldr	r3, [r4, #8]
 800738c:	6202      	str	r2, [r0, #32]
 800738e:	e7d9      	b.n	8007344 <chSemSignalWait.constprop.72+0x14>
 8007390:	200008a0 	.word	0x200008a0
 8007394:	20001040 	.word	0x20001040
	...

080073a0 <chCondSignal.constprop.68>:
 *
 * @param[in] cp        pointer to the @p condition_variable_t structure
 *
 * @api
 */
void chCondSignal(condition_variable_t *cp) {
 80073a0:	b508      	push	{r3, lr}
 80073a2:	2320      	movs	r3, #32
 80073a4:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 80073a8:	4b06      	ldr	r3, [pc, #24]	; (80073c4 <chCondSignal.constprop.68+0x24>)
 80073aa:	6818      	ldr	r0, [r3, #0]

  chDbgCheck(cp != NULL);

  chSysLock();
  if (queue_notempty(&cp->c_queue)) {
 80073ac:	4298      	cmp	r0, r3
 80073ae:	d005      	beq.n	80073bc <chCondSignal.constprop.68+0x1c>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80073b0:	6802      	ldr	r2, [r0, #0]
    chSchWakeupS(queue_fifo_remove(&cp->c_queue), MSG_OK);
 80073b2:	2100      	movs	r1, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 80073b4:	6053      	str	r3, [r2, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80073b6:	601a      	str	r2, [r3, #0]
 80073b8:	f7f9 fda2 	bl	8000f00 <chSchWakeupS>
 80073bc:	2300      	movs	r3, #0
 80073be:	f383 8811 	msr	BASEPRI, r3
 80073c2:	bd08      	pop	{r3, pc}
 80073c4:	200008d4 	.word	0x200008d4
	...

080073d0 <chCondSignalI.constprop.67>:
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 80073d0:	4b07      	ldr	r3, [pc, #28]	; (80073f0 <chCondSignalI.constprop.67+0x20>)
 80073d2:	681a      	ldr	r2, [r3, #0]
void chCondSignalI(condition_variable_t *cp) {

  chDbgCheckClassI();
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->c_queue)) {
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d00a      	beq.n	80073ee <chCondSignalI.constprop.67+0x1e>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80073d8:	6811      	ldr	r1, [r2, #0]
 *
 * @param[in] cp        pointer to the @p condition_variable_t structure
 *
 * @iclass
 */
void chCondSignalI(condition_variable_t *cp) {
 80073da:	b410      	push	{r4}
  chDbgCheckClassI();
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->c_queue)) {
    thread_t *tp = queue_fifo_remove(&cp->c_queue);
    tp->p_u.rdymsg = MSG_OK;
 80073dc:	2400      	movs	r4, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 80073de:	604b      	str	r3, [r1, #4]
 80073e0:	6214      	str	r4, [r2, #32]
    (void) chSchReadyI(tp);
 80073e2:	4610      	mov	r0, r2
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80073e4:	6019      	str	r1, [r3, #0]
  }
}
 80073e6:	f85d 4b04 	ldr.w	r4, [sp], #4
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->c_queue)) {
    thread_t *tp = queue_fifo_remove(&cp->c_queue);
    tp->p_u.rdymsg = MSG_OK;
    (void) chSchReadyI(tp);
 80073ea:	f7f9 be79 	b.w	80010e0 <chSchReadyI>
 80073ee:	4770      	bx	lr
 80073f0:	200008d4 	.word	0x200008d4
	...

08007400 <chEvtGetAndClearEvents.constprop.59>:
 8007400:	2320      	movs	r3, #32
 8007402:	f383 8811 	msr	BASEPRI, r3
 */
eventmask_t chEvtGetAndClearEvents(eventmask_t events) {
  eventmask_t m;

  chSysLock();
  m = currp->p_epending & events;
 8007406:	4a04      	ldr	r2, [pc, #16]	; (8007418 <chEvtGetAndClearEvents.constprop.59+0x18>)
  currp->p_epending &= ~events;
 8007408:	2300      	movs	r3, #0
 */
eventmask_t chEvtGetAndClearEvents(eventmask_t events) {
  eventmask_t m;

  chSysLock();
  m = currp->p_epending & events;
 800740a:	6992      	ldr	r2, [r2, #24]
 800740c:	6b50      	ldr	r0, [r2, #52]	; 0x34
  currp->p_epending &= ~events;
 800740e:	6353      	str	r3, [r2, #52]	; 0x34
 8007410:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 8007414:	4770      	bx	lr
 8007416:	bf00      	nop
 8007418:	20001040 	.word	0x20001040
 800741c:	00000000 	.word	0x00000000

08007420 <chEvtWaitOne.constprop.55>:
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
  thread_t *ctp = currp;
 8007420:	4a0b      	ldr	r2, [pc, #44]	; (8007450 <chEvtWaitOne.constprop.55+0x30>)
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
 8007422:	b510      	push	{r4, lr}
 8007424:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8007426:	6994      	ldr	r4, [r2, #24]
 8007428:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 800742c:	6b63      	ldr	r3, [r4, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800742e:	b933      	cbnz	r3, 800743e <chEvtWaitOne.constprop.55+0x1e>
    ctp->p_u.ewmask = events;
 8007430:	f04f 33ff 	mov.w	r3, #4294967295
 8007434:	6223      	str	r3, [r4, #32]
    chSchGoSleepS(CH_STATE_WTOREVT);
 8007436:	200a      	movs	r0, #10
 8007438:	f7f9 fdf2 	bl	8001020 <chSchGoSleepS>
    m = ctp->p_epending & events;
 800743c:	6b63      	ldr	r3, [r4, #52]	; 0x34
  }
  m ^= m & (m - (eventmask_t)1);
 800743e:	4258      	negs	r0, r3
 8007440:	4018      	ands	r0, r3
  ctp->p_epending &= ~m;
 8007442:	ea23 0300 	bic.w	r3, r3, r0
 8007446:	6363      	str	r3, [r4, #52]	; 0x34
 8007448:	2300      	movs	r3, #0
 800744a:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 800744e:	bd10      	pop	{r4, pc}
 8007450:	20001040 	.word	0x20001040
	...

08007460 <chEvtWaitAny.constprop.54>:
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
  thread_t *ctp = currp;
 8007460:	4a0b      	ldr	r2, [pc, #44]	; (8007490 <chEvtWaitAny.constprop.54+0x30>)
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
 8007462:	b510      	push	{r4, lr}
 8007464:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8007466:	6994      	ldr	r4, [r2, #24]
 8007468:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 800746c:	6b60      	ldr	r0, [r4, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800746e:	b930      	cbnz	r0, 800747e <chEvtWaitAny.constprop.54+0x1e>
    ctp->p_u.ewmask = events;
 8007470:	f04f 33ff 	mov.w	r3, #4294967295
    chSchGoSleepS(CH_STATE_WTOREVT);
 8007474:	200a      	movs	r0, #10
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
  if (m == (eventmask_t)0) {
    ctp->p_u.ewmask = events;
 8007476:	6223      	str	r3, [r4, #32]
    chSchGoSleepS(CH_STATE_WTOREVT);
 8007478:	f7f9 fdd2 	bl	8001020 <chSchGoSleepS>
    m = ctp->p_epending & events;
 800747c:	6b60      	ldr	r0, [r4, #52]	; 0x34
  }
  ctp->p_epending &= ~m;
 800747e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007480:	2200      	movs	r2, #0
 8007482:	ea23 0300 	bic.w	r3, r3, r0
 8007486:	6363      	str	r3, [r4, #52]	; 0x34
 8007488:	f382 8811 	msr	BASEPRI, r2
  chSysUnlock();

  return m;
}
 800748c:	bd10      	pop	{r4, pc}
 800748e:	bf00      	nop
 8007490:	20001040 	.word	0x20001040
	...

080074a0 <chMBPost.constprop.40>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBPost(mailbox_t *mbp, msg_t msg, systime_t timeout) {
 80074a0:	b570      	push	{r4, r5, r6, lr}
 80074a2:	2320      	movs	r3, #32
 80074a4:	4606      	mov	r6, r0
 80074a6:	f383 8811 	msr	BASEPRI, r3
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
 80074aa:	4c0d      	ldr	r4, [pc, #52]	; (80074e0 <chMBPost.constprop.40+0x40>)
 80074ac:	f104 001c 	add.w	r0, r4, #28
 80074b0:	f7fa fa6e 	bl	8001990 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 80074b4:	4605      	mov	r5, r0
 80074b6:	b970      	cbnz	r0, 80074d6 <chMBPost.constprop.40+0x36>
    *mbp->mb_wrptr++ = msg;
 80074b8:	68a2      	ldr	r2, [r4, #8]
    if (mbp->mb_wrptr >= mbp->mb_top) {
 80074ba:	6861      	ldr	r1, [r4, #4]
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 80074bc:	1d13      	adds	r3, r2, #4
    if (mbp->mb_wrptr >= mbp->mb_top) {
 80074be:	428b      	cmp	r3, r1
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 80074c0:	60a3      	str	r3, [r4, #8]
    if (mbp->mb_wrptr >= mbp->mb_top) {
      mbp->mb_wrptr = mbp->mb_buffer;
 80074c2:	bf28      	it	cs
 80074c4:	6823      	ldrcs	r3, [r4, #0]
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 80074c6:	6016      	str	r6, [r2, #0]
    if (mbp->mb_wrptr >= mbp->mb_top) {
      mbp->mb_wrptr = mbp->mb_buffer;
    }
    chSemSignalI(&mbp->mb_fullsem);
 80074c8:	4806      	ldr	r0, [pc, #24]	; (80074e4 <chMBPost.constprop.40+0x44>)

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
    if (mbp->mb_wrptr >= mbp->mb_top) {
      mbp->mb_wrptr = mbp->mb_buffer;
 80074ca:	bf28      	it	cs
 80074cc:	60a3      	strcs	r3, [r4, #8]
    }
    chSemSignalI(&mbp->mb_fullsem);
 80074ce:	f7fa f947 	bl	8001760 <chSemSignalI>
    chSchRescheduleS();
 80074d2:	f7f9 fced 	bl	8000eb0 <chSchRescheduleS>
 80074d6:	2300      	movs	r3, #0
 80074d8:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  rdymsg = chMBPostS(mbp, msg, timeout);
  chSysUnlock();

  return rdymsg;
}
 80074dc:	4628      	mov	r0, r5
 80074de:	bd70      	pop	{r4, r5, r6, pc}
 80074e0:	200008ac 	.word	0x200008ac
 80074e4:	200008bc 	.word	0x200008bc
	...

080074f0 <chMBPostI.constprop.39>:
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {
 80074f0:	b538      	push	{r3, r4, r5, lr}
 80074f2:	4b0c      	ldr	r3, [pc, #48]	; (8007524 <chMBPostI.constprop.39+0x34>)
 80074f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
 80074f6:	2a00      	cmp	r2, #0
 80074f8:	dd10      	ble.n	800751c <chMBPostI.constprop.39+0x2c>
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 80074fa:	689c      	ldr	r4, [r3, #8]
  if (mbp->mb_wrptr >= mbp->mb_top) {
 80074fc:	685d      	ldr	r5, [r3, #4]
  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 80074fe:	1d21      	adds	r1, r4, #4
 */
static inline void chSemFastWaitI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt--;
 8007500:	3a01      	subs	r2, #1
  if (mbp->mb_wrptr >= mbp->mb_top) {
 8007502:	42a9      	cmp	r1, r5
 8007504:	625a      	str	r2, [r3, #36]	; 0x24
     mbp->mb_wrptr = mbp->mb_buffer;
 8007506:	bf28      	it	cs
 8007508:	681a      	ldrcs	r2, [r3, #0]
  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 800750a:	6099      	str	r1, [r3, #8]
 800750c:	6020      	str	r0, [r4, #0]
  if (mbp->mb_wrptr >= mbp->mb_top) {
     mbp->mb_wrptr = mbp->mb_buffer;
  }
  chSemSignalI(&mbp->mb_fullsem);
 800750e:	4806      	ldr	r0, [pc, #24]	; (8007528 <chMBPostI.constprop.39+0x38>)
  }

  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
  if (mbp->mb_wrptr >= mbp->mb_top) {
     mbp->mb_wrptr = mbp->mb_buffer;
 8007510:	bf28      	it	cs
 8007512:	609a      	strcs	r2, [r3, #8]
  }
  chSemSignalI(&mbp->mb_fullsem);
 8007514:	f7fa f924 	bl	8001760 <chSemSignalI>

  return MSG_OK;
 8007518:	2000      	movs	r0, #0
 800751a:	bd38      	pop	{r3, r4, r5, pc}

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
 800751c:	f04f 30ff 	mov.w	r0, #4294967295
     mbp->mb_wrptr = mbp->mb_buffer;
  }
  chSemSignalI(&mbp->mb_fullsem);

  return MSG_OK;
}
 8007520:	bd38      	pop	{r3, r4, r5, pc}
 8007522:	bf00      	nop
 8007524:	200008ac 	.word	0x200008ac
 8007528:	200008bc 	.word	0x200008bc
 800752c:	00000000 	.word	0x00000000

08007530 <chMBPostAhead.constprop.38>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBPostAhead(mailbox_t *mbp, msg_t msg, systime_t timeout) {
 8007530:	b570      	push	{r4, r5, r6, lr}
 8007532:	2320      	movs	r3, #32
 8007534:	4606      	mov	r6, r0
 8007536:	f383 8811 	msr	BASEPRI, r3
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
 800753a:	4c0e      	ldr	r4, [pc, #56]	; (8007574 <chMBPostAhead.constprop.38+0x44>)
 800753c:	f104 001c 	add.w	r0, r4, #28
 8007540:	f7fa fa26 	bl	8001990 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8007544:	4605      	mov	r5, r0
 8007546:	b958      	cbnz	r0, 8007560 <chMBPostAhead.constprop.38+0x30>
    if (--mbp->mb_rdptr < mbp->mb_buffer) {
 8007548:	68e3      	ldr	r3, [r4, #12]
 800754a:	6822      	ldr	r2, [r4, #0]
 800754c:	3b04      	subs	r3, #4
 800754e:	4293      	cmp	r3, r2
 8007550:	60e3      	str	r3, [r4, #12]
 8007552:	d30a      	bcc.n	800756a <chMBPostAhead.constprop.38+0x3a>
      mbp->mb_rdptr = mbp->mb_top - 1;
    }
    *mbp->mb_rdptr = msg;
 8007554:	601e      	str	r6, [r3, #0]
    chSemSignalI(&mbp->mb_fullsem);
 8007556:	4808      	ldr	r0, [pc, #32]	; (8007578 <chMBPostAhead.constprop.38+0x48>)
 8007558:	f7fa f902 	bl	8001760 <chSemSignalI>
    chSchRescheduleS();
 800755c:	f7f9 fca8 	bl	8000eb0 <chSchRescheduleS>
 8007560:	2300      	movs	r3, #0
 8007562:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  rdymsg = chMBPostAheadS(mbp, msg, timeout);
  chSysUnlock();

  return rdymsg;
}
 8007566:	4628      	mov	r0, r5
 8007568:	bd70      	pop	{r4, r5, r6, pc}
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
    if (--mbp->mb_rdptr < mbp->mb_buffer) {
      mbp->mb_rdptr = mbp->mb_top - 1;
 800756a:	6863      	ldr	r3, [r4, #4]
 800756c:	3b04      	subs	r3, #4
 800756e:	60e3      	str	r3, [r4, #12]
 8007570:	e7f0      	b.n	8007554 <chMBPostAhead.constprop.38+0x24>
 8007572:	bf00      	nop
 8007574:	200008ac 	.word	0x200008ac
 8007578:	200008bc 	.word	0x200008bc
 800757c:	00000000 	.word	0x00000000

08007580 <chMBPostAheadI.constprop.37>:
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 8007580:	4a0c      	ldr	r2, [pc, #48]	; (80075b4 <chMBPostAheadI.constprop.37+0x34>)
 8007582:	6a51      	ldr	r1, [r2, #36]	; 0x24

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
 8007584:	2900      	cmp	r1, #0
 8007586:	dd11      	ble.n	80075ac <chMBPostAheadI.constprop.37+0x2c>
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_emptysem);
  if (--mbp->mb_rdptr < mbp->mb_buffer) {
 8007588:	68d3      	ldr	r3, [r2, #12]
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 800758a:	b510      	push	{r4, lr}

  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_emptysem);
  if (--mbp->mb_rdptr < mbp->mb_buffer) {
 800758c:	6814      	ldr	r4, [r2, #0]
 800758e:	3b04      	subs	r3, #4
 8007590:	3901      	subs	r1, #1
 8007592:	42a3      	cmp	r3, r4
 8007594:	6251      	str	r1, [r2, #36]	; 0x24
 8007596:	60d3      	str	r3, [r2, #12]
 8007598:	d202      	bcs.n	80075a0 <chMBPostAheadI.constprop.37+0x20>
    mbp->mb_rdptr = mbp->mb_top - 1;
 800759a:	6853      	ldr	r3, [r2, #4]
 800759c:	3b04      	subs	r3, #4
 800759e:	60d3      	str	r3, [r2, #12]
  }
  *mbp->mb_rdptr = msg;
 80075a0:	6018      	str	r0, [r3, #0]
  chSemSignalI(&mbp->mb_fullsem);
 80075a2:	4805      	ldr	r0, [pc, #20]	; (80075b8 <chMBPostAheadI.constprop.37+0x38>)
 80075a4:	f7fa f8dc 	bl	8001760 <chSemSignalI>

  return MSG_OK;
 80075a8:	2000      	movs	r0, #0
 80075aa:	bd10      	pop	{r4, pc}

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
 80075ac:	f04f 30ff 	mov.w	r0, #4294967295
 80075b0:	4770      	bx	lr
 80075b2:	bf00      	nop
 80075b4:	200008ac 	.word	0x200008ac
 80075b8:	200008bc 	.word	0x200008bc
 80075bc:	00000000 	.word	0x00000000

080075c0 <chMBFetch.constprop.36>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBFetch(mailbox_t *mbp, msg_t *msgp, systime_t timeout) {
 80075c0:	b570      	push	{r4, r5, r6, lr}
 80075c2:	2320      	movs	r3, #32
 80075c4:	4606      	mov	r6, r0
 80075c6:	f383 8811 	msr	BASEPRI, r3
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, timeout);
 80075ca:	4c0e      	ldr	r4, [pc, #56]	; (8007604 <chMBFetch.constprop.36+0x44>)
 80075cc:	f104 0010 	add.w	r0, r4, #16
 80075d0:	f7fa f9de 	bl	8001990 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 80075d4:	4605      	mov	r5, r0
 80075d6:	b978      	cbnz	r0, 80075f8 <chMBFetch.constprop.36+0x38>
    *msgp = *mbp->mb_rdptr++;
 80075d8:	68e3      	ldr	r3, [r4, #12]
    if (mbp->mb_rdptr >= mbp->mb_top) {
 80075da:	6862      	ldr	r2, [r4, #4]
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, timeout);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
 80075dc:	6819      	ldr	r1, [r3, #0]
 80075de:	3304      	adds	r3, #4
    if (mbp->mb_rdptr >= mbp->mb_top) {
 80075e0:	4293      	cmp	r3, r2
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, timeout);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
 80075e2:	60e3      	str	r3, [r4, #12]
    if (mbp->mb_rdptr >= mbp->mb_top) {
      mbp->mb_rdptr = mbp->mb_buffer;
 80075e4:	bf28      	it	cs
 80075e6:	6823      	ldrcs	r3, [r4, #0]
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, timeout);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
 80075e8:	6031      	str	r1, [r6, #0]
    if (mbp->mb_rdptr >= mbp->mb_top) {
      mbp->mb_rdptr = mbp->mb_buffer;
    }
    chSemSignalI(&mbp->mb_emptysem);
 80075ea:	4807      	ldr	r0, [pc, #28]	; (8007608 <chMBFetch.constprop.36+0x48>)

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, timeout);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
    if (mbp->mb_rdptr >= mbp->mb_top) {
      mbp->mb_rdptr = mbp->mb_buffer;
 80075ec:	bf28      	it	cs
 80075ee:	60e3      	strcs	r3, [r4, #12]
    }
    chSemSignalI(&mbp->mb_emptysem);
 80075f0:	f7fa f8b6 	bl	8001760 <chSemSignalI>
    chSchRescheduleS();
 80075f4:	f7f9 fc5c 	bl	8000eb0 <chSchRescheduleS>
 80075f8:	2300      	movs	r3, #0
 80075fa:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  rdymsg = chMBFetchS(mbp, msgp, timeout);
  chSysUnlock();

  return rdymsg;
}
 80075fe:	4628      	mov	r0, r5
 8007600:	bd70      	pop	{r4, r5, r6, pc}
 8007602:	bf00      	nop
 8007604:	200008ac 	.word	0x200008ac
 8007608:	200008c8 	.word	0x200008c8
 800760c:	00000000 	.word	0x00000000

08007610 <chMBFetchI.constprop.35>:
 * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 *                      fetched.
 *
 * @iclass
 */
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 8007610:	4b0c      	ldr	r3, [pc, #48]	; (8007644 <chMBFetchI.constprop.35+0x34>)
 8007612:	699a      	ldr	r2, [r3, #24]

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
 8007614:	2a00      	cmp	r2, #0
 8007616:	dd12      	ble.n	800763e <chMBFetchI.constprop.35+0x2e>
 8007618:	1e51      	subs	r1, r2, #1
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 800761a:	68da      	ldr	r2, [r3, #12]
 * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 *                      fetched.
 *
 * @iclass
 */
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 800761c:	b510      	push	{r4, lr}
 800761e:	6199      	str	r1, [r3, #24]
  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
  if (mbp->mb_rdptr >= mbp->mb_top) {
 8007620:	6859      	ldr	r1, [r3, #4]

  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 8007622:	6814      	ldr	r4, [r2, #0]
 8007624:	3204      	adds	r2, #4
  if (mbp->mb_rdptr >= mbp->mb_top) {
 8007626:	428a      	cmp	r2, r1

  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 8007628:	60da      	str	r2, [r3, #12]
  if (mbp->mb_rdptr >= mbp->mb_top) {
    mbp->mb_rdptr = mbp->mb_buffer;
 800762a:	bf28      	it	cs
 800762c:	681a      	ldrcs	r2, [r3, #0]

  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 800762e:	6004      	str	r4, [r0, #0]
  if (mbp->mb_rdptr >= mbp->mb_top) {
    mbp->mb_rdptr = mbp->mb_buffer;
  }
  chSemSignalI(&mbp->mb_emptysem);
 8007630:	4805      	ldr	r0, [pc, #20]	; (8007648 <chMBFetchI.constprop.35+0x38>)
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
  if (mbp->mb_rdptr >= mbp->mb_top) {
    mbp->mb_rdptr = mbp->mb_buffer;
 8007632:	bf28      	it	cs
 8007634:	60da      	strcs	r2, [r3, #12]
  }
  chSemSignalI(&mbp->mb_emptysem);
 8007636:	f7fa f893 	bl	8001760 <chSemSignalI>

  return MSG_OK;
 800763a:	2000      	movs	r0, #0
 800763c:	bd10      	pop	{r4, pc}

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
 800763e:	f04f 30ff 	mov.w	r0, #4294967295
 8007642:	4770      	bx	lr
 8007644:	200008ac 	.word	0x200008ac
 8007648:	200008c8 	.word	0x200008c8
 800764c:	00000000 	.word	0x00000000

08007650 <sdObjectInit.constprop.30>:
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
 8007650:	4b17      	ldr	r3, [pc, #92]	; (80076b0 <sdObjectInit.constprop.30+0x60>)
 *                      some data is written in the Queue. The value can be
 *                      @p NULL.
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8007652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  sdp->vmt = &vmt;
 8007656:	4618      	mov	r0, r3
 8007658:	4a16      	ldr	r2, [pc, #88]	; (80076b4 <sdObjectInit.constprop.30+0x64>)
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 800765a:	4f17      	ldr	r7, [pc, #92]	; (80076b8 <sdObjectInit.constprop.30+0x68>)
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 800765c:	f103 0154 	add.w	r1, r3, #84	; 0x54
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8007660:	2600      	movs	r6, #0
 8007662:	f840 2b04 	str.w	r2, [r0], #4
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8007666:	f103 050c 	add.w	r5, r3, #12
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 800766a:	f503 72c0 	add.w	r2, r3, #384	; 0x180
 800766e:	f103 0430 	add.w	r4, r3, #48	; 0x30
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 8007672:	f04f 0801 	mov.w	r8, #1
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8007676:	f44f 7c96 	mov.w	ip, #300	; 0x12c
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 800767a:	f503 7e2b 	add.w	lr, r3, #684	; 0x2ac
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 800767e:	615e      	str	r6, [r3, #20]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
  iqp->q_link    = link;
 8007680:	62db      	str	r3, [r3, #44]	; 0x2c
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
 8007682:	651b      	str	r3, [r3, #80]	; 0x50
 8007684:	f883 8008 	strb.w	r8, [r3, #8]
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 8007688:	629e      	str	r6, [r3, #40]	; 0x28
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 800768a:	f8c3 c038 	str.w	ip, [r3, #56]	; 0x38
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 800768e:	f8c3 e040 	str.w	lr, [r3, #64]	; 0x40
  oqp->q_notify  = onfy;
 8007692:	64df      	str	r7, [r3, #76]	; 0x4c
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 8007694:	6058      	str	r0, [r3, #4]
 8007696:	60dd      	str	r5, [r3, #12]
  tqp->p_prev = (thread_t *)tqp;
 8007698:	611d      	str	r5, [r3, #16]
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 800769a:	6199      	str	r1, [r3, #24]
  iqp->q_rdptr   = bp;
 800769c:	6259      	str	r1, [r3, #36]	; 0x24
  iqp->q_wrptr   = bp;
 800769e:	6219      	str	r1, [r3, #32]
  iqp->q_top     = bp + size;
 80076a0:	61da      	str	r2, [r3, #28]
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
 80076a2:	63da      	str	r2, [r3, #60]	; 0x3c
  oqp->q_rdptr   = bp;
 80076a4:	649a      	str	r2, [r3, #72]	; 0x48
  oqp->q_wrptr   = bp;
 80076a6:	645a      	str	r2, [r3, #68]	; 0x44
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80076a8:	631c      	str	r4, [r3, #48]	; 0x30
  tqp->p_prev = (thread_t *)tqp;
 80076aa:	635c      	str	r4, [r3, #52]	; 0x34
 80076ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076b0:	20000d58 	.word	0x20000d58
 80076b4:	08008a70 	.word	0x08008a70
 80076b8:	08002b81 	.word	0x08002b81
 80076bc:	00000000 	.word	0x00000000

080076c0 <test_start_timer.constprop.6>:
/**
 * @brief   Starts the test timer.
 *
 * @param[in] ms        time in milliseconds
 */
void test_start_timer(unsigned ms) {
 80076c0:	b508      	push	{r3, lr}

  systime_t duration = MS2ST(ms);
  test_timer_done = FALSE;
 80076c2:	4b0b      	ldr	r3, [pc, #44]	; (80076f0 <test_start_timer.constprop.6+0x30>)
 80076c4:	2200      	movs	r2, #0
 80076c6:	701a      	strb	r2, [r3, #0]
 80076c8:	2320      	movs	r3, #32
 80076ca:	f383 8811 	msr	BASEPRI, r3
 80076ce:	4809      	ldr	r0, [pc, #36]	; (80076f4 <test_start_timer.constprop.6+0x34>)
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 80076d0:	68c3      	ldr	r3, [r0, #12]
 80076d2:	b10b      	cbz	r3, 80076d8 <test_start_timer.constprop.6+0x18>
    chVTDoResetI(vtp);
 80076d4:	f7fa f8b4 	bl	8001840 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, systime_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 80076d8:	4806      	ldr	r0, [pc, #24]	; (80076f4 <test_start_timer.constprop.6+0x34>)
 80076da:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80076de:	4a06      	ldr	r2, [pc, #24]	; (80076f8 <test_start_timer.constprop.6+0x38>)
 80076e0:	2300      	movs	r3, #0
 80076e2:	f7fa f8ed 	bl	80018c0 <chVTDoSetI>
 80076e6:	2300      	movs	r3, #0
 80076e8:	f383 8811 	msr	BASEPRI, r3
 80076ec:	bd08      	pop	{r3, pc}
 80076ee:	bf00      	nop
 80076f0:	20001008 	.word	0x20001008
 80076f4:	2000119c 	.word	0x2000119c
 80076f8:	08002b71 	.word	0x08002b71
 80076fc:	00000000 	.word	0x00000000

08007700 <long_to_string_with_divisor.constprop.4>:
#include "memstreams.h"

#define MAX_FILLER 11
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
 8007700:	b4f0      	push	{r4, r5, r6, r7}
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 8007702:	f100 070b 	add.w	r7, r0, #11
 8007706:	463c      	mov	r4, r7
 8007708:	460d      	mov	r5, r1
  do {
    i = (int)(l % radix);
 800770a:	fbb1 f6f2 	udiv	r6, r1, r2
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    l /= radix;
  } while ((ll /= radix) != 0);
 800770e:	fbb5 f5f2 	udiv	r5, r5, r2
    ll = divisor;
  }

  q = p + MAX_FILLER;
  do {
    i = (int)(l % radix);
 8007712:	fb02 1116 	mls	r1, r2, r6, r1
    i += '0';
 8007716:	f101 0330 	add.w	r3, r1, #48	; 0x30
    if (i > '9')
 800771a:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
 800771c:	bfc8      	it	gt
 800771e:	f101 0337 	addgt.w	r3, r1, #55	; 0x37
    *--q = i;
 8007722:	b2db      	uxtb	r3, r3
 8007724:	f804 3d01 	strb.w	r3, [r4, #-1]!
    l /= radix;
 8007728:	4631      	mov	r1, r6
  } while ((ll /= radix) != 0);
 800772a:	2d00      	cmp	r5, #0
 800772c:	d1ed      	bne.n	800770a <long_to_string_with_divisor.constprop.4+0xa>

  i = (int)(p + MAX_FILLER - q);
 800772e:	1b3a      	subs	r2, r7, r4
 8007730:	4402      	add	r2, r0
 8007732:	e001      	b.n	8007738 <long_to_string_with_divisor.constprop.4+0x38>
 8007734:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  do
    *p++ = *q++;
 8007738:	f800 3b01 	strb.w	r3, [r0], #1
  while (--i);
 800773c:	4290      	cmp	r0, r2
 800773e:	d1f9      	bne.n	8007734 <long_to_string_with_divisor.constprop.4+0x34>

  return p;
}
 8007740:	bcf0      	pop	{r4, r5, r6, r7}
 8007742:	4770      	bx	lr
	...

08007750 <_strtok.constprop.3>:
/**
 * @brief   Shell termination event source.
 */
event_source_t shell_terminated;

static char *_strtok(char *str, const char *delim, char **saveptr) {
 8007750:	b538      	push	{r3, r4, r5, lr}
 8007752:	460d      	mov	r5, r1
  char *token;
  if (str)
 8007754:	4604      	mov	r4, r0
 8007756:	b190      	cbz	r0, 800777e <_strtok.constprop.3+0x2e>
    *saveptr = str;
 8007758:	6028      	str	r0, [r5, #0]
  token = *saveptr;

  if (!token)
    return NULL;

  token += strspn(token, delim);
 800775a:	4620      	mov	r0, r4
 800775c:	490b      	ldr	r1, [pc, #44]	; (800778c <_strtok.constprop.3+0x3c>)
 800775e:	f000 f83f 	bl	80077e0 <strspn>
 8007762:	4404      	add	r4, r0
  *saveptr = strpbrk(token, delim);
 8007764:	4620      	mov	r0, r4
 8007766:	4909      	ldr	r1, [pc, #36]	; (800778c <_strtok.constprop.3+0x3c>)
 8007768:	f000 f812 	bl	8007790 <strpbrk>
  if (*saveptr)
 800776c:	b160      	cbz	r0, 8007788 <_strtok.constprop.3+0x38>
    *(*saveptr)++ = '\0';
 800776e:	1c42      	adds	r2, r0, #1
 8007770:	2300      	movs	r3, #0
 8007772:	602a      	str	r2, [r5, #0]
 8007774:	7003      	strb	r3, [r0, #0]

  return *token ? token : NULL;
 8007776:	7823      	ldrb	r3, [r4, #0]
 8007778:	b123      	cbz	r3, 8007784 <_strtok.constprop.3+0x34>
 800777a:	4620      	mov	r0, r4
}
 800777c:	bd38      	pop	{r3, r4, r5, pc}

static char *_strtok(char *str, const char *delim, char **saveptr) {
  char *token;
  if (str)
    *saveptr = str;
  token = *saveptr;
 800777e:	680c      	ldr	r4, [r1, #0]

  if (!token)
 8007780:	2c00      	cmp	r4, #0
 8007782:	d1ea      	bne.n	800775a <_strtok.constprop.3+0xa>
    return NULL;
 8007784:	2000      	movs	r0, #0
 8007786:	bd38      	pop	{r3, r4, r5, pc}

  token += strspn(token, delim);
  *saveptr = strpbrk(token, delim);
 8007788:	6028      	str	r0, [r5, #0]
 800778a:	e7f4      	b.n	8007776 <_strtok.constprop.3+0x26>
 800778c:	08008a30 	.word	0x08008a30

08007790 <strpbrk>:
 8007790:	b430      	push	{r4, r5}
 8007792:	7804      	ldrb	r4, [r0, #0]
 8007794:	b1ec      	cbz	r4, 80077d2 <strpbrk+0x42>
 8007796:	780d      	ldrb	r5, [r1, #0]
 8007798:	b1ad      	cbz	r5, 80077c6 <strpbrk+0x36>
 800779a:	42ac      	cmp	r4, r5
 800779c:	d00e      	beq.n	80077bc <strpbrk+0x2c>
 800779e:	460a      	mov	r2, r1
 80077a0:	e001      	b.n	80077a6 <strpbrk+0x16>
 80077a2:	429c      	cmp	r4, r3
 80077a4:	d009      	beq.n	80077ba <strpbrk+0x2a>
 80077a6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d1f9      	bne.n	80077a2 <strpbrk+0x12>
 80077ae:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 80077b2:	2c00      	cmp	r4, #0
 80077b4:	d1f0      	bne.n	8007798 <strpbrk+0x8>
 80077b6:	7815      	ldrb	r5, [r2, #0]
 80077b8:	e000      	b.n	80077bc <strpbrk+0x2c>
 80077ba:	4625      	mov	r5, r4
 80077bc:	2d00      	cmp	r5, #0
 80077be:	bf08      	it	eq
 80077c0:	2000      	moveq	r0, #0
 80077c2:	bc30      	pop	{r4, r5}
 80077c4:	4770      	bx	lr
 80077c6:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 80077ca:	460a      	mov	r2, r1
 80077cc:	2c00      	cmp	r4, #0
 80077ce:	d1e3      	bne.n	8007798 <strpbrk+0x8>
 80077d0:	e7f1      	b.n	80077b6 <strpbrk+0x26>
 80077d2:	4620      	mov	r0, r4
 80077d4:	bc30      	pop	{r4, r5}
 80077d6:	4770      	bx	lr
	...

080077e0 <strspn>:
 80077e0:	b470      	push	{r4, r5, r6}
 80077e2:	7804      	ldrb	r4, [r0, #0]
 80077e4:	b1a4      	cbz	r4, 8007810 <strspn+0x30>
 80077e6:	4605      	mov	r5, r0
 80077e8:	780e      	ldrb	r6, [r1, #0]
 80077ea:	b14e      	cbz	r6, 8007800 <strspn+0x20>
 80077ec:	42b4      	cmp	r4, r6
 80077ee:	d00a      	beq.n	8007806 <strspn+0x26>
 80077f0:	460a      	mov	r2, r1
 80077f2:	e001      	b.n	80077f8 <strspn+0x18>
 80077f4:	429c      	cmp	r4, r3
 80077f6:	d006      	beq.n	8007806 <strspn+0x26>
 80077f8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d1f9      	bne.n	80077f4 <strspn+0x14>
 8007800:	1a28      	subs	r0, r5, r0
 8007802:	bc70      	pop	{r4, r5, r6}
 8007804:	4770      	bx	lr
 8007806:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 800780a:	2c00      	cmp	r4, #0
 800780c:	d1ed      	bne.n	80077ea <strspn+0xa>
 800780e:	e7f7      	b.n	8007800 <strspn+0x20>
 8007810:	4620      	mov	r0, r4
 8007812:	e7f6      	b.n	8007802 <strspn+0x22>
	...

08007820 <ram_areas>:
 8007820:	8b6c 0800 1878 2000 1878 2000 1878 2000     l...x.. x.. x.. 
 8007830:	8b6c 0800 0000 0000 0000 0000 0000 0000     l...............
 8007840:	8b6c 0800 0000 0000 0000 0000 0000 0000     l...............
 8007850:	8b6c 0800 0000 0000 0000 0000 0000 0000     l...............
 8007860:	8b6c 0800 0000 0000 0000 0000 0000 0000     l...............
 8007870:	8b6c 0800 0000 0000 0000 0000 0000 0000     l...............
 8007880:	8b6c 0800 0000 0000 0000 0000 0000 0000     l...............
 8007890:	8b6c 0800 0000 0000 0000 0000 0000 0000     l...............
 80078a0:	0042 0000 0041 0000 0043 0000 4241 4443     B...A...C...ABCD
 80078b0:	0045 0000 0000 0000 0000 0000 0000 0000     E...............

080078c0 <testmtx4>:
 80078c0:	820c 0800 1da1 0800 0000 0000 1e01 0800     ................

080078d0 <testmtx5>:
 80078d0:	81fc 0800 1d91 0800 0000 0000 42c1 0800     .............B..

080078e0 <testmtx6>:
 80078e0:	81e4 0800 3891 0800 0000 0000 41e1 0800     .....8.......A..

080078f0 <testmtx7>:
 80078f0:	81cc 0800 3871 0800 0000 0000 40f1 0800     ....q8.......@..

08007900 <testmtx8>:
 8007900:	81b8 0800 3841 0800 0000 0000 3f41 0800     ....A8......A?..

08007910 <patternmsg>:
 8007910:	7b70 0800 0000 0000 0000 0000 0000 0000     p{..............

08007920 <testbmk11>:
 8007920:	7ed8 0800 43d1 0800 0000 0000 4581 0800     .~...C.......E..

08007930 <testbmk13>:
 8007930:	7e9c 0800 0000 0000 0000 0000 4421 0800     .~..........!D..

08007940 <testevt2>:
 8007940:	8148 0800 6b01 0800 0000 0000 6b21 0800     H....k......!k..

08007950 <patterndyn>:
 8007950:	7b20 0800 7b30 0800 7b40 0800 0000 0000      {..0{..@{......

08007960 <testsys1>:
 8007960:	8350 0800 0000 0000 0000 0000 4e01 0800     P............N..

08007970 <testsem1>:
 8007970:	82a4 0800 1df1 0800 0000 0000 2691 0800     .............&..

08007980 <testsem2>:
 8007980:	8290 0800 1de1 0800 0000 0000 2511 0800     .............%..

08007990 <testsem3>:
 8007990:	8270 0800 1dd1 0800 0000 0000 2461 0800     p...........a$..

080079a0 <testsem4>:
 80079a0:	824c 0800 0000 0000 0000 0000 2301 0800     L............#..

080079b0 <testsys2>:
 80079b0:	8334 0800 0000 0000 0000 0000 4401 0800     4............D..

080079c0 <testsys3>:
 80079c0:	8320 0800 0000 0000 0000 0000 4d71 0800      ...........qM..

080079d0 <testbmk10>:
 80079d0:	7efc 0800 0000 0000 0000 0000 4621 0800     .~..........!F..

080079e0 <testbmk7>:
 80079e0:	7f70 0800 43f1 0800 0000 0000 48d1 0800     p....C.......H..

080079f0 <testbmk12>:
 80079f0:	7eb8 0800 43c1 0800 0000 0000 4511 0800     .~...C.......E..

08007a00 <testbmk8>:
 8007a00:	7f44 0800 0000 0000 0000 0000 4751 0800     D...........QG..

08007a10 <testbmk1>:
 8007a10:	8024 0800 0000 0000 0000 0000 4d01 0800     $............M..

08007a20 <testbmk2>:
 8007a20:	800c 0800 0000 0000 0000 0000 4c91 0800     .............L..

08007a30 <testbmk3>:
 8007a30:	7ff4 0800 0000 0000 0000 0000 4bb1 0800     .............K..

08007a40 <testbmk4>:
 8007a40:	7fd8 0800 0000 0000 0000 0000 4a71 0800     ............qJ..

08007a50 <testbmk5>:
 8007a50:	7fb8 0800 0000 0000 0000 0000 4a01 0800     .............J..

08007a60 <testbmk6>:
 8007a60:	7f98 0800 0000 0000 0000 0000 4831 0800     ............1H..

08007a70 <patternsys>:
 8007a70:	7960 0800 79b0 0800 79c0 0800 0000 0000     `y...y...y......

08007a80 <testpools1>:
 8007a80:	80f0 0800 66f1 0800 0000 0000 6431 0800     .....f......1d..

08007a90 <testbmk9>:
 8007a90:	7f20 0800 0000 0000 0000 0000 46a1 0800      ............F..

08007aa0 <patternbmk>:
 8007aa0:	7a10 0800 7a20 0800 7a30 0800 7a40 0800     .z.. z..0z..@z..
 8007ab0:	7a50 0800 7a60 0800 79e0 0800 7a00 0800     Pz..`z...y...z..
 8007ac0:	7a90 0800 79d0 0800 7920 0800 79f0 0800     .z...y.. y...y..
 8007ad0:	7930 0800 0000 0000 0000 0000 0000 0000     0y..............

08007ae0 <patterns>:
 8007ae0:	7a70 0800 7b80 0800 7c10 0800 7c80 0800     pz...{...|...|..
 8007af0:	7910 0800 7bc0 0800 7c40 0800 7b60 0800     .y...{..@|..`{..
 8007b00:	8380 0800 7950 0800 7c30 0800 7aa0 0800     ....Py..0|...z..
	...

08007b20 <testdyn1>:
 8007b20:	80c4 0800 5d91 0800 0000 0000 65f1 0800     .....].......e..

08007b30 <testdyn2>:
 8007b30:	8094 0800 5d71 0800 0000 0000 6501 0800     ....q].......e..

08007b40 <testdyn3>:
 8007b40:	806c 0800 5d41 0800 0000 0000 62f1 0800     l...A].......b..

08007b50 <testmbox1>:
 8007b50:	8188 0800 3801 0800 0000 0000 38b1 0800     .....8.......8..

08007b60 <patternheap>:
 8007b60:	7c60 0800 0000 0000 0000 0000 0000 0000     `|..............

08007b70 <testmsg1>:
 8007b70:	81a8 0800 0000 0000 0000 0000 3ea1 0800     .............>..

08007b80 <patternthd>:
 8007b80:	7bd0 0800 7be0 0800 7bf0 0800 7c00 0800     .{...{...{...|..
	...

08007ba0 <testqueues1>:
 8007ba0:	8054 0800 5d11 0800 0000 0000 6041 0800     T....]......A`..

08007bb0 <testqueues2>:
 8007bb0:	803c 0800 5ce1 0800 0000 0000 5de1 0800     <....\.......]..

08007bc0 <patternmbox>:
 8007bc0:	7b50 0800 0000 0000 0000 0000 0000 0000     P{..............

08007bd0 <testthd1>:
 8007bd0:	8304 0800 0000 0000 0000 0000 2181 0800     .............!..

08007be0 <testthd2>:
 8007be0:	82e8 0800 0000 0000 0000 0000 2801 0800     .............(..

08007bf0 <testthd3>:
 8007bf0:	82cc 0800 0000 0000 0000 0000 2a11 0800     .............*..

08007c00 <testthd4>:
 8007c00:	82bc 0800 0000 0000 0000 0000 2951 0800     ............Q)..

08007c10 <patternsem>:
 8007c10:	7970 0800 7980 0800 7990 0800 79a0 0800     py...y...y...y..
	...

08007c30 <patternqueues>:
 8007c30:	7ba0 0800 7bb0 0800 0000 0000 0000 0000     .{...{..........

08007c40 <patternevt>:
 8007c40:	7c50 0800 7940 0800 7c70 0800 0000 0000     P|..@y..p|......

08007c50 <testevt1>:
 8007c50:	8164 0800 6b11 0800 0000 0000 6e81 0800     d....k.......n..

08007c60 <testheap1>:
 8007c60:	810c 0800 6721 0800 0000 0000 6751 0800     ....!g......Qg..

08007c70 <testevt3>:
 8007c70:	8134 0800 6af1 0800 0000 0000 6991 0800     4....j.......i..

08007c80 <patternmtx>:
 8007c80:	8370 0800 78c0 0800 78d0 0800 78e0 0800     p....x...x...x..
 8007c90:	78f0 0800 7900 0800 0000 0000 0000 0000     .x...y..........
 8007ca0:	2a2a 202a 654b 6e72 6c65 203a 2020 2020     *** Kernel:     
 8007cb0:	2020 0000 2a2a 202a 6f43 706d 6c69 6465       ..*** Compiled
 8007cc0:	203a 2020 2020 0000 2a2a 202a 6f43 706d     :     ..*** Comp
 8007cd0:	6c69 7265 203a 2020 2020 0000 2a2a 202a     iler:     ..*** 
 8007ce0:	7241 6863 7469 6365 7574 6572 203a 0000     Architecture: ..
 8007cf0:	2a2a 202a 6f43 6572 5620 7261 6169 746e     *** Core Variant
 8007d00:	203a 0000 2a2a 202a 6f50 7472 4920 666e     : ..*** Port Inf
 8007d10:	3a6f 2020 2020 0000 2a2a 202a 6c50 7461     o:    ..*** Plat
 8007d20:	6f66 6d72 203a 2020 2020 0000 2a2a 202a     form:     ..*** 
 8007d30:	6554 7473 4220 616f 6472 203a 2020 0000     Test Board:   ..
 8007d40:	2d2d 202d 6554 7473 4320 7361 2065 0000     --- Test Case ..
 8007d50:	2820 0000 2d2d 202d 6552 7573 746c 203a      (..--- Result: 
 8007d60:	4146 4c49 5255 2045 2328 0000 5b20 0000     FAILURE (#.. [..
 8007d70:	6946 616e 206c 6572 7573 746c 203a 0000     Final result: ..
 8007d80:	2a2a 202a 6843 6269 4f69 2f53 5452 7420     *** ChibiOS/RT t
 8007d90:	7365 2074 7573 7469 0065 0000 2a2a 002a     est suite...***.
 8007da0:	0029 0000 295d 0000 2d2d 202d 6552 7573     )...])..--- Resu
 8007db0:	746c 203a 5553 4343 5345 0053 4146 4c49     lt: SUCCESS.FAIL
 8007dc0:	5255 0045 2e33 2e31 0033 0000 754a 206c     URE.3.1.3...Jul 
 8007dd0:	3420 3220 3130 2036 202d 3731 303a 3a32      4 2016 - 17:02:
 8007de0:	3530 0000 4347 2043 2e34 2e39 2033 3032     05..GCC 4.9.3 20
 8007df0:	3531 3530 3932 2820 6572 656c 7361 2965     150529 (release)
 8007e00:	5b20 5241 2f4d 6d65 6562 6464 6465 342d      [ARM/embedded-4
 8007e10:	395f 622d 6172 636e 2068 6572 6976 6973     _9-branch revisi
 8007e20:	6e6f 3220 3732 3739 5d37 0000 5241 764d     on 227977]..ARMv
 8007e30:	2d37 004d 6f43 7472 7865 4d2d 0033 0000     7-M.Cortex-M3...
 8007e40:	6441 6176 636e 6465 6b20 7265 656e 206c     Advanced kernel 
 8007e50:	6f6d 6564 0000 0000 5453 334d 4632 3031     mode....STM32F10
 8007e60:	2078 6550 6672 726f 616d 636e 2065 694c     x Performance Li
 8007e70:	656e 4d20 6465 7569 206d 6544 736e 7469     ne Medium Densit
 8007e80:	0079 0000 6843 7261 6567 6f43 746e 6f72     y...ChargeContro
 8007e90:	6c6c 7265 6f4d 7564 656c 0000 6542 636e     llerModule..Benc
 8007ea0:	6d68 7261 2c6b 5220 4d41 6620 6f6f 7074     hmark, RAM footp
 8007eb0:	6972 746e 0000 0000 6542 636e 6d68 7261     rint....Benchmar
 8007ec0:	2c6b 6d20 7475 7865 7365 6c20 636f 2f6b     k, mutexes lock/
 8007ed0:	6e75 6f6c 6b63 0000 6542 636e 6d68 7261     unlock..Benchmar
 8007ee0:	2c6b 7320 6d65 7061 6f68 6572 2073 6177     k, semaphores wa
 8007ef0:	7469 732f 6769 616e 006c 0000 6542 636e     it/signal...Benc
 8007f00:	6d68 7261 2c6b 7620 7269 7574 6c61 7420     hmark, virtual t
 8007f10:	6d69 7265 2073 6573 2f74 6572 6573 0074     imers set/reset.
 8007f20:	6542 636e 6d68 7261 2c6b 4920 4f2f 5120     Benchmark, I/O Q
 8007f30:	6575 6575 2073 6874 6f72 6775 7068 7475     ueues throughput
 8007f40:	0000 0000 6542 636e 6d68 7261 2c6b 7220     ....Benchmark, r
 8007f50:	756f 646e 7220 626f 6e69 6320 6e6f 6574     ound robin conte
 8007f60:	7478 7320 6977 6374 6968 676e 0000 0000     xt switching....
 8007f70:	6542 636e 6d68 7261 2c6b 6d20 7361 2073     Benchmark, mass 
 8007f80:	6572 6373 6568 7564 656c 202c 2035 6874     reschedule, 5 th
 8007f90:	6572 6461 0073 0000 6542 636e 6d68 7261     reads...Benchmar
 8007fa0:	2c6b 7420 7268 6165 7364 202c 7263 6165     k, threads, crea
 8007fb0:	6574 6f20 6c6e 0079 6542 636e 6d68 7261     te only.Benchmar
 8007fc0:	2c6b 7420 7268 6165 7364 202c 7566 6c6c     k, threads, full
 8007fd0:	6320 6379 656c 0000 6542 636e 6d68 7261      cycle..Benchmar
 8007fe0:	2c6b 6320 6e6f 6574 7478 7320 6977 6374     k, context switc
 8007ff0:	0068 0000 6542 636e 6d68 7261 2c6b 6d20     h...Benchmark, m
 8008000:	7365 6173 6567 2073 3323 0000 6542 636e     essages #3..Benc
 8008010:	6d68 7261 2c6b 6d20 7365 6173 6567 2073     hmark, messages 
 8008020:	3223 0000 6542 636e 6d68 7261 2c6b 6d20     #2..Benchmark, m
 8008030:	7365 6173 6567 2073 3123 0000 7551 7565     essages #1..Queu
 8008040:	7365 202c 756f 7074 7475 7120 6575 6575     es, output queue
 8008050:	0073 0000 7551 7565 7365 202c 6e69 7570     s...Queues, inpu
 8008060:	2074 7571 7565 7365 0000 0000 7944 616e     t queues....Dyna
 8008070:	696d 2063 5041 7349 202c 6572 6967 7473     mic APIs, regist
 8008080:	7972 6120 646e 7220 6665 7265 6e65 6563     ry and reference
 8008090:	0073 0000 7944 616e 696d 2063 5041 7349     s...Dynamic APIs
 80080a0:	202c 6874 6572 6461 2073 7263 6165 6974     , threads creati
 80080b0:	6e6f 6620 6f72 206d 656d 6f6d 7972 7020     on from memory p
 80080c0:	6f6f 006c 7944 616e 696d 2063 5041 7349     ool.Dynamic APIs
 80080d0:	202c 6874 6572 6461 2073 7263 6165 6974     , threads creati
 80080e0:	6e6f 6620 6f72 206d 6568 7061 0000 0000     on from heap....
 80080f0:	654d 6f6d 7972 5020 6f6f 736c 202c 7571     Memory Pools, qu
 8008100:	7565 2f65 6564 7571 7565 0065 6548 7061     eue/dequeue.Heap
 8008110:	202c 6c61 6f6c 6163 6974 6e6f 6120 646e     , allocation and
 8008120:	6620 6172 6d67 6e65 6174 6974 6e6f 7420      fragmentation t
 8008130:	7365 0074 7645 6e65 7374 202c 6974 656d     est.Events, time
 8008140:	756f 7374 0000 0000 7645 6e65 7374 202c     outs....Events, 
 8008150:	6177 7469 6120 646e 6220 6f72 6461 6163     wait and broadca
 8008160:	7473 0000 7645 6e65 7374 202c 6572 6967     st..Events, regi
 8008170:	7473 6172 6974 6e6f 6120 646e 6420 7369     stration and dis
 8008180:	6170 6374 0068 0000 614d 6c69 6f62 6578     patch...Mailboxe
 8008190:	2c73 7120 6575 6975 676e 6120 646e 7420     s, queuing and t
 80081a0:	6d69 6f65 7475 0073 654d 7373 6761 7365     imeouts.Messages
 80081b0:	202c 6f6c 706f 0000 6f43 646e 6156 2c72     , loop..CondVar,
 80081c0:	6220 6f6f 7473 7420 7365 0074 6f43 646e      boost test.Cond
 80081d0:	6156 2c72 6220 6f72 6461 6163 7473 7420     Var, broadcast t
 80081e0:	7365 0074 6f43 646e 6156 2c72 7320 6769     est.CondVar, sig
 80081f0:	616e 206c 6574 7473 0000 0000 754d 6574     nal test....Mute
 8008200:	6578 2c73 7320 6174 7574 0073 754d 6574     xes, status.Mute
 8008210:	6578 2c73 7020 6972 726f 7469 2079 6572     xes, priority re
 8008220:	7574 6e72 0000 0000 754d 6574 6578 2c73     turn....Mutexes,
 8008230:	7020 6972 726f 7469 2079 6e65 7571 7565      priority enqueu
 8008240:	6e69 2067 6574 7473 0000 0000 6942 616e     ing test....Bina
 8008250:	7972 5320 6d65 7061 6f68 6572 2c73 6620     ry Semaphores, f
 8008260:	6e75 7463 6f69 616e 696c 7974 0000 0000     unctionality....
 8008270:	6553 616d 6870 726f 7365 202c 7461 6d6f     Semaphores, atom
 8008280:	6369 7320 6769 616e 2d6c 6177 7469 0000     ic signal-wait..
 8008290:	6553 616d 6870 726f 7365 202c 6974 656d     Semaphores, time
 80082a0:	756f 0074 6553 616d 6870 726f 7365 202c     out.Semaphores, 
 80082b0:	6e65 7571 7565 6e69 0067 0000 6854 6572     enqueuing...Thre
 80082c0:	6461 2c73 6420 6c65 7961 0073 6854 6572     ads, delays.Thre
 80082d0:	6461 2c73 7020 6972 726f 7469 2079 6863     ads, priority ch
 80082e0:	6e61 6567 0000 0000 6854 6572 6461 2c73     ange....Threads,
 80082f0:	6520 716e 6575 6975 676e 7420 7365 2074      enqueuing test 
 8008300:	3223 0000 6854 6572 6461 2c73 6520 716e     #2..Threads, enq
 8008310:	6575 6975 676e 7420 7365 2074 3123 0000     ueuing test #1..
 8008320:	7953 7473 6d65 202c 6e69 6574 7267 7469     System, integrit
 8008330:	0079 0000 7953 7473 6d65 202c 6e69 6574     y...System, inte
 8008340:	7272 7075 7374 6820 6e61 6c64 6e69 0067     rrupts handling.
 8008350:	7953 7473 6d65 202c 7263 7469 6369 6c61     System, critical
 8008360:	7a20 6e6f 7365 0000 0000 0000 0000 0000      zones..........

08008370 <testmtx1>:
 8008370:	8228 0800 1dc1 0800 0000 0000 2091 0800     (............ ..

08008380 <patternpools>:
 8008380:	7a80 0800 0000 0000 0000 0000 0000 0000     .z..............
 8008390:	4241 0043 0000 0000 0000 0000 0000 0000     ABC.............

080083a0 <wa>:
 80083a0:	1210 2000 1358 2000 14a0 2000 15e8 2000     ... X.. ... ... 
 80083b0:	1730 2000 0000 0000 0000 0000 0000 0000     0.. ............
 80083c0:	2d2d 202d 7953 7473 6d65 203a 0000 0000     --- System: ....
 80083d0:	6220 7479 7365 0000 2d2d 202d 6854 6572      bytes..--- Thre
 80083e0:	6461 203a 0000 0000 2d2d 202d 6954 656d     ad: ....--- Time
 80083f0:	2072 203a 0000 0000 2d2d 202d 6553 616d     r : ....--- Sema
 8008400:	6870 203a 0000 0000 2d2d 202d 7645 6e65     ph: ....--- Even
 8008410:	5374 203a 0000 0000 2d2d 202d 7645 6e65     tS: ....--- Even
 8008420:	4c74 203a 0000 0000 2d2d 202d 754d 6574     tL: ....--- Mute
 8008430:	2078 203a 0000 0000 2d2d 202d 6f43 646e     x : ....--- Cond
 8008440:	2e56 203a 0000 0000 2d2d 202d 7551 7565     V.: ....--- Queu
 8008450:	2065 203a 0000 0000 2d2d 202d 614d 6c69     e : ....--- Mail
 8008460:	2e42 203a 0000 0000 2d2d 202d 6353 726f     B.: ....--- Scor
 8008470:	2065 203a 0000 0000 6c20 636f 2b6b 6e75     e : .... lock+un
 8008480:	6f6c 6b63 532f 0000 7720 6961 2b74 6973     lock/S.. wait+si
 8008490:	6e67 6c61 532f 0000 7420 6d69 7265 2f73     gnal/S.. timers/
 80084a0:	0053 0000 6220 7479 7365 532f 0000 0000     S... bytes/S....
 80084b0:	6320 7874 7773 2f63 0053 0000 7420 7268      ctxswc/S... thr
 80084c0:	6165 7364 532f 0000 7220 7365 6863 6465     eads/S.. resched
 80084d0:	6c75 7365 532f 202c 0000 0000 6d20 6773     ules/S, .... msg
 80084e0:	2f73 2c53 0020 0000 6e28 6c75 296c 0000     s/S, ...(null)..

080084f0 <states.7658>:
 80084f0:	87d0 0800 87d8 0800 87e0 0800 87e8 0800     ................
 8008500:	87f4 0800 87fc 0800 8804 0800 880c 0800     ................
 8008510:	8814 0800 8820 0800 8828 0800 8830 0800     .... ...(...0...
 8008520:	883c 0800 8844 0800 884c 0800 8854 0800     <...D...L...T...

08008530 <ch_debug>:
 8008530:	616d 6e69 1600 1843 0204 0844 100c 1814     main..C...D.....
 8008540:	1c00 1e1d 0000 0000 0000 0000 0000 0000     ................

08008550 <commands>:
 8008550:	87b8 0800 5391 0800 87bc 0800 5321 0800     .....S......!S..
 8008560:	8244 0800 7221 0800 87c4 0800 6f91 0800     D...!r.......o..
	...
 8008580:	7355 6761 3a65 2520 0d73 000a 7973 7473     Usage: %s...syst
 8008590:	6d69 0065 6c25 0d75 000a 0000 6e69 6f66     ime.%lu.....info
 80085a0:	0000 0000 654b 6e72 6c65 203a 2020 2020     ....Kernel:     
 80085b0:	2020 7325 0a0d 0000 6f43 706d 6c69 7265       %s....Compiler
 80085c0:	203a 2020 2020 7325 0a0d 0000 7241 6863     :     %s....Arch
 80085d0:	7469 6365 7574 6572 203a 7325 0a0d 0000     itecture: %s....
 80085e0:	6f43 6572 5620 7261 6169 746e 203a 7325     Core Variant: %s
 80085f0:	0a0d 0000 6f50 7472 4920 666e 3a6f 2020     ....Port Info:  
 8008600:	2020 7325 0a0d 0000 6c50 7461 6f66 6d72       %s....Platform
 8008610:	203a 2020 2020 7325 0a0d 0000 6f42 7261     :     %s....Boar
 8008620:	3a64 2020 2020 2020 2020 7325 0a0d 0000     d:        %s....
 8008630:	7542 6c69 2064 6974 656d 203a 2020 7325     Build time:   %s
 8008640:	7325 7325 0a0d 0000 754a 206c 3420 3220     %s%s....Jul  4 2
 8008650:	3130 0036 2d20 0020 3731 303a 3a32 3730     016. - .17:02:07
 8008660:	0000 0000 7355 6761 3a65 7420 7268 6165     ....Usage: threa
 8008670:	7364 0a0d 0000 0000 2020 2020 6461 7264     ds......    addr
 8008680:	2020 2020 7473 6361 206b 7270 6f69 7220         stack prio r
 8008690:	6665 2073 2020 2020 7473 7461 0d65 000a     efs     state...
 80086a0:	3025 6c38 2078 3025 6c38 2078 3425 756c     %08lx %08lx %4lu
 80086b0:	2520 6c34 2075 3925 2073 6c25 0d75 000a      %4lu %9s %lu...
 80086c0:	7355 6761 3a65 6d20 6d65 0a0d 0000 0000     Usage: mem......
 80086d0:	6f63 6572 6620 6572 2065 656d 6f6d 7972     core free memory
 80086e0:	3a20 2520 2075 7962 6574 0d73 000a 0000      : %u bytes.....
 80086f0:	6568 7061 6620 6172 6d67 6e65 7374 2020     heap fragments  
 8008700:	3a20 2520 0d75 000a 6568 7061 6620 6572      : %u...heap fre
 8008710:	2065 6f74 6174 206c 3a20 2520 2075 7962     e total  : %u by
 8008720:	6574 0d73 000a 0000 6873 6c65 006c 0000     tes.....shell...
 8008730:	0a0d 6843 6269 4f69 2f53 5452 5320 6568     ..ChibiOS/RT She
 8008740:	6c6c 0a0d 0000 0000 6863 203e 0000 0000     ll......ch> ....
 8008750:	445e 0000 6f74 206f 616d 796e 6120 6772     ^D..too many arg
 8008760:	6d75 6e65 7374 0a0d 0000 0000 7865 7469     uments......exit
 8008770:	0000 0000 6568 706c 0000 0000 6f43 6d6d     ....help....Comm
 8008780:	6e61 7364 203a 6568 706c 6520 6978 2074     ands: help exit 
 8008790:	0000 0000 7325 0020 7325 0000 3f20 0a0d     ....%s .%s.. ?..
 80087a0:	0000 0000 0a0d 6f6c 6f67 7475 0000 0000     ......logout....
 80087b0:	6469 656c 0000 0000 656d 006d 6874 6572     idle....mem.thre
 80087c0:	6461 0073 6461 7663 6c61 6575 0073 0000     ads.adcvalues...
 80087d0:	4552 4441 0059 0000 5543 5252 4e45 0054     READY...CURRENT.
 80087e0:	5457 5453 5241 0054 5553 5053 4e45 4544     WTSTART.SUSPENDE
 80087f0:	0044 0000 5551 5545 4445 0000 5457 4553     D...QUEUED..WTSE
 8008800:	004d 0000 5457 544d 0058 0000 5457 4f43     M...WTMTX...WTCO
 8008810:	444e 0000 4c53 4545 4950 474e 0000 0000     ND..SLEEPING....
 8008820:	5457 5845 5449 0000 5457 524f 5645 0054     WTEXIT..WTOREVT.
 8008830:	5457 4e41 4544 5456 0000 0000 4e53 4d44     WTANDEVT....SNDM
 8008840:	4753 0051 4e53 4d44 4753 0000 5457 534d     SGQ.SNDMSG..WTMS
 8008850:	0047 0000 4946 414e 004c 0000 0000 0000     G...FINAL.......

08008860 <_stm32_dma_streams>:
 8008860:	0000 4002 0008 4002 0001 0000 0000 0000     ...@...@........
 8008870:	0000 000b 0000 4002 001c 4002 0002 0000     .......@...@....
 8008880:	0000 0000 0104 000c 0000 4002 0030 4002     ...........@0..@
 8008890:	0004 0000 0000 0000 0208 000d 0000 4002     ...............@
 80088a0:	0044 4002 0008 0000 0000 0000 030c 000e     D..@............
 80088b0:	0000 4002 0058 4002 0010 0000 0000 0000     ...@X..@........
 80088c0:	0410 000f 0000 4002 006c 4002 0020 0000     .......@l..@ ...
 80088d0:	0000 0000 0514 0010 0000 4002 0080 4002     ...........@...@
 80088e0:	0040 0000 0000 0000 0618 0011 0000 0000     @...............

080088f0 <cancfg>:
 80088f0:	0040 0000 000b 0018 0000 0000 0000 0000     @...............

08008900 <shCfg>:
 8008900:	0d58 2000 8550 0800 0000 0000 0000 0000     X.. P...........
 8008910:	4241 4443 0000 0000 4241 0000 0000 0000     ABCD....AB......

08008920 <evhndl>:
 8008920:	6f81 0800 6f71 0800 6f61 0800 0000 0000     .o..qo..ao......

08008930 <measNTCcalib>:
 8008930:	0fd6 0fc4 0fab 0f8a 0f5e 0f25 0edc 0e81     ........^.%.....
 8008940:	0e12 0d8d 0cf1 0c40 0b7b 0aa6 09c7 08e3     ......@.{.......
 8008950:	0800 0724 0652 0590 04dd 043d 03ae 0330     ..$.R.....=...0.
 8008960:	02c2 0263 0210 01ca 018d 0158 012c 0105     ..c.......X.,...
 8008970:	00e4 00c7 00af 0099 0087 0078 006a 005e     ..........x.j.^.
 8008980:	0053 004a 0042 0000 0000 0000 0000 0000     S.J.B...........
 8008990:	631b 0000 5b1b 4a32 0000 0000 4843 4e41     .c...[2J....CHAN
 80089a0:	454e 534c 203a 6425 202c 5542 4646 5245     NELS: %d, BUFFER
 80089b0:	203a 6425 0a0d 0000 544e 3143 203a 6425     : %d....NTC1: %d
 80089c0:	0a0d 0000 544e 3243 203a 6425 0a0d 0000     ....NTC2: %d....
 80089d0:	544e 3343 203a 6425 0a0d 0000 5543 5252     NTC3: %d....CURR
 80089e0:	3a31 2520 0d64 000a 5543 5252 3a32 2520     1: %d...CURR2: %
 80089f0:	0d64 000a 5543 5252 3a33 2520 0d64 000a     d...CURR3: %d...
 8008a00:	6153 706d 656c 6854 6572 6461 0000 0000     SampleThread....
 8008a10:	7355 6761 3a65 7420 7365 0d74 000a 0000     Usage: test.....
 8008a20:	756f 2074 666f 6d20 6d65 726f 0d79 000a     out of memory...
 8008a30:	0920 0000 0000 0000 0000 0000 0000 0000      ...............

08008a40 <adcgrpcfg>:
 8008a40:	0000 0006 0000 0000 0000 0000 0000 0000     ................
	...
 8008a5c:	0000 0050 0000 0000 8820 0a41 0000 0000     ..P..... .A.....
 8008a6c:	0000 0000                                   ....

08008a70 <vmt>:
 8008a70:	31c1 0800 31a1 0800 3201 0800 31e1 0800     .1...1...2...1..
 8008a80:	31f1 0800 31d1 0800 31b1 0800 3191 0800     .1...1...1...1..
