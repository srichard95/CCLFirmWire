
build/CCLFirmWire.elf:     file format elf32-littlearm


Disassembly of section .text:

08000160 <Reset_Handler>:
 8000160:	b672      	cpsid	i
 8000162:	4822      	ldr	r0, [pc, #136]	; (80001ec <endfiniloop+0x4>)
 8000164:	f380 8809 	msr	PSP, r0
 8000168:	2002      	movs	r0, #2
 800016a:	f380 8814 	msr	CONTROL, r0
 800016e:	f3bf 8f6f 	isb	sy
 8000172:	f001 ff35 	bl	8001fe0 <__core_init>
 8000176:	f003 fa4b 	bl	8003610 <__early_init>
 800017a:	481d      	ldr	r0, [pc, #116]	; (80001f0 <endfiniloop+0x8>)
 800017c:	491d      	ldr	r1, [pc, #116]	; (80001f4 <endfiniloop+0xc>)
 800017e:	4a1e      	ldr	r2, [pc, #120]	; (80001f8 <endfiniloop+0x10>)

08000180 <msloop>:
 8000180:	4291      	cmp	r1, r2
 8000182:	bf3c      	itt	cc
 8000184:	f841 0b04 	strcc.w	r0, [r1], #4
 8000188:	e7fa      	bcc.n	8000180 <msloop>
 800018a:	491c      	ldr	r1, [pc, #112]	; (80001fc <endfiniloop+0x14>)
 800018c:	4a17      	ldr	r2, [pc, #92]	; (80001ec <endfiniloop+0x4>)

0800018e <psloop>:
 800018e:	4291      	cmp	r1, r2
 8000190:	bf3c      	itt	cc
 8000192:	f841 0b04 	strcc.w	r0, [r1], #4
 8000196:	e7fa      	bcc.n	800018e <psloop>
 8000198:	4919      	ldr	r1, [pc, #100]	; (8000200 <endfiniloop+0x18>)
 800019a:	4a1a      	ldr	r2, [pc, #104]	; (8000204 <endfiniloop+0x1c>)
 800019c:	4b1a      	ldr	r3, [pc, #104]	; (8000208 <endfiniloop+0x20>)

0800019e <dloop>:
 800019e:	429a      	cmp	r2, r3
 80001a0:	bf3e      	ittt	cc
 80001a2:	f851 0b04 	ldrcc.w	r0, [r1], #4
 80001a6:	f842 0b04 	strcc.w	r0, [r2], #4
 80001aa:	e7f8      	bcc.n	800019e <dloop>
 80001ac:	2000      	movs	r0, #0
 80001ae:	4917      	ldr	r1, [pc, #92]	; (800020c <endfiniloop+0x24>)
 80001b0:	4a17      	ldr	r2, [pc, #92]	; (8000210 <endfiniloop+0x28>)

080001b2 <bloop>:
 80001b2:	4291      	cmp	r1, r2
 80001b4:	bf3c      	itt	cc
 80001b6:	f841 0b04 	strcc.w	r0, [r1], #4
 80001ba:	e7fa      	bcc.n	80001b2 <bloop>
 80001bc:	f001 fed8 	bl	8001f70 <__init_ram_areas>
 80001c0:	f001 ff06 	bl	8001fd0 <__late_init>
 80001c4:	4c13      	ldr	r4, [pc, #76]	; (8000214 <endfiniloop+0x2c>)
 80001c6:	4d14      	ldr	r5, [pc, #80]	; (8000218 <endfiniloop+0x30>)

080001c8 <initloop>:
 80001c8:	42ac      	cmp	r4, r5
 80001ca:	da03      	bge.n	80001d4 <endinitloop>
 80001cc:	f854 1b04 	ldr.w	r1, [r4], #4
 80001d0:	4788      	blx	r1
 80001d2:	e7f9      	b.n	80001c8 <initloop>

080001d4 <endinitloop>:
 80001d4:	f001 fffc 	bl	80021d0 <main>
 80001d8:	4c10      	ldr	r4, [pc, #64]	; (800021c <endfiniloop+0x34>)
 80001da:	4d11      	ldr	r5, [pc, #68]	; (8000220 <endfiniloop+0x38>)

080001dc <finiloop>:
 80001dc:	42ac      	cmp	r4, r5
 80001de:	da03      	bge.n	80001e8 <endfiniloop>
 80001e0:	f854 1b04 	ldr.w	r1, [r4], #4
 80001e4:	4788      	blx	r1
 80001e6:	e7f9      	b.n	80001dc <finiloop>

080001e8 <endfiniloop>:
 80001e8:	f001 beea 	b.w	8001fc0 <__default_exit>
 80001ec:	20000800 	.word	0x20000800
 80001f0:	55555555 	.word	0x55555555
 80001f4:	20000000 	.word	0x20000000
 80001f8:	20000400 	.word	0x20000400
 80001fc:	20000400 	.word	0x20000400
 8000200:	080079e0 	.word	0x080079e0
 8000204:	20000800 	.word	0x20000800
 8000208:	200008dc 	.word	0x200008dc
 800020c:	200008e0 	.word	0x200008e0
 8000210:	200014bc 	.word	0x200014bc
 8000214:	08000160 	.word	0x08000160
 8000218:	08000160 	.word	0x08000160
 800021c:	08000160 	.word	0x08000160
 8000220:	08000160 	.word	0x08000160
	...

08000230 <_port_switch>:
 8000230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000234:	f8c1 d00c 	str.w	sp, [r1, #12]
 8000238:	68c3      	ldr	r3, [r0, #12]
 800023a:	469d      	mov	sp, r3
 800023c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000240 <_port_thread_start>:
 8000240:	2300      	movs	r3, #0
 8000242:	f383 8811 	msr	BASEPRI, r3
 8000246:	4628      	mov	r0, r5
 8000248:	47a0      	blx	r4
 800024a:	2000      	movs	r0, #0
 800024c:	f001 fc78 	bl	8001b40 <chThdExit>

08000250 <_port_switch_from_isr>:
 8000250:	f001 f8e6 	bl	8001420 <chSchDoReschedule>

08000254 <_port_exit_from_isr>:
 8000254:	df00      	svc	0
 8000256:	e7fe      	b.n	8000256 <_port_exit_from_isr+0x2>
	...

08000260 <strcmp>:
 8000260:	ea80 0c01 	eor.w	ip, r0, r1
 8000264:	f01c 0f03 	tst.w	ip, #3
 8000268:	d137      	bne.n	80002da <strcmp+0x7a>
 800026a:	f010 0c03 	ands.w	ip, r0, #3
 800026e:	f020 0003 	bic.w	r0, r0, #3
 8000272:	f021 0103 	bic.w	r1, r1, #3
 8000276:	f850 2b04 	ldr.w	r2, [r0], #4
 800027a:	bf08      	it	eq
 800027c:	f851 3b04 	ldreq.w	r3, [r1], #4
 8000280:	d00e      	beq.n	80002a0 <strcmp+0x40>
 8000282:	f08c 0c03 	eor.w	ip, ip, #3
 8000286:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800028a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800028e:	fa23 fc0c 	lsr.w	ip, r3, ip
 8000292:	f851 3b04 	ldr.w	r3, [r1], #4
 8000296:	ea42 020c 	orr.w	r2, r2, ip
 800029a:	ea43 030c 	orr.w	r3, r3, ip
 800029e:	bf00      	nop
 80002a0:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 80002a4:	429a      	cmp	r2, r3
 80002a6:	bf01      	itttt	eq
 80002a8:	ea2c 0c02 	biceq.w	ip, ip, r2
 80002ac:	f01c 3f80 	tsteq.w	ip, #2155905152	; 0x80808080
 80002b0:	f850 2b04 	ldreq.w	r2, [r0], #4
 80002b4:	f851 3b04 	ldreq.w	r3, [r1], #4
 80002b8:	d0f2      	beq.n	80002a0 <strcmp+0x40>
 80002ba:	ea4f 6002 	mov.w	r0, r2, lsl #24
 80002be:	ea4f 2212 	mov.w	r2, r2, lsr #8
 80002c2:	2801      	cmp	r0, #1
 80002c4:	bf28      	it	cs
 80002c6:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
 80002ca:	bf08      	it	eq
 80002cc:	0a1b      	lsreq	r3, r3, #8
 80002ce:	d0f4      	beq.n	80002ba <strcmp+0x5a>
 80002d0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 80002d4:	0e00      	lsrs	r0, r0, #24
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4770      	bx	lr
 80002da:	f010 0f03 	tst.w	r0, #3
 80002de:	d00a      	beq.n	80002f6 <strcmp+0x96>
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f4      	beq.n	80002da <strcmp+0x7a>
 80002f0:	eba2 0003 	sub.w	r0, r2, r3
 80002f4:	4770      	bx	lr
 80002f6:	f84d 5d04 	str.w	r5, [sp, #-4]!
 80002fa:	f850 2b04 	ldr.w	r2, [r0], #4
 80002fe:	f001 0503 	and.w	r5, r1, #3
 8000302:	f021 0103 	bic.w	r1, r1, #3
 8000306:	f851 3b04 	ldr.w	r3, [r1], #4
 800030a:	2d02      	cmp	r5, #2
 800030c:	d026      	beq.n	800035c <strcmp+0xfc>
 800030e:	d84d      	bhi.n	80003ac <strcmp+0x14c>
 8000310:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
 8000314:	ebb5 2f13 	cmp.w	r5, r3, lsr #8
 8000318:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 800031c:	ea2c 0c02 	bic.w	ip, ip, r2
 8000320:	d10d      	bne.n	800033e <strcmp+0xde>
 8000322:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
 8000326:	bf08      	it	eq
 8000328:	f851 3b04 	ldreq.w	r3, [r1], #4
 800032c:	d10a      	bne.n	8000344 <strcmp+0xe4>
 800032e:	ea85 0502 	eor.w	r5, r5, r2
 8000332:	ebb5 6f03 	cmp.w	r5, r3, lsl #24
 8000336:	d10c      	bne.n	8000352 <strcmp+0xf2>
 8000338:	f850 2b04 	ldr.w	r2, [r0], #4
 800033c:	e7e8      	b.n	8000310 <strcmp+0xb0>
 800033e:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8000342:	e05b      	b.n	80003fc <strcmp+0x19c>
 8000344:	f03c 4c7f 	bics.w	ip, ip, #4278190080	; 0xff000000
 8000348:	d154      	bne.n	80003f4 <strcmp+0x194>
 800034a:	780b      	ldrb	r3, [r1, #0]
 800034c:	ea4f 6512 	mov.w	r5, r2, lsr #24
 8000350:	e054      	b.n	80003fc <strcmp+0x19c>
 8000352:	ea4f 6512 	mov.w	r5, r2, lsr #24
 8000356:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 800035a:	e04f      	b.n	80003fc <strcmp+0x19c>
 800035c:	ea4f 4502 	mov.w	r5, r2, lsl #16
 8000360:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 8000364:	ea4f 4515 	mov.w	r5, r5, lsr #16
 8000368:	ea2c 0c02 	bic.w	ip, ip, r2
 800036c:	ebb5 4f13 	cmp.w	r5, r3, lsr #16
 8000370:	d118      	bne.n	80003a4 <strcmp+0x144>
 8000372:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
 8000376:	bf08      	it	eq
 8000378:	f851 3b04 	ldreq.w	r3, [r1], #4
 800037c:	d107      	bne.n	800038e <strcmp+0x12e>
 800037e:	ea85 0502 	eor.w	r5, r5, r2
 8000382:	ebb5 4f03 	cmp.w	r5, r3, lsl #16
 8000386:	d109      	bne.n	800039c <strcmp+0x13c>
 8000388:	f850 2b04 	ldr.w	r2, [r0], #4
 800038c:	e7e6      	b.n	800035c <strcmp+0xfc>
 800038e:	ea5f 4c0c 	movs.w	ip, ip, lsl #16
 8000392:	d12f      	bne.n	80003f4 <strcmp+0x194>
 8000394:	880b      	ldrh	r3, [r1, #0]
 8000396:	ea4f 4512 	mov.w	r5, r2, lsr #16
 800039a:	e02f      	b.n	80003fc <strcmp+0x19c>
 800039c:	ea4f 4303 	mov.w	r3, r3, lsl #16
 80003a0:	ea4f 4512 	mov.w	r5, r2, lsr #16
 80003a4:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80003a8:	e028      	b.n	80003fc <strcmp+0x19c>
 80003aa:	bf00      	nop
 80003ac:	f002 05ff 	and.w	r5, r2, #255	; 0xff
 80003b0:	ebb5 6f13 	cmp.w	r5, r3, lsr #24
 80003b4:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 80003b8:	ea2c 0c02 	bic.w	ip, ip, r2
 80003bc:	d10d      	bne.n	80003da <strcmp+0x17a>
 80003be:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
 80003c2:	bf08      	it	eq
 80003c4:	f851 3b04 	ldreq.w	r3, [r1], #4
 80003c8:	d10a      	bne.n	80003e0 <strcmp+0x180>
 80003ca:	ea85 0502 	eor.w	r5, r5, r2
 80003ce:	ebb5 2f03 	cmp.w	r5, r3, lsl #8
 80003d2:	d10a      	bne.n	80003ea <strcmp+0x18a>
 80003d4:	f850 2b04 	ldr.w	r2, [r0], #4
 80003d8:	e7e8      	b.n	80003ac <strcmp+0x14c>
 80003da:	ea4f 6313 	mov.w	r3, r3, lsr #24
 80003de:	e00d      	b.n	80003fc <strcmp+0x19c>
 80003e0:	f012 0fff 	tst.w	r2, #255	; 0xff
 80003e4:	d006      	beq.n	80003f4 <strcmp+0x194>
 80003e6:	f851 3b04 	ldr.w	r3, [r1], #4
 80003ea:	ea4f 2512 	mov.w	r5, r2, lsr #8
 80003ee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80003f2:	e003      	b.n	80003fc <strcmp+0x19c>
 80003f4:	f04f 0000 	mov.w	r0, #0
 80003f8:	bc20      	pop	{r5}
 80003fa:	4770      	bx	lr
 80003fc:	f005 02ff 	and.w	r2, r5, #255	; 0xff
 8000400:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8000404:	2801      	cmp	r0, #1
 8000406:	bf28      	it	cs
 8000408:	4290      	cmpcs	r0, r2
 800040a:	bf04      	itt	eq
 800040c:	0a2d      	lsreq	r5, r5, #8
 800040e:	0a1b      	lsreq	r3, r3, #8
 8000410:	d0f4      	beq.n	80003fc <strcmp+0x19c>
 8000412:	eba2 0000 	sub.w	r0, r2, r0
 8000416:	bc20      	pop	{r5}
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	0000      	movs	r0, r0
	...

08000420 <mtx5_setup.lto_priv.127>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000420:	4b02      	ldr	r3, [pc, #8]	; (800042c <mtx5_setup.lto_priv.127+0xc>)
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 8000422:	2200      	movs	r2, #0
 8000424:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8000426:	605b      	str	r3, [r3, #4]
 8000428:	609a      	str	r2, [r3, #8]
 800042a:	4770      	bx	lr
 800042c:	20000824 	.word	0x20000824

08000430 <mtx4_setup.lto_priv.125>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000430:	4a04      	ldr	r2, [pc, #16]	; (8000444 <mtx4_setup.lto_priv.125+0x14>)
 8000432:	4b05      	ldr	r3, [pc, #20]	; (8000448 <mtx4_setup.lto_priv.125+0x18>)
 8000434:	2100      	movs	r1, #0
 8000436:	6012      	str	r2, [r2, #0]
  tqp->p_prev = (thread_t *)tqp;
 8000438:	6052      	str	r2, [r2, #4]
 800043a:	6091      	str	r1, [r2, #8]
 800043c:	6099      	str	r1, [r3, #8]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800043e:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8000440:	605b      	str	r3, [r3, #4]
 8000442:	4770      	bx	lr
 8000444:	20000824 	.word	0x20000824
 8000448:	20000834 	.word	0x20000834
 800044c:	00000000 	.word	0x00000000

08000450 <mtx1_setup.lto_priv.123>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000450:	4b02      	ldr	r3, [pc, #8]	; (800045c <mtx1_setup.lto_priv.123+0xc>)
 8000452:	2200      	movs	r2, #0
 8000454:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8000456:	605b      	str	r3, [r3, #4]
 8000458:	609a      	str	r2, [r3, #8]
 800045a:	4770      	bx	lr
 800045c:	20000824 	.word	0x20000824

08000460 <sem3_setup.lto_priv.120>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000460:	4b02      	ldr	r3, [pc, #8]	; (800046c <sem3_setup.lto_priv.120+0xc>)
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));

  queue_init(&sp->s_queue);
  sp->s_cnt = n;
 8000462:	2200      	movs	r2, #0
 8000464:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8000466:	605b      	str	r3, [r3, #4]
 8000468:	609a      	str	r2, [r3, #8]
 800046a:	4770      	bx	lr
 800046c:	200008a0 	.word	0x200008a0

08000470 <sem2_setup.lto_priv.118>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000470:	4b02      	ldr	r3, [pc, #8]	; (800047c <sem2_setup.lto_priv.118+0xc>)
 8000472:	2200      	movs	r2, #0
 8000474:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8000476:	605b      	str	r3, [r3, #4]
 8000478:	609a      	str	r2, [r3, #8]
 800047a:	4770      	bx	lr
 800047c:	200008a0 	.word	0x200008a0

08000480 <sem1_setup.lto_priv.116>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000480:	4b02      	ldr	r3, [pc, #8]	; (800048c <sem1_setup.lto_priv.116+0xc>)
 8000482:	2200      	movs	r2, #0
 8000484:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8000486:	605b      	str	r3, [r3, #4]
 8000488:	609a      	str	r2, [r3, #8]
 800048a:	4770      	bx	lr
 800048c:	200008a0 	.word	0x200008a0

08000490 <mtx4_execute.lto_priv.126>:
  chThdSleepMilliseconds(150);
  chMtxLock(&m1);
  chMtxUnlock(&m1);
}

static void mtx4_execute(void) {
 8000490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8000494:	4d84      	ldr	r5, [pc, #528]	; (80006a8 <mtx4_execute.lto_priv.126+0x218>)
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 8000496:	4b85      	ldr	r3, [pc, #532]	; (80006ac <mtx4_execute.lto_priv.126+0x21c>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8000498:	69aa      	ldr	r2, [r5, #24]
  chThdSleepMilliseconds(150);
  chMtxLock(&m1);
  chMtxUnlock(&m1);
}

static void mtx4_execute(void) {
 800049a:	b082      	sub	sp, #8
 800049c:	6894      	ldr	r4, [r2, #8]
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 800049e:	f44f 71a4 	mov.w	r1, #328	; 0x148

static void mtx4_execute(void) {
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
 80004a2:	1c67      	adds	r7, r4, #1
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 80004a4:	463a      	mov	r2, r7
 80004a6:	9300      	str	r3, [sp, #0]
 80004a8:	4881      	ldr	r0, [pc, #516]	; (80006b0 <mtx4_execute.lto_priv.126+0x220>)
 80004aa:	4b82      	ldr	r3, [pc, #520]	; (80006b4 <mtx4_execute.lto_priv.126+0x224>)
 80004ac:	f001 f880 	bl	80015b0 <chThdCreateStatic>
 80004b0:	4e81      	ldr	r6, [pc, #516]	; (80006b8 <mtx4_execute.lto_priv.126+0x228>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "A");
 80004b2:	4b82      	ldr	r3, [pc, #520]	; (80006bc <mtx4_execute.lto_priv.126+0x22c>)
static void mtx4_execute(void) {
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
  p2 = p + 2;
 80004b4:	f104 0802 	add.w	r8, r4, #2
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 80004b8:	6030      	str	r0, [r6, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "A");
 80004ba:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80004be:	4642      	mov	r2, r8
 80004c0:	9300      	str	r3, [sp, #0]
 80004c2:	487f      	ldr	r0, [pc, #508]	; (80006c0 <mtx4_execute.lto_priv.126+0x230>)
 80004c4:	4b7f      	ldr	r3, [pc, #508]	; (80006c4 <mtx4_execute.lto_priv.126+0x234>)
 80004c6:	f001 f873 	bl	80015b0 <chThdCreateStatic>
 80004ca:	6070      	str	r0, [r6, #4]
  chMtxLock(&m2);
 80004cc:	487e      	ldr	r0, [pc, #504]	; (80006c8 <mtx4_execute.lto_priv.126+0x238>)
 80004ce:	f001 fabf 	bl	8001a50 <chMtxLock>
 80004d2:	69ab      	ldr	r3, [r5, #24]
  test_assert(1, chThdGetPriorityX() == p, "wrong priority level");
 80004d4:	2001      	movs	r0, #1
 80004d6:	6899      	ldr	r1, [r3, #8]
 80004d8:	1a61      	subs	r1, r4, r1
 80004da:	fab1 f181 	clz	r1, r1
 80004de:	0949      	lsrs	r1, r1, #5
 80004e0:	f002 fe6e 	bl	80031c0 <_test_assert>
 80004e4:	b110      	cbz	r0, 80004ec <mtx4_execute.lto_priv.126+0x5c>
  chThdSleepMilliseconds(100);
  test_assert(13, chThdGetPriorityX() == p1, "wrong priority level");
  chMtxUnlockAll();
  test_assert(14, chThdGetPriorityX() == p, "wrong priority level");
  test_wait_threads();
}
 80004e6:	b002      	add	sp, #8
 80004e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "A");
  chMtxLock(&m2);
  test_assert(1, chThdGetPriorityX() == p, "wrong priority level");
  chThdSleepMilliseconds(100);
 80004ec:	20c8      	movs	r0, #200	; 0xc8
 80004ee:	f001 fca7 	bl	8001e40 <chThdSleep>
 80004f2:	69ab      	ldr	r3, [r5, #24]
  test_assert(2, chThdGetPriorityX() == p1, "wrong priority level");
 80004f4:	2002      	movs	r0, #2
 80004f6:	6899      	ldr	r1, [r3, #8]
 80004f8:	1a79      	subs	r1, r7, r1
 80004fa:	fab1 f181 	clz	r1, r1
 80004fe:	0949      	lsrs	r1, r1, #5
 8000500:	f002 fe5e 	bl	80031c0 <_test_assert>
 8000504:	2800      	cmp	r0, #0
 8000506:	d1ee      	bne.n	80004e6 <mtx4_execute.lto_priv.126+0x56>
  chMtxLock(&m1);
 8000508:	4870      	ldr	r0, [pc, #448]	; (80006cc <mtx4_execute.lto_priv.126+0x23c>)
 800050a:	f001 faa1 	bl	8001a50 <chMtxLock>
 800050e:	69ab      	ldr	r3, [r5, #24]
  test_assert(3, chThdGetPriorityX() == p1, "wrong priority level");
 8000510:	2003      	movs	r0, #3
 8000512:	6899      	ldr	r1, [r3, #8]
 8000514:	1a79      	subs	r1, r7, r1
 8000516:	fab1 f181 	clz	r1, r1
 800051a:	0949      	lsrs	r1, r1, #5
 800051c:	f002 fe50 	bl	80031c0 <_test_assert>
 8000520:	2800      	cmp	r0, #0
 8000522:	d1e0      	bne.n	80004e6 <mtx4_execute.lto_priv.126+0x56>
  chThdSleepMilliseconds(100);
 8000524:	20c8      	movs	r0, #200	; 0xc8
 8000526:	f001 fc8b 	bl	8001e40 <chThdSleep>
 800052a:	69ab      	ldr	r3, [r5, #24]
  test_assert(4, chThdGetPriorityX() == p2, "wrong priority level");
 800052c:	2004      	movs	r0, #4
 800052e:	6899      	ldr	r1, [r3, #8]
 8000530:	ebc1 0108 	rsb	r1, r1, r8
 8000534:	fab1 f181 	clz	r1, r1
 8000538:	0949      	lsrs	r1, r1, #5
 800053a:	f002 fe41 	bl	80031c0 <_test_assert>
 800053e:	2800      	cmp	r0, #0
 8000540:	d1d1      	bne.n	80004e6 <mtx4_execute.lto_priv.126+0x56>
  chMtxUnlock(&m1);
 8000542:	4862      	ldr	r0, [pc, #392]	; (80006cc <mtx4_execute.lto_priv.126+0x23c>)
 8000544:	f001 f9e4 	bl	8001910 <chMtxUnlock>
 8000548:	69ab      	ldr	r3, [r5, #24]
  test_assert(5, chThdGetPriorityX() == p1, "wrong priority level");
 800054a:	2005      	movs	r0, #5
 800054c:	6899      	ldr	r1, [r3, #8]
 800054e:	1a79      	subs	r1, r7, r1
 8000550:	fab1 f181 	clz	r1, r1
 8000554:	0949      	lsrs	r1, r1, #5
 8000556:	f002 fe33 	bl	80031c0 <_test_assert>
 800055a:	2800      	cmp	r0, #0
 800055c:	d1c3      	bne.n	80004e6 <mtx4_execute.lto_priv.126+0x56>
  chThdSleepMilliseconds(100);
 800055e:	20c8      	movs	r0, #200	; 0xc8
 8000560:	f001 fc6e 	bl	8001e40 <chThdSleep>
 8000564:	69ab      	ldr	r3, [r5, #24]
  test_assert(6, chThdGetPriorityX() == p1, "wrong priority level");
 8000566:	2006      	movs	r0, #6
 8000568:	6899      	ldr	r1, [r3, #8]
 800056a:	1a79      	subs	r1, r7, r1
 800056c:	fab1 f181 	clz	r1, r1
 8000570:	0949      	lsrs	r1, r1, #5
 8000572:	f002 fe25 	bl	80031c0 <_test_assert>
 8000576:	2800      	cmp	r0, #0
 8000578:	d1b5      	bne.n	80004e6 <mtx4_execute.lto_priv.126+0x56>
  chMtxUnlockAll();
 800057a:	f001 f971 	bl	8001860 <chMtxUnlockAll>
 800057e:	69ab      	ldr	r3, [r5, #24]
  test_assert(7, chThdGetPriorityX() == p, "wrong priority level");
 8000580:	2007      	movs	r0, #7
 8000582:	6899      	ldr	r1, [r3, #8]
 8000584:	1a61      	subs	r1, r4, r1
 8000586:	fab1 f181 	clz	r1, r1
 800058a:	0949      	lsrs	r1, r1, #5
 800058c:	f002 fe18 	bl	80031c0 <_test_assert>
 8000590:	2800      	cmp	r0, #0
 8000592:	d1a8      	bne.n	80004e6 <mtx4_execute.lto_priv.126+0x56>
  test_wait_threads();
 8000594:	f002 fd94 	bl	80030c0 <test_wait_threads>

  /* Test repeated in order to cover chMtxUnlockS().*/
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "D");
 8000598:	4b4d      	ldr	r3, [pc, #308]	; (80006d0 <mtx4_execute.lto_priv.126+0x240>)
 800059a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800059e:	9300      	str	r3, [sp, #0]
 80005a0:	463a      	mov	r2, r7
 80005a2:	4b44      	ldr	r3, [pc, #272]	; (80006b4 <mtx4_execute.lto_priv.126+0x224>)
 80005a4:	4842      	ldr	r0, [pc, #264]	; (80006b0 <mtx4_execute.lto_priv.126+0x220>)
 80005a6:	f001 f803 	bl	80015b0 <chThdCreateStatic>
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "C");
 80005aa:	4b4a      	ldr	r3, [pc, #296]	; (80006d4 <mtx4_execute.lto_priv.126+0x244>)
  chMtxUnlockAll();
  test_assert(7, chThdGetPriorityX() == p, "wrong priority level");
  test_wait_threads();

  /* Test repeated in order to cover chMtxUnlockS().*/
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "D");
 80005ac:	6030      	str	r0, [r6, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "C");
 80005ae:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	4642      	mov	r2, r8
 80005b6:	4b43      	ldr	r3, [pc, #268]	; (80006c4 <mtx4_execute.lto_priv.126+0x234>)
 80005b8:	4841      	ldr	r0, [pc, #260]	; (80006c0 <mtx4_execute.lto_priv.126+0x230>)
 80005ba:	f000 fff9 	bl	80015b0 <chThdCreateStatic>
 80005be:	6070      	str	r0, [r6, #4]
  chMtxLock(&m2);
 80005c0:	4841      	ldr	r0, [pc, #260]	; (80006c8 <mtx4_execute.lto_priv.126+0x238>)
 80005c2:	f001 fa45 	bl	8001a50 <chMtxLock>
 80005c6:	69ab      	ldr	r3, [r5, #24]
  test_assert(8, chThdGetPriorityX() == p, "wrong priority level");
 80005c8:	2008      	movs	r0, #8
 80005ca:	6899      	ldr	r1, [r3, #8]
 80005cc:	1a61      	subs	r1, r4, r1
 80005ce:	fab1 f181 	clz	r1, r1
 80005d2:	0949      	lsrs	r1, r1, #5
 80005d4:	f002 fdf4 	bl	80031c0 <_test_assert>
 80005d8:	2800      	cmp	r0, #0
 80005da:	d184      	bne.n	80004e6 <mtx4_execute.lto_priv.126+0x56>
  chThdSleepMilliseconds(100);
 80005dc:	20c8      	movs	r0, #200	; 0xc8
 80005de:	f001 fc2f 	bl	8001e40 <chThdSleep>
 80005e2:	69ab      	ldr	r3, [r5, #24]
  test_assert(9, chThdGetPriorityX() == p1, "wrong priority level");
 80005e4:	2009      	movs	r0, #9
 80005e6:	6899      	ldr	r1, [r3, #8]
 80005e8:	1a7b      	subs	r3, r7, r1
 80005ea:	4259      	negs	r1, r3
 80005ec:	4159      	adcs	r1, r3
 80005ee:	f002 fde7 	bl	80031c0 <_test_assert>
 80005f2:	2800      	cmp	r0, #0
 80005f4:	f47f af77 	bne.w	80004e6 <mtx4_execute.lto_priv.126+0x56>
  chMtxLock(&m1);
 80005f8:	4834      	ldr	r0, [pc, #208]	; (80006cc <mtx4_execute.lto_priv.126+0x23c>)
 80005fa:	f001 fa29 	bl	8001a50 <chMtxLock>
 80005fe:	69ab      	ldr	r3, [r5, #24]
  test_assert(10, chThdGetPriorityX() == p1, "wrong priority level");
 8000600:	200a      	movs	r0, #10
 8000602:	6899      	ldr	r1, [r3, #8]
 8000604:	ebc1 0c07 	rsb	ip, r1, r7
 8000608:	f1dc 0100 	rsbs	r1, ip, #0
 800060c:	eb41 010c 	adc.w	r1, r1, ip
 8000610:	f002 fdd6 	bl	80031c0 <_test_assert>
 8000614:	2800      	cmp	r0, #0
 8000616:	f47f af66 	bne.w	80004e6 <mtx4_execute.lto_priv.126+0x56>
  chThdSleepMilliseconds(100);
 800061a:	20c8      	movs	r0, #200	; 0xc8
 800061c:	f001 fc10 	bl	8001e40 <chThdSleep>
 8000620:	69ab      	ldr	r3, [r5, #24]
  test_assert(11, chThdGetPriorityX() == p2, "wrong priority level");
 8000622:	200b      	movs	r0, #11
 8000624:	6899      	ldr	r1, [r3, #8]
 8000626:	ebc1 0e08 	rsb	lr, r1, r8
 800062a:	f1de 0100 	rsbs	r1, lr, #0
 800062e:	eb41 010e 	adc.w	r1, r1, lr
 8000632:	f002 fdc5 	bl	80031c0 <_test_assert>
 8000636:	4606      	mov	r6, r0
 8000638:	2800      	cmp	r0, #0
 800063a:	f47f af54 	bne.w	80004e6 <mtx4_execute.lto_priv.126+0x56>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800063e:	2320      	movs	r3, #32
 8000640:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chMtxUnlockS(&m1);
 8000644:	4821      	ldr	r0, [pc, #132]	; (80006cc <mtx4_execute.lto_priv.126+0x23c>)
 8000646:	f001 f93b 	bl	80018c0 <chMtxUnlockS>
  chSchRescheduleS();
 800064a:	f000 fef1 	bl	8001430 <chSchRescheduleS>
 800064e:	f386 8811 	msr	BASEPRI, r6
 8000652:	69ab      	ldr	r3, [r5, #24]
  chSysUnlock();
  test_assert(12, chThdGetPriorityX() == p1, "wrong priority level");
 8000654:	200c      	movs	r0, #12
 8000656:	6899      	ldr	r1, [r3, #8]
 8000658:	1a7e      	subs	r6, r7, r1
 800065a:	4271      	negs	r1, r6
 800065c:	4171      	adcs	r1, r6
 800065e:	f002 fdaf 	bl	80031c0 <_test_assert>
 8000662:	2800      	cmp	r0, #0
 8000664:	f47f af3f 	bne.w	80004e6 <mtx4_execute.lto_priv.126+0x56>
  chThdSleepMilliseconds(100);
 8000668:	20c8      	movs	r0, #200	; 0xc8
 800066a:	f001 fbe9 	bl	8001e40 <chThdSleep>
 800066e:	69ab      	ldr	r3, [r5, #24]
  test_assert(13, chThdGetPriorityX() == p1, "wrong priority level");
 8000670:	200d      	movs	r0, #13
 8000672:	6899      	ldr	r1, [r3, #8]
 8000674:	1a7a      	subs	r2, r7, r1
 8000676:	4251      	negs	r1, r2
 8000678:	4151      	adcs	r1, r2
 800067a:	f002 fda1 	bl	80031c0 <_test_assert>
 800067e:	2800      	cmp	r0, #0
 8000680:	f47f af31 	bne.w	80004e6 <mtx4_execute.lto_priv.126+0x56>
  chMtxUnlockAll();
 8000684:	f001 f8ec 	bl	8001860 <chMtxUnlockAll>
 8000688:	69ab      	ldr	r3, [r5, #24]
  test_assert(14, chThdGetPriorityX() == p, "wrong priority level");
 800068a:	200e      	movs	r0, #14
 800068c:	6899      	ldr	r1, [r3, #8]
 800068e:	1a63      	subs	r3, r4, r1
 8000690:	4259      	negs	r1, r3
 8000692:	4159      	adcs	r1, r3
 8000694:	f002 fd94 	bl	80031c0 <_test_assert>
 8000698:	2800      	cmp	r0, #0
 800069a:	f47f af24 	bne.w	80004e6 <mtx4_execute.lto_priv.126+0x56>
  test_wait_threads();
}
 800069e:	b002      	add	sp, #8
 80006a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  test_assert(12, chThdGetPriorityX() == p1, "wrong priority level");
  chThdSleepMilliseconds(100);
  test_assert(13, chThdGetPriorityX() == p1, "wrong priority level");
  chMtxUnlockAll();
  test_assert(14, chThdGetPriorityX() == p, "wrong priority level");
  test_wait_threads();
 80006a4:	f002 bd0c 	b.w	80030c0 <test_wait_threads>
 80006a8:	20001098 	.word	0x20001098
 80006ac:	08006930 	.word	0x08006930
 80006b0:	20000a30 	.word	0x20000a30
 80006b4:	080006e1 	.word	0x080006e1
 80006b8:	20000a04 	.word	0x20000a04
 80006bc:	08006934 	.word	0x08006934
 80006c0:	20000b78 	.word	0x20000b78
 80006c4:	08000701 	.word	0x08000701
 80006c8:	20000834 	.word	0x20000834
 80006cc:	20000824 	.word	0x20000824
 80006d0:	08007948 	.word	0x08007948
 80006d4:	08006938 	.word	0x08006938
	...

080006e0 <thread4a>:

  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}

static THD_FUNCTION(thread4a, p) {
 80006e0:	b510      	push	{r4, lr}

  (void)p;
  chThdSleepMilliseconds(50);
  chMtxLock(&m2);
 80006e2:	4c06      	ldr	r4, [pc, #24]	; (80006fc <thread4a+0x1c>)
}

static THD_FUNCTION(thread4a, p) {

  (void)p;
  chThdSleepMilliseconds(50);
 80006e4:	2064      	movs	r0, #100	; 0x64
 80006e6:	f001 fbab 	bl	8001e40 <chThdSleep>
  chMtxLock(&m2);
 80006ea:	4620      	mov	r0, r4
 80006ec:	f001 f9b0 	bl	8001a50 <chMtxLock>
  chMtxUnlock(&m2);
 80006f0:	4620      	mov	r0, r4
}
 80006f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static THD_FUNCTION(thread4a, p) {

  (void)p;
  chThdSleepMilliseconds(50);
  chMtxLock(&m2);
  chMtxUnlock(&m2);
 80006f6:	f001 b90b 	b.w	8001910 <chMtxUnlock>
 80006fa:	bf00      	nop
 80006fc:	20000834 	.word	0x20000834

08000700 <thread4b>:
}

static THD_FUNCTION(thread4b, p) {
 8000700:	b510      	push	{r4, lr}

  (void)p;
  chThdSleepMilliseconds(150);
  chMtxLock(&m1);
 8000702:	4c06      	ldr	r4, [pc, #24]	; (800071c <thread4b+0x1c>)
}

static THD_FUNCTION(thread4b, p) {

  (void)p;
  chThdSleepMilliseconds(150);
 8000704:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000708:	f001 fb9a 	bl	8001e40 <chThdSleep>
  chMtxLock(&m1);
 800070c:	4620      	mov	r0, r4
 800070e:	f001 f99f 	bl	8001a50 <chMtxLock>
  chMtxUnlock(&m1);
 8000712:	4620      	mov	r0, r4
}
 8000714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static THD_FUNCTION(thread4b, p) {

  (void)p;
  chThdSleepMilliseconds(150);
  chMtxLock(&m1);
  chMtxUnlock(&m1);
 8000718:	f001 b8fa 	b.w	8001910 <chMtxUnlock>
 800071c:	20000824 	.word	0x20000824

08000720 <mtx1_execute.lto_priv.124>:
  chMtxLock(&m1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
}

static void mtx1_execute(void) {
 8000720:	b570      	push	{r4, r5, r6, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8000722:	4e29      	ldr	r6, [pc, #164]	; (80007c8 <mtx1_execute.lto_priv.124+0xa8>)
 8000724:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8000726:	69b3      	ldr	r3, [r6, #24]

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
 8000728:	4828      	ldr	r0, [pc, #160]	; (80007cc <mtx1_execute.lto_priv.124+0xac>)
 800072a:	689c      	ldr	r4, [r3, #8]
 800072c:	f001 f990 	bl	8001a50 <chMtxLock>
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8000730:	4b27      	ldr	r3, [pc, #156]	; (80007d0 <mtx1_execute.lto_priv.124+0xb0>)
 8000732:	1c62      	adds	r2, r4, #1
 8000734:	9300      	str	r3, [sp, #0]
 8000736:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800073a:	4b26      	ldr	r3, [pc, #152]	; (80007d4 <mtx1_execute.lto_priv.124+0xb4>)
 800073c:	4826      	ldr	r0, [pc, #152]	; (80007d8 <mtx1_execute.lto_priv.124+0xb8>)
 800073e:	f000 ff37 	bl	80015b0 <chThdCreateStatic>
 8000742:	4d26      	ldr	r5, [pc, #152]	; (80007dc <mtx1_execute.lto_priv.124+0xbc>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8000744:	4b26      	ldr	r3, [pc, #152]	; (80007e0 <mtx1_execute.lto_priv.124+0xc0>)

static void mtx1_execute(void) {

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8000746:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8000748:	1ca2      	adds	r2, r4, #2
 800074a:	9300      	str	r3, [sp, #0]
 800074c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000750:	4b20      	ldr	r3, [pc, #128]	; (80007d4 <mtx1_execute.lto_priv.124+0xb4>)
 8000752:	4824      	ldr	r0, [pc, #144]	; (80007e4 <mtx1_execute.lto_priv.124+0xc4>)
 8000754:	f000 ff2c 	bl	80015b0 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8000758:	4b23      	ldr	r3, [pc, #140]	; (80007e8 <mtx1_execute.lto_priv.124+0xc8>)
static void mtx1_execute(void) {

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 800075a:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 800075c:	1ce2      	adds	r2, r4, #3
 800075e:	9300      	str	r3, [sp, #0]
 8000760:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000764:	4b1b      	ldr	r3, [pc, #108]	; (80007d4 <mtx1_execute.lto_priv.124+0xb4>)
 8000766:	4821      	ldr	r0, [pc, #132]	; (80007ec <mtx1_execute.lto_priv.124+0xcc>)
 8000768:	f000 ff22 	bl	80015b0 <chThdCreateStatic>
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 800076c:	4b20      	ldr	r3, [pc, #128]	; (80007f0 <mtx1_execute.lto_priv.124+0xd0>)

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 800076e:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8000770:	1d22      	adds	r2, r4, #4
 8000772:	9300      	str	r3, [sp, #0]
 8000774:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000778:	4b16      	ldr	r3, [pc, #88]	; (80007d4 <mtx1_execute.lto_priv.124+0xb4>)
 800077a:	481e      	ldr	r0, [pc, #120]	; (80007f4 <mtx1_execute.lto_priv.124+0xd4>)
 800077c:	f000 ff18 	bl	80015b0 <chThdCreateStatic>
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8000780:	4b1d      	ldr	r3, [pc, #116]	; (80007f8 <mtx1_execute.lto_priv.124+0xd8>)
 8000782:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000786:	1d62      	adds	r2, r4, #5
  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8000788:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 800078a:	9300      	str	r3, [sp, #0]
 800078c:	481b      	ldr	r0, [pc, #108]	; (80007fc <mtx1_execute.lto_priv.124+0xdc>)
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <mtx1_execute.lto_priv.124+0xb4>)
 8000790:	f000 ff0e 	bl	80015b0 <chThdCreateStatic>
 8000794:	6128      	str	r0, [r5, #16]
  chMtxUnlock(&m1);
 8000796:	480d      	ldr	r0, [pc, #52]	; (80007cc <mtx1_execute.lto_priv.124+0xac>)
 8000798:	f001 f8ba 	bl	8001910 <chMtxUnlock>
  test_wait_threads();
 800079c:	f002 fc90 	bl	80030c0 <test_wait_threads>
 80007a0:	69b3      	ldr	r3, [r6, #24]
  test_assert(1, prio == chThdGetPriorityX(), "wrong priority level");
 80007a2:	2001      	movs	r0, #1
 80007a4:	6899      	ldr	r1, [r3, #8]
 80007a6:	1a61      	subs	r1, r4, r1
 80007a8:	fab1 f181 	clz	r1, r1
 80007ac:	0949      	lsrs	r1, r1, #5
 80007ae:	f002 fd07 	bl	80031c0 <_test_assert>
 80007b2:	b108      	cbz	r0, 80007b8 <mtx1_execute.lto_priv.124+0x98>
  test_assert_sequence(2, "ABCDE");
}
 80007b4:	b002      	add	sp, #8
 80007b6:	bd70      	pop	{r4, r5, r6, pc}
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
  chMtxUnlock(&m1);
  test_wait_threads();
  test_assert(1, prio == chThdGetPriorityX(), "wrong priority level");
  test_assert_sequence(2, "ABCDE");
 80007b8:	4911      	ldr	r1, [pc, #68]	; (8000800 <mtx1_execute.lto_priv.124+0xe0>)
 80007ba:	2002      	movs	r0, #2
}
 80007bc:	b002      	add	sp, #8
 80007be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
  chMtxUnlock(&m1);
  test_wait_threads();
  test_assert(1, prio == chThdGetPriorityX(), "wrong priority level");
  test_assert_sequence(2, "ABCDE");
 80007c2:	f002 bcd5 	b.w	8003170 <_test_assert_sequence>
 80007c6:	bf00      	nop
 80007c8:	20001098 	.word	0x20001098
 80007cc:	20000824 	.word	0x20000824
 80007d0:	08006940 	.word	0x08006940
 80007d4:	080008e1 	.word	0x080008e1
 80007d8:	20000a30 	.word	0x20000a30
 80007dc:	20000a04 	.word	0x20000a04
 80007e0:	08007948 	.word	0x08007948
 80007e4:	20000b78 	.word	0x20000b78
 80007e8:	08006938 	.word	0x08006938
 80007ec:	20000cc0 	.word	0x20000cc0
 80007f0:	08006930 	.word	0x08006930
 80007f4:	20000e08 	.word	0x20000e08
 80007f8:	08006934 	.word	0x08006934
 80007fc:	20000f50 	.word	0x20000f50
 8000800:	0800693c 	.word	0x0800693c
	...

08000810 <thd1_execute.lto_priv.112>:
static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
}

static void thd1_execute(void) {
 8000810:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8000812:	4f27      	ldr	r7, [pc, #156]	; (80008b0 <thd1_execute.lto_priv.112+0xa0>)

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8000814:	4e27      	ldr	r6, [pc, #156]	; (80008b4 <thd1_execute.lto_priv.112+0xa4>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8000816:	69bb      	ldr	r3, [r7, #24]
 8000818:	4d27      	ldr	r5, [pc, #156]	; (80008b8 <thd1_execute.lto_priv.112+0xa8>)
 800081a:	689a      	ldr	r2, [r3, #8]
 800081c:	4927      	ldr	r1, [pc, #156]	; (80008bc <thd1_execute.lto_priv.112+0xac>)
static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
}

static void thd1_execute(void) {
 800081e:	b083      	sub	sp, #12

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8000820:	462b      	mov	r3, r5
 8000822:	9100      	str	r1, [sp, #0]
 8000824:	3a05      	subs	r2, #5
 8000826:	4630      	mov	r0, r6
 8000828:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800082c:	f000 fec0 	bl	80015b0 <chThdCreateStatic>
 8000830:	69bb      	ldr	r3, [r7, #24]
 8000832:	4c23      	ldr	r4, [pc, #140]	; (80008c0 <thd1_execute.lto_priv.112+0xb0>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8000834:	689a      	ldr	r2, [r3, #8]
 8000836:	4923      	ldr	r1, [pc, #140]	; (80008c4 <thd1_execute.lto_priv.112+0xb4>)
  test_emit_token(*(char *)p);
}

static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8000838:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 800083a:	462b      	mov	r3, r5
 800083c:	9100      	str	r1, [sp, #0]
 800083e:	3a04      	subs	r2, #4
 8000840:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 8000844:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000848:	f000 feb2 	bl	80015b0 <chThdCreateStatic>
 800084c:	69bb      	ldr	r3, [r7, #24]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 800084e:	491e      	ldr	r1, [pc, #120]	; (80008c8 <thd1_execute.lto_priv.112+0xb8>)
 8000850:	689a      	ldr	r2, [r3, #8]
}

static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8000852:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8000854:	462b      	mov	r3, r5
 8000856:	9100      	str	r1, [sp, #0]
 8000858:	3a03      	subs	r2, #3
 800085a:	f506 7024 	add.w	r0, r6, #656	; 0x290
 800085e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000862:	f000 fea5 	bl	80015b0 <chThdCreateStatic>
 8000866:	69bb      	ldr	r3, [r7, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8000868:	4918      	ldr	r1, [pc, #96]	; (80008cc <thd1_execute.lto_priv.112+0xbc>)
 800086a:	689a      	ldr	r2, [r3, #8]

static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 800086c:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 800086e:	462b      	mov	r3, r5
 8000870:	9100      	str	r1, [sp, #0]
 8000872:	3a02      	subs	r2, #2
 8000874:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 8000878:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800087c:	f000 fe98 	bl	80015b0 <chThdCreateStatic>
 8000880:	69bb      	ldr	r3, [r7, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8000882:	4913      	ldr	r1, [pc, #76]	; (80008d0 <thd1_execute.lto_priv.112+0xc0>)
 8000884:	689a      	ldr	r2, [r3, #8]
static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8000886:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8000888:	3a01      	subs	r2, #1
 800088a:	462b      	mov	r3, r5
 800088c:	9100      	str	r1, [sp, #0]
 800088e:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 8000892:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000896:	f000 fe8b 	bl	80015b0 <chThdCreateStatic>
 800089a:	6120      	str	r0, [r4, #16]
  test_wait_threads();
 800089c:	f002 fc10 	bl	80030c0 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 80008a0:	490c      	ldr	r1, [pc, #48]	; (80008d4 <thd1_execute.lto_priv.112+0xc4>)
 80008a2:	2001      	movs	r0, #1
}
 80008a4:	b003      	add	sp, #12
 80008a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 80008aa:	f002 bc61 	b.w	8003170 <_test_assert_sequence>
 80008ae:	bf00      	nop
 80008b0:	20001098 	.word	0x20001098
 80008b4:	20000a30 	.word	0x20000a30
 80008b8:	08003221 	.word	0x08003221
 80008bc:	08006940 	.word	0x08006940
 80008c0:	20000a04 	.word	0x20000a04
 80008c4:	08007948 	.word	0x08007948
 80008c8:	08006938 	.word	0x08006938
 80008cc:	08006930 	.word	0x08006930
 80008d0:	08006934 	.word	0x08006934
 80008d4:	0800693c 	.word	0x0800693c
	...

080008e0 <thread1.lto_priv.105>:
static void mtx1_setup(void) {

  chMtxObjectInit(&m1);
}

static THD_FUNCTION(thread1, p) {
 80008e0:	b538      	push	{r3, r4, r5, lr}
 80008e2:	4605      	mov	r5, r0

  chMtxLock(&m1);
 80008e4:	4c05      	ldr	r4, [pc, #20]	; (80008fc <thread1.lto_priv.105+0x1c>)
 80008e6:	4620      	mov	r0, r4
 80008e8:	f001 f8b2 	bl	8001a50 <chMtxLock>
  test_emit_token(*(char *)p);
 80008ec:	7828      	ldrb	r0, [r5, #0]
 80008ee:	f002 fc7f 	bl	80031f0 <test_emit_token>
  chMtxUnlock(&m1);
 80008f2:	4620      	mov	r0, r4
}
 80008f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

static THD_FUNCTION(thread1, p) {

  chMtxLock(&m1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
 80008f8:	f001 b80a 	b.w	8001910 <chMtxUnlock>
 80008fc:	20000824 	.word	0x20000824

08000900 <thread1.lto_priv.104>:
static void sem1_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static THD_FUNCTION(thread1, p) {
 8000900:	b510      	push	{r4, lr}
 8000902:	4604      	mov	r4, r0

  chSemWait(&sem1);
 8000904:	4803      	ldr	r0, [pc, #12]	; (8000914 <thread1.lto_priv.104+0x14>)
 8000906:	f000 fecb 	bl	80016a0 <chSemWait>
  test_emit_token(*(char *)p);
 800090a:	7820      	ldrb	r0, [r4, #0]
}
 800090c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static THD_FUNCTION(thread1, p) {

  chSemWait(&sem1);
  test_emit_token(*(char *)p);
 8000910:	f002 bc6e 	b.w	80031f0 <test_emit_token>
 8000914:	200008a0 	.word	0x200008a0
	...

08000920 <thread4>:
 * <h2>Description</h2>
 * This test case tests the binary semaphores functionality. The test both
 * checks the binary semaphore status and the expected status of the underlying
 * counting semaphore.
 */
static THD_FUNCTION(thread4, p) {
 8000920:	b508      	push	{r3, lr}
 8000922:	2220      	movs	r2, #32
 8000924:	f382 8811 	msr	BASEPRI, r2
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
 8000928:	6883      	ldr	r3, [r0, #8]
 800092a:	2b00      	cmp	r3, #0
 800092c:	dd05      	ble.n	800093a <thread4+0x1a>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 800092e:	f000 fd7f 	bl	8001430 <chSchRescheduleS>
 8000932:	2300      	movs	r3, #0
 8000934:	f383 8811 	msr	BASEPRI, r3
 8000938:	bd08      	pop	{r3, pc}
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
    chSemSignalI(&bsp->bs_sem);
 800093a:	f001 f899 	bl	8001a70 <chSemSignalI>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 800093e:	f000 fd77 	bl	8001430 <chSchRescheduleS>
 8000942:	2300      	movs	r3, #0
 8000944:	f383 8811 	msr	BASEPRI, r3
 8000948:	bd08      	pop	{r3, pc}
 800094a:	bf00      	nop
 800094c:	0000      	movs	r0, r0
	...

08000950 <thread2>:
static void sem2_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static THD_FUNCTION(thread2, p) {
 8000950:	b508      	push	{r3, lr}

  (void)p;
  chThdSleepMilliseconds(50);
 8000952:	2064      	movs	r0, #100	; 0x64
 8000954:	f001 fa74 	bl	8001e40 <chThdSleep>
 8000958:	2320      	movs	r3, #32
 800095a:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chSemSignalI(&sem1); /* For coverage reasons */
 800095e:	4804      	ldr	r0, [pc, #16]	; (8000970 <thread2+0x20>)
 8000960:	f001 f886 	bl	8001a70 <chSemSignalI>
  chSchRescheduleS();
 8000964:	f000 fd64 	bl	8001430 <chSchRescheduleS>
 8000968:	2300      	movs	r3, #0
 800096a:	f383 8811 	msr	BASEPRI, r3
 800096e:	bd08      	pop	{r3, pc}
 8000970:	200008a0 	.word	0x200008a0
	...

08000980 <sem4_execute.lto_priv.122>:
static THD_FUNCTION(thread4, p) {

  chBSemSignal((binary_semaphore_t *)p);
}

static void sem4_execute(void) {
 8000980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000982:	b087      	sub	sp, #28
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000984:	ad03      	add	r5, sp, #12
 8000986:	2400      	movs	r4, #0
 8000988:	9503      	str	r5, [sp, #12]
  tqp->p_prev = (thread_t *)tqp;
 800098a:	9504      	str	r5, [sp, #16]
 800098c:	9405      	str	r4, [sp, #20]
 800098e:	2620      	movs	r6, #32
 8000990:	f386 8811 	msr	BASEPRI, r6
 * @api
 */
void chSemReset(semaphore_t *sp, cnt_t n) {

  chSysLock();
  chSemResetI(sp, n);
 8000994:	4628      	mov	r0, r5
 8000996:	4621      	mov	r1, r4
 8000998:	f001 f882 	bl	8001aa0 <chSemResetI>
  chSchRescheduleS();
 800099c:	f000 fd48 	bl	8001430 <chSchRescheduleS>
 80009a0:	f384 8811 	msr	BASEPRI, r4
 80009a4:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chBSemGetStateI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  return (bsp->bs_sem.s_cnt > (cnt_t)0) ? false : true;
 80009a8:	9905      	ldr	r1, [sp, #20]
  binary_semaphore_t bsem;
  
  /* Creates a taken binary semaphore.*/
  chBSemObjectInit(&bsem, TRUE);
  chBSemReset(&bsem, TRUE);
  test_assert_lock(1, chBSemGetStateI(&bsem) == TRUE, "not taken");
 80009aa:	2001      	movs	r0, #1
 80009ac:	42a1      	cmp	r1, r4
 80009ae:	bfcc      	ite	gt
 80009b0:	2100      	movgt	r1, #0
 80009b2:	2101      	movle	r1, #1
 80009b4:	f002 fc04 	bl	80031c0 <_test_assert>
 80009b8:	4607      	mov	r7, r0
 80009ba:	b118      	cbz	r0, 80009c4 <sem4_execute.lto_priv.122+0x44>
 80009bc:	f384 8811 	msr	BASEPRI, r4

  /* Checking signaling overflow, the counter must not go beyond 1.*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "taken");
  test_assert_lock(5, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
}
 80009c0:	b007      	add	sp, #28
 80009c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009c4:	f380 8811 	msr	BASEPRI, r0
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80009c8:	4b3f      	ldr	r3, [pc, #252]	; (8000ac8 <sem4_execute.lto_priv.122+0x148>)
  chBSemObjectInit(&bsem, TRUE);
  chBSemReset(&bsem, TRUE);
  test_assert_lock(1, chBSemGetStateI(&bsem) == TRUE, "not taken");

  /* Starts a signaler thread at a lower priority.*/
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 80009ca:	f44f 71a4 	mov.w	r1, #328	; 0x148
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	483e      	ldr	r0, [pc, #248]	; (8000acc <sem4_execute.lto_priv.122+0x14c>)
 80009d2:	689a      	ldr	r2, [r3, #8]
 80009d4:	4b3e      	ldr	r3, [pc, #248]	; (8000ad0 <sem4_execute.lto_priv.122+0x150>)
 80009d6:	3a01      	subs	r2, #1
 80009d8:	9500      	str	r5, [sp, #0]
 80009da:	f000 fde9 	bl	80015b0 <chThdCreateStatic>
 80009de:	4b3d      	ldr	r3, [pc, #244]	; (8000ad4 <sem4_execute.lto_priv.122+0x154>)
 80009e0:	6018      	str	r0, [r3, #0]
 *
 * @api
 */
static inline msg_t chBSemWait(binary_semaphore_t *bsp) {

  return chSemWait(&bsp->bs_sem);
 80009e2:	4628      	mov	r0, r5
 80009e4:	f000 fe5c 	bl	80016a0 <chSemWait>
 80009e8:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chBSemGetStateI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  return (bsp->bs_sem.s_cnt > (cnt_t)0) ? false : true;
 80009ec:	9905      	ldr	r1, [sp, #20]
                                 
  /* Waits to be signaled.*/
  chBSemWait(&bsem);
  
  /* The binary semaphore is expected to be taken.*/
  test_assert_lock(2, chBSemGetStateI(&bsem) == TRUE, "not taken");
 80009ee:	2002      	movs	r0, #2
 80009f0:	2900      	cmp	r1, #0
 80009f2:	bfcc      	ite	gt
 80009f4:	2100      	movgt	r1, #0
 80009f6:	2101      	movle	r1, #1
 80009f8:	f002 fbe2 	bl	80031c0 <_test_assert>
 80009fc:	b118      	cbz	r0, 8000a06 <sem4_execute.lto_priv.122+0x86>
 80009fe:	f387 8811 	msr	BASEPRI, r7

  /* Checking signaling overflow, the counter must not go beyond 1.*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "taken");
  test_assert_lock(5, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
}
 8000a02:	b007      	add	sp, #28
 8000a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a06:	f380 8811 	msr	BASEPRI, r0
 8000a0a:	f386 8811 	msr	BASEPRI, r6
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
 8000a0e:	9b05      	ldr	r3, [sp, #20]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	dd23      	ble.n	8000a5c <sem4_execute.lto_priv.122+0xdc>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 8000a14:	f000 fd0c 	bl	8001430 <chSchRescheduleS>
 8000a18:	2400      	movs	r4, #0
 8000a1a:	f384 8811 	msr	BASEPRI, r4
 8000a1e:	2720      	movs	r7, #32
 8000a20:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(2, chBSemGetStateI(&bsem) == TRUE, "not taken");

  /* Releasing it, check both the binary semaphore state and the underlying
     counter semaphore state..*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "still taken");
 8000a24:	9905      	ldr	r1, [sp, #20]
 8000a26:	2003      	movs	r0, #3
 8000a28:	42a1      	cmp	r1, r4
 8000a2a:	bfd4      	ite	le
 8000a2c:	2100      	movle	r1, #0
 8000a2e:	2101      	movgt	r1, #1
 8000a30:	f002 fbc6 	bl	80031c0 <_test_assert>
 8000a34:	4606      	mov	r6, r0
 8000a36:	2800      	cmp	r0, #0
 8000a38:	d1c0      	bne.n	80009bc <sem4_execute.lto_priv.122+0x3c>
 8000a3a:	f380 8811 	msr	BASEPRI, r0
 8000a3e:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(4, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
 8000a42:	9905      	ldr	r1, [sp, #20]
 8000a44:	2004      	movs	r0, #4
 8000a46:	f1a1 0101 	sub.w	r1, r1, #1
 8000a4a:	fab1 f181 	clz	r1, r1
 8000a4e:	0949      	lsrs	r1, r1, #5
 8000a50:	f002 fbb6 	bl	80031c0 <_test_assert>
 8000a54:	b130      	cbz	r0, 8000a64 <sem4_execute.lto_priv.122+0xe4>
 8000a56:	f386 8811 	msr	BASEPRI, r6
 8000a5a:	e7b1      	b.n	80009c0 <sem4_execute.lto_priv.122+0x40>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
    chSemSignalI(&bsp->bs_sem);
 8000a5c:	4628      	mov	r0, r5
 8000a5e:	f001 f807 	bl	8001a70 <chSemSignalI>
 8000a62:	e7d7      	b.n	8000a14 <sem4_execute.lto_priv.122+0x94>
 8000a64:	f380 8811 	msr	BASEPRI, r0
 8000a68:	f387 8811 	msr	BASEPRI, r7
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
 8000a6c:	9b05      	ldr	r3, [sp, #20]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	dd23      	ble.n	8000aba <sem4_execute.lto_priv.122+0x13a>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 8000a72:	f000 fcdd 	bl	8001430 <chSchRescheduleS>
 8000a76:	2400      	movs	r4, #0
 8000a78:	f384 8811 	msr	BASEPRI, r4
 8000a7c:	2620      	movs	r6, #32
 8000a7e:	f386 8811 	msr	BASEPRI, r6

  /* Checking signaling overflow, the counter must not go beyond 1.*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "taken");
 8000a82:	9905      	ldr	r1, [sp, #20]
 8000a84:	2003      	movs	r0, #3
 8000a86:	42a1      	cmp	r1, r4
 8000a88:	bfd4      	ite	le
 8000a8a:	2100      	movle	r1, #0
 8000a8c:	2101      	movgt	r1, #1
 8000a8e:	f002 fb97 	bl	80031c0 <_test_assert>
 8000a92:	4605      	mov	r5, r0
 8000a94:	2800      	cmp	r0, #0
 8000a96:	d191      	bne.n	80009bc <sem4_execute.lto_priv.122+0x3c>
 8000a98:	f380 8811 	msr	BASEPRI, r0
 8000a9c:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(5, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
 8000aa0:	9905      	ldr	r1, [sp, #20]
 8000aa2:	2005      	movs	r0, #5
 8000aa4:	f1a1 0101 	sub.w	r1, r1, #1
 8000aa8:	fab1 f181 	clz	r1, r1
 8000aac:	0949      	lsrs	r1, r1, #5
 8000aae:	f002 fb87 	bl	80031c0 <_test_assert>
 8000ab2:	b130      	cbz	r0, 8000ac2 <sem4_execute.lto_priv.122+0x142>
 8000ab4:	f385 8811 	msr	BASEPRI, r5
 8000ab8:	e782      	b.n	80009c0 <sem4_execute.lto_priv.122+0x40>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
    chSemSignalI(&bsp->bs_sem);
 8000aba:	4628      	mov	r0, r5
 8000abc:	f000 ffd8 	bl	8001a70 <chSemSignalI>
 8000ac0:	e7d7      	b.n	8000a72 <sem4_execute.lto_priv.122+0xf2>
 8000ac2:	f380 8811 	msr	BASEPRI, r0
 8000ac6:	e77b      	b.n	80009c0 <sem4_execute.lto_priv.122+0x40>
 8000ac8:	20001098 	.word	0x20001098
 8000acc:	20000a30 	.word	0x20000a30
 8000ad0:	08000921 	.word	0x08000921
 8000ad4:	20000a04 	.word	0x20000a04
	...

08000ae0 <sem3_execute.lto_priv.121>:
  (void)p;
  chSemWait(&sem1);
  chSemSignal(&sem1);
}

static void sem3_execute(void) {
 8000ae0:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8000ae2:	4a1e      	ldr	r2, [pc, #120]	; (8000b5c <sem3_execute.lto_priv.121+0x7c>)
 8000ae4:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8000ae6:	6992      	ldr	r2, [r2, #24]

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8000ae8:	2300      	movs	r3, #0
 8000aea:	6892      	ldr	r2, [r2, #8]
 8000aec:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000af0:	3201      	adds	r2, #1
 8000af2:	9300      	str	r3, [sp, #0]
 8000af4:	481a      	ldr	r0, [pc, #104]	; (8000b60 <sem3_execute.lto_priv.121+0x80>)
 8000af6:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <sem3_execute.lto_priv.121+0x84>)
 8000af8:	f000 fd5a 	bl	80015b0 <chThdCreateStatic>
 *
 * @notapi
 */
static inline bool queue_isempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next == (const thread_t *)tqp);
 8000afc:	4c1a      	ldr	r4, [pc, #104]	; (8000b68 <sem3_execute.lto_priv.121+0x88>)
 8000afe:	4b1b      	ldr	r3, [pc, #108]	; (8000b6c <sem3_execute.lto_priv.121+0x8c>)
 8000b00:	6018      	str	r0, [r3, #0]
  chSemSignalWait(&sem1, &sem1);
 8000b02:	f005 fc9d 	bl	8006440 <chSemSignalWait.constprop.65>
 8000b06:	6821      	ldr	r1, [r4, #0]
  test_assert(1, queue_isempty(&sem1.s_queue), "queue not empty");
 8000b08:	2001      	movs	r0, #1
 8000b0a:	1b09      	subs	r1, r1, r4
 8000b0c:	fab1 f181 	clz	r1, r1
 8000b10:	0949      	lsrs	r1, r1, #5
 8000b12:	f002 fb55 	bl	80031c0 <_test_assert>
 8000b16:	b108      	cbz	r0, 8000b1c <sem3_execute.lto_priv.121+0x3c>
  test_assert(2, sem1.s_cnt == 0, "counter not zero");

  chSemSignalWait(&sem1, &sem1);
  test_assert(3, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(4, sem1.s_cnt == 0, "counter not zero");
}
 8000b18:	b002      	add	sp, #8
 8000b1a:	bd10      	pop	{r4, pc}
static void sem3_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
  chSemSignalWait(&sem1, &sem1);
  test_assert(1, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(2, sem1.s_cnt == 0, "counter not zero");
 8000b1c:	68a1      	ldr	r1, [r4, #8]
 8000b1e:	2002      	movs	r0, #2
 8000b20:	fab1 f181 	clz	r1, r1
 8000b24:	0949      	lsrs	r1, r1, #5
 8000b26:	f002 fb4b 	bl	80031c0 <_test_assert>
 8000b2a:	2800      	cmp	r0, #0
 8000b2c:	d1f4      	bne.n	8000b18 <sem3_execute.lto_priv.121+0x38>

  chSemSignalWait(&sem1, &sem1);
 8000b2e:	f005 fc87 	bl	8006440 <chSemSignalWait.constprop.65>
 8000b32:	6821      	ldr	r1, [r4, #0]
  test_assert(3, queue_isempty(&sem1.s_queue), "queue not empty");
 8000b34:	2003      	movs	r0, #3
 8000b36:	1b09      	subs	r1, r1, r4
 8000b38:	fab1 f181 	clz	r1, r1
 8000b3c:	0949      	lsrs	r1, r1, #5
 8000b3e:	f002 fb3f 	bl	80031c0 <_test_assert>
 8000b42:	2800      	cmp	r0, #0
 8000b44:	d1e8      	bne.n	8000b18 <sem3_execute.lto_priv.121+0x38>
  test_assert(4, sem1.s_cnt == 0, "counter not zero");
 8000b46:	68a1      	ldr	r1, [r4, #8]
 8000b48:	2004      	movs	r0, #4
 8000b4a:	fab1 f181 	clz	r1, r1
 8000b4e:	0949      	lsrs	r1, r1, #5
}
 8000b50:	b002      	add	sp, #8
 8000b52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_assert(1, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(2, sem1.s_cnt == 0, "counter not zero");

  chSemSignalWait(&sem1, &sem1);
  test_assert(3, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(4, sem1.s_cnt == 0, "counter not zero");
 8000b56:	f002 bb33 	b.w	80031c0 <_test_assert>
 8000b5a:	bf00      	nop
 8000b5c:	20001098 	.word	0x20001098
 8000b60:	20000a30 	.word	0x20000a30
 8000b64:	08000b71 	.word	0x08000b71
 8000b68:	200008a0 	.word	0x200008a0
 8000b6c:	20000a04 	.word	0x20000a04

08000b70 <thread3>:
static void sem3_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static THD_FUNCTION(thread3, p) {
 8000b70:	b510      	push	{r4, lr}

  (void)p;
  chSemWait(&sem1);
 8000b72:	4c04      	ldr	r4, [pc, #16]	; (8000b84 <thread3+0x14>)
 8000b74:	4620      	mov	r0, r4
 8000b76:	f000 fd93 	bl	80016a0 <chSemWait>
  chSemSignal(&sem1);
 8000b7a:	4620      	mov	r0, r4
}
 8000b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

static THD_FUNCTION(thread3, p) {

  (void)p;
  chSemWait(&sem1);
  chSemSignal(&sem1);
 8000b80:	f000 bcae 	b.w	80014e0 <chSemSignal>
 8000b84:	200008a0 	.word	0x200008a0
	...

08000b90 <sem2_execute.lto_priv.119>:
  chSemSignalI(&sem1); /* For coverage reasons */
  chSchRescheduleS();
  chSysUnlock();
}

static void sem2_execute(void) {
 8000b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b92:	2520      	movs	r5, #32
 8000b94:	b083      	sub	sp, #12
 8000b96:	f385 8811 	msr	BASEPRI, r5
 */
msg_t chSemWaitTimeout(semaphore_t *sp, systime_t time) {
  msg_t msg;

  chSysLock();
  msg = chSemWaitTimeoutS(sp, time);
 8000b9a:	4c55      	ldr	r4, [pc, #340]	; (8000cf0 <sem2_execute.lto_priv.119+0x160>)
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4620      	mov	r0, r4
 8000ba0:	f001 f87e 	bl	8001ca0 <chSemWaitTimeoutS>
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	4601      	mov	r1, r0
 8000ba8:	f383 8811 	msr	BASEPRI, r3

  /*
   * Testing special case TIME_IMMEDIATE.
   */
  msg = chSemWaitTimeout(&sem1, TIME_IMMEDIATE);
  test_assert(1, msg == MSG_TIMEOUT, "wrong wake-up message");
 8000bac:	f1a1 31ff 	sub.w	r1, r1, #4294967295
 8000bb0:	fab1 f181 	clz	r1, r1
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	0949      	lsrs	r1, r1, #5
 8000bb8:	f002 fb02 	bl	80031c0 <_test_assert>
 8000bbc:	b108      	cbz	r0, 8000bc2 <sem2_execute.lto_priv.119+0x32>
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
  test_assert_time_window(11, target_time, target_time + ALLOWED_DELAY);
}
 8000bbe:	b003      	add	sp, #12
 8000bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bc2:	6821      	ldr	r1, [r4, #0]
  /*
   * Testing special case TIME_IMMEDIATE.
   */
  msg = chSemWaitTimeout(&sem1, TIME_IMMEDIATE);
  test_assert(1, msg == MSG_TIMEOUT, "wrong wake-up message");
  test_assert(2, queue_isempty(&sem1.s_queue), "queue not empty");
 8000bc4:	2002      	movs	r0, #2
 8000bc6:	1b09      	subs	r1, r1, r4
 8000bc8:	fab1 f181 	clz	r1, r1
 8000bcc:	0949      	lsrs	r1, r1, #5
 8000bce:	f002 faf7 	bl	80031c0 <_test_assert>
 8000bd2:	2800      	cmp	r0, #0
 8000bd4:	d1f3      	bne.n	8000bbe <sem2_execute.lto_priv.119+0x2e>
  test_assert(3, sem1.s_cnt == 0, "counter not zero");
 8000bd6:	68a1      	ldr	r1, [r4, #8]
 8000bd8:	2003      	movs	r0, #3
 8000bda:	fab1 f181 	clz	r1, r1
 8000bde:	0949      	lsrs	r1, r1, #5
 8000be0:	f002 faee 	bl	80031c0 <_test_assert>
 8000be4:	4606      	mov	r6, r0
 8000be6:	2800      	cmp	r0, #0
 8000be8:	d1e9      	bne.n	8000bbe <sem2_execute.lto_priv.119+0x2e>
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8000bea:	4b42      	ldr	r3, [pc, #264]	; (8000cf4 <sem2_execute.lto_priv.119+0x164>)

  /*
   * Testing not timeout condition.
   */
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8000bec:	f44f 71a4 	mov.w	r1, #328	; 0x148
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8000bf0:	699b      	ldr	r3, [r3, #24]
 8000bf2:	4841      	ldr	r0, [pc, #260]	; (8000cf8 <sem2_execute.lto_priv.119+0x168>)
 8000bf4:	689a      	ldr	r2, [r3, #8]
 8000bf6:	4b41      	ldr	r3, [pc, #260]	; (8000cfc <sem2_execute.lto_priv.119+0x16c>)
 8000bf8:	3a01      	subs	r2, #1
 8000bfa:	9600      	str	r6, [sp, #0]
 8000bfc:	f000 fcd8 	bl	80015b0 <chThdCreateStatic>
 8000c00:	4b3f      	ldr	r3, [pc, #252]	; (8000d00 <sem2_execute.lto_priv.119+0x170>)
 8000c02:	6018      	str	r0, [r3, #0]
 8000c04:	f385 8811 	msr	BASEPRI, r5
 8000c08:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c0c:	4620      	mov	r0, r4
 8000c0e:	f001 f847 	bl	8001ca0 <chSemWaitTimeoutS>
 8000c12:	4607      	mov	r7, r0
 8000c14:	f386 8811 	msr	BASEPRI, r6
                                 thread2, 0);
  msg = chSemWaitTimeout(&sem1, MS2ST(500));
  test_wait_threads();
 8000c18:	f002 fa52 	bl	80030c0 <test_wait_threads>
  test_assert(4, msg == MSG_OK, "wrong wake-up message");
 8000c1c:	fab7 f187 	clz	r1, r7
 8000c20:	2004      	movs	r0, #4
 8000c22:	0949      	lsrs	r1, r1, #5
 8000c24:	f002 facc 	bl	80031c0 <_test_assert>
 8000c28:	2800      	cmp	r0, #0
 8000c2a:	d1c8      	bne.n	8000bbe <sem2_execute.lto_priv.119+0x2e>
 8000c2c:	6821      	ldr	r1, [r4, #0]
  test_assert(5, queue_isempty(&sem1.s_queue), "queue not empty");
 8000c2e:	2005      	movs	r0, #5
 8000c30:	1b09      	subs	r1, r1, r4
 8000c32:	fab1 f181 	clz	r1, r1
 8000c36:	0949      	lsrs	r1, r1, #5
 8000c38:	f002 fac2 	bl	80031c0 <_test_assert>
 8000c3c:	2800      	cmp	r0, #0
 8000c3e:	d1be      	bne.n	8000bbe <sem2_execute.lto_priv.119+0x2e>
  test_assert(6, sem1.s_cnt == 0, "counter not zero");
 8000c40:	68a1      	ldr	r1, [r4, #8]
 8000c42:	2006      	movs	r0, #6
 8000c44:	fab1 f181 	clz	r1, r1
 8000c48:	0949      	lsrs	r1, r1, #5
 8000c4a:	f002 fab9 	bl	80031c0 <_test_assert>
 8000c4e:	4606      	mov	r6, r0
 8000c50:	2800      	cmp	r0, #0
 8000c52:	d1b4      	bne.n	8000bbe <sem2_execute.lto_priv.119+0x2e>

  /*
   * Testing timeout condition.
   */
  test_wait_tick();
 8000c54:	f002 fa24 	bl	80030a0 <test_wait_tick>
 8000c58:	f385 8811 	msr	BASEPRI, r5
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000c5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c60:	6a5f      	ldr	r7, [r3, #36]	; 0x24
 8000c62:	f386 8811 	msr	BASEPRI, r6
 8000c66:	2641      	movs	r6, #65	; 0x41
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
  for (i = 0; i < 5; i++) {
    test_emit_token('A' + i);
 8000c68:	4630      	mov	r0, r6
 8000c6a:	f002 fac1 	bl	80031f0 <test_emit_token>
 8000c6e:	f385 8811 	msr	BASEPRI, r5
 8000c72:	2164      	movs	r1, #100	; 0x64
 8000c74:	481e      	ldr	r0, [pc, #120]	; (8000cf0 <sem2_execute.lto_priv.119+0x160>)
 8000c76:	f001 f813 	bl	8001ca0 <chSemWaitTimeoutS>
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	4601      	mov	r1, r0
 8000c7e:	f383 8811 	msr	BASEPRI, r3
    msg = chSemWaitTimeout(&sem1, MS2ST(50));
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
 8000c82:	f1a1 31ff 	sub.w	r1, r1, #4294967295
 8000c86:	fab1 f181 	clz	r1, r1
 8000c8a:	2007      	movs	r0, #7
 8000c8c:	0949      	lsrs	r1, r1, #5
 8000c8e:	f002 fa97 	bl	80031c0 <_test_assert>
 8000c92:	2800      	cmp	r0, #0
 8000c94:	d193      	bne.n	8000bbe <sem2_execute.lto_priv.119+0x2e>
 8000c96:	6821      	ldr	r1, [r4, #0]
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
 8000c98:	2008      	movs	r0, #8
 8000c9a:	1b09      	subs	r1, r1, r4
 8000c9c:	fab1 f181 	clz	r1, r1
 8000ca0:	0949      	lsrs	r1, r1, #5
 8000ca2:	f002 fa8d 	bl	80031c0 <_test_assert>
 8000ca6:	2800      	cmp	r0, #0
 8000ca8:	d189      	bne.n	8000bbe <sem2_execute.lto_priv.119+0x2e>
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
 8000caa:	68a1      	ldr	r1, [r4, #8]
 8000cac:	2009      	movs	r0, #9
 8000cae:	fab1 f181 	clz	r1, r1
 8000cb2:	0949      	lsrs	r1, r1, #5
 8000cb4:	f002 fa84 	bl	80031c0 <_test_assert>
 8000cb8:	3601      	adds	r6, #1
 8000cba:	b2f6      	uxtb	r6, r6
 8000cbc:	2800      	cmp	r0, #0
 8000cbe:	f47f af7e 	bne.w	8000bbe <sem2_execute.lto_priv.119+0x2e>
  /*
   * Testing timeout condition.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
  for (i = 0; i < 5; i++) {
 8000cc2:	2e46      	cmp	r6, #70	; 0x46
 8000cc4:	d1d0      	bne.n	8000c68 <sem2_execute.lto_priv.119+0xd8>
    msg = chSemWaitTimeout(&sem1, MS2ST(50));
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
 8000cc6:	200a      	movs	r0, #10
 8000cc8:	490e      	ldr	r1, [pc, #56]	; (8000d04 <sem2_execute.lto_priv.119+0x174>)
 8000cca:	f002 fa51 	bl	8003170 <_test_assert_sequence>
 8000cce:	2800      	cmp	r0, #0
 8000cd0:	f47f af75 	bne.w	8000bbe <sem2_execute.lto_priv.119+0x2e>
 8000cd4:	b2bf      	uxth	r7, r7

  /*
   * Testing timeout condition.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
 8000cd6:	f507 71fa 	add.w	r1, r7, #500	; 0x1f4
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
  test_assert_time_window(11, target_time, target_time + ALLOWED_DELAY);
 8000cda:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 8000cde:	b289      	uxth	r1, r1
 8000ce0:	b292      	uxth	r2, r2
 8000ce2:	200b      	movs	r0, #11
}
 8000ce4:	b003      	add	sp, #12
 8000ce6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
  test_assert_time_window(11, target_time, target_time + ALLOWED_DELAY);
 8000cea:	f002 ba19 	b.w	8003120 <_test_assert_time_window>
 8000cee:	bf00      	nop
 8000cf0:	200008a0 	.word	0x200008a0
 8000cf4:	20001098 	.word	0x20001098
 8000cf8:	20000a30 	.word	0x20000a30
 8000cfc:	08000951 	.word	0x08000951
 8000d00:	20000a04 	.word	0x20000a04
 8000d04:	0800693c 	.word	0x0800693c
	...

08000d10 <sem1_execute.lto_priv.117>:

  chSemWait(&sem1);
  test_emit_token(*(char *)p);
}

static void sem1_execute(void) {
 8000d10:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8000d12:	4d4b      	ldr	r5, [pc, #300]	; (8000e40 <sem1_execute.lto_priv.117+0x130>)

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8000d14:	4f4b      	ldr	r7, [pc, #300]	; (8000e44 <sem1_execute.lto_priv.117+0x134>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8000d16:	69ab      	ldr	r3, [r5, #24]

  chSemWait(&sem1);
  test_emit_token(*(char *)p);
}

static void sem1_execute(void) {
 8000d18:	b083      	sub	sp, #12

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8000d1a:	689a      	ldr	r2, [r3, #8]
 8000d1c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000d20:	3205      	adds	r2, #5
 8000d22:	4b49      	ldr	r3, [pc, #292]	; (8000e48 <sem1_execute.lto_priv.117+0x138>)
 8000d24:	4849      	ldr	r0, [pc, #292]	; (8000e4c <sem1_execute.lto_priv.117+0x13c>)
 8000d26:	9700      	str	r7, [sp, #0]
 8000d28:	f000 fc42 	bl	80015b0 <chThdCreateStatic>
 8000d2c:	69ab      	ldr	r3, [r5, #24]
 8000d2e:	4c48      	ldr	r4, [pc, #288]	; (8000e50 <sem1_execute.lto_priv.117+0x140>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8000d30:	689a      	ldr	r2, [r3, #8]
 8000d32:	4b48      	ldr	r3, [pc, #288]	; (8000e54 <sem1_execute.lto_priv.117+0x144>)
  test_emit_token(*(char *)p);
}

static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8000d34:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8000d36:	3201      	adds	r2, #1
 8000d38:	9300      	str	r3, [sp, #0]
 8000d3a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000d3e:	4b42      	ldr	r3, [pc, #264]	; (8000e48 <sem1_execute.lto_priv.117+0x138>)
 8000d40:	4845      	ldr	r0, [pc, #276]	; (8000e58 <sem1_execute.lto_priv.117+0x148>)
 8000d42:	f000 fc35 	bl	80015b0 <chThdCreateStatic>
 8000d46:	69aa      	ldr	r2, [r5, #24]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8000d48:	4b44      	ldr	r3, [pc, #272]	; (8000e5c <sem1_execute.lto_priv.117+0x14c>)
 8000d4a:	6892      	ldr	r2, [r2, #8]
 8000d4c:	f44f 71a4 	mov.w	r1, #328	; 0x148
}

static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8000d50:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8000d52:	3203      	adds	r2, #3
 8000d54:	9300      	str	r3, [sp, #0]
 8000d56:	4842      	ldr	r0, [pc, #264]	; (8000e60 <sem1_execute.lto_priv.117+0x150>)
 8000d58:	4b3b      	ldr	r3, [pc, #236]	; (8000e48 <sem1_execute.lto_priv.117+0x138>)
 8000d5a:	f000 fc29 	bl	80015b0 <chThdCreateStatic>
 8000d5e:	69aa      	ldr	r2, [r5, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8000d60:	4b40      	ldr	r3, [pc, #256]	; (8000e64 <sem1_execute.lto_priv.117+0x154>)
 8000d62:	6892      	ldr	r2, [r2, #8]
 8000d64:	f44f 71a4 	mov.w	r1, #328	; 0x148

static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8000d68:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8000d6a:	3204      	adds	r2, #4
 8000d6c:	9300      	str	r3, [sp, #0]
 8000d6e:	483e      	ldr	r0, [pc, #248]	; (8000e68 <sem1_execute.lto_priv.117+0x158>)
 8000d70:	4b35      	ldr	r3, [pc, #212]	; (8000e48 <sem1_execute.lto_priv.117+0x138>)
 8000d72:	f000 fc1d 	bl	80015b0 <chThdCreateStatic>
 8000d76:	69aa      	ldr	r2, [r5, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8000d78:	4b3c      	ldr	r3, [pc, #240]	; (8000e6c <sem1_execute.lto_priv.117+0x15c>)
 8000d7a:	6892      	ldr	r2, [r2, #8]
 8000d7c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000d80:	3202      	adds	r2, #2
static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8000d82:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	483a      	ldr	r0, [pc, #232]	; (8000e70 <sem1_execute.lto_priv.117+0x160>)
 8000d88:	4b2f      	ldr	r3, [pc, #188]	; (8000e48 <sem1_execute.lto_priv.117+0x138>)
 8000d8a:	f000 fc11 	bl	80015b0 <chThdCreateStatic>
 8000d8e:	6120      	str	r0, [r4, #16]
  chSemSignal(&sem1);
 8000d90:	4838      	ldr	r0, [pc, #224]	; (8000e74 <sem1_execute.lto_priv.117+0x164>)
 8000d92:	f000 fba5 	bl	80014e0 <chSemSignal>
  chSemSignal(&sem1);
 8000d96:	4837      	ldr	r0, [pc, #220]	; (8000e74 <sem1_execute.lto_priv.117+0x164>)
 8000d98:	f000 fba2 	bl	80014e0 <chSemSignal>
  chSemSignal(&sem1);
 8000d9c:	4835      	ldr	r0, [pc, #212]	; (8000e74 <sem1_execute.lto_priv.117+0x164>)
 8000d9e:	f000 fb9f 	bl	80014e0 <chSemSignal>
  chSemSignal(&sem1);
 8000da2:	4834      	ldr	r0, [pc, #208]	; (8000e74 <sem1_execute.lto_priv.117+0x164>)
 8000da4:	f000 fb9c 	bl	80014e0 <chSemSignal>
  chSemSignal(&sem1);
 8000da8:	4832      	ldr	r0, [pc, #200]	; (8000e74 <sem1_execute.lto_priv.117+0x164>)
 8000daa:	f000 fb99 	bl	80014e0 <chSemSignal>
  test_wait_threads();
 8000dae:	f002 f987 	bl	80030c0 <test_wait_threads>
#if CH_CFG_USE_SEMAPHORES_PRIORITY
  test_assert_sequence(1, "ADCEB");
#else
  test_assert_sequence(1, "ABCDE");
 8000db2:	2001      	movs	r0, #1
 8000db4:	4930      	ldr	r1, [pc, #192]	; (8000e78 <sem1_execute.lto_priv.117+0x168>)
 8000db6:	f002 f9db 	bl	8003170 <_test_assert_sequence>
 8000dba:	4606      	mov	r6, r0
 8000dbc:	b108      	cbz	r0, 8000dc2 <sem1_execute.lto_priv.117+0xb2>
  chSemAddCounterI(&sem1, 2);
  chSchRescheduleS();
  chSysUnlock();
  test_wait_threads();
  test_assert_lock(2, chSemGetCounterI(&sem1) == 1, "invalid counter");
}
 8000dbe:	b003      	add	sp, #12
 8000dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dc2:	69ab      	ldr	r3, [r5, #24]
#if CH_CFG_USE_SEMAPHORES_PRIORITY
  test_assert_sequence(1, "ADCEB");
#else
  test_assert_sequence(1, "ABCDE");
#endif
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8000dc4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000dc8:	689a      	ldr	r2, [r3, #8]
 8000dca:	4820      	ldr	r0, [pc, #128]	; (8000e4c <sem1_execute.lto_priv.117+0x13c>)
 8000dcc:	3205      	adds	r2, #5
 8000dce:	9700      	str	r7, [sp, #0]
 8000dd0:	4b1d      	ldr	r3, [pc, #116]	; (8000e48 <sem1_execute.lto_priv.117+0x138>)
 8000dd2:	f000 fbed 	bl	80015b0 <chThdCreateStatic>
 8000dd6:	2320      	movs	r3, #32
 8000dd8:	6020      	str	r0, [r4, #0]
 8000dda:	f383 8811 	msr	BASEPRI, r3
 8000dde:	4c25      	ldr	r4, [pc, #148]	; (8000e74 <sem1_execute.lto_priv.117+0x164>)
 8000de0:	2502      	movs	r5, #2
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
    if (++sp->s_cnt <= (cnt_t)0) {
 8000de2:	4627      	mov	r7, r4
 8000de4:	e002      	b.n	8000dec <sem1_execute.lto_priv.117+0xdc>
  chDbgCheck((sp != NULL) && (n > (cnt_t)0));
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
 8000de6:	2d01      	cmp	r5, #1
 8000de8:	d00e      	beq.n	8000e08 <sem1_execute.lto_priv.117+0xf8>
 8000dea:	2501      	movs	r5, #1
    if (++sp->s_cnt <= (cnt_t)0) {
 8000dec:	68a3      	ldr	r3, [r4, #8]
 8000dee:	3301      	adds	r3, #1
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	60a3      	str	r3, [r4, #8]
 8000df4:	dcf7      	bgt.n	8000de6 <sem1_execute.lto_priv.117+0xd6>
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8000df6:	6838      	ldr	r0, [r7, #0]

  tqp->p_next = tp->p_next;
 8000df8:	6803      	ldr	r3, [r0, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000dfa:	605f      	str	r7, [r3, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8000dfc:	603b      	str	r3, [r7, #0]
      chSchReadyI(queue_fifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_OK;
 8000dfe:	f000 fc97 	bl	8001730 <chSchReadyI>
  chDbgCheck((sp != NULL) && (n > (cnt_t)0));
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
 8000e02:	2d01      	cmp	r5, #1
    if (++sp->s_cnt <= (cnt_t)0) {
      chSchReadyI(queue_fifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_OK;
 8000e04:	6206      	str	r6, [r0, #32]
  chDbgCheck((sp != NULL) && (n > (cnt_t)0));
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
 8000e06:	d1f0      	bne.n	8000dea <sem1_execute.lto_priv.117+0xda>
  chSysLock();
  chSemAddCounterI(&sem1, 2);
  chSchRescheduleS();
 8000e08:	f000 fb12 	bl	8001430 <chSchRescheduleS>
 8000e0c:	2500      	movs	r5, #0
 8000e0e:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_wait_threads();
 8000e12:	f002 f955 	bl	80030c0 <test_wait_threads>
 8000e16:	2320      	movs	r3, #32
 8000e18:	f383 8811 	msr	BASEPRI, r3
  test_assert_lock(2, chSemGetCounterI(&sem1) == 1, "invalid counter");
 8000e1c:	68a1      	ldr	r1, [r4, #8]
 8000e1e:	2002      	movs	r0, #2
 8000e20:	f1a1 0101 	sub.w	r1, r1, #1
 8000e24:	fab1 f181 	clz	r1, r1
 8000e28:	0949      	lsrs	r1, r1, #5
 8000e2a:	f002 f9c9 	bl	80031c0 <_test_assert>
 8000e2e:	b918      	cbnz	r0, 8000e38 <sem1_execute.lto_priv.117+0x128>
 8000e30:	f380 8811 	msr	BASEPRI, r0
}
 8000e34:	b003      	add	sp, #12
 8000e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e38:	f385 8811 	msr	BASEPRI, r5
 8000e3c:	b003      	add	sp, #12
 8000e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e40:	20001098 	.word	0x20001098
 8000e44:	08006934 	.word	0x08006934
 8000e48:	08000901 	.word	0x08000901
 8000e4c:	20000a30 	.word	0x20000a30
 8000e50:	20000a04 	.word	0x20000a04
 8000e54:	08006930 	.word	0x08006930
 8000e58:	20000b78 	.word	0x20000b78
 8000e5c:	08006938 	.word	0x08006938
 8000e60:	20000cc0 	.word	0x20000cc0
 8000e64:	08007948 	.word	0x08007948
 8000e68:	20000e08 	.word	0x20000e08
 8000e6c:	08006940 	.word	0x08006940
 8000e70:	20000f50 	.word	0x20000f50
 8000e74:	200008a0 	.word	0x200008a0
 8000e78:	0800693c 	.word	0x0800693c
 8000e7c:	00000000 	.word	0x00000000

08000e80 <thd2_execute.lto_priv.113>:
 * and atomically executed.<br>
 * The test expects the threads to perform their operations in increasing
 * priority order regardless of the initial order.
 */

static void thd2_execute(void) {
 8000e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8000e84:	4e47      	ldr	r6, [pc, #284]	; (8000fa4 <thd2_execute.lto_priv.113+0x124>)

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8000e86:	4d48      	ldr	r5, [pc, #288]	; (8000fa8 <thd2_execute.lto_priv.113+0x128>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8000e88:	69b3      	ldr	r3, [r6, #24]
 8000e8a:	f8df 9134 	ldr.w	r9, [pc, #308]	; 8000fc0 <thd2_execute.lto_priv.113+0x140>
 8000e8e:	689a      	ldr	r2, [r3, #8]
 8000e90:	4946      	ldr	r1, [pc, #280]	; (8000fac <thd2_execute.lto_priv.113+0x12c>)
 * and atomically executed.<br>
 * The test expects the threads to perform their operations in increasing
 * priority order regardless of the initial order.
 */

static void thd2_execute(void) {
 8000e92:	b083      	sub	sp, #12

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8000e94:	464b      	mov	r3, r9
 8000e96:	9100      	str	r1, [sp, #0]
 8000e98:	3a04      	subs	r2, #4
 8000e9a:	4628      	mov	r0, r5
 8000e9c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000ea0:	f000 fb86 	bl	80015b0 <chThdCreateStatic>
 8000ea4:	69b3      	ldr	r3, [r6, #24]
 8000ea6:	f8df 811c 	ldr.w	r8, [pc, #284]	; 8000fc4 <thd2_execute.lto_priv.113+0x144>
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8000eaa:	689a      	ldr	r2, [r3, #8]
 8000eac:	4940      	ldr	r1, [pc, #256]	; (8000fb0 <thd2_execute.lto_priv.113+0x130>)
 8000eae:	f5a5 74a4 	sub.w	r4, r5, #328	; 0x148
 * priority order regardless of the initial order.
 */

static void thd2_execute(void) {

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8000eb2:	f8c8 0004 	str.w	r0, [r8, #4]
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8000eb6:	464b      	mov	r3, r9
 8000eb8:	9100      	str	r1, [sp, #0]
 8000eba:	3a05      	subs	r2, #5
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000ec2:	f000 fb75 	bl	80015b0 <chThdCreateStatic>
 8000ec6:	69b3      	ldr	r3, [r6, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8000ec8:	493a      	ldr	r1, [pc, #232]	; (8000fb4 <thd2_execute.lto_priv.113+0x134>)
 8000eca:	689a      	ldr	r2, [r3, #8]
 */

static void thd2_execute(void) {

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8000ecc:	f8c8 0000 	str.w	r0, [r8]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8000ed0:	464b      	mov	r3, r9
 8000ed2:	9100      	str	r1, [sp, #0]
 8000ed4:	3a01      	subs	r2, #1
 8000ed6:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 8000eda:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000ede:	f000 fb67 	bl	80015b0 <chThdCreateStatic>
 8000ee2:	69b3      	ldr	r3, [r6, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8000ee4:	4934      	ldr	r1, [pc, #208]	; (8000fb8 <thd2_execute.lto_priv.113+0x138>)
 8000ee6:	689a      	ldr	r2, [r3, #8]

static void thd2_execute(void) {

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8000ee8:	f8c8 0010 	str.w	r0, [r8, #16]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8000eec:	9100      	str	r1, [sp, #0]
 8000eee:	3a02      	subs	r2, #2
 8000ef0:	f505 7024 	add.w	r0, r5, #656	; 0x290
 8000ef4:	464b      	mov	r3, r9
 8000ef6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000efa:	f000 fb59 	bl	80015b0 <chThdCreateStatic>
 8000efe:	2220      	movs	r2, #32
 8000f00:	f8c8 000c 	str.w	r0, [r8, #12]
 8000f04:	f382 8811 	msr	BASEPRI, r2
 8000f08:	69b3      	ldr	r3, [r6, #24]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000f0a:	6971      	ldr	r1, [r6, #20]
  /* Done this way for coverage of chThdCreateI() and chThdStart().*/
  chSysLock();
  threads[2] = chThdCreateI(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8000f0c:	689b      	ldr	r3, [r3, #8]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8000f0e:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 8000fc8 <thd2_execute.lto_priv.113+0x148>
 8000f12:	f1a3 0a03 	sub.w	sl, r3, #3
 8000f16:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 8000fcc <thd2_execute.lto_priv.113+0x14c>
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000f1a:	f505 73a4 	add.w	r3, r5, #328	; 0x148
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8000f1e:	2700      	movs	r7, #0

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8000f20:	f505 7b1b 	add.w	fp, r5, #620	; 0x26c
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8000f24:	f8c4 a298 	str.w	sl, [r4, #664]	; 0x298
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8000f28:	f8c4 a2cc 	str.w	sl, [r4, #716]	; 0x2cc

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8000f2c:	f8c4 93b4 	str.w	r9, [r4, #948]	; 0x3b4
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8000f30:	2002      	movs	r0, #2
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8000f32:	f505 79b6 	add.w	r9, r5, #364	; 0x16c
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8000f36:	f04f 0a01 	mov.w	sl, #1
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000f3a:	f505 75b8 	add.w	r5, r5, #368	; 0x170
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000f3e:	f8c4 62a0 	str.w	r6, [r4, #672]	; 0x2a0

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8000f42:	f8c4 b29c 	str.w	fp, [r4, #668]	; 0x29c
 8000f46:	f8c4 c3b8 	str.w	ip, [r4, #952]	; 0x3b8
 8000f4a:	f8c4 e3d4 	str.w	lr, [r4, #980]	; 0x3d4
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8000f4e:	f884 02ac 	strb.w	r0, [r4, #684]	; 0x2ac
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000f52:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8000f56:	f884 72ad 	strb.w	r7, [r4, #685]	; 0x2ad
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8000f5a:	f8c4 72c8 	str.w	r7, [r4, #712]	; 0x2c8
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8000f5e:	f8c4 72c4 	str.w	r7, [r4, #708]	; 0x2c4
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8000f62:	f8c4 72a8 	str.w	r7, [r4, #680]	; 0x2a8
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8000f66:	f884 a2ae 	strb.w	sl, [r4, #686]	; 0x2ae
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000f6a:	610b      	str	r3, [r1, #16]
 8000f6c:	6173      	str	r3, [r6, #20]
 8000f6e:	f8c8 3008 	str.w	r3, [r8, #8]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8000f72:	f8c4 92b4 	str.w	r9, [r4, #692]	; 0x2b4
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000f76:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
  tqp->p_prev = (thread_t *)tqp;
 8000f7a:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
 8000f7e:	f387 8811 	msr	BASEPRI, r7
  chSysUnlock();
  chThdStart(threads[2]);
 8000f82:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8000f86:	f382 8811 	msr	BASEPRI, r2
 */
static inline thread_t *chThdStartI(thread_t *tp) {

  chDbgAssert(tp->p_state == CH_STATE_WTSTART, "wrong state");

  return chSchReadyI(tp);
 8000f8a:	f000 fbd1 	bl	8001730 <chSchReadyI>
 8000f8e:	f387 8811 	msr	BASEPRI, r7
  test_wait_threads();
 8000f92:	f002 f895 	bl	80030c0 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8000f96:	4650      	mov	r0, sl
 8000f98:	4908      	ldr	r1, [pc, #32]	; (8000fbc <thd2_execute.lto_priv.113+0x13c>)
}
 8000f9a:	b003      	add	sp, #12
 8000f9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  chSysLock();
  threads[2] = chThdCreateI(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  chSysUnlock();
  chThdStart(threads[2]);
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 8000fa0:	f002 b8e6 	b.w	8003170 <_test_assert_sequence>
 8000fa4:	20001098 	.word	0x20001098
 8000fa8:	20000b78 	.word	0x20000b78
 8000fac:	08007948 	.word	0x08007948
 8000fb0:	08006940 	.word	0x08006940
 8000fb4:	08006934 	.word	0x08006934
 8000fb8:	08006930 	.word	0x08006930
 8000fbc:	0800693c 	.word	0x0800693c
 8000fc0:	08003221 	.word	0x08003221
 8000fc4:	20000a04 	.word	0x20000a04
 8000fc8:	08006938 	.word	0x08006938
 8000fcc:	08000241 	.word	0x08000241

08000fd0 <thd4_execute.lto_priv.115>:
 * <h2>Description</h2>
 * Delay APIs and associated macros are tested, the invoking thread is verified
 * to wake up at the exact expected time.
 */

static void thd4_execute(void) {
 8000fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  systime_t time;

  test_wait_tick();
 8000fd2:	f002 f865 	bl	80030a0 <test_wait_tick>
 8000fd6:	2620      	movs	r6, #32
 8000fd8:	f386 8811 	msr	BASEPRI, r6
 8000fdc:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8000fe0:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	b2a4      	uxth	r4, r4
 8000fe6:	f383 8811 	msr	BASEPRI, r3

  /* Timeouts in microseconds.*/
  time = chVTGetSystemTime();
  chThdSleepMicroseconds(100000);
 8000fea:	20c8      	movs	r0, #200	; 0xc8
 8000fec:	f000 ff28 	bl	8001e40 <chThdSleep>
  test_assert_time_window(1,
 8000ff0:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
 8000ff4:	f104 02cb 	add.w	r2, r4, #203	; 0xcb
 8000ff8:	b289      	uxth	r1, r1
 8000ffa:	b292      	uxth	r2, r2
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	f002 f88f 	bl	8003120 <_test_assert_time_window>
 8001002:	b100      	cbz	r0, 8001006 <thd4_execute.lto_priv.115+0x36>
 8001004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001006:	f386 8811 	msr	BASEPRI, r6
 800100a:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800100c:	b2a4      	uxth	r4, r4
 800100e:	f380 8811 	msr	BASEPRI, r0
                          time + US2ST(100000),
                          time + US2ST(100000) + CH_CFG_ST_TIMEDELTA + 1);

  /* Timeouts in milliseconds.*/
  time = chVTGetSystemTime();
  chThdSleepMilliseconds(100);
 8001012:	20c8      	movs	r0, #200	; 0xc8
 8001014:	f000 ff14 	bl	8001e40 <chThdSleep>
  test_assert_time_window(2,
 8001018:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
 800101c:	f104 02cb 	add.w	r2, r4, #203	; 0xcb
 8001020:	b289      	uxth	r1, r1
 8001022:	b292      	uxth	r2, r2
 8001024:	2002      	movs	r0, #2
 8001026:	f002 f87b 	bl	8003120 <_test_assert_time_window>
 800102a:	2800      	cmp	r0, #0
 800102c:	d1ea      	bne.n	8001004 <thd4_execute.lto_priv.115+0x34>
 800102e:	f386 8811 	msr	BASEPRI, r6
 8001032:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8001034:	b2a4      	uxth	r4, r4
 8001036:	f380 8811 	msr	BASEPRI, r0
                          time + MS2ST(100),
                          time + MS2ST(100) + CH_CFG_ST_TIMEDELTA + 1);

  /* Timeouts in seconds.*/
  time = chVTGetSystemTime();
  chThdSleepSeconds(1);
 800103a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800103e:	f000 feff 	bl	8001e40 <chThdSleep>
  test_assert_time_window(3,
 8001042:	f504 61fa 	add.w	r1, r4, #2000	; 0x7d0
 8001046:	f204 72d3 	addw	r2, r4, #2003	; 0x7d3
 800104a:	b289      	uxth	r1, r1
 800104c:	b292      	uxth	r2, r2
 800104e:	2003      	movs	r0, #3
 8001050:	f002 f866 	bl	8003120 <_test_assert_time_window>
 8001054:	2800      	cmp	r0, #0
 8001056:	d1d5      	bne.n	8001004 <thd4_execute.lto_priv.115+0x34>
 8001058:	f386 8811 	msr	BASEPRI, r6
 800105c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800105e:	b2a4      	uxth	r4, r4
 8001060:	f380 8811 	msr	BASEPRI, r0
                          time + S2ST(1),
                          time + S2ST(1) + CH_CFG_ST_TIMEDELTA + 1);

  /* Absolute timelines.*/
  time = chVTGetSystemTime() + MS2ST(100);
 8001064:	f104 07c8 	add.w	r7, r4, #200	; 0xc8
 8001068:	b2bf      	uxth	r7, r7
 800106a:	f386 8811 	msr	BASEPRI, r6
 800106e:	6a69      	ldr	r1, [r5, #36]	; 0x24
 * @api
 */
void chThdSleepUntil(systime_t time) {

  chSysLock();
  time -= chVTGetSystemTimeX();
 8001070:	1a79      	subs	r1, r7, r1
 8001072:	b289      	uxth	r1, r1
  if (time > (systime_t)0) {
 8001074:	b959      	cbnz	r1, 800108e <thd4_execute.lto_priv.115+0xbe>
 8001076:	2300      	movs	r3, #0
 8001078:	f383 8811 	msr	BASEPRI, r3
  chThdSleepUntil(time);
  test_assert_time_window(4,
 800107c:	f104 02cb 	add.w	r2, r4, #203	; 0xcb
 8001080:	4639      	mov	r1, r7
                          time,
                          time + CH_CFG_ST_TIMEDELTA + 1);
}
 8001082:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                          time + S2ST(1) + CH_CFG_ST_TIMEDELTA + 1);

  /* Absolute timelines.*/
  time = chVTGetSystemTime() + MS2ST(100);
  chThdSleepUntil(time);
  test_assert_time_window(4,
 8001086:	b292      	uxth	r2, r2
 8001088:	2004      	movs	r0, #4
 800108a:	f002 b849 	b.w	8003120 <_test_assert_time_window>
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 800108e:	2008      	movs	r0, #8
 8001090:	f000 fdde 	bl	8001c50 <chSchGoSleepTimeoutS>
 8001094:	e7ef      	b.n	8001076 <thd4_execute.lto_priv.115+0xa6>
 8001096:	bf00      	nop
	...

080010a0 <thd3_execute.lto_priv.114>:
 * to verify that the priority change happens as expected.<br>
 * If the @p CH_CFG_USE_MUTEXES option is enabled then the priority changes are
 * also tested under priority inheritance boosted priority state.
 */

static void thd3_execute(void) {
 80010a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80010a2:	4e49      	ldr	r6, [pc, #292]	; (80011c8 <thd3_execute.lto_priv.114+0x128>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80010a4:	69b3      	ldr	r3, [r6, #24]
 80010a6:	689c      	ldr	r4, [r3, #8]
  tprio_t prio, p1;

  prio = chThdGetPriorityX();
  p1 = chThdSetPriority(prio + 1);
 80010a8:	1c65      	adds	r5, r4, #1
 80010aa:	4628      	mov	r0, r5
 80010ac:	f000 f9d0 	bl	8001450 <chThdSetPriority>
 80010b0:	4607      	mov	r7, r0
  test_assert(1, p1 == prio,
 80010b2:	1b39      	subs	r1, r7, r4
 80010b4:	fab1 f181 	clz	r1, r1
 80010b8:	2001      	movs	r0, #1
 80010ba:	0949      	lsrs	r1, r1, #5
 80010bc:	f002 f880 	bl	80031c0 <_test_assert>
 80010c0:	b100      	cbz	r0, 80010c4 <thd3_execute.lto_priv.114+0x24>
 80010c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010c4:	69b3      	ldr	r3, [r6, #24]
              "unexpected returned priority level");
  test_assert(2, chThdGetPriorityX() == prio + 1,
 80010c6:	2002      	movs	r0, #2
 80010c8:	6899      	ldr	r1, [r3, #8]
 80010ca:	1a69      	subs	r1, r5, r1
 80010cc:	fab1 f181 	clz	r1, r1
 80010d0:	0949      	lsrs	r1, r1, #5
 80010d2:	f002 f875 	bl	80031c0 <_test_assert>
 80010d6:	2800      	cmp	r0, #0
 80010d8:	d1f3      	bne.n	80010c2 <thd3_execute.lto_priv.114+0x22>
              "unexpected priority level");
  p1 = chThdSetPriority(p1);
 80010da:	4638      	mov	r0, r7
 80010dc:	f000 f9b8 	bl	8001450 <chThdSetPriority>
  test_assert(3, p1 == prio + 1,
 80010e0:	1a29      	subs	r1, r5, r0
 80010e2:	fab1 f181 	clz	r1, r1
 80010e6:	2003      	movs	r0, #3
 80010e8:	0949      	lsrs	r1, r1, #5
 80010ea:	f002 f869 	bl	80031c0 <_test_assert>
 80010ee:	2800      	cmp	r0, #0
 80010f0:	d1e7      	bne.n	80010c2 <thd3_execute.lto_priv.114+0x22>
 80010f2:	69b3      	ldr	r3, [r6, #24]
              "unexpected returned priority level");
  test_assert(4, chThdGetPriorityX() == prio,
 80010f4:	2004      	movs	r0, #4
 80010f6:	6899      	ldr	r1, [r3, #8]
 80010f8:	1a61      	subs	r1, r4, r1
 80010fa:	fab1 f181 	clz	r1, r1
 80010fe:	0949      	lsrs	r1, r1, #5
 8001100:	f002 f85e 	bl	80031c0 <_test_assert>
 8001104:	2800      	cmp	r0, #0
 8001106:	d1dc      	bne.n	80010c2 <thd3_execute.lto_priv.114+0x22>
 8001108:	2320      	movs	r3, #32
 800110a:	f383 8811 	msr	BASEPRI, r3
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 800110e:	69b2      	ldr	r2, [r6, #24]
              "unexpected priority level");

#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
  /* Simulates a priority boost situation (p_prio > p_realprio).*/
  chSysLock();
  chThdGetSelfX()->p_prio += 2;
 8001110:	6893      	ldr	r3, [r2, #8]
 8001112:	3302      	adds	r3, #2
 8001114:	6093      	str	r3, [r2, #8]
 8001116:	f380 8811 	msr	BASEPRI, r0
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 800111a:	69b3      	ldr	r3, [r6, #24]
  chSysUnlock();
  test_assert(5, chThdGetPriorityX() == prio + 2,
 800111c:	1ca7      	adds	r7, r4, #2
 800111e:	6899      	ldr	r1, [r3, #8]
 8001120:	2005      	movs	r0, #5
 8001122:	1a79      	subs	r1, r7, r1
 8001124:	fab1 f181 	clz	r1, r1
 8001128:	0949      	lsrs	r1, r1, #5
 800112a:	f002 f849 	bl	80031c0 <_test_assert>
 800112e:	2800      	cmp	r0, #0
 8001130:	d1c7      	bne.n	80010c2 <thd3_execute.lto_priv.114+0x22>
              "unexpected priority level");

  /* Tries to raise but below the boost level. */
  p1 = chThdSetPriority(prio + 1);
 8001132:	4628      	mov	r0, r5
 8001134:	f000 f98c 	bl	8001450 <chThdSetPriority>
  test_assert(6, p1 == prio,
 8001138:	1b01      	subs	r1, r0, r4
 800113a:	fab1 f181 	clz	r1, r1
 800113e:	2006      	movs	r0, #6
 8001140:	0949      	lsrs	r1, r1, #5
 8001142:	f002 f83d 	bl	80031c0 <_test_assert>
 8001146:	2800      	cmp	r0, #0
 8001148:	d1bb      	bne.n	80010c2 <thd3_execute.lto_priv.114+0x22>
              "unexpected returned priority level");
  test_assert(7, chThdGetSelfX()->p_prio == prio + 2,
 800114a:	69b3      	ldr	r3, [r6, #24]
 800114c:	2007      	movs	r0, #7
 800114e:	6899      	ldr	r1, [r3, #8]
 8001150:	1a79      	subs	r1, r7, r1
 8001152:	fab1 f181 	clz	r1, r1
 8001156:	0949      	lsrs	r1, r1, #5
 8001158:	f002 f832 	bl	80031c0 <_test_assert>
 800115c:	2800      	cmp	r0, #0
 800115e:	d1b0      	bne.n	80010c2 <thd3_execute.lto_priv.114+0x22>
              "unexpected priority level");
  test_assert(8, chThdGetSelfX()->p_realprio == prio + 1,
 8001160:	69b3      	ldr	r3, [r6, #24]
 8001162:	2008      	movs	r0, #8
 8001164:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001166:	1a69      	subs	r1, r5, r1
 8001168:	fab1 f181 	clz	r1, r1
 800116c:	0949      	lsrs	r1, r1, #5
 800116e:	f002 f827 	bl	80031c0 <_test_assert>
 8001172:	2800      	cmp	r0, #0
 8001174:	d1a5      	bne.n	80010c2 <thd3_execute.lto_priv.114+0x22>
              "unexpected returned real priority level");

  /* Tries to raise above the boost level. */
  p1 = chThdSetPriority(prio + 3);
 8001176:	1ce7      	adds	r7, r4, #3
 8001178:	4638      	mov	r0, r7
 800117a:	f000 f969 	bl	8001450 <chThdSetPriority>
  test_assert(9, p1 == prio + 1,
 800117e:	1a28      	subs	r0, r5, r0
 8001180:	4241      	negs	r1, r0
 8001182:	4141      	adcs	r1, r0
 8001184:	2009      	movs	r0, #9
 8001186:	f002 f81b 	bl	80031c0 <_test_assert>
 800118a:	2800      	cmp	r0, #0
 800118c:	d199      	bne.n	80010c2 <thd3_execute.lto_priv.114+0x22>
              "unexpected returned priority level");
  test_assert(10, chThdGetSelfX()->p_prio == prio + 3,
 800118e:	69b3      	ldr	r3, [r6, #24]
 8001190:	200a      	movs	r0, #10
 8001192:	6899      	ldr	r1, [r3, #8]
 8001194:	1a7a      	subs	r2, r7, r1
 8001196:	4251      	negs	r1, r2
 8001198:	4151      	adcs	r1, r2
 800119a:	f002 f811 	bl	80031c0 <_test_assert>
 800119e:	2800      	cmp	r0, #0
 80011a0:	d18f      	bne.n	80010c2 <thd3_execute.lto_priv.114+0x22>
              "unexpected priority level");
  test_assert(11, chThdGetSelfX()->p_realprio == prio + 3,
 80011a2:	69b3      	ldr	r3, [r6, #24]
 80011a4:	200b      	movs	r0, #11
 80011a6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80011a8:	1a7b      	subs	r3, r7, r1
 80011aa:	4259      	negs	r1, r3
 80011ac:	4159      	adcs	r1, r3
 80011ae:	f002 f807 	bl	80031c0 <_test_assert>
 80011b2:	2800      	cmp	r0, #0
 80011b4:	d185      	bne.n	80010c2 <thd3_execute.lto_priv.114+0x22>
 80011b6:	2320      	movs	r3, #32
 80011b8:	f383 8811 	msr	BASEPRI, r3
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80011bc:	69b3      	ldr	r3, [r6, #24]
              "unexpected real priority level");

  chSysLock();
  chThdGetSelfX()->p_prio = prio;
 80011be:	609c      	str	r4, [r3, #8]
  chThdGetSelfX()->p_realprio = prio;
 80011c0:	63dc      	str	r4, [r3, #60]	; 0x3c
 80011c2:	f380 8811 	msr	BASEPRI, r0
 80011c6:	e77c      	b.n	80010c2 <thd3_execute.lto_priv.114+0x22>
 80011c8:	20001098 	.word	0x20001098
 80011cc:	00000000 	.word	0x00000000

080011d0 <wakeup.lto_priv.101>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 80011d0:	b410      	push	{r4}
 80011d2:	2320      	movs	r3, #32
 80011d4:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 80011d8:	7f03      	ldrb	r3, [r0, #28]
 80011da:	2b07      	cmp	r3, #7
 80011dc:	d80e      	bhi.n	80011fc <wakeup.lto_priv.101+0x2c>
 80011de:	e8df f003 	tbb	[pc, r3]
 80011e2:	0d27      	.short	0x0d27
 80011e4:	0408230d 	.word	0x0408230d
 80011e8:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 80011ea:	6a02      	ldr	r2, [r0, #32]
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 80011ec:	6893      	ldr	r3, [r2, #8]
 80011ee:	3301      	adds	r3, #1
 80011f0:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 80011f2:	e890 000c 	ldmia.w	r0, {r2, r3}
 80011f6:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 80011f8:	6802      	ldr	r2, [r0, #0]
 80011fa:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 80011fc:	f04f 34ff 	mov.w	r4, #4294967295
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001200:	2200      	movs	r2, #0
 8001202:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8001204:	4b0d      	ldr	r3, [pc, #52]	; (800123c <wakeup.lto_priv.101+0x6c>)
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 8001206:	6204      	str	r4, [r0, #32]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001208:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 800120a:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800120c:	689a      	ldr	r2, [r3, #8]
 800120e:	428a      	cmp	r2, r1
 8001210:	d2fb      	bcs.n	800120a <wakeup.lto_priv.101+0x3a>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001212:	685a      	ldr	r2, [r3, #4]
 8001214:	2100      	movs	r1, #0
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8001216:	6003      	str	r3, [r0, #0]
  tp->p_prev = cp->p_prev;
 8001218:	6042      	str	r2, [r0, #4]
  tp->p_prev->p_next = tp;
 800121a:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 800121c:	6058      	str	r0, [r3, #4]
 800121e:	f381 8811 	msr	BASEPRI, r1
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8001222:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001226:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
 8001228:	6a03      	ldr	r3, [r0, #32]
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	e7e5      	b.n	80011fc <wakeup.lto_priv.101+0x2c>
 8001230:	2300      	movs	r3, #0
 8001232:	f383 8811 	msr	BASEPRI, r3
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8001236:	f85d 4b04 	ldr.w	r4, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	20001098 	.word	0x20001098

08001240 <_idle_thread.lto_priv.84>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8001240:	e7fe      	b.n	8001240 <_idle_thread.lto_priv.84>
 8001242:	bf00      	nop
	...

08001250 <chSchDoRescheduleAhead>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 8001250:	4a0d      	ldr	r2, [pc, #52]	; (8001288 <chSchDoRescheduleAhead+0x38>)
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 8001252:	b4f0      	push	{r4, r5, r6, r7}
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8001254:	6810      	ldr	r0, [r2, #0]
  thread_t *otp, *cp;

  otp = currp;
 8001256:	6994      	ldr	r4, [r2, #24]

  tqp->p_next = tp->p_next;
 8001258:	6805      	ldr	r5, [r0, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800125a:	2701      	movs	r7, #1

  otp->p_state = CH_STATE_READY;
 800125c:	2600      	movs	r6, #0
 800125e:	68a1      	ldr	r1, [r4, #8]
 8001260:	462b      	mov	r3, r5
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001262:	606a      	str	r2, [r5, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001264:	6015      	str	r5, [r2, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8001266:	7707      	strb	r7, [r0, #28]
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8001268:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 800126a:	7726      	strb	r6, [r4, #28]
 800126c:	e000      	b.n	8001270 <chSchDoRescheduleAhead+0x20>
 800126e:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 8001270:	689a      	ldr	r2, [r3, #8]
 8001272:	428a      	cmp	r2, r1
 8001274:	d8fb      	bhi.n	800126e <chSchDoRescheduleAhead+0x1e>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 8001276:	685a      	ldr	r2, [r3, #4]
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 8001278:	4621      	mov	r1, r4
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 800127a:	6023      	str	r3, [r4, #0]
  otp->p_prev = cp->p_prev;
 800127c:	6062      	str	r2, [r4, #4]
  otp->p_prev->p_next = otp;
 800127e:	6014      	str	r4, [r2, #0]
  cp->p_prev = otp;
 8001280:	605c      	str	r4, [r3, #4]

  chSysSwitch(currp, otp);
}
 8001282:	bcf0      	pop	{r4, r5, r6, r7}
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 8001284:	f7fe bfd4 	b.w	8000230 <_port_switch>
 8001288:	20001098 	.word	0x20001098
 800128c:	00000000 	.word	0x00000000

08001290 <chEvtUnregister>:
 8001290:	2320      	movs	r3, #32
 8001292:	f383 8811 	msr	BASEPRI, r3
  event_listener_t *p;

  chDbgCheck((esp != NULL) && (elp != NULL));

  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  p = (event_listener_t *)esp;
 8001296:	4602      	mov	r2, r0
 8001298:	e002      	b.n	80012a0 <chEvtUnregister+0x10>
  /*lint -restore*/
  chSysLock();
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (p->el_next != (event_listener_t *)esp) {
  /*lint -restore*/
    if (p->el_next == elp) {
 800129a:	428b      	cmp	r3, r1
 800129c:	d007      	beq.n	80012ae <chEvtUnregister+0x1e>
 800129e:	461a      	mov	r2, r3
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  p = (event_listener_t *)esp;
  /*lint -restore*/
  chSysLock();
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (p->el_next != (event_listener_t *)esp) {
 80012a0:	6813      	ldr	r3, [r2, #0]
 80012a2:	4283      	cmp	r3, r0
 80012a4:	d1f9      	bne.n	800129a <chEvtUnregister+0xa>
 80012a6:	2300      	movs	r3, #0
 80012a8:	f383 8811 	msr	BASEPRI, r3
 80012ac:	4770      	bx	lr
  /*lint -restore*/
    if (p->el_next == elp) {
      p->el_next = elp->el_next;
 80012ae:	680b      	ldr	r3, [r1, #0]
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	2300      	movs	r3, #0
 80012b4:	f383 8811 	msr	BASEPRI, r3
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	0000      	movs	r0, r0
	...

080012c0 <chThdRelease>:
 *
 * @param[in] tp        pointer to the thread
 *
 * @api
 */
void chThdRelease(thread_t *tp) {
 80012c0:	4602      	mov	r2, r0
 80012c2:	2120      	movs	r1, #32
 80012c4:	f381 8811 	msr	BASEPRI, r1
  trefs_t refs;

  chSysLock();
  chDbgAssert(tp->p_refs > (trefs_t)0, "not referenced");
  tp->p_refs--;
 80012c8:	7f83      	ldrb	r3, [r0, #30]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	7783      	strb	r3, [r0, #30]
  refs = tp->p_refs;

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator. Of course static threads are not affected.*/
  if ((refs == (trefs_t)0) && (tp->p_state == CH_STATE_FINAL)) {
 80012d0:	b94b      	cbnz	r3, 80012e6 <chThdRelease+0x26>
 *
 * @param[in] tp        pointer to the thread
 *
 * @api
 */
void chThdRelease(thread_t *tp) {
 80012d2:	b410      	push	{r4}
  refs = tp->p_refs;

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator. Of course static threads are not affected.*/
  if ((refs == (trefs_t)0) && (tp->p_state == CH_STATE_FINAL)) {
 80012d4:	7f04      	ldrb	r4, [r0, #28]
 80012d6:	2c0f      	cmp	r4, #15
 80012d8:	d009      	beq.n	80012ee <chThdRelease+0x2e>
 80012da:	2300      	movs	r3, #0
 80012dc:	f383 8811 	msr	BASEPRI, r3
         registry on exit.*/
      break;
    }
  }
  chSysUnlock();
}
 80012e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	2300      	movs	r3, #0
 80012e8:	f383 8811 	msr	BASEPRI, r3
 80012ec:	4770      	bx	lr

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator. Of course static threads are not affected.*/
  if ((refs == (trefs_t)0) && (tp->p_state == CH_STATE_FINAL)) {
    switch (tp->p_flags & CH_FLAG_MODE_MASK) {
 80012ee:	7f44      	ldrb	r4, [r0, #29]
 80012f0:	f004 0403 	and.w	r4, r4, #3
 80012f4:	2c01      	cmp	r4, #1
 80012f6:	d011      	beq.n	800131c <chThdRelease+0x5c>
 80012f8:	2c02      	cmp	r4, #2
 80012fa:	d1ee      	bne.n	80012da <chThdRelease+0x1a>
      return;
#endif
#if CH_CFG_USE_MEMPOOLS == TRUE
    case CH_FLAG_MODE_MPOOL:
#if CH_CFG_USE_REGISTRY == TRUE
      REG_REMOVE(tp);
 80012fc:	6914      	ldr	r4, [r2, #16]
 80012fe:	6940      	ldr	r0, [r0, #20]
 8001300:	6104      	str	r4, [r0, #16]
 8001302:	6914      	ldr	r4, [r2, #16]
 8001304:	6160      	str	r0, [r4, #20]
 8001306:	f383 8811 	msr	BASEPRI, r3
#endif
      chSysUnlock();
      chPoolFree(tp->p_mpool, tp);
 800130a:	6c10      	ldr	r0, [r2, #64]	; 0x40
 800130c:	f381 8811 	msr	BASEPRI, r1
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8001310:	6801      	ldr	r1, [r0, #0]
 8001312:	6011      	str	r1, [r2, #0]
  mp->mp_next = php;
 8001314:	6002      	str	r2, [r0, #0]
 8001316:	f383 8811 	msr	BASEPRI, r3
 800131a:	e7e1      	b.n	80012e0 <chThdRelease+0x20>
  if ((refs == (trefs_t)0) && (tp->p_state == CH_STATE_FINAL)) {
    switch (tp->p_flags & CH_FLAG_MODE_MASK) {
#if CH_CFG_USE_HEAP == TRUE
    case CH_FLAG_MODE_HEAP:
#if CH_CFG_USE_REGISTRY == TRUE
      REG_REMOVE(tp);
 800131c:	6941      	ldr	r1, [r0, #20]
 800131e:	6904      	ldr	r4, [r0, #16]
 8001320:	610c      	str	r4, [r1, #16]
 8001322:	6902      	ldr	r2, [r0, #16]
 8001324:	6151      	str	r1, [r2, #20]
 8001326:	f383 8811 	msr	BASEPRI, r3
         registry on exit.*/
      break;
    }
  }
  chSysUnlock();
}
 800132a:	f85d 4b04 	ldr.w	r4, [sp], #4
    case CH_FLAG_MODE_HEAP:
#if CH_CFG_USE_REGISTRY == TRUE
      REG_REMOVE(tp);
#endif
      chSysUnlock();
      chHeapFree(tp);
 800132e:	f002 b9f7 	b.w	8003720 <chHeapFree>
 8001332:	bf00      	nop
	...

08001340 <chRegNextThread>:
 * @return              A reference to the next thread.
 * @retval NULL         if there is no next thread.
 *
 * @api
 */
thread_t *chRegNextThread(thread_t *tp) {
 8001340:	b510      	push	{r4, lr}
 8001342:	2320      	movs	r3, #32
 8001344:	f383 8811 	msr	BASEPRI, r3
  thread_t *ntp;

  chSysLock();
  ntp = tp->p_newer;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  if (ntp == (thread_t *)&ch.rlist) {
 8001348:	4b07      	ldr	r3, [pc, #28]	; (8001368 <chRegNextThread+0x28>)
 */
thread_t *chRegNextThread(thread_t *tp) {
  thread_t *ntp;

  chSysLock();
  ntp = tp->p_newer;
 800134a:	6904      	ldr	r4, [r0, #16]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  if (ntp == (thread_t *)&ch.rlist) {
 800134c:	429c      	cmp	r4, r3
    ntp = NULL;
  }
#if CH_CFG_USE_DYNAMIC == TRUE
  else {
    chDbgAssert(ntp->p_refs < (trefs_t)255, "too many references");
    ntp->p_refs++;
 800134e:	bf17      	itett	ne
 8001350:	7fa3      	ldrbne	r3, [r4, #30]
  chSysLock();
  ntp = tp->p_newer;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  if (ntp == (thread_t *)&ch.rlist) {
  /*lint -restore*/
    ntp = NULL;
 8001352:	2400      	moveq	r4, #0
  }
#if CH_CFG_USE_DYNAMIC == TRUE
  else {
    chDbgAssert(ntp->p_refs < (trefs_t)255, "too many references");
    ntp->p_refs++;
 8001354:	3301      	addne	r3, #1
 8001356:	77a3      	strbne	r3, [r4, #30]
 8001358:	2300      	movs	r3, #0
 800135a:	f383 8811 	msr	BASEPRI, r3
  }
#endif
  chSysUnlock();
#if CH_CFG_USE_DYNAMIC == TRUE
  chThdRelease(tp);
 800135e:	f7ff ffaf 	bl	80012c0 <chThdRelease>
#endif

  return ntp;
}
 8001362:	4620      	mov	r0, r4
 8001364:	bd10      	pop	{r4, pc}
 8001366:	bf00      	nop
 8001368:	20001098 	.word	0x20001098
 800136c:	00000000 	.word	0x00000000

08001370 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8001370:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8001372:	490f      	ldr	r1, [pc, #60]	; (80013b0 <chTMStopMeasurementX+0x40>)
 8001374:	685a      	ldr	r2, [r3, #4]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8001376:	6883      	ldr	r3, [r0, #8]
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8001378:	6f09      	ldr	r1, [r1, #112]	; 0x70
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 800137a:	1ad3      	subs	r3, r2, r3

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800137c:	68c2      	ldr	r2, [r0, #12]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 800137e:	b430      	push	{r4, r5}
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8001380:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8001384:	1a5b      	subs	r3, r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8001386:	3201      	adds	r2, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
 8001388:	6841      	ldr	r1, [r0, #4]
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 800138a:	18e4      	adds	r4, r4, r3

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800138c:	60c2      	str	r2, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
 800138e:	6802      	ldr	r2, [r0, #0]
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8001390:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 8001394:	428b      	cmp	r3, r1
    tmp->worst = tmp->last;
 8001396:	bf88      	it	hi
 8001398:	6043      	strhi	r3, [r0, #4]
  }
  if (tmp->last < tmp->best) {
 800139a:	4293      	cmp	r3, r2
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 800139c:	e9c0 4504 	strd	r4, r5, [r0, #16]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 80013a0:	bc30      	pop	{r4, r5}
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 80013a2:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
    tmp->best = tmp->last;
 80013a4:	bf38      	it	cc
 80013a6:	6003      	strcc	r3, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	e0001000 	.word	0xe0001000
 80013b0:	20001098 	.word	0x20001098
	...

080013c0 <chThdYield>:
 * @details Yields the CPU control to the next thread in the ready list with
 *          equal priority, if any.
 *
 * @api
 */
void chThdYield(void) {
 80013c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013c2:	2320      	movs	r3, #32
 80013c4:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.r_queue) >= currp->p_prio;
 80013c8:	4a12      	ldr	r2, [pc, #72]	; (8001414 <chThdYield+0x54>)
 80013ca:	6810      	ldr	r0, [r2, #0]
 80013cc:	6994      	ldr	r4, [r2, #24]
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();

  if (chSchCanYieldS()) {
 80013ce:	6883      	ldr	r3, [r0, #8]
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.r_queue) >= currp->p_prio;
 80013d0:	68a1      	ldr	r1, [r4, #8]
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();

  if (chSchCanYieldS()) {
 80013d2:	428b      	cmp	r3, r1
 80013d4:	d203      	bcs.n	80013de <chThdYield+0x1e>
 80013d6:	2300      	movs	r3, #0
 80013d8:	f383 8811 	msr	BASEPRI, r3
 80013dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80013de:	6805      	ldr	r5, [r0, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 80013e0:	2701      	movs	r7, #1
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80013e2:	2600      	movs	r6, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 80013e4:	606a      	str	r2, [r5, #4]
 80013e6:	462b      	mov	r3, r5
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 80013e8:	7707      	strb	r7, [r0, #28]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80013ea:	6015      	str	r5, [r2, #0]
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 80013ec:	6190      	str	r0, [r2, #24]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80013ee:	7726      	strb	r6, [r4, #28]
 80013f0:	e000      	b.n	80013f4 <chThdYield+0x34>
 80013f2:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
 80013f4:	689a      	ldr	r2, [r3, #8]
 80013f6:	4291      	cmp	r1, r2
 80013f8:	d9fb      	bls.n	80013f2 <chThdYield+0x32>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80013fa:	685a      	ldr	r2, [r3, #4]
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
 80013fc:	4621      	mov	r1, r4
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80013fe:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 8001400:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 8001402:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8001404:	605c      	str	r4, [r3, #4]
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
 8001406:	f7fe ff13 	bl	8000230 <_port_switch>
 800140a:	2300      	movs	r3, #0
 800140c:	f383 8811 	msr	BASEPRI, r3
 8001410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001412:	bf00      	nop
 8001414:	20001098 	.word	0x20001098
	...

08001420 <chSchDoReschedule>:
    chSchDoRescheduleAhead();
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
 8001420:	f7ff bf16 	b.w	8001250 <chSchDoRescheduleAhead>
	...

08001430 <chSchRescheduleS>:
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.r_queue) > currp->p_prio;
 8001430:	4b04      	ldr	r3, [pc, #16]	; (8001444 <chSchRescheduleS+0x14>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	699b      	ldr	r3, [r3, #24]
 */
void chSchRescheduleS(void) {

  chDbgCheckClassS();

  if (chSchIsRescRequiredI()) {
 8001436:	6892      	ldr	r2, [r2, #8]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	429a      	cmp	r2, r3
 800143c:	d800      	bhi.n	8001440 <chSchRescheduleS+0x10>
 800143e:	4770      	bx	lr
    chSchDoRescheduleAhead();
 8001440:	f7ff bf06 	b.w	8001250 <chSchDoRescheduleAhead>
 8001444:	20001098 	.word	0x20001098
	...

08001450 <chThdSetPriority>:
 * @param[in] newprio   the new priority level of the running thread
 * @return              The old priority level.
 *
 * @api
 */
tprio_t chThdSetPriority(tprio_t newprio) {
 8001450:	b510      	push	{r4, lr}
 8001452:	2320      	movs	r3, #32
 8001454:	f383 8811 	msr	BASEPRI, r3

  chDbgCheck(newprio <= HIGHPRIO);

  chSysLock();
#if CH_CFG_USE_MUTEXES == TRUE
  oldprio = currp->p_realprio;
 8001458:	4b08      	ldr	r3, [pc, #32]	; (800147c <chThdSetPriority+0x2c>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if ((currp->p_prio == currp->p_realprio) || (newprio > currp->p_prio)) {
 800145e:	6899      	ldr	r1, [r3, #8]
 8001460:	428c      	cmp	r4, r1
 8001462:	d001      	beq.n	8001468 <chThdSetPriority+0x18>
 8001464:	4281      	cmp	r1, r0
 8001466:	d200      	bcs.n	800146a <chThdSetPriority+0x1a>
    currp->p_prio = newprio;
 8001468:	6098      	str	r0, [r3, #8]
  }
  currp->p_realprio = newprio;
 800146a:	63d8      	str	r0, [r3, #60]	; 0x3c
#else
  oldprio = currp->p_prio;
  currp->p_prio = newprio;
#endif
  chSchRescheduleS();
 800146c:	f7ff ffe0 	bl	8001430 <chSchRescheduleS>
 8001470:	2300      	movs	r3, #0
 8001472:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return oldprio;
}
 8001476:	4620      	mov	r0, r4
 8001478:	bd10      	pop	{r4, pc}
 800147a:	bf00      	nop
 800147c:	20001098 	.word	0x20001098

08001480 <chSchWakeupS>:

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8001480:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <chSchWakeupS+0x54>)
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8001482:	b470      	push	{r4, r5, r6}

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8001484:	699e      	ldr	r6, [r3, #24]
 8001486:	6884      	ldr	r4, [r0, #8]
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8001488:	4605      	mov	r5, r0
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 800148a:	6201      	str	r1, [r0, #32]

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 800148c:	68b0      	ldr	r0, [r6, #8]
 800148e:	4284      	cmp	r4, r0
 8001490:	d80c      	bhi.n	80014ac <chSchWakeupS+0x2c>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001492:	2200      	movs	r2, #0
 8001494:	772a      	strb	r2, [r5, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8001496:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	4294      	cmp	r4, r2
 800149c:	d9fb      	bls.n	8001496 <chSchWakeupS+0x16>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800149e:	685a      	ldr	r2, [r3, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80014a0:	602b      	str	r3, [r5, #0]
  tp->p_prev = cp->p_prev;
 80014a2:	606a      	str	r2, [r5, #4]
  tp->p_prev->p_next = tp;
 80014a4:	6015      	str	r5, [r2, #0]
  cp->p_prev = tp;
 80014a6:	605d      	str	r5, [r3, #4]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 80014a8:	bc70      	pop	{r4, r5, r6}
 80014aa:	4770      	bx	lr
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
  cp = (thread_t *)&ch.rlist.r_queue;
 80014ac:	461a      	mov	r2, r3
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80014ae:	2100      	movs	r1, #0
 80014b0:	7731      	strb	r1, [r6, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 80014b2:	6812      	ldr	r2, [r2, #0]
  } while (cp->p_prio >= tp->p_prio);
 80014b4:	6891      	ldr	r1, [r2, #8]
 80014b6:	4288      	cmp	r0, r1
 80014b8:	d9fb      	bls.n	80014b2 <chSchWakeupS+0x32>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80014ba:	6850      	ldr	r0, [r2, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 80014bc:	2401      	movs	r4, #1
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80014be:	6070      	str	r0, [r6, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80014c0:	6032      	str	r2, [r6, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 80014c2:	6006      	str	r6, [r0, #0]
  cp->p_prev = tp;
 80014c4:	6056      	str	r6, [r2, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 80014c6:	772c      	strb	r4, [r5, #28]
    chSysSwitch(ntp, otp);
 80014c8:	4631      	mov	r1, r6
 80014ca:	4628      	mov	r0, r5
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
    setcurrp(ntp);
 80014cc:	619d      	str	r5, [r3, #24]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 80014ce:	bc70      	pop	{r4, r5, r6}
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 80014d0:	f7fe beae 	b.w	8000230 <_port_switch>
 80014d4:	20001098 	.word	0x20001098
	...

080014e0 <chSemSignal>:
 *
 * @param[in] sp        pointer to a @p semaphore_t structure
 *
 * @api
 */
void chSemSignal(semaphore_t *sp) {
 80014e0:	b508      	push	{r3, lr}
 80014e2:	2320      	movs	r3, #32
 80014e4:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sp->s_cnt <= (cnt_t)0) {
 80014e8:	6883      	ldr	r3, [r0, #8]
 80014ea:	3301      	adds	r3, #1
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	6083      	str	r3, [r0, #8]
 80014f0:	dd03      	ble.n	80014fa <chSemSignal+0x1a>
 80014f2:	2300      	movs	r3, #0
 80014f4:	f383 8811 	msr	BASEPRI, r3
 80014f8:	bd08      	pop	{r3, pc}
 80014fa:	4603      	mov	r3, r0
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 80014fc:	6800      	ldr	r0, [r0, #0]
    chSchWakeupS(queue_fifo_remove(&sp->s_queue), MSG_OK);
 80014fe:	2100      	movs	r1, #0

  tqp->p_next = tp->p_next;
 8001500:	6802      	ldr	r2, [r0, #0]
 8001502:	601a      	str	r2, [r3, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001504:	6053      	str	r3, [r2, #4]
 8001506:	f7ff ffbb 	bl	8001480 <chSchWakeupS>
 800150a:	2300      	movs	r3, #0
 800150c:	f383 8811 	msr	BASEPRI, r3
 8001510:	bd08      	pop	{r3, pc}
 8001512:	bf00      	nop
	...

08001520 <chThdCreateFromHeap>:
 * @retval NULL         if the memory cannot be allocated.
 *
 * @api
 */
thread_t *chThdCreateFromHeap(memory_heap_t *heapp, size_t size,
                              tprio_t prio, tfunc_t pf, void *arg) {
 8001520:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001524:	4690      	mov	r8, r2
 8001526:	4699      	mov	r9, r3
 8001528:	460d      	mov	r5, r1
  void *wsp;
  thread_t *tp;

  wsp = chHeapAlloc(heapp, size);
 800152a:	f002 f941 	bl	80037b0 <chHeapAlloc>
  if (wsp == NULL) {
 800152e:	4604      	mov	r4, r0
 8001530:	2800      	cmp	r0, #0
 8001532:	d034      	beq.n	800159e <chThdCreateFromHeap+0x7e>
 8001534:	2320      	movs	r3, #32
 8001536:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800153a:	4f1a      	ldr	r7, [pc, #104]	; (80015a4 <chThdCreateFromHeap+0x84>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800153c:	f1a5 0124 	sub.w	r1, r5, #36	; 0x24
 8001540:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001542:	eb00 0c01 	add.w	ip, r0, r1
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001546:	697b      	ldr	r3, [r7, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001548:	f8c0 c00c 	str.w	ip, [r0, #12]
 800154c:	f840 9001 	str.w	r9, [r0, r1]
 8001550:	f8cc 2004 	str.w	r2, [ip, #4]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8001554:	f04f 0201 	mov.w	r2, #1

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001558:	f8df b04c 	ldr.w	fp, [pc, #76]	; 80015a8 <chThdCreateFromHeap+0x88>
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 800155c:	2500      	movs	r5, #0
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 800155e:	f100 0628 	add.w	r6, r0, #40	; 0x28
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 8001562:	f100 0e24 	add.w	lr, r0, #36	; 0x24
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8001566:	f04f 0a02 	mov.w	sl, #2

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800156a:	f8cc b020 	str.w	fp, [ip, #32]
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_HEAP;
  chSchWakeupS(tp, MSG_OK);
 800156e:	4629      	mov	r1, r5
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8001570:	f8c0 8008 	str.w	r8, [r0, #8]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001574:	6107      	str	r7, [r0, #16]
 8001576:	6143      	str	r3, [r0, #20]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8001578:	f8c0 803c 	str.w	r8, [r0, #60]	; 0x3c
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 800157c:	f880 a01c 	strb.w	sl, [r0, #28]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8001580:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8001582:	6345      	str	r5, [r0, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8001584:	6185      	str	r5, [r0, #24]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8001586:	7782      	strb	r2, [r0, #30]
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001588:	6118      	str	r0, [r3, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 800158a:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_HEAP;
 800158e:	7762      	strb	r2, [r4, #29]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001590:	6286      	str	r6, [r0, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 8001592:	62c6      	str	r6, [r0, #44]	; 0x2c
 8001594:	6178      	str	r0, [r7, #20]
  chSchWakeupS(tp, MSG_OK);
 8001596:	f7ff ff73 	bl	8001480 <chSchWakeupS>
 800159a:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  return tp;
}
 800159e:	4620      	mov	r0, r4
 80015a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015a4:	20001098 	.word	0x20001098
 80015a8:	08000241 	.word	0x08000241
 80015ac:	00000000 	.word	0x00000000

080015b0 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 80015b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80015b4:	4699      	mov	r9, r3
 80015b6:	4604      	mov	r4, r0
 80015b8:	2320      	movs	r3, #32
 80015ba:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80015be:	4e19      	ldr	r6, [pc, #100]	; (8001624 <chThdCreateStatic+0x74>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80015c0:	3924      	subs	r1, #36	; 0x24
 80015c2:	1847      	adds	r7, r0, r1
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80015c4:	6973      	ldr	r3, [r6, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80015c6:	f8df a060 	ldr.w	sl, [pc, #96]	; 8001628 <chThdCreateStatic+0x78>
 80015ca:	60c7      	str	r7, [r0, #12]
 80015cc:	f840 9001 	str.w	r9, [r0, r1]
 80015d0:	9908      	ldr	r1, [sp, #32]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 80015d2:	2500      	movs	r5, #0
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 80015d4:	f100 0928 	add.w	r9, r0, #40	; 0x28
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80015d8:	f04f 0c01 	mov.w	ip, #1
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 80015dc:	f100 0e24 	add.w	lr, r0, #36	; 0x24
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80015e0:	f04f 0802 	mov.w	r8, #2

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80015e4:	6079      	str	r1, [r7, #4]
 80015e6:	f8c7 a020 	str.w	sl, [r7, #32]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 80015ea:	4629      	mov	r1, r5
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 80015ec:	6082      	str	r2, [r0, #8]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80015ee:	6106      	str	r6, [r0, #16]
 80015f0:	6143      	str	r3, [r0, #20]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 80015f2:	63c2      	str	r2, [r0, #60]	; 0x3c
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80015f4:	f880 801c 	strb.w	r8, [r0, #28]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80015f8:	f880 c01e 	strb.w	ip, [r0, #30]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 80015fc:	7745      	strb	r5, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 80015fe:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8001600:	6345      	str	r5, [r0, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8001602:	6185      	str	r5, [r0, #24]
  REG_INSERT(tp);
 8001604:	6118      	str	r0, [r3, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8001606:	f8c0 e024 	str.w	lr, [r0, #36]	; 0x24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800160a:	f8c0 9028 	str.w	r9, [r0, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 800160e:	f8c0 902c 	str.w	r9, [r0, #44]	; 0x2c
 8001612:	6170      	str	r0, [r6, #20]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 8001614:	f7ff ff34 	bl	8001480 <chSchWakeupS>
 8001618:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  return tp;
}
 800161c:	4620      	mov	r0, r4
 800161e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001622:	bf00      	nop
 8001624:	20001098 	.word	0x20001098
 8001628:	08000241 	.word	0x08000241
 800162c:	00000000 	.word	0x00000000

08001630 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 8001630:	4b07      	ldr	r3, [pc, #28]	; (8001650 <chSchGoSleepS+0x20>)
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8001632:	b430      	push	{r4, r5}
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8001634:	681a      	ldr	r2, [r3, #0]
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 8001636:	6999      	ldr	r1, [r3, #24]

  tqp->p_next = tp->p_next;
 8001638:	6814      	ldr	r4, [r2, #0]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800163a:	2501      	movs	r5, #1
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
  otp->p_state = newstate;
 800163c:	7708      	strb	r0, [r1, #28]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800163e:	6063      	str	r3, [r4, #4]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8001640:	7715      	strb	r5, [r2, #28]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001642:	601c      	str	r4, [r3, #0]
  chSysSwitch(currp, otp);
 8001644:	4610      	mov	r0, r2
}
 8001646:	bc30      	pop	{r4, r5}
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8001648:	619a      	str	r2, [r3, #24]
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 800164a:	f7fe bdf1 	b.w	8000230 <_port_switch>
 800164e:	bf00      	nop
 8001650:	20001098 	.word	0x20001098
	...

08001660 <chMsgWait>:
 *
 * @return              A reference to the thread carrying the message.
 *
 * @api
 */
thread_t *chMsgWait(void) {
 8001660:	b510      	push	{r4, lr}
 8001662:	2320      	movs	r3, #32
 8001664:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp)) {
 8001668:	4c0b      	ldr	r4, [pc, #44]	; (8001698 <chMsgWait+0x38>)
 800166a:	69a2      	ldr	r2, [r4, #24]
 */
static inline bool chMsgIsPendingI(thread_t *tp) {

  chDbgCheckClassI();

  return (bool)(tp->p_msgqueue.p_next != (thread_t *)&tp->p_msgqueue);
 800166c:	4613      	mov	r3, r2
 800166e:	f853 0f28 	ldr.w	r0, [r3, #40]!
 8001672:	4298      	cmp	r0, r3
 8001674:	d008      	beq.n	8001688 <chMsgWait+0x28>
 8001676:	6801      	ldr	r1, [r0, #0]
    chSchGoSleepS(CH_STATE_WTMSG);
  }
  tp = queue_fifo_remove(&currp->p_msgqueue);
  tp->p_state = CH_STATE_SNDMSG;
 8001678:	240d      	movs	r4, #13
 800167a:	6291      	str	r1, [r2, #40]	; 0x28
  tqp->p_next->p_prev = (thread_t *)tqp;
 800167c:	604b      	str	r3, [r1, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	7704      	strb	r4, [r0, #28]
 8001682:	f382 8811 	msr	BASEPRI, r2
  chSysUnlock();

  return tp;
}
 8001686:	bd10      	pop	{r4, pc}
thread_t *chMsgWait(void) {
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp)) {
    chSchGoSleepS(CH_STATE_WTMSG);
 8001688:	200e      	movs	r0, #14
 800168a:	f7ff ffd1 	bl	8001630 <chSchGoSleepS>
 800168e:	69a2      	ldr	r2, [r4, #24]
 8001690:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8001692:	f102 0328 	add.w	r3, r2, #40	; 0x28
 8001696:	e7ee      	b.n	8001676 <chMsgWait+0x16>
 8001698:	20001098 	.word	0x20001098
 800169c:	00000000 	.word	0x00000000

080016a0 <chSemWait>:
 80016a0:	2320      	movs	r3, #32
 80016a2:	f383 8811 	msr	BASEPRI, r3
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
 80016a6:	6883      	ldr	r3, [r0, #8]
 80016a8:	3b01      	subs	r3, #1
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	6083      	str	r3, [r0, #8]
 80016ae:	db04      	blt.n	80016ba <chSemWait+0x1a>
    chSchGoSleepS(CH_STATE_WTSEM);

    return currp->p_u.rdymsg;
  }

  return MSG_OK;
 80016b0:	2000      	movs	r0, #0
 80016b2:	2300      	movs	r3, #0
 80016b4:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  msg = chSemWaitS(sp);
  chSysUnlock();

  return msg;
}
 80016b8:	4770      	bx	lr
 80016ba:	4603      	mov	r3, r0
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemWait(semaphore_t *sp) {
 80016bc:	b510      	push	{r4, lr}
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
    currp->p_u.wtsemp = sp;
 80016be:	4c08      	ldr	r4, [pc, #32]	; (80016e0 <chSemWait+0x40>)
    sem_insert(currp, &sp->s_queue);
    chSchGoSleepS(CH_STATE_WTSEM);
 80016c0:	2005      	movs	r0, #5
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
    currp->p_u.wtsemp = sp;
 80016c2:	69a2      	ldr	r2, [r4, #24]
 80016c4:	6213      	str	r3, [r2, #32]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 80016c6:	6859      	ldr	r1, [r3, #4]
  cp->p_prev = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
 80016c8:	6013      	str	r3, [r2, #0]
  tp->p_prev = tqp->p_prev;
 80016ca:	6051      	str	r1, [r2, #4]
  tp->p_prev->p_next = tp;
 80016cc:	600a      	str	r2, [r1, #0]
  tqp->p_prev = tp;
 80016ce:	605a      	str	r2, [r3, #4]
    sem_insert(currp, &sp->s_queue);
    chSchGoSleepS(CH_STATE_WTSEM);
 80016d0:	f7ff ffae 	bl	8001630 <chSchGoSleepS>

    return currp->p_u.rdymsg;
 80016d4:	69a3      	ldr	r3, [r4, #24]
 80016d6:	6a18      	ldr	r0, [r3, #32]
 80016d8:	2300      	movs	r3, #0
 80016da:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  msg = chSemWaitS(sp);
  chSysUnlock();

  return msg;
}
 80016de:	bd10      	pop	{r4, pc}
 80016e0:	20001098 	.word	0x20001098
	...

080016f0 <chThdWait>:
 * @param[in] tp        pointer to the thread
 * @return              The exit code from the terminated thread.
 *
 * @api
 */
msg_t chThdWait(thread_t *tp) {
 80016f0:	b538      	push	{r3, r4, r5, lr}
 80016f2:	4604      	mov	r4, r0
 80016f4:	2320      	movs	r3, #32
 80016f6:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chDbgAssert(tp != currp, "waiting self");
#if CH_CFG_USE_DYNAMIC == TRUE
  chDbgAssert(tp->p_refs > (trefs_t)0, "not referenced");
#endif
  if (tp->p_state != CH_STATE_FINAL) {
 80016fa:	7f03      	ldrb	r3, [r0, #28]
 80016fc:	2b0f      	cmp	r3, #15
 80016fe:	d007      	beq.n	8001710 <chThdWait+0x20>
    list_insert(currp, &tp->p_waiting);
 8001700:	4b08      	ldr	r3, [pc, #32]	; (8001724 <chThdWait+0x34>)
/* If the performance code path has been chosen then all the following
   functions are inlined into the various kernel modules.*/
#if CH_CFG_OPTIMIZE_SPEED == TRUE
static inline void list_insert(thread_t *tp, threads_list_t *tlp) {

  tp->p_next = tlp->p_next;
 8001702:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001704:	699b      	ldr	r3, [r3, #24]
    chSchGoSleepS(CH_STATE_WTEXIT);
 8001706:	2009      	movs	r0, #9
 8001708:	601a      	str	r2, [r3, #0]
  tlp->p_next = tp;
 800170a:	6263      	str	r3, [r4, #36]	; 0x24
 800170c:	f7ff ff90 	bl	8001630 <chSchGoSleepS>
  }
  msg = tp->p_u.exitcode;
 8001710:	6a25      	ldr	r5, [r4, #32]
 8001712:	2300      	movs	r3, #0
 8001714:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

#if CH_CFG_USE_DYNAMIC == TRUE
  /* Releasing a lock if it is a dynamic thread.*/
  chThdRelease(tp);
 8001718:	4620      	mov	r0, r4
 800171a:	f7ff fdd1 	bl	80012c0 <chThdRelease>
#endif

  return msg;
}
 800171e:	4628      	mov	r0, r5
 8001720:	bd38      	pop	{r3, r4, r5, pc}
 8001722:	bf00      	nop
 8001724:	20001098 	.word	0x20001098
	...

08001730 <chSchReadyI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 8001730:	b410      	push	{r4}
 8001732:	4604      	mov	r4, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001734:	2200      	movs	r2, #0
 8001736:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8001738:	4b07      	ldr	r3, [pc, #28]	; (8001758 <chSchReadyI+0x28>)
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800173a:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 800173c:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	428a      	cmp	r2, r1
 8001742:	d2fb      	bcs.n	800173c <chSchReadyI+0xc>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001744:	685a      	ldr	r2, [r3, #4]
  tp->p_prev->p_next = tp;
  cp->p_prev = tp;

  return tp;
}
 8001746:	4620      	mov	r0, r4
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8001748:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 800174a:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 800174c:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800174e:	605c      	str	r4, [r3, #4]

  return tp;
}
 8001750:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	20001098 	.word	0x20001098
 800175c:	00000000 	.word	0x00000000

08001760 <chIQPutI>:
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 8001760:	6942      	ldr	r2, [r0, #20]
 * @retval Q_FULL       if the queue is full and the operation cannot be
 *                      completed.
 *
 * @iclass
 */
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {
 8001762:	4603      	mov	r3, r0
 8001764:	6980      	ldr	r0, [r0, #24]
 8001766:	b510      	push	{r4, lr}
 8001768:	4282      	cmp	r2, r0
 800176a:	d01d      	beq.n	80017a8 <chIQPutI+0x48>

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 800176c:	6898      	ldr	r0, [r3, #8]
  *iqp->q_wrptr++ = b;
 800176e:	1c54      	adds	r4, r2, #1

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 8001770:	3001      	adds	r0, #1
  *iqp->q_wrptr++ = b;
 8001772:	615c      	str	r4, [r3, #20]

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 8001774:	6098      	str	r0, [r3, #8]
  *iqp->q_wrptr++ = b;
 8001776:	7011      	strb	r1, [r2, #0]
  if (iqp->q_wrptr >= iqp->q_top) {
 8001778:	6959      	ldr	r1, [r3, #20]
 800177a:	691a      	ldr	r2, [r3, #16]
 800177c:	4291      	cmp	r1, r2
 800177e:	d20c      	bcs.n	800179a <chIQPutI+0x3a>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8001780:	681a      	ldr	r2, [r3, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8001782:	4293      	cmp	r3, r2
 8001784:	d00e      	beq.n	80017a4 <chIQPutI+0x44>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001786:	6811      	ldr	r1, [r2, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8001788:	2400      	movs	r4, #0
 800178a:	6019      	str	r1, [r3, #0]
  (void) chSchReadyI(tp);
 800178c:	4610      	mov	r0, r2
  tqp->p_next->p_prev = (thread_t *)tqp;
 800178e:	604b      	str	r3, [r1, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8001790:	6214      	str	r4, [r2, #32]
  (void) chSchReadyI(tp);
 8001792:	f7ff ffcd 	bl	8001730 <chSchReadyI>
    iqp->q_wrptr = iqp->q_buffer;
  }

  chThdDequeueNextI(&iqp->q_waiting, Q_OK);

  return Q_OK;
 8001796:	4620      	mov	r0, r4
 8001798:	bd10      	pop	{r4, pc}
  }

  iqp->q_counter++;
  *iqp->q_wrptr++ = b;
  if (iqp->q_wrptr >= iqp->q_top) {
    iqp->q_wrptr = iqp->q_buffer;
 800179a:	68da      	ldr	r2, [r3, #12]
 800179c:	615a      	str	r2, [r3, #20]
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d1f0      	bne.n	8001786 <chIQPutI+0x26>
  }

  chThdDequeueNextI(&iqp->q_waiting, Q_OK);

  return Q_OK;
 80017a4:	2000      	movs	r0, #0
 80017a6:	bd10      	pop	{r4, pc}
 80017a8:	6898      	ldr	r0, [r3, #8]
 80017aa:	2800      	cmp	r0, #0
 80017ac:	d0de      	beq.n	800176c <chIQPutI+0xc>
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {

  chDbgCheckClassI();

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
 80017ae:	f06f 0003 	mvn.w	r0, #3
 80017b2:	bd10      	pop	{r4, pc}
	...

080017c0 <chMsgSend>:
 * @return              The answer message from @p chMsgRelease().
 *
 * @api
 */
msg_t chMsgSend(thread_t *tp, msg_t msg) {
  thread_t *ctp = currp;
 80017c0:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <chMsgSend+0x3c>)
 * @param[in] msg       the message
 * @return              The answer message from @p chMsgRelease().
 *
 * @api
 */
msg_t chMsgSend(thread_t *tp, msg_t msg) {
 80017c2:	b570      	push	{r4, r5, r6, lr}
 80017c4:	2220      	movs	r2, #32
  thread_t *ctp = currp;
 80017c6:	699c      	ldr	r4, [r3, #24]
 80017c8:	f382 8811 	msr	BASEPRI, r2

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->p_msg = msg;
  ctp->p_u.wtobjp = &tp->p_msgqueue;
 80017cc:	f100 0528 	add.w	r5, r0, #40	; 0x28
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG) {
 80017d0:	7f06      	ldrb	r6, [r0, #28]

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->p_msg = msg;
  ctp->p_u.wtobjp = &tp->p_msgqueue;
 80017d2:	6225      	str	r5, [r4, #32]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 80017d4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG) {
 80017d6:	2e0e      	cmp	r6, #14
  thread_t *ctp = currp;

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->p_msg = msg;
 80017d8:	6321      	str	r1, [r4, #48]	; 0x30
  cp->p_prev = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
 80017da:	6025      	str	r5, [r4, #0]
  tp->p_prev = tqp->p_prev;
 80017dc:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 80017de:	6014      	str	r4, [r2, #0]
  tqp->p_prev = tp;
 80017e0:	62c4      	str	r4, [r0, #44]	; 0x2c
  ctp->p_u.wtobjp = &tp->p_msgqueue;
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG) {
 80017e2:	d007      	beq.n	80017f4 <chMsgSend+0x34>
    (void) chSchReadyI(tp);
  }
  chSchGoSleepS(CH_STATE_SNDMSGQ);
 80017e4:	200c      	movs	r0, #12
 80017e6:	f7ff ff23 	bl	8001630 <chSchGoSleepS>
  msg = ctp->p_u.rdymsg;
 80017ea:	6a20      	ldr	r0, [r4, #32]
 80017ec:	2300      	movs	r3, #0
 80017ee:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return msg;
}
 80017f2:	bd70      	pop	{r4, r5, r6, pc}
  chSysLock();
  ctp->p_msg = msg;
  ctp->p_u.wtobjp = &tp->p_msgqueue;
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG) {
    (void) chSchReadyI(tp);
 80017f4:	f7ff ff9c 	bl	8001730 <chSchReadyI>
 80017f8:	e7f4      	b.n	80017e4 <chMsgSend+0x24>
 80017fa:	bf00      	nop
 80017fc:	20001098 	.word	0x20001098

08001800 <chEvtSignalI>:
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8001800:	6b43      	ldr	r3, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8001802:	7f02      	ldrb	r2, [r0, #28]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8001804:	4319      	orrs	r1, r3
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8001806:	2a0a      	cmp	r2, #10
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8001808:	6341      	str	r1, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800180a:	d00a      	beq.n	8001822 <chEvtSignalI+0x22>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 800180c:	2a0b      	cmp	r2, #11
 800180e:	d000      	beq.n	8001812 <chEvtSignalI+0x12>
 8001810:	4770      	bx	lr
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 8001812:	6a03      	ldr	r3, [r0, #32]
 8001814:	4019      	ands	r1, r3

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 8001816:	428b      	cmp	r3, r1
 8001818:	d1fa      	bne.n	8001810 <chEvtSignalI+0x10>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 800181a:	2300      	movs	r3, #0
 800181c:	6203      	str	r3, [r0, #32]
    (void) chSchReadyI(tp);
 800181e:	f7ff bf87 	b.w	8001730 <chSchReadyI>
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 8001822:	6a03      	ldr	r3, [r0, #32]
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8001824:	4219      	tst	r1, r3
 8001826:	d1f8      	bne.n	800181a <chEvtSignalI+0x1a>
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	0000      	movs	r0, r0
	...

08001830 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8001830:	b570      	push	{r4, r5, r6, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
 8001832:	6804      	ldr	r4, [r0, #0]
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8001834:	4606      	mov	r6, r0
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8001836:	42a0      	cmp	r0, r4
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8001838:	460d      	mov	r5, r1
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 800183a:	d00d      	beq.n	8001858 <chEvtBroadcastFlagsI+0x28>
  /*lint -restore*/
    elp->el_flags |= flags;
 800183c:	68e3      	ldr	r3, [r4, #12]
 800183e:	432b      	orrs	r3, r5
 8001840:	60e3      	str	r3, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8001842:	b115      	cbz	r5, 800184a <chEvtBroadcastFlagsI+0x1a>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
 8001844:	6922      	ldr	r2, [r4, #16]
  while (elp != (event_listener_t *)esp) {
  /*lint -restore*/
    elp->el_flags |= flags;
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8001846:	4213      	tst	r3, r2
 8001848:	d003      	beq.n	8001852 <chEvtBroadcastFlagsI+0x22>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
 800184a:	6860      	ldr	r0, [r4, #4]
 800184c:	68a1      	ldr	r1, [r4, #8]
 800184e:	f7ff ffd7 	bl	8001800 <chEvtSignalI>
    }
    elp = elp->el_next;
 8001852:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8001854:	42a6      	cmp	r6, r4
 8001856:	d1f1      	bne.n	800183c <chEvtBroadcastFlagsI+0xc>
 8001858:	bd70      	pop	{r4, r5, r6, pc}
 800185a:	bf00      	nop
 800185c:	0000      	movs	r0, r0
	...

08001860 <chMtxUnlockAll>:
 *          inheritance mechanism.
 *
 * @api
 */
void chMtxUnlockAll(void) {
  thread_t *ctp = currp;
 8001860:	4a13      	ldr	r2, [pc, #76]	; (80018b0 <chMtxUnlockAll+0x50>)
 *          this function does not have any overhead related to the priority
 *          inheritance mechanism.
 *
 * @api
 */
void chMtxUnlockAll(void) {
 8001862:	b570      	push	{r4, r5, r6, lr}
 8001864:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8001866:	6994      	ldr	r4, [r2, #24]
 8001868:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if (ctp->p_mtxlist != NULL) {
 800186c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800186e:	b1d3      	cbz	r3, 80018a6 <chMtxUnlockAll+0x46>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->m_cnt = (cnt_t)0;
#endif
        mp->m_owner = NULL;
 8001870:	2600      	movs	r6, #0
 8001872:	e00b      	b.n	800188c <chMtxUnlockAll+0x2c>
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->m_cnt = (cnt_t)1;
#endif
        thread_t *tp = queue_fifo_remove(&mp->m_queue);
        mp->m_owner = tp;
        mp->m_next = tp->p_mtxlist;
 8001874:	6b95      	ldr	r5, [r2, #56]	; 0x38
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001876:	6811      	ldr	r1, [r2, #0]
        tp->p_mtxlist = mp;
        (void) chSchReadyI(tp);
 8001878:	4610      	mov	r0, r2
 800187a:	6019      	str	r1, [r3, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800187c:	604b      	str	r3, [r1, #4]
      if (chMtxQueueNotEmptyS(mp)) {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->m_cnt = (cnt_t)1;
#endif
        thread_t *tp = queue_fifo_remove(&mp->m_queue);
        mp->m_owner = tp;
 800187e:	609a      	str	r2, [r3, #8]
        mp->m_next = tp->p_mtxlist;
 8001880:	60dd      	str	r5, [r3, #12]
        tp->p_mtxlist = mp;
 8001882:	6393      	str	r3, [r2, #56]	; 0x38
        (void) chSchReadyI(tp);
 8001884:	f7ff ff54 	bl	8001730 <chSchReadyI>
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->m_cnt = (cnt_t)0;
#endif
        mp->m_owner = NULL;
      }
    } while (ctp->p_mtxlist != NULL);
 8001888:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800188a:	b143      	cbz	r3, 800189e <chMtxUnlockAll+0x3e>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800188c:	681a      	ldr	r2, [r3, #0]

  chSysLock();
  if (ctp->p_mtxlist != NULL) {
    do {
      mutex_t *mp = ctp->p_mtxlist;
      ctp->p_mtxlist = mp->m_next;
 800188e:	68d9      	ldr	r1, [r3, #12]
      if (chMtxQueueNotEmptyS(mp)) {
 8001890:	4293      	cmp	r3, r2

  chSysLock();
  if (ctp->p_mtxlist != NULL) {
    do {
      mutex_t *mp = ctp->p_mtxlist;
      ctp->p_mtxlist = mp->m_next;
 8001892:	63a1      	str	r1, [r4, #56]	; 0x38
      if (chMtxQueueNotEmptyS(mp)) {
 8001894:	d1ee      	bne.n	8001874 <chMtxUnlockAll+0x14>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->m_cnt = (cnt_t)0;
#endif
        mp->m_owner = NULL;
 8001896:	609e      	str	r6, [r3, #8]
      }
    } while (ctp->p_mtxlist != NULL);
 8001898:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1f6      	bne.n	800188c <chMtxUnlockAll+0x2c>
    ctp->p_prio = ctp->p_realprio;
 800189e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80018a0:	60a3      	str	r3, [r4, #8]
    chSchRescheduleS();
 80018a2:	f7ff fdc5 	bl	8001430 <chSchRescheduleS>
 80018a6:	2300      	movs	r3, #0
 80018a8:	f383 8811 	msr	BASEPRI, r3
 80018ac:	bd70      	pop	{r4, r5, r6, pc}
 80018ae:	bf00      	nop
 80018b0:	20001098 	.word	0x20001098
	...

080018c0 <chMtxUnlockS>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
 80018c0:	b430      	push	{r4, r5}
 80018c2:	4604      	mov	r4, r0
  thread_t *ctp = currp;
 80018c4:	4a11      	ldr	r2, [pc, #68]	; (800190c <chMtxUnlockS+0x4c>)
 80018c6:	6825      	ldr	r5, [r4, #0]
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 80018c8:	68c3      	ldr	r3, [r0, #12]
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
  thread_t *ctp = currp;
 80018ca:	6990      	ldr	r0, [r2, #24]
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 80018cc:	42ac      	cmp	r4, r5
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 80018ce:	6383      	str	r3, [r0, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 80018d0:	d017      	beq.n	8001902 <chMtxUnlockS+0x42>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
 80018d2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 80018d4:	b14b      	cbz	r3, 80018ea <chMtxUnlockS+0x2a>
 80018d6:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 80018d8:	4293      	cmp	r3, r2
 80018da:	d003      	beq.n	80018e4 <chMtxUnlockS+0x24>
            (lmp->m_queue.p_next->p_prio > newprio)) {
 80018dc:	6892      	ldr	r2, [r2, #8]
 80018de:	4291      	cmp	r1, r2
 80018e0:	bf38      	it	cc
 80018e2:	4611      	movcc	r1, r2
          newprio = lmp->m_queue.p_next->p_prio;
        }
        lmp = lmp->m_next;
 80018e4:	68db      	ldr	r3, [r3, #12]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f5      	bne.n	80018d6 <chMtxUnlockS+0x16>
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 80018ea:	6baa      	ldr	r2, [r5, #56]	; 0x38
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80018ec:	682b      	ldr	r3, [r5, #0]
        lmp = lmp->m_next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->p_prio = newprio;
 80018ee:	6081      	str	r1, [r0, #8]
 80018f0:	6023      	str	r3, [r4, #0]
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
      tp->p_mtxlist = mp;
      (void) chSchReadyI(tp);
 80018f2:	4628      	mov	r0, r5
  tqp->p_next->p_prev = (thread_t *)tqp;
 80018f4:	605c      	str	r4, [r3, #4]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
 80018f6:	60a5      	str	r5, [r4, #8]
      mp->m_next = tp->p_mtxlist;
 80018f8:	60e2      	str	r2, [r4, #12]
      tp->p_mtxlist = mp;
 80018fa:	63ac      	str	r4, [r5, #56]	; 0x38
      mp->m_owner = NULL;
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif
}
 80018fc:	bc30      	pop	{r4, r5}
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
      tp->p_mtxlist = mp;
      (void) chSchReadyI(tp);
 80018fe:	f7ff bf17 	b.w	8001730 <chSchReadyI>
    }
    else {
      mp->m_owner = NULL;
 8001902:	2300      	movs	r3, #0
 8001904:	60a3      	str	r3, [r4, #8]
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif
}
 8001906:	bc30      	pop	{r4, r5}
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	20001098 	.word	0x20001098

08001910 <chMtxUnlock>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
  thread_t *ctp = currp;
 8001910:	4b17      	ldr	r3, [pc, #92]	; (8001970 <chMtxUnlock+0x60>)
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 8001912:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8001914:	699d      	ldr	r5, [r3, #24]
 8001916:	2320      	movs	r3, #32
 8001918:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800191c:	6804      	ldr	r4, [r0, #0]
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 800191e:	68c3      	ldr	r3, [r0, #12]

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8001920:	42a0      	cmp	r0, r4
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 8001922:	63ab      	str	r3, [r5, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8001924:	d01d      	beq.n	8001962 <chMtxUnlock+0x52>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
 8001926:	6be9      	ldr	r1, [r5, #60]	; 0x3c
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8001928:	b14b      	cbz	r3, 800193e <chMtxUnlock+0x2e>
 800192a:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 800192c:	4293      	cmp	r3, r2
 800192e:	d003      	beq.n	8001938 <chMtxUnlock+0x28>
            (lmp->m_queue.p_next->p_prio > newprio)) {
 8001930:	6892      	ldr	r2, [r2, #8]
 8001932:	4291      	cmp	r1, r2
 8001934:	bf38      	it	cc
 8001936:	4611      	movcc	r1, r2
          newprio = lmp->m_queue.p_next->p_prio;
        }
        lmp = lmp->m_next;
 8001938:	68db      	ldr	r3, [r3, #12]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1f5      	bne.n	800192a <chMtxUnlock+0x1a>
 800193e:	4603      	mov	r3, r0
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001940:	6822      	ldr	r2, [r4, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 8001942:	6ba6      	ldr	r6, [r4, #56]	; 0x38

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 8001944:	4620      	mov	r0, r4
        lmp = lmp->m_next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->p_prio = newprio;
 8001946:	60a9      	str	r1, [r5, #8]
 8001948:	601a      	str	r2, [r3, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800194a:	6053      	str	r3, [r2, #4]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
 800194c:	609c      	str	r4, [r3, #8]
      mp->m_next = tp->p_mtxlist;
 800194e:	60de      	str	r6, [r3, #12]
      tp->p_mtxlist = mp;
 8001950:	63a3      	str	r3, [r4, #56]	; 0x38

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 8001952:	f7ff feed 	bl	8001730 <chSchReadyI>
      chSchRescheduleS();
 8001956:	f7ff fd6b 	bl	8001430 <chSchRescheduleS>
 800195a:	2300      	movs	r3, #0
 800195c:	f383 8811 	msr	BASEPRI, r3
 8001960:	bd70      	pop	{r4, r5, r6, pc}
    }
    else {
      mp->m_owner = NULL;
 8001962:	2300      	movs	r3, #0
 8001964:	6083      	str	r3, [r0, #8]
 8001966:	2300      	movs	r3, #0
 8001968:	f383 8811 	msr	BASEPRI, r3
 800196c:	bd70      	pop	{r4, r5, r6, pc}
 800196e:	bf00      	nop
 8001970:	20001098 	.word	0x20001098
	...

08001980 <chMtxLockS>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
 8001980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 8001982:	6882      	ldr	r2, [r0, #8]
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
  thread_t *ctp = currp;
 8001984:	4b2f      	ldr	r3, [pc, #188]	; (8001a44 <chMtxLockS+0xc4>)
 8001986:	699c      	ldr	r4, [r3, #24]

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 8001988:	2a00      	cmp	r2, #0
 800198a:	d055      	beq.n	8001a38 <chMtxLockS+0xb8>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 800198c:	68a1      	ldr	r1, [r4, #8]
 800198e:	6893      	ldr	r3, [r2, #8]
 8001990:	4605      	mov	r5, r0
 8001992:	4299      	cmp	r1, r3
 8001994:	d906      	bls.n	80019a4 <chMtxLockS+0x24>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 8001996:	7f13      	ldrb	r3, [r2, #28]

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;
 8001998:	6091      	str	r1, [r2, #8]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 800199a:	2b06      	cmp	r3, #6
 800199c:	d033      	beq.n	8001a06 <chMtxLockS+0x86>
 800199e:	2b07      	cmp	r3, #7
 80019a0:	d01d      	beq.n	80019de <chMtxLockS+0x5e>
 80019a2:	b19b      	cbz	r3, 80019cc <chMtxLockS+0x4c>
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 80019a4:	462b      	mov	r3, r5
 80019a6:	e003      	b.n	80019b0 <chMtxLockS+0x30>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80019a8:	6899      	ldr	r1, [r3, #8]
 80019aa:	68a2      	ldr	r2, [r4, #8]
 80019ac:	4291      	cmp	r1, r2
 80019ae:	d302      	bcc.n	80019b6 <chMtxLockS+0x36>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 80019b0:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80019b2:	429d      	cmp	r5, r3
 80019b4:	d1f8      	bne.n	80019a8 <chMtxLockS+0x28>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80019b6:	685a      	ldr	r2, [r3, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 80019b8:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 80019ba:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 80019bc:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 80019be:	605c      	str	r4, [r3, #4]
        break;
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtmtxp = mp;
 80019c0:	6225      	str	r5, [r4, #32]
      chSchGoSleepS(CH_STATE_WTMTX);
 80019c2:	2006      	movs	r0, #6
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
    ctp->p_mtxlist = mp;
  }
}
 80019c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtmtxp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 80019c8:	f7ff be32 	b.w	8001630 <chSchGoSleepS>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 80019cc:	e892 000a 	ldmia.w	r2, {r1, r3}
 80019d0:	6019      	str	r1, [r3, #0]
#if CH_DBG_ENABLE_ASSERTS == TRUE
          /* Prevents an assertion in chSchReadyI().*/
          tp->p_state = CH_STATE_CURRENT;
#endif
          /* Re-enqueues tp with its new priority on the ready list.*/
          (void) chSchReadyI(queue_dequeue(tp));
 80019d2:	4610      	mov	r0, r2
  tp->p_next->p_prev = tp->p_prev;
 80019d4:	6812      	ldr	r2, [r2, #0]
 80019d6:	6053      	str	r3, [r2, #4]
 80019d8:	f7ff feaa 	bl	8001730 <chSchReadyI>
 80019dc:	e7e2      	b.n	80019a4 <chMtxLockS+0x24>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 80019de:	6817      	ldr	r7, [r2, #0]
 80019e0:	6850      	ldr	r0, [r2, #4]
#endif
#if (CH_CFG_USE_MESSAGES == TRUE) && (CH_CFG_USE_MESSAGES_PRIORITY == TRUE)
        case CH_STATE_SNDMSGQ:
#endif
          /* Re-enqueues tp with its new priority on the queue.*/
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 80019e2:	6a16      	ldr	r6, [r2, #32]
 80019e4:	6007      	str	r7, [r0, #0]
  tp->p_next->p_prev = tp->p_prev;
 80019e6:	6817      	ldr	r7, [r2, #0]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 80019e8:	4633      	mov	r3, r6
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
  tp->p_next->p_prev = tp->p_prev;
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	e002      	b.n	80019f4 <chMtxLockS+0x74>
static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80019ee:	6898      	ldr	r0, [r3, #8]
 80019f0:	4288      	cmp	r0, r1
 80019f2:	d302      	bcc.n	80019fa <chMtxLockS+0x7a>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 80019f4:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80019f6:	429e      	cmp	r6, r3
 80019f8:	d1f9      	bne.n	80019ee <chMtxLockS+0x6e>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80019fa:	6859      	ldr	r1, [r3, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 80019fc:	6013      	str	r3, [r2, #0]
  tp->p_prev = cp->p_prev;
 80019fe:	6051      	str	r1, [r2, #4]
  tp->p_prev->p_next = tp;
 8001a00:	600a      	str	r2, [r1, #0]
  cp->p_prev = tp;
 8001a02:	605a      	str	r2, [r3, #4]
 8001a04:	e7ce      	b.n	80019a4 <chMtxLockS+0x24>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8001a06:	6817      	ldr	r7, [r2, #0]
 8001a08:	6850      	ldr	r0, [r2, #4]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
        case CH_STATE_WTMTX:
          /* Re-enqueues the mutex owner with its new priority.*/
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 8001a0a:	6a16      	ldr	r6, [r2, #32]
 8001a0c:	6007      	str	r7, [r0, #0]
  tp->p_next->p_prev = tp->p_prev;
 8001a0e:	6817      	ldr	r7, [r2, #0]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8001a10:	4633      	mov	r3, r6
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
  tp->p_next->p_prev = tp->p_prev;
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	e002      	b.n	8001a1c <chMtxLockS+0x9c>
static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001a16:	6898      	ldr	r0, [r3, #8]
 8001a18:	4288      	cmp	r0, r1
 8001a1a:	d302      	bcc.n	8001a22 <chMtxLockS+0xa2>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8001a1c:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001a1e:	429e      	cmp	r6, r3
 8001a20:	d1f9      	bne.n	8001a16 <chMtxLockS+0x96>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001a22:	6859      	ldr	r1, [r3, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8001a24:	6013      	str	r3, [r2, #0]
  tp->p_prev = cp->p_prev;
 8001a26:	6051      	str	r1, [r2, #4]
  tp->p_prev->p_next = tp;
 8001a28:	600a      	str	r2, [r1, #0]
  cp->p_prev = tp;
 8001a2a:	605a      	str	r2, [r3, #4]
          tp = tp->p_u.wtmtxp->m_owner;
 8001a2c:	68b2      	ldr	r2, [r6, #8]
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 8001a2e:	68a1      	ldr	r1, [r4, #8]
 8001a30:	6893      	ldr	r3, [r2, #8]
 8001a32:	428b      	cmp	r3, r1
 8001a34:	d3af      	bcc.n	8001996 <chMtxLockS+0x16>
 8001a36:	e7b5      	b.n	80019a4 <chMtxLockS+0x24>

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
 8001a38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
 8001a3a:	6084      	str	r4, [r0, #8]
    mp->m_next = ctp->p_mtxlist;
 8001a3c:	60c3      	str	r3, [r0, #12]
    ctp->p_mtxlist = mp;
 8001a3e:	63a0      	str	r0, [r4, #56]	; 0x38
 8001a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20001098 	.word	0x20001098
	...

08001a50 <chMtxLock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxLock(mutex_t *mp) {
 8001a50:	b508      	push	{r3, lr}
 8001a52:	2320      	movs	r3, #32
 8001a54:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chMtxLockS(mp);
 8001a58:	f7ff ff92 	bl	8001980 <chMtxLockS>
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	f383 8811 	msr	BASEPRI, r3
 8001a62:	bd08      	pop	{r3, pc}
	...

08001a70 <chSemSignalI>:
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (++sp->s_cnt <= (cnt_t)0) {
 8001a70:	6883      	ldr	r3, [r0, #8]
 *
 * @param[in] sp    pointer to a @p semaphore_t structure
 *
 * @iclass
 */
void chSemSignalI(semaphore_t *sp) {
 8001a72:	4602      	mov	r2, r0
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (++sp->s_cnt <= (cnt_t)0) {
 8001a74:	3301      	adds	r3, #1
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	6083      	str	r3, [r0, #8]
 8001a7a:	dd00      	ble.n	8001a7e <chSemSignalI+0xe>
 8001a7c:	4770      	bx	lr
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8001a7e:	6803      	ldr	r3, [r0, #0]
 *
 * @param[in] sp    pointer to a @p semaphore_t structure
 *
 * @iclass
 */
void chSemSignalI(semaphore_t *sp) {
 8001a80:	b410      	push	{r4}

  tqp->p_next = tp->p_next;
 8001a82:	6819      	ldr	r1, [r3, #0]

  if (++sp->s_cnt <= (cnt_t)0) {
    /* Note, it is done this way in order to allow a tail call on
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->s_queue);
    tp->p_u.rdymsg = MSG_OK;
 8001a84:	2400      	movs	r4, #0
 8001a86:	6011      	str	r1, [r2, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001a88:	604a      	str	r2, [r1, #4]
 8001a8a:	621c      	str	r4, [r3, #32]
    (void) chSchReadyI(tp);
 8001a8c:	4618      	mov	r0, r3
  }
}
 8001a8e:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (++sp->s_cnt <= (cnt_t)0) {
    /* Note, it is done this way in order to allow a tail call on
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->s_queue);
    tp->p_u.rdymsg = MSG_OK;
    (void) chSchReadyI(tp);
 8001a92:	f7ff be4d 	b.w	8001730 <chSchReadyI>
 8001a96:	bf00      	nop
	...

08001aa0 <chSemResetI>:
 * @param[in] n         the new value of the semaphore counter. The value must
 *                      be non-negative.
 *
 * @iclass
 */
void chSemResetI(semaphore_t *sp, cnt_t n) {
 8001aa0:	b570      	push	{r4, r5, r6, lr}
  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
 8001aa2:	6885      	ldr	r5, [r0, #8]
  sp->s_cnt = n;
 8001aa4:	6081      	str	r1, [r0, #8]
  while (++cnt <= (cnt_t)0) {
 8001aa6:	3501      	adds	r5, #1
 8001aa8:	2d00      	cmp	r5, #0
 8001aaa:	dc0c      	bgt.n	8001ac6 <chSemResetI+0x26>
 8001aac:	4604      	mov	r4, r0
    chSchReadyI(queue_lifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_RESET;
 8001aae:	f06f 0601 	mvn.w	r6, #1

  return tp;
}

static inline thread_t *queue_lifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_prev;
 8001ab2:	6860      	ldr	r0, [r4, #4]
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= (cnt_t)0) {
 8001ab4:	3501      	adds	r5, #1

  tqp->p_prev = tp->p_prev;
 8001ab6:	6843      	ldr	r3, [r0, #4]
 8001ab8:	6063      	str	r3, [r4, #4]
  tqp->p_prev->p_next = (thread_t *)tqp;
 8001aba:	601c      	str	r4, [r3, #0]
    chSchReadyI(queue_lifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_RESET;
 8001abc:	f7ff fe38 	bl	8001730 <chSchReadyI>
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= (cnt_t)0) {
 8001ac0:	2d01      	cmp	r5, #1
    chSchReadyI(queue_lifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_RESET;
 8001ac2:	6206      	str	r6, [r0, #32]
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= (cnt_t)0) {
 8001ac4:	d1f5      	bne.n	8001ab2 <chSemResetI+0x12>
 8001ac6:	bd70      	pop	{r4, r5, r6, pc}
	...

08001ad0 <chThdDequeueAllI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8001ad0:	b538      	push	{r3, r4, r5, lr}
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8001ad2:	6803      	ldr	r3, [r0, #0]
 8001ad4:	4604      	mov	r4, r0

  while (queue_notempty(tqp)) {
 8001ad6:	4298      	cmp	r0, r3
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8001ad8:	460d      	mov	r5, r1

  while (queue_notempty(tqp)) {
 8001ada:	d009      	beq.n	8001af0 <chThdDequeueAllI+0x20>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	6022      	str	r2, [r4, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001ae2:	6054      	str	r4, [r2, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8001ae4:	621d      	str	r5, [r3, #32]
  (void) chSchReadyI(tp);
 8001ae6:	f7ff fe23 	bl	8001730 <chSchReadyI>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8001aea:	6823      	ldr	r3, [r4, #0]
 8001aec:	429c      	cmp	r4, r3
 8001aee:	d1f5      	bne.n	8001adc <chThdDequeueAllI+0xc>
 8001af0:	bd38      	pop	{r3, r4, r5, pc}
 8001af2:	bf00      	nop
	...

08001b00 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 8001b00:	b538      	push	{r3, r4, r5, lr}
  thread_t *tp = currp;
 8001b02:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <chThdExitS+0x3c>)
 8001b04:	699c      	ldr	r4, [r3, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 8001b06:	6a63      	ldr	r3, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 8001b08:	f104 0524 	add.w	r5, r4, #36	; 0x24
 8001b0c:	429d      	cmp	r5, r3
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;

  tp->p_u.exitcode = msg;
 8001b0e:	6220      	str	r0, [r4, #32]
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 8001b10:	d007      	beq.n	8001b22 <chThdExitS+0x22>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->p_next;
  tlp->p_next = tp->p_next;
 8001b12:	681a      	ldr	r2, [r3, #0]
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 8001b14:	4618      	mov	r0, r3
 8001b16:	6262      	str	r2, [r4, #36]	; 0x24
 8001b18:	f7ff fe0a 	bl	8001730 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 8001b1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 8001b1e:	42ab      	cmp	r3, r5
 8001b20:	d1f7      	bne.n	8001b12 <chThdExitS+0x12>
  }
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 8001b22:	7f63      	ldrb	r3, [r4, #29]
 8001b24:	079b      	lsls	r3, r3, #30
 8001b26:	d104      	bne.n	8001b32 <chThdExitS+0x32>
    REG_REMOVE(tp);
 8001b28:	6922      	ldr	r2, [r4, #16]
 8001b2a:	6963      	ldr	r3, [r4, #20]
 8001b2c:	611a      	str	r2, [r3, #16]
 8001b2e:	6922      	ldr	r2, [r4, #16]
 8001b30:	6153      	str	r3, [r2, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8001b32:	200f      	movs	r0, #15

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
}
 8001b34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
    REG_REMOVE(tp);
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8001b38:	f7ff bd7a 	b.w	8001630 <chSchGoSleepS>
 8001b3c:	20001098 	.word	0x20001098

08001b40 <chThdExit>:
 8001b40:	2320      	movs	r3, #32
 8001b42:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
 8001b46:	f7ff bfdb 	b.w	8001b00 <chThdExitS>
 8001b4a:	bf00      	nop
 8001b4c:	0000      	movs	r0, r0
	...

08001b50 <chVTDoResetI>:
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 8001b50:	4b1c      	ldr	r3, [pc, #112]	; (8001bc4 <chVTDoResetI+0x74>)
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 8001b52:	b470      	push	{r4, r5, r6}
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 8001b54:	69da      	ldr	r2, [r3, #28]
 8001b56:	4282      	cmp	r2, r0
 8001b58:	d00f      	beq.n	8001b7a <chVTDoResetI+0x2a>
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 8001b5a:	6802      	ldr	r2, [r0, #0]
 8001b5c:	6841      	ldr	r1, [r0, #4]
    vtp->vt_next->vt_prev = vtp->vt_prev;
    vtp->vt_func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8001b5e:	331c      	adds	r3, #28

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 8001b60:	600a      	str	r2, [r1, #0]
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8001b62:	6802      	ldr	r2, [r0, #0]
    vtp->vt_func = NULL;
 8001b64:	2400      	movs	r4, #0

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8001b66:	429a      	cmp	r2, r3
  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8001b68:	6051      	str	r1, [r2, #4]
    vtp->vt_func = NULL;
 8001b6a:	60c4      	str	r4, [r0, #12]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8001b6c:	d003      	beq.n	8001b76 <chVTDoResetI+0x26>
      vtp->vt_next->vt_delta += vtp->vt_delta;
 8001b6e:	8901      	ldrh	r1, [r0, #8]
 8001b70:	8913      	ldrh	r3, [r2, #8]
 8001b72:	440b      	add	r3, r1
 8001b74:	8113      	strh	r3, [r2, #8]
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8001b76:	bc70      	pop	{r4, r5, r6}
 8001b78:	4770      	bx	lr

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	6815      	ldr	r5, [r2, #0]
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
  vtp->vt_func = NULL;
 8001b7e:	2000      	movs	r0, #0

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 8001b80:	f841 5f1c 	str.w	r5, [r1, #28]!
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
  vtp->vt_func = NULL;

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8001b84:	428d      	cmp	r5, r1
    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8001b86:	6069      	str	r1, [r5, #4]
  vtp->vt_func = NULL;
 8001b88:	60d0      	str	r0, [r2, #12]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8001b8a:	d016      	beq.n	8001bba <chVTDoResetI+0x6a>
 8001b8c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001b90:	6a41      	ldr	r1, [r0, #36]	; 0x24

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8001b92:	8916      	ldrh	r6, [r2, #8]
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8001b94:	8cdc      	ldrh	r4, [r3, #38]	; 0x26

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8001b96:	892a      	ldrh	r2, [r5, #8]
 8001b98:	b289      	uxth	r1, r1
 8001b9a:	18b3      	adds	r3, r6, r2
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8001b9c:	1b0a      	subs	r2, r1, r4

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8001b9e:	b29b      	uxth	r3, r3
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8001ba0:	b292      	uxth	r2, r2

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 8001ba2:	4293      	cmp	r3, r2

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8001ba4:	812b      	strh	r3, [r5, #8]
  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 8001ba6:	d9e6      	bls.n	8001b76 <chVTDoResetI+0x26>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.vt_next->vt_delta - nowdelta;
 8001ba8:	1a9b      	subs	r3, r3, r2
 8001baa:	b29b      	uxth	r3, r3

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
 8001bac:	2b01      	cmp	r3, #1
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 8001bae:	bf98      	it	ls
 8001bb0:	2302      	movls	r3, #2
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
 8001bb2:	440b      	add	r3, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	6343      	str	r3, [r0, #52]	; 0x34
 8001bb8:	e7dd      	b.n	8001b76 <chVTDoResetI+0x26>
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8001bba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bbe:	60d8      	str	r0, [r3, #12]
 8001bc0:	e7d9      	b.n	8001b76 <chVTDoResetI+0x26>
 8001bc2:	bf00      	nop
 8001bc4:	20001098 	.word	0x20001098
	...

08001bd0 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
 8001bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8001bd2:	4e1e      	ldr	r6, [pc, #120]	; (8001c4c <chVTDoSetI+0x7c>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8001bd4:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 8001bd8:	46b6      	mov	lr, r6
 8001bda:	f85e 4f1c 	ldr.w	r4, [lr, #28]!
 8001bde:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 8001be0:	2901      	cmp	r1, #1
 8001be2:	bf98      	it	ls
 8001be4:	2102      	movls	r1, #2
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8001be6:	4574      	cmp	r4, lr
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 8001be8:	6103      	str	r3, [r0, #16]
  vtp->vt_func = vtfunc;
 8001bea:	60c2      	str	r2, [r0, #12]
 8001bec:	b2ab      	uxth	r3, r5
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8001bee:	d01d      	beq.n	8001c2c <chVTDoSetI+0x5c>
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 8001bf0:	4419      	add	r1, r3
 8001bf2:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 8001bf4:	b289      	uxth	r1, r1
    if (delta < ch.vtlist.vt_next->vt_delta) {
 8001bf6:	8922      	ldrh	r2, [r4, #8]
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 8001bf8:	1acb      	subs	r3, r1, r3
 8001bfa:	b29b      	uxth	r3, r3
    if (delta < ch.vtlist.vt_next->vt_delta) {
 8001bfc:	4293      	cmp	r3, r2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001bfe:	bf38      	it	cc
 8001c00:	6379      	strcc	r1, [r7, #52]	; 0x34
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d905      	bls.n	8001c12 <chVTDoSetI+0x42>
    delta -= p->vt_delta;
    p = p->vt_next;
 8001c06:	6824      	ldr	r4, [r4, #0]

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
    delta -= p->vt_delta;
 8001c08:	1a9b      	subs	r3, r3, r2
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 8001c0a:	8922      	ldrh	r2, [r4, #8]
    delta -= p->vt_delta;
 8001c0c:	b29b      	uxth	r3, r3
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d3f9      	bcc.n	8001c06 <chVTDoSetI+0x36>
  vtp->vt_delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
  ch.vtlist.vt_delta = (systime_t)-1;
 8001c12:	f64f 71ff 	movw	r1, #65535	; 0xffff
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 8001c16:	6862      	ldr	r2, [r4, #4]
    delta -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
 8001c18:	6004      	str	r4, [r0, #0]
  vtp->vt_prev = vtp->vt_next->vt_prev;
 8001c1a:	6042      	str	r2, [r0, #4]
  vtp->vt_prev->vt_next = vtp;
 8001c1c:	6010      	str	r0, [r2, #0]
  p->vt_prev = vtp;
 8001c1e:	6060      	str	r0, [r4, #4]
  vtp->vt_delta = delta
 8001c20:	8103      	strh	r3, [r0, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 8001c22:	8922      	ldrh	r2, [r4, #8]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	8123      	strh	r3, [r4, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8001c28:	84b1      	strh	r1, [r6, #36]	; 0x24
 8001c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_delta = delay;

      /* Being the first element in the list the alarm timer is started.*/
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
 8001c2c:	18ca      	adds	r2, r1, r3
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001c2e:	b292      	uxth	r2, r2
  STM32_ST_TIM->SR     = 0;
 8001c30:	f04f 0e00 	mov.w	lr, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001c34:	2502      	movs	r5, #2
    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
 8001c36:	84f3      	strh	r3, [r6, #38]	; 0x26
      ch.vtlist.vt_next = vtp;
 8001c38:	61f0      	str	r0, [r6, #28]
      ch.vtlist.vt_prev = vtp;
 8001c3a:	6230      	str	r0, [r6, #32]
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
 8001c3c:	6004      	str	r4, [r0, #0]
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8001c3e:	6044      	str	r4, [r0, #4]
      vtp->vt_delta = delay;
 8001c40:	8101      	strh	r1, [r0, #8]
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001c42:	637a      	str	r2, [r7, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8001c44:	f8c7 e010 	str.w	lr, [r7, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001c48:	60fd      	str	r5, [r7, #12]
 8001c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c4c:	20001098 	.word	0x20001098

08001c50 <chSchGoSleepTimeoutS>:
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8001c50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8001c54:	b530      	push	{r4, r5, lr}

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8001c56:	4299      	cmp	r1, r3
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8001c58:	b087      	sub	sp, #28

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8001c5a:	d012      	beq.n	8001c82 <chSchGoSleepTimeoutS+0x32>
 8001c5c:	4605      	mov	r5, r0
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 8001c5e:	4c0c      	ldr	r4, [pc, #48]	; (8001c90 <chSchGoSleepTimeoutS+0x40>)
 8001c60:	a801      	add	r0, sp, #4
 8001c62:	69a3      	ldr	r3, [r4, #24]
 8001c64:	4a0b      	ldr	r2, [pc, #44]	; (8001c94 <chSchGoSleepTimeoutS+0x44>)
 8001c66:	f7ff ffb3 	bl	8001bd0 <chVTDoSetI>
    chSchGoSleepS(newstate);
 8001c6a:	4628      	mov	r0, r5
 8001c6c:	f7ff fce0 	bl	8001630 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8001c70:	9b04      	ldr	r3, [sp, #16]
 8001c72:	b113      	cbz	r3, 8001c7a <chSchGoSleepTimeoutS+0x2a>
      chVTDoResetI(&vt);
 8001c74:	a801      	add	r0, sp, #4
 8001c76:	f7ff ff6b 	bl	8001b50 <chVTDoResetI>
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->p_u.rdymsg;
 8001c7a:	69a3      	ldr	r3, [r4, #24]
}
 8001c7c:	6a18      	ldr	r0, [r3, #32]
 8001c7e:	b007      	add	sp, #28
 8001c80:	bd30      	pop	{r4, r5, pc}
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 8001c82:	f7ff fcd5 	bl	8001630 <chSchGoSleepS>
 8001c86:	4c02      	ldr	r4, [pc, #8]	; (8001c90 <chSchGoSleepTimeoutS+0x40>)
  }

  return currp->p_u.rdymsg;
 8001c88:	69a3      	ldr	r3, [r4, #24]
}
 8001c8a:	6a18      	ldr	r0, [r3, #32]
 8001c8c:	b007      	add	sp, #28
 8001c8e:	bd30      	pop	{r4, r5, pc}
 8001c90:	20001098 	.word	0x20001098
 8001c94:	080011d1 	.word	0x080011d1
	...

08001ca0 <chSemWaitTimeoutS>:
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chSemWaitTimeoutS(semaphore_t *sp, systime_t time) {
 8001ca0:	4603      	mov	r3, r0
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
 8001ca2:	6880      	ldr	r0, [r0, #8]
 8001ca4:	1e42      	subs	r2, r0, #1
 8001ca6:	2a00      	cmp	r2, #0
 8001ca8:	609a      	str	r2, [r3, #8]
 8001caa:	db01      	blt.n	8001cb0 <chSemWaitTimeoutS+0x10>
    sem_insert(currp, &sp->s_queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }

  return MSG_OK;
 8001cac:	2000      	movs	r0, #0
 8001cae:	4770      	bx	lr
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chSemWaitTimeoutS(semaphore_t *sp, systime_t time) {
 8001cb0:	b410      	push	{r4}
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
    if (TIME_IMMEDIATE == time) {
 8001cb2:	b161      	cbz	r1, 8001cce <chSemWaitTimeoutS+0x2e>
      sp->s_cnt++;

      return MSG_TIMEOUT;
    }
    currp->p_u.wtsemp = sp;
 8001cb4:	4a09      	ldr	r2, [pc, #36]	; (8001cdc <chSemWaitTimeoutS+0x3c>)
    sem_insert(currp, &sp->s_queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
 8001cb6:	2005      	movs	r0, #5
    if (TIME_IMMEDIATE == time) {
      sp->s_cnt++;

      return MSG_TIMEOUT;
    }
    currp->p_u.wtsemp = sp;
 8001cb8:	6992      	ldr	r2, [r2, #24]
 8001cba:	6213      	str	r3, [r2, #32]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8001cbc:	685c      	ldr	r4, [r3, #4]
 8001cbe:	e882 0018 	stmia.w	r2, {r3, r4}
  tp->p_prev->p_next = tp;
 8001cc2:	6022      	str	r2, [r4, #0]
  tqp->p_prev = tp;
 8001cc4:	605a      	str	r2, [r3, #4]

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }

  return MSG_OK;
}
 8001cc6:	f85d 4b04 	ldr.w	r4, [sp], #4
      return MSG_TIMEOUT;
    }
    currp->p_u.wtsemp = sp;
    sem_insert(currp, &sp->s_queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
 8001cca:	f7ff bfc1 	b.w	8001c50 <chSchGoSleepTimeoutS>
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
    if (TIME_IMMEDIATE == time) {
      sp->s_cnt++;
 8001cce:	6098      	str	r0, [r3, #8]

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }

  return MSG_OK;
}
 8001cd0:	f85d 4b04 	ldr.w	r4, [sp], #4

  if (--sp->s_cnt < (cnt_t)0) {
    if (TIME_IMMEDIATE == time) {
      sp->s_cnt++;

      return MSG_TIMEOUT;
 8001cd4:	f04f 30ff 	mov.w	r0, #4294967295

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }

  return MSG_OK;
}
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	20001098 	.word	0x20001098

08001ce0 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 8001ce0:	b169      	cbz	r1, 8001cfe <chThdEnqueueTimeoutS+0x1e>
 8001ce2:	4602      	mov	r2, r0
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8001ce4:	4b07      	ldr	r3, [pc, #28]	; (8001d04 <chThdEnqueueTimeoutS+0x24>)
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 8001ce6:	b410      	push	{r4}

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8001ce8:	699b      	ldr	r3, [r3, #24]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8001cea:	6844      	ldr	r4, [r0, #4]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8001cec:	2004      	movs	r0, #4
 8001cee:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->p_prev->p_next = tp;
 8001cf2:	6023      	str	r3, [r4, #0]
  tqp->p_prev = tp;
 8001cf4:	6053      	str	r3, [r2, #4]
}
 8001cf6:	f85d 4b04 	ldr.w	r4, [sp], #4
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8001cfa:	f7ff bfa9 	b.w	8001c50 <chSchGoSleepTimeoutS>
}
 8001cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8001d02:	4770      	bx	lr
 8001d04:	20001098 	.word	0x20001098
	...

08001d10 <chOQPutTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 8001d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d12:	4604      	mov	r4, r0
 8001d14:	460f      	mov	r7, r1
 8001d16:	4616      	mov	r6, r2
 8001d18:	2320      	movs	r3, #32
 8001d1a:	f383 8811 	msr	BASEPRI, r3
 8001d1e:	e005      	b.n	8001d2c <chOQPutTimeout+0x1c>

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8001d20:	4620      	mov	r0, r4
 8001d22:	4631      	mov	r1, r6
 8001d24:	f7ff ffdc 	bl	8001ce0 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 8001d28:	2800      	cmp	r0, #0
 8001d2a:	db17      	blt.n	8001d5c <chOQPutTimeout+0x4c>
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 8001d2c:	68a5      	ldr	r5, [r4, #8]
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
 8001d2e:	2d00      	cmp	r5, #0
 8001d30:	d0f6      	beq.n	8001d20 <chOQPutTimeout+0x10>
      return msg;
    }
  }

  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 8001d32:	6962      	ldr	r2, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8001d34:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8001d36:	1c51      	adds	r1, r2, #1
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8001d38:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 8001d3a:	6161      	str	r1, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8001d3c:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8001d3e:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8001d40:	6923      	ldr	r3, [r4, #16]
 8001d42:	6962      	ldr	r2, [r4, #20]
 8001d44:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8001d46:	bf24      	itt	cs
 8001d48:	68e3      	ldrcs	r3, [r4, #12]
 8001d4a:	6163      	strcs	r3, [r4, #20]
  }

  if (oqp->q_notify != NULL) {
 8001d4c:	69e3      	ldr	r3, [r4, #28]
 8001d4e:	b10b      	cbz	r3, 8001d54 <chOQPutTimeout+0x44>
    oqp->q_notify(oqp);
 8001d50:	4620      	mov	r0, r4
 8001d52:	4798      	blx	r3
 8001d54:	2000      	movs	r0, #0
 8001d56:	f380 8811 	msr	BASEPRI, r0
  }
  chSysUnlock();

  return Q_OK;
}
 8001d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d5c:	f385 8811 	msr	BASEPRI, r5
 8001d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d62:	bf00      	nop
	...

08001d70 <chIQReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
                       size_t n, systime_t timeout) {
 8001d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d74:	4604      	mov	r4, r0
 8001d76:	b083      	sub	sp, #12
 8001d78:	4689      	mov	r9, r1
 8001d7a:	4693      	mov	fp, r2
 8001d7c:	461d      	mov	r5, r3
  qnotify_t nfy = iqp->q_notify;
 8001d7e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8001d82:	2720      	movs	r7, #32
 8001d84:	f387 8811 	msr	BASEPRI, r7
  size_t r = 0;
 8001d88:	2600      	movs	r6, #0
 8001d8a:	46b2      	mov	sl, r6
 8001d8c:	9701      	str	r7, [sp, #4]

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    if (nfy != NULL) {
 8001d8e:	f1b8 0f00 	cmp.w	r8, #0
 8001d92:	d007      	beq.n	8001da4 <chIQReadTimeout+0x34>
      nfy(iqp);
 8001d94:	4620      	mov	r0, r4
 8001d96:	47c0      	blx	r8
 8001d98:	e004      	b.n	8001da4 <chIQReadTimeout+0x34>
    }

    while (chIQIsEmptyI(iqp)) {
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
 8001d9a:	4620      	mov	r0, r4
 8001d9c:	4629      	mov	r1, r5
 8001d9e:	f7ff ff9f 	bl	8001ce0 <chThdEnqueueTimeoutS>
 8001da2:	b9d0      	cbnz	r0, 8001dda <chIQReadTimeout+0x6a>
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 8001da4:	68a7      	ldr	r7, [r4, #8]
  while (true) {
    if (nfy != NULL) {
      nfy(iqp);
    }

    while (chIQIsEmptyI(iqp)) {
 8001da6:	2f00      	cmp	r7, #0
 8001da8:	d0f7      	beq.n	8001d9a <chIQReadTimeout+0x2a>
        return r;
      }
    }

    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 8001daa:	69a2      	ldr	r2, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8001dac:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8001dae:	1c51      	adds	r1, r2, #1
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8001db0:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
 8001db2:	61a1      	str	r1, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8001db4:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8001db6:	7813      	ldrb	r3, [r2, #0]
 8001db8:	f809 3b01 	strb.w	r3, [r9], #1
    if (iqp->q_rdptr >= iqp->q_top) {
 8001dbc:	6923      	ldr	r3, [r4, #16]
 8001dbe:	69a2      	ldr	r2, [r4, #24]
 8001dc0:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 8001dc2:	bf24      	itt	cs
 8001dc4:	68e3      	ldrcs	r3, [r4, #12]
 8001dc6:	61a3      	strcs	r3, [r4, #24]
 8001dc8:	f38a 8811 	msr	BASEPRI, sl
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    r++;
 8001dcc:	3601      	adds	r6, #1
    if (--n == 0U) {
 8001dce:	45b3      	cmp	fp, r6
 8001dd0:	d005      	beq.n	8001dde <chIQReadTimeout+0x6e>
 8001dd2:	9b01      	ldr	r3, [sp, #4]
 8001dd4:	f383 8811 	msr	BASEPRI, r3
 8001dd8:	e7d9      	b.n	8001d8e <chIQReadTimeout+0x1e>
 8001dda:	f387 8811 	msr	BASEPRI, r7
      return r;
    }

    chSysLock();
  }
}
 8001dde:	4630      	mov	r0, r6
 8001de0:	b003      	add	sp, #12
 8001de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001de6:	bf00      	nop
	...

08001df0 <chIQGetTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t timeout) {
 8001df0:	b570      	push	{r4, r5, r6, lr}
 8001df2:	2320      	movs	r3, #32
 8001df4:	460e      	mov	r6, r1
 8001df6:	4604      	mov	r4, r0
 8001df8:	f383 8811 	msr	BASEPRI, r3
  uint8_t b;

  chSysLock();
  if (iqp->q_notify != NULL) {
 8001dfc:	69c3      	ldr	r3, [r0, #28]
 8001dfe:	b13b      	cbz	r3, 8001e10 <chIQGetTimeout+0x20>
    iqp->q_notify(iqp);
 8001e00:	4798      	blx	r3
 8001e02:	e005      	b.n	8001e10 <chIQGetTimeout+0x20>
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 8001e04:	4620      	mov	r0, r4
 8001e06:	4631      	mov	r1, r6
 8001e08:	f7ff ff6a 	bl	8001ce0 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 8001e0c:	2800      	cmp	r0, #0
 8001e0e:	db13      	blt.n	8001e38 <chIQGetTimeout+0x48>
 8001e10:	68a5      	ldr	r5, [r4, #8]
  chSysLock();
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
 8001e12:	2d00      	cmp	r5, #0
 8001e14:	d0f6      	beq.n	8001e04 <chIQGetTimeout+0x14>
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8001e16:	69a1      	ldr	r1, [r4, #24]
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8001e18:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 8001e1a:	6925      	ldr	r5, [r4, #16]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8001e1c:	1c4a      	adds	r2, r1, #1
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8001e1e:	3b01      	subs	r3, #1
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 8001e20:	42aa      	cmp	r2, r5
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8001e22:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 8001e24:	bf28      	it	cs
 8001e26:	68e3      	ldrcs	r3, [r4, #12]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8001e28:	61a2      	str	r2, [r4, #24]
 8001e2a:	7808      	ldrb	r0, [r1, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 8001e2c:	bf28      	it	cs
 8001e2e:	61a3      	strcs	r3, [r4, #24]
 8001e30:	2300      	movs	r3, #0
 8001e32:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return (msg_t)b;
}
 8001e36:	bd70      	pop	{r4, r5, r6, pc}
 8001e38:	f385 8811 	msr	BASEPRI, r5
 8001e3c:	bd70      	pop	{r4, r5, r6, pc}
 8001e3e:	bf00      	nop

08001e40 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 8001e40:	b508      	push	{r3, lr}
 8001e42:	4601      	mov	r1, r0
 8001e44:	2320      	movs	r3, #32
 8001e46:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 8001e4a:	2008      	movs	r0, #8
 8001e4c:	f7ff ff00 	bl	8001c50 <chSchGoSleepTimeoutS>
 8001e50:	2300      	movs	r3, #0
 8001e52:	f383 8811 	msr	BASEPRI, r3
 8001e56:	bd08      	pop	{r3, pc}
	...

08001e60 <chSysRestoreStatusX.part.3.lto_priv.94>:
 *
 * @param[in] sts       the system status to be restored.
 *
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {
 8001e60:	b510      	push	{r4, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e62:	f3ef 8405 	mrs	r4, IPSR
 * @retval false        not running in ISR mode.
 * @retval true         running in ISR mode.
 */
static inline bool port_is_isr_context(void) {

  return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 8001e66:	f3c4 0408 	ubfx	r4, r4, #0, #9

  if (port_irq_enabled(sts)) {
    if (port_is_isr_context()) {
 8001e6a:	b11c      	cbz	r4, 8001e74 <chSysRestoreStatusX.part.3.lto_priv.94+0x14>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	f383 8811 	msr	BASEPRI, r3
 8001e72:	bd10      	pop	{r4, pc}
      chSysUnlockFromISR();
    }
    else {
      chSchRescheduleS();
 8001e74:	f7ff fadc 	bl	8001430 <chSchRescheduleS>
 8001e78:	f384 8811 	msr	BASEPRI, r4
 8001e7c:	bd10      	pop	{r4, pc}
 8001e7e:	bf00      	nop

08001e80 <chSysGetStatusAndLockX.part.2.lto_priv.95>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e80:	f3ef 8305 	mrs	r3, IPSR
 8001e84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 */
syssts_t chSysGetStatusAndLockX(void) {

  syssts_t sts = port_get_irq_status();
  if (port_irq_enabled(sts)) {
    if (port_is_isr_context()) {
 8001e88:	b91b      	cbnz	r3, 8001e92 <chSysGetStatusAndLockX.part.2.lto_priv.95+0x12>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001e8a:	2320      	movs	r3, #32
 8001e8c:	f383 8811 	msr	BASEPRI, r3
    else {
      chSysLock();
    }
  }
  return sts;
}
 8001e90:	4770      	bx	lr
 8001e92:	2320      	movs	r3, #32
 8001e94:	f383 8811 	msr	BASEPRI, r3
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	0000      	movs	r0, r0
	...

08001ea0 <chSysIntegrityCheckI>:
  cnt_t n;

  chDbgCheckClassI();

  /* Ready List integrity check.*/
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 8001ea0:	07c2      	lsls	r2, r0, #31
 * @retval false        The test succeeded.
 * @retval true         Test failed.
 *
 * @iclass
 */
bool chSysIntegrityCheckI(unsigned testmask) {
 8001ea2:	b410      	push	{r4}
  cnt_t n;

  chDbgCheckClassI();

  /* Ready List integrity check.*/
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 8001ea4:	d510      	bpl.n	8001ec8 <chSysIntegrityCheckI+0x28>
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_queue.p_next;
 8001ea6:	4a2a      	ldr	r2, [pc, #168]	; (8001f50 <chSysIntegrityCheckI+0xb0>)
 8001ea8:	6811      	ldr	r1, [r2, #0]
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 8001eaa:	4291      	cmp	r1, r2
 8001eac:	d03e      	beq.n	8001f2c <chSysIntegrityCheckI+0x8c>
 8001eae:	2300      	movs	r3, #0
      n++;
      tp = tp->p_next;
 8001eb0:	6809      	ldr	r1, [r1, #0]

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_queue.p_next;
    while (tp != (thread_t *)&ch.rlist.r_queue) {
      n++;
 8001eb2:	3301      	adds	r3, #1
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_queue.p_next;
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 8001eb4:	4291      	cmp	r1, r2
 8001eb6:	d1fb      	bne.n	8001eb0 <chSysIntegrityCheckI+0x10>
      n++;
      tp = tp->p_next;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_queue.p_prev;
 8001eb8:	684c      	ldr	r4, [r1, #4]
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 8001eba:	428c      	cmp	r4, r1
 8001ebc:	d032      	beq.n	8001f24 <chSysIntegrityCheckI+0x84>
      n--;
      tp = tp->p_prev;
 8001ebe:	6864      	ldr	r4, [r4, #4]
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_queue.p_prev;
    while (tp != (thread_t *)&ch.rlist.r_queue) {
      n--;
 8001ec0:	3b01      	subs	r3, #1
      tp = tp->p_next;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_queue.p_prev;
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 8001ec2:	4294      	cmp	r4, r2
 8001ec4:	d1fb      	bne.n	8001ebe <chSysIntegrityCheckI+0x1e>
      n--;
      tp = tp->p_prev;
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 8001ec6:	bb6b      	cbnz	r3, 8001f24 <chSysIntegrityCheckI+0x84>
      return true;
    }
  }

  /* Timers list integrity check.*/
  if ((testmask & CH_INTEGRITY_VTLIST) != 0U) {
 8001ec8:	0783      	lsls	r3, r0, #30
 8001eca:	d512      	bpl.n	8001ef2 <chSysIntegrityCheckI+0x52>
    virtual_timer_t * vtp;

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
    vtp = ch.vtlist.vt_next;
 8001ecc:	4a20      	ldr	r2, [pc, #128]	; (8001f50 <chSysIntegrityCheckI+0xb0>)
 8001ece:	4614      	mov	r4, r2
 8001ed0:	f854 1f1c 	ldr.w	r1, [r4, #28]!
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001ed4:	42a1      	cmp	r1, r4
 8001ed6:	d02f      	beq.n	8001f38 <chSysIntegrityCheckI+0x98>
 8001ed8:	2300      	movs	r3, #0
      n++;
      vtp = vtp->vt_next;
 8001eda:	6809      	ldr	r1, [r1, #0]

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
    vtp = ch.vtlist.vt_next;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
      n++;
 8001edc:	3301      	adds	r3, #1
    virtual_timer_t * vtp;

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
    vtp = ch.vtlist.vt_next;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001ede:	42a1      	cmp	r1, r4
 8001ee0:	d1fb      	bne.n	8001eda <chSysIntegrityCheckI+0x3a>
      n++;
      vtp = vtp->vt_next;
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.vt_prev;
 8001ee2:	6a12      	ldr	r2, [r2, #32]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001ee4:	428a      	cmp	r2, r1
 8001ee6:	d01d      	beq.n	8001f24 <chSysIntegrityCheckI+0x84>
      n--;
      vtp = vtp->vt_prev;
 8001ee8:	6852      	ldr	r2, [r2, #4]
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.vt_prev;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
      n--;
 8001eea:	3b01      	subs	r3, #1
      vtp = vtp->vt_next;
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.vt_prev;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001eec:	42a2      	cmp	r2, r4
 8001eee:	d1fb      	bne.n	8001ee8 <chSysIntegrityCheckI+0x48>
      n--;
      vtp = vtp->vt_prev;
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 8001ef0:	b9c3      	cbnz	r3, 8001f24 <chSysIntegrityCheckI+0x84>
      return true;
    }
  }

#if CH_CFG_USE_REGISTRY == TRUE
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
 8001ef2:	f010 0004 	ands.w	r0, r0, #4
 8001ef6:	d012      	beq.n	8001f1e <chSysIntegrityCheckI+0x7e>
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_newer;
 8001ef8:	4a15      	ldr	r2, [pc, #84]	; (8001f50 <chSysIntegrityCheckI+0xb0>)
 8001efa:	6913      	ldr	r3, [r2, #16]
    while (tp != (thread_t *)&ch.rlist) {
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d021      	beq.n	8001f44 <chSysIntegrityCheckI+0xa4>
 8001f00:	2000      	movs	r0, #0
      n++;
      tp = tp->p_newer;
 8001f02:	691b      	ldr	r3, [r3, #16]

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_newer;
    while (tp != (thread_t *)&ch.rlist) {
      n++;
 8001f04:	3001      	adds	r0, #1
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_newer;
    while (tp != (thread_t *)&ch.rlist) {
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d1fb      	bne.n	8001f02 <chSysIntegrityCheckI+0x62>
      n++;
      tp = tp->p_newer;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_older;
 8001f0a:	6959      	ldr	r1, [r3, #20]
    while (tp != (thread_t *)&ch.rlist) {
 8001f0c:	4299      	cmp	r1, r3
 8001f0e:	d009      	beq.n	8001f24 <chSysIntegrityCheckI+0x84>
      n--;
      tp = tp->p_older;
 8001f10:	6949      	ldr	r1, [r1, #20]
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_older;
    while (tp != (thread_t *)&ch.rlist) {
      n--;
 8001f12:	3801      	subs	r0, #1
      tp = tp->p_newer;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_older;
    while (tp != (thread_t *)&ch.rlist) {
 8001f14:	4291      	cmp	r1, r2
 8001f16:	d1fb      	bne.n	8001f10 <chSysIntegrityCheckI+0x70>
      n--;
      tp = tp->p_older;
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 8001f18:	3000      	adds	r0, #0
 8001f1a:	bf18      	it	ne
 8001f1c:	2001      	movne	r0, #1
    PORT_INTEGRITY_CHECK();
  }
#endif

  return false;
}
 8001f1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f22:	4770      	bx	lr
      tp = tp->p_prev;
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
      return true;
 8001f24:	2001      	movs	r0, #1
    PORT_INTEGRITY_CHECK();
  }
#endif

  return false;
}
 8001f26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f2a:	4770      	bx	lr
      n++;
      tp = tp->p_next;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_queue.p_prev;
 8001f2c:	6854      	ldr	r4, [r2, #4]
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 8001f2e:	4294      	cmp	r4, r2
  /* Ready List integrity check.*/
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
 8001f30:	bf18      	it	ne
 8001f32:	2300      	movne	r3, #0
      tp = tp->p_next;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_queue.p_prev;
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 8001f34:	d1c3      	bne.n	8001ebe <chSysIntegrityCheckI+0x1e>
 8001f36:	e7c7      	b.n	8001ec8 <chSysIntegrityCheckI+0x28>
      n++;
      vtp = vtp->vt_next;
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.vt_prev;
 8001f38:	6a12      	ldr	r2, [r2, #32]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001f3a:	42a2      	cmp	r2, r4
  /* Timers list integrity check.*/
  if ((testmask & CH_INTEGRITY_VTLIST) != 0U) {
    virtual_timer_t * vtp;

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
 8001f3c:	bf18      	it	ne
 8001f3e:	2300      	movne	r3, #0
      vtp = vtp->vt_next;
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.vt_prev;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001f40:	d1d2      	bne.n	8001ee8 <chSysIntegrityCheckI+0x48>
 8001f42:	e7d6      	b.n	8001ef2 <chSysIntegrityCheckI+0x52>
      n++;
      tp = tp->p_newer;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_older;
 8001f44:	6959      	ldr	r1, [r3, #20]
#if CH_CFG_USE_REGISTRY == TRUE
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
 8001f46:	2000      	movs	r0, #0
      tp = tp->p_newer;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_older;
    while (tp != (thread_t *)&ch.rlist) {
 8001f48:	4299      	cmp	r1, r3
 8001f4a:	d1e1      	bne.n	8001f10 <chSysIntegrityCheckI+0x70>
 8001f4c:	e7e7      	b.n	8001f1e <chSysIntegrityCheckI+0x7e>
 8001f4e:	bf00      	nop
 8001f50:	20001098 	.word	0x20001098
	...

08001f60 <BusFault_Handler>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 8001f60:	e7fe      	b.n	8001f60 <BusFault_Handler>
 8001f62:	bf00      	nop
	...

08001f70 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8001f70:	b4f0      	push	{r4, r5, r6, r7}
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
 8001f72:	4e11      	ldr	r6, [pc, #68]	; (8001fb8 <__init_ram_areas+0x48>)
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8001f74:	2500      	movs	r5, #0
 8001f76:	f106 0780 	add.w	r7, r6, #128	; 0x80
void __init_ram_areas(void) {
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;

  do {
    uint32_t *tp = rap->init_text_area;
 8001f7a:	e896 001a 	ldmia.w	r6, {r1, r3, r4}
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8001f7e:	42a3      	cmp	r3, r4
 8001f80:	d20d      	bcs.n	8001f9e <__init_ram_areas+0x2e>
 8001f82:	461a      	mov	r2, r3
 8001f84:	3904      	subs	r1, #4
      *p = *tp;
 8001f86:	f851 0f04 	ldr.w	r0, [r1, #4]!
 8001f8a:	f842 0b04 	str.w	r0, [r2], #4
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8001f8e:	42a2      	cmp	r2, r4
 8001f90:	d3f9      	bcc.n	8001f86 <__init_ram_areas+0x16>
 8001f92:	43da      	mvns	r2, r3
 8001f94:	4414      	add	r4, r2
 8001f96:	f024 0403 	bic.w	r4, r4, #3
 8001f9a:	3404      	adds	r4, #4
 8001f9c:	4423      	add	r3, r4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8001f9e:	68f2      	ldr	r2, [r6, #12]
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d203      	bcs.n	8001fac <__init_ram_areas+0x3c>
      *p = 0;
 8001fa4:	f843 5b04 	str.w	r5, [r3], #4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d3fb      	bcc.n	8001fa4 <__init_ram_areas+0x34>
      *p = 0;
      p++;
    }
    rap++;
 8001fac:	3610      	adds	r6, #16
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8001fae:	42be      	cmp	r6, r7
 8001fb0:	d3e3      	bcc.n	8001f7a <__init_ram_areas+0xa>
#endif
}
 8001fb2:	bcf0      	pop	{r4, r5, r6, r7}
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	08006950 	.word	0x08006950
 8001fbc:	00000000 	.word	0x00000000

08001fc0 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 8001fc0:	e7fe      	b.n	8001fc0 <__default_exit>
 8001fc2:	bf00      	nop
	...

08001fd0 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
	...

08001fe0 <__core_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __core_init(void) {
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
	...

08001ff0 <bmk12_setup.lto_priv.171>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001ff0:	4b02      	ldr	r3, [pc, #8]	; (8001ffc <bmk12_setup.lto_priv.171+0xc>)
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8001ff6:	605b      	str	r3, [r3, #4]
 8001ff8:	609a      	str	r2, [r3, #8]
 8001ffa:	4770      	bx	lr
 8001ffc:	20000938 	.word	0x20000938

08002000 <bmk13_execute.lto_priv.173>:
 *
 * <h2>Description</h2>
 * The memory size of the various kernel objects is printed.
 */

static void bmk13_execute(void) {
 8002000:	b510      	push	{r4, lr}

  test_print("--- System: ");
 8002002:	482f      	ldr	r0, [pc, #188]	; (80020c0 <bmk13_execute.lto_priv.173+0xc0>)
  test_printn(sizeof(ch_system_t));
  test_println(" bytes");
 8002004:	4c2f      	ldr	r4, [pc, #188]	; (80020c4 <bmk13_execute.lto_priv.173+0xc4>)
 * The memory size of the various kernel objects is printed.
 */

static void bmk13_execute(void) {

  test_print("--- System: ");
 8002006:	f001 f933 	bl	8003270 <test_print>
  test_printn(sizeof(ch_system_t));
 800200a:	f44f 70a8 	mov.w	r0, #336	; 0x150
 800200e:	f001 f93f 	bl	8003290 <test_printn>
  test_println(" bytes");
 8002012:	4620      	mov	r0, r4
 8002014:	f001 f90c 	bl	8003230 <test_println>
  test_print("--- Thread: ");
 8002018:	482b      	ldr	r0, [pc, #172]	; (80020c8 <bmk13_execute.lto_priv.173+0xc8>)
 800201a:	f001 f929 	bl	8003270 <test_print>
  test_printn(sizeof(thread_t));
 800201e:	2044      	movs	r0, #68	; 0x44
 8002020:	f001 f936 	bl	8003290 <test_printn>
  test_println(" bytes");
 8002024:	4620      	mov	r0, r4
 8002026:	f001 f903 	bl	8003230 <test_println>
  test_print("--- Timer : ");
 800202a:	4828      	ldr	r0, [pc, #160]	; (80020cc <bmk13_execute.lto_priv.173+0xcc>)
 800202c:	f001 f920 	bl	8003270 <test_print>
  test_printn(sizeof(virtual_timer_t));
 8002030:	2014      	movs	r0, #20
 8002032:	f001 f92d 	bl	8003290 <test_printn>
  test_println(" bytes");
 8002036:	4620      	mov	r0, r4
 8002038:	f001 f8fa 	bl	8003230 <test_println>
#if CH_CFG_USE_SEMAPHORES || defined(__DOXYGEN__)
  test_print("--- Semaph: ");
 800203c:	4824      	ldr	r0, [pc, #144]	; (80020d0 <bmk13_execute.lto_priv.173+0xd0>)
 800203e:	f001 f917 	bl	8003270 <test_print>
  test_printn(sizeof(semaphore_t));
 8002042:	200c      	movs	r0, #12
 8002044:	f001 f924 	bl	8003290 <test_printn>
  test_println(" bytes");
 8002048:	4620      	mov	r0, r4
 800204a:	f001 f8f1 	bl	8003230 <test_println>
#endif
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
  test_print("--- EventS: ");
 800204e:	4821      	ldr	r0, [pc, #132]	; (80020d4 <bmk13_execute.lto_priv.173+0xd4>)
 8002050:	f001 f90e 	bl	8003270 <test_print>
  test_printn(sizeof(event_source_t));
 8002054:	2004      	movs	r0, #4
 8002056:	f001 f91b 	bl	8003290 <test_printn>
  test_println(" bytes");
 800205a:	4620      	mov	r0, r4
 800205c:	f001 f8e8 	bl	8003230 <test_println>
  test_print("--- EventL: ");
 8002060:	481d      	ldr	r0, [pc, #116]	; (80020d8 <bmk13_execute.lto_priv.173+0xd8>)
 8002062:	f001 f905 	bl	8003270 <test_print>
  test_printn(sizeof(event_listener_t));
 8002066:	2014      	movs	r0, #20
 8002068:	f001 f912 	bl	8003290 <test_printn>
  test_println(" bytes");
 800206c:	4620      	mov	r0, r4
 800206e:	f001 f8df 	bl	8003230 <test_println>
#endif
#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
  test_print("--- Mutex : ");
 8002072:	481a      	ldr	r0, [pc, #104]	; (80020dc <bmk13_execute.lto_priv.173+0xdc>)
 8002074:	f001 f8fc 	bl	8003270 <test_print>
  test_printn(sizeof(mutex_t));
 8002078:	2010      	movs	r0, #16
 800207a:	f001 f909 	bl	8003290 <test_printn>
  test_println(" bytes");
 800207e:	4620      	mov	r0, r4
 8002080:	f001 f8d6 	bl	8003230 <test_println>
#endif
#if CH_CFG_USE_CONDVARS || defined(__DOXYGEN__)
  test_print("--- CondV.: ");
 8002084:	4816      	ldr	r0, [pc, #88]	; (80020e0 <bmk13_execute.lto_priv.173+0xe0>)
 8002086:	f001 f8f3 	bl	8003270 <test_print>
  test_printn(sizeof(condition_variable_t));
 800208a:	2008      	movs	r0, #8
 800208c:	f001 f900 	bl	8003290 <test_printn>
  test_println(" bytes");
 8002090:	4620      	mov	r0, r4
 8002092:	f001 f8cd 	bl	8003230 <test_println>
#endif
#if CH_CFG_USE_QUEUES || defined(__DOXYGEN__)
  test_print("--- Queue : ");
 8002096:	4813      	ldr	r0, [pc, #76]	; (80020e4 <bmk13_execute.lto_priv.173+0xe4>)
 8002098:	f001 f8ea 	bl	8003270 <test_print>
  test_printn(sizeof(io_queue_t));
 800209c:	2024      	movs	r0, #36	; 0x24
 800209e:	f001 f8f7 	bl	8003290 <test_printn>
  test_println(" bytes");
 80020a2:	4620      	mov	r0, r4
 80020a4:	f001 f8c4 	bl	8003230 <test_println>
#endif
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
  test_print("--- MailB.: ");
 80020a8:	480f      	ldr	r0, [pc, #60]	; (80020e8 <bmk13_execute.lto_priv.173+0xe8>)
 80020aa:	f001 f8e1 	bl	8003270 <test_print>
  test_printn(sizeof(mailbox_t));
 80020ae:	2028      	movs	r0, #40	; 0x28
 80020b0:	f001 f8ee 	bl	8003290 <test_printn>
  test_println(" bytes");
 80020b4:	4620      	mov	r0, r4
#endif
}
 80020b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_println(" bytes");
#endif
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
  test_print("--- MailB.: ");
  test_printn(sizeof(mailbox_t));
  test_println(" bytes");
 80020ba:	f001 b8b9 	b.w	8003230 <test_println>
 80020be:	bf00      	nop
 80020c0:	08006a00 	.word	0x08006a00
 80020c4:	08006a10 	.word	0x08006a10
 80020c8:	08006a18 	.word	0x08006a18
 80020cc:	08006a28 	.word	0x08006a28
 80020d0:	08006a38 	.word	0x08006a38
 80020d4:	08006a48 	.word	0x08006a48
 80020d8:	08006a58 	.word	0x08006a58
 80020dc:	08006a68 	.word	0x08006a68
 80020e0:	08006a78 	.word	0x08006a78
 80020e4:	08006a88 	.word	0x08006a88
 80020e8:	08006a98 	.word	0x08006a98
 80020ec:	00000000 	.word	0x00000000

080020f0 <bmk12_execute.lto_priv.172>:
static void bmk12_setup(void) {

  chMtxObjectInit(&mtx1);
}

static void bmk12_execute(void) {
 80020f0:	b538      	push	{r3, r4, r5, lr}
  uint32_t n = 0;

  test_wait_tick();
 80020f2:	f000 ffd5 	bl	80030a0 <test_wait_tick>
  test_start_timer(1000);
 80020f6:	f004 fb6b 	bl	80067d0 <test_start_timer.constprop.6>
 80020fa:	4d14      	ldr	r5, [pc, #80]	; (800214c <bmk12_execute.lto_priv.172+0x5c>)

  chMtxObjectInit(&mtx1);
}

static void bmk12_execute(void) {
  uint32_t n = 0;
 80020fc:	2400      	movs	r4, #0

  test_wait_tick();
  test_start_timer(1000);
  do {
    chMtxLock(&mtx1);
 80020fe:	4814      	ldr	r0, [pc, #80]	; (8002150 <bmk12_execute.lto_priv.172+0x60>)
 8002100:	f7ff fca6 	bl	8001a50 <chMtxLock>
    chMtxUnlock(&mtx1);
 8002104:	4812      	ldr	r0, [pc, #72]	; (8002150 <bmk12_execute.lto_priv.172+0x60>)
 8002106:	f7ff fc03 	bl	8001910 <chMtxUnlock>
    chMtxLock(&mtx1);
 800210a:	4811      	ldr	r0, [pc, #68]	; (8002150 <bmk12_execute.lto_priv.172+0x60>)
 800210c:	f7ff fca0 	bl	8001a50 <chMtxLock>
    chMtxUnlock(&mtx1);
 8002110:	480f      	ldr	r0, [pc, #60]	; (8002150 <bmk12_execute.lto_priv.172+0x60>)
 8002112:	f7ff fbfd 	bl	8001910 <chMtxUnlock>
    chMtxLock(&mtx1);
 8002116:	480e      	ldr	r0, [pc, #56]	; (8002150 <bmk12_execute.lto_priv.172+0x60>)
 8002118:	f7ff fc9a 	bl	8001a50 <chMtxLock>
    chMtxUnlock(&mtx1);
 800211c:	480c      	ldr	r0, [pc, #48]	; (8002150 <bmk12_execute.lto_priv.172+0x60>)
 800211e:	f7ff fbf7 	bl	8001910 <chMtxUnlock>
    chMtxLock(&mtx1);
 8002122:	480b      	ldr	r0, [pc, #44]	; (8002150 <bmk12_execute.lto_priv.172+0x60>)
 8002124:	f7ff fc94 	bl	8001a50 <chMtxLock>
    chMtxUnlock(&mtx1);
 8002128:	4809      	ldr	r0, [pc, #36]	; (8002150 <bmk12_execute.lto_priv.172+0x60>)
 800212a:	f7ff fbf1 	bl	8001910 <chMtxUnlock>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800212e:	782b      	ldrb	r3, [r5, #0]
    chMtxUnlock(&mtx1);
    chMtxLock(&mtx1);
    chMtxUnlock(&mtx1);
    chMtxLock(&mtx1);
    chMtxUnlock(&mtx1);
    n++;
 8002130:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8002132:	2b00      	cmp	r3, #0
 8002134:	d0e3      	beq.n	80020fe <bmk12_execute.lto_priv.172+0xe>
  test_print("--- Score : ");
 8002136:	4807      	ldr	r0, [pc, #28]	; (8002154 <bmk12_execute.lto_priv.172+0x64>)
 8002138:	f001 f89a 	bl	8003270 <test_print>
  test_printn(n * 4);
 800213c:	00a0      	lsls	r0, r4, #2
 800213e:	f001 f8a7 	bl	8003290 <test_printn>
  test_println(" lock+unlock/S");
}
 8002142:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 4);
  test_println(" lock+unlock/S");
 8002146:	4804      	ldr	r0, [pc, #16]	; (8002158 <bmk12_execute.lto_priv.172+0x68>)
 8002148:	f001 b872 	b.w	8003230 <test_println>
 800214c:	200011e8 	.word	0x200011e8
 8002150:	20000938 	.word	0x20000938
 8002154:	08006aa8 	.word	0x08006aa8
 8002158:	08006ab8 	.word	0x08006ab8
 800215c:	00000000 	.word	0x00000000

08002160 <bmk11_execute.lto_priv.170>:
static void bmk11_setup(void) {

  chSemObjectInit(&sem1, 1);
}

static void bmk11_execute(void) {
 8002160:	b538      	push	{r3, r4, r5, lr}
  uint32_t n = 0;

  test_wait_tick();
 8002162:	f000 ff9d 	bl	80030a0 <test_wait_tick>
  test_start_timer(1000);
 8002166:	f004 fb33 	bl	80067d0 <test_start_timer.constprop.6>
 800216a:	4d14      	ldr	r5, [pc, #80]	; (80021bc <bmk11_execute.lto_priv.170+0x5c>)

  chSemObjectInit(&sem1, 1);
}

static void bmk11_execute(void) {
  uint32_t n = 0;
 800216c:	2400      	movs	r4, #0

  test_wait_tick();
  test_start_timer(1000);
  do {
    chSemWait(&sem1);
 800216e:	4814      	ldr	r0, [pc, #80]	; (80021c0 <bmk11_execute.lto_priv.170+0x60>)
 8002170:	f7ff fa96 	bl	80016a0 <chSemWait>
    chSemSignal(&sem1);
 8002174:	4812      	ldr	r0, [pc, #72]	; (80021c0 <bmk11_execute.lto_priv.170+0x60>)
 8002176:	f7ff f9b3 	bl	80014e0 <chSemSignal>
    chSemWait(&sem1);
 800217a:	4811      	ldr	r0, [pc, #68]	; (80021c0 <bmk11_execute.lto_priv.170+0x60>)
 800217c:	f7ff fa90 	bl	80016a0 <chSemWait>
    chSemSignal(&sem1);
 8002180:	480f      	ldr	r0, [pc, #60]	; (80021c0 <bmk11_execute.lto_priv.170+0x60>)
 8002182:	f7ff f9ad 	bl	80014e0 <chSemSignal>
    chSemWait(&sem1);
 8002186:	480e      	ldr	r0, [pc, #56]	; (80021c0 <bmk11_execute.lto_priv.170+0x60>)
 8002188:	f7ff fa8a 	bl	80016a0 <chSemWait>
    chSemSignal(&sem1);
 800218c:	480c      	ldr	r0, [pc, #48]	; (80021c0 <bmk11_execute.lto_priv.170+0x60>)
 800218e:	f7ff f9a7 	bl	80014e0 <chSemSignal>
    chSemWait(&sem1);
 8002192:	480b      	ldr	r0, [pc, #44]	; (80021c0 <bmk11_execute.lto_priv.170+0x60>)
 8002194:	f7ff fa84 	bl	80016a0 <chSemWait>
    chSemSignal(&sem1);
 8002198:	4809      	ldr	r0, [pc, #36]	; (80021c0 <bmk11_execute.lto_priv.170+0x60>)
 800219a:	f7ff f9a1 	bl	80014e0 <chSemSignal>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800219e:	782b      	ldrb	r3, [r5, #0]
    chSemSignal(&sem1);
    chSemWait(&sem1);
    chSemSignal(&sem1);
    chSemWait(&sem1);
    chSemSignal(&sem1);
    n++;
 80021a0:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0e3      	beq.n	800216e <bmk11_execute.lto_priv.170+0xe>
  test_print("--- Score : ");
 80021a6:	4807      	ldr	r0, [pc, #28]	; (80021c4 <bmk11_execute.lto_priv.170+0x64>)
 80021a8:	f001 f862 	bl	8003270 <test_print>
  test_printn(n * 4);
 80021ac:	00a0      	lsls	r0, r4, #2
 80021ae:	f001 f86f 	bl	8003290 <test_printn>
  test_println(" wait+signal/S");
}
 80021b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 4);
  test_println(" wait+signal/S");
 80021b6:	4804      	ldr	r0, [pc, #16]	; (80021c8 <bmk11_execute.lto_priv.170+0x68>)
 80021b8:	f001 b83a 	b.w	8003230 <test_println>
 80021bc:	200011e8 	.word	0x200011e8
 80021c0:	20000948 	.word	0x20000948
 80021c4:	08006aa8 	.word	0x08006aa8
 80021c8:	08006ac8 	.word	0x08006ac8
 80021cc:	00000000 	.word	0x00000000

080021d0 <main>:


/*
 * Application entry point.
 */
int main(void) {
 80021d0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 * @notapi
 */
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
 80021d4:	4fc2      	ldr	r7, [pc, #776]	; (80024e0 <main+0x310>)
 80021d6:	2500      	movs	r5, #0
 80021d8:	f04f 3cff 	mov.w	ip, #4294967295
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	f8c7 c010 	str.w	ip, [r7, #16]
 80021e2:	613d      	str	r5, [r7, #16]
  rccResetAPB2(0xFFFFFFFF);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f8c7 c00c 	str.w	ip, [r7, #12]
 80021ea:	60fd      	str	r5, [r7, #12]

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
 80021ec:	69fb      	ldr	r3, [r7, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 80021ee:	4abd      	ldr	r2, [pc, #756]	; (80024e4 <main+0x314>)
  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
  rccResetAPB2(0xFFFFFFFF);

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
 80021f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021f4:	61fb      	str	r3, [r7, #28]
  rccEnableBKPInterface(FALSE);
 80021f6:	69fb      	ldr	r3, [r7, #28]
 *
 * @init
 */
void canObjectInit(CANDriver *canp) {

  canp->state    = CAN_STOP;
 80021f8:	4ebb      	ldr	r6, [pc, #748]	; (80024e8 <main+0x318>)
 80021fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80021fe:	61fb      	str	r3, [r7, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8002200:	6813      	ldr	r3, [r2, #0]
  rccEnableAPB2(APB2_EN_MASK, FALSE);

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 8002202:	49ba      	ldr	r1, [pc, #744]	; (80024ec <main+0x31c>)
 8002204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002208:	6013      	str	r3, [r2, #0]
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 800220a:	f8d7 8018 	ldr.w	r8, [r7, #24]
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
 800220e:	f8df e320 	ldr.w	lr, [pc, #800]	; 8002530 <main+0x360>
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
 8002212:	4cb7      	ldr	r4, [pc, #732]	; (80024f0 <main+0x320>)
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 8002214:	4bb7      	ldr	r3, [pc, #732]	; (80024f4 <main+0x324>)

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
 8002216:	48b8      	ldr	r0, [pc, #736]	; (80024f8 <main+0x328>)
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
 8002218:	f8df 9318 	ldr.w	r9, [pc, #792]	; 8002534 <main+0x364>
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 800221c:	f048 087d 	orr.w	r8, r8, #125	; 0x7d
 8002220:	f8c7 8018 	str.w	r8, [r7, #24]
 8002224:	b08d      	sub	sp, #52	; 0x34
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
 8002226:	f502 4224 	add.w	r2, r2, #41984	; 0xa400
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800222a:	f106 0808 	add.w	r8, r6, #8
  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
 800222e:	f04f 4b88 	mov.w	fp, #1140850688	; 0x44000000
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
 8002232:	f04f 3a88 	mov.w	sl, #2290649224	; 0x88888888
  rccEnableAPB2(APB2_EN_MASK, FALSE);

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 8002236:	f8c1 c00c 	str.w	ip, [r1, #12]
  canp->config   = NULL;
 800223a:	6075      	str	r5, [r6, #4]
  GPIOA->CRH = config->PAData.crh;
 800223c:	6048      	str	r0, [r1, #4]
  GPIOA->CRL = config->PAData.crl;
 800223e:	f8c1 b000 	str.w	fp, [r1]
  GPIOB->ODR = config->PBData.odr;
 8002242:	f8ce c00c 	str.w	ip, [lr, #12]
 8002246:	f8cd c014 	str.w	ip, [sp, #20]
 800224a:	f8c6 8008 	str.w	r8, [r6, #8]
  GPIOB->CRH = config->PBData.crh;
 800224e:	f8ce a004 	str.w	sl, [lr, #4]
  tqp->p_prev = (thread_t *)tqp;
 8002252:	f8c6 800c 	str.w	r8, [r6, #12]
  GPIOB->CRL = config->PBData.crl;
 8002256:	f8ce 9000 	str.w	r9, [lr]
  GPIOC->ODR = config->PCData.odr;
 800225a:	60e5      	str	r5, [r4, #12]
  GPIOC->CRH = config->PCData.crh;
 800225c:	6065      	str	r5, [r4, #4]
  GPIOC->CRL = config->PCData.crl;
 800225e:	6025      	str	r5, [r4, #0]
  GPIOD->ODR = config->PDData.odr;
 8002260:	60d5      	str	r5, [r2, #12]
  GPIOD->CRH = config->PDData.crh;
 8002262:	6055      	str	r5, [r2, #4]
  GPIOD->CRL = config->PDData.crl;
 8002264:	6015      	str	r5, [r2, #0]
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 8002266:	60dd      	str	r5, [r3, #12]
  GPIOE->CRH = config->PEData.crh;
 8002268:	605d      	str	r5, [r3, #4]
  GPIOE->CRL = config->PEData.crl;
 800226a:	601d      	str	r5, [r3, #0]
static void can_lld_set_filters(uint32_t can2sb,
                                uint32_t num,
                                const CANFilter *cfp) {

  /* Temporarily enabling CAN1 clock.*/
  rccEnableCAN1(FALSE);
 800226c:	69fa      	ldr	r2, [r7, #28]
 *
 * @init
 */
void canObjectInit(CANDriver *canp) {

  canp->state    = CAN_STOP;
 800226e:	2101      	movs	r1, #1
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002270:	f106 0010 	add.w	r0, r6, #16
 8002274:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002278:	7031      	strb	r1, [r6, #0]
 800227a:	6130      	str	r0, [r6, #16]
void can_lld_init(void) {

#if STM32_CAN_USE_CAN1
  /* Driver initialization.*/
  canObjectInit(&CAND1);
  CAND1.can = CAN1;
 800227c:	f5a3 4334 	sub.w	r3, r3, #46080	; 0xb400
static void can_lld_set_filters(uint32_t can2sb,
                                uint32_t num,
                                const CANFilter *cfp) {

  /* Temporarily enabling CAN1 clock.*/
  rccEnableCAN1(FALSE);
 8002280:	61fa      	str	r2, [r7, #28]

  /* Filters initialization.*/
  CAN1->FMR = (CAN1->FMR & 0xFFFF0000) | (can2sb << 8) | CAN_FMR_FINIT;
 8002282:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 8002286:	f106 0920 	add.w	r9, r6, #32
 800228a:	0c12      	lsrs	r2, r2, #16
 800228c:	0412      	lsls	r2, r2, #16
 800228e:	f442 6260 	orr.w	r2, r2, #3584	; 0xe00
 8002292:	430a      	orrs	r2, r1
 8002294:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    }
  }
  else {
    /* Setting up a single default filter that enables everything for both
       CANs.*/
    CAN1->sFilterRegister[0].FR1 = 0;
 8002298:	f8c3 5240 	str.w	r5, [r3, #576]	; 0x240
    CAN1->sFilterRegister[0].FR2 = 0;
 800229c:	f8c3 5244 	str.w	r5, [r3, #580]	; 0x244
#if STM32_HAS_CAN2
    CAN1->sFilterRegister[can2sb].FR1 = 0;
    CAN1->sFilterRegister[can2sb].FR2 = 0;
#endif
    CAN1->FM1R = 0;
 80022a0:	f8c3 5204 	str.w	r5, [r3, #516]	; 0x204
    CAN1->FFA1R = 0;
 80022a4:	f8c3 5214 	str.w	r5, [r3, #532]	; 0x214
#if STM32_HAS_CAN2
    CAN1->FS1R = 1 | (1 << can2sb);
    CAN1->FA1R = 1 | (1 << can2sb);
#else
    CAN1->FS1R = 1;
 80022a8:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
    CAN1->FA1R = 1;
 80022ac:	f8c3 121c 	str.w	r1, [r3, #540]	; 0x21c
#endif
  }
  CAN1->FMR &= ~CAN_FMR_FINIT;
 80022b0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
#if STM32_HAS_CAN2
    CAN1->FS1R = 1 | (1 << can2sb);
    CAN1->FA1R = 1 | (1 << can2sb);
#else
    CAN1->FS1R = 1;
    CAN1->FA1R = 1;
 80022b4:	9103      	str	r1, [sp, #12]
#endif
  }
  CAN1->FMR &= ~CAN_FMR_FINIT;
 80022b6:	f022 0201 	bic.w	r2, r2, #1
 80022ba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  /* Clock disabled, it will be enabled again in can_lld_start().*/
  rccDisableCAN1(FALSE);
 80022be:	69fa      	ldr	r2, [r7, #28]

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80022c0:	f648 4a9f 	movw	sl, #35999	; 0x8c9f
 80022c4:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80022c8:	61fa      	str	r2, [r7, #28]
 80022ca:	f8c6 9020 	str.w	r9, [r6, #32]
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 80022ce:	f64f 79ff 	movw	r9, #65535	; 0xffff
 80022d2:	f106 0418 	add.w	r4, r6, #24
 80022d6:	61b4      	str	r4, [r6, #24]
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 80022d8:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 80022dc:	f106 0e1c 	add.w	lr, r6, #28
 80022e0:	f106 0228 	add.w	r2, r6, #40	; 0x28
 80022e4:	f106 0824 	add.w	r8, r6, #36	; 0x24
  tqp->p_prev = (thread_t *)tqp;
 80022e8:	6170      	str	r0, [r6, #20]
 80022ea:	f8c6 e01c 	str.w	lr, [r6, #28]
 80022ee:	f8c6 8024 	str.w	r8, [r6, #36]	; 0x24
 80022f2:	62b2      	str	r2, [r6, #40]	; 0x28
void can_lld_init(void) {

#if STM32_CAN_USE_CAN1
  /* Driver initialization.*/
  canObjectInit(&CAND1);
  CAND1.can = CAN1;
 80022f4:	62f3      	str	r3, [r6, #44]	; 0x2c
 * @notapi
 */
void sd_lld_init(void) {

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1, NULL, notify1);
 80022f6:	f004 fa33 	bl	8006760 <sdObjectInit.constprop.23>

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 80022fa:	69f8      	ldr	r0, [r7, #28]

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80022fc:	f8df b238 	ldr.w	fp, [pc, #568]	; 8002538 <main+0x368>

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8002300:	f040 0001 	orr.w	r0, r0, #1
 8002304:	61f8      	str	r0, [r7, #28]

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8002306:	f8db 0004 	ldr.w	r0, [fp, #4]
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  STM32_ST_TIM->CCMR1  = 0;
  STM32_ST_TIM->CCR[0] = 0;
  STM32_ST_TIM->DIER   = 0;
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 800230a:	9903      	ldr	r1, [sp, #12]

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 800230c:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8002310:	f8cb 0004 	str.w	r0, [fp, #4]
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 8002314:	f8df e224 	ldr.w	lr, [pc, #548]	; 800253c <main+0x36c>

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8002318:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800231c:	f8df 8220 	ldr.w	r8, [pc, #544]	; 8002540 <main+0x370>
 8002320:	f8c0 a028 	str.w	sl, [r0, #40]	; 0x28
 8002324:	f04f 0b80 	mov.w	fp, #128	; 0x80
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002328:	f04f 5a80 	mov.w	sl, #268435456	; 0x10000000
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 800232c:	f8c0 902c 	str.w	r9, [r0, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 8002330:	6185      	str	r5, [r0, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8002332:	6345      	str	r5, [r0, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8002334:	60c5      	str	r5, [r0, #12]
  STM32_ST_TIM->CR2    = 0;
 8002336:	6045      	str	r5, [r0, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8002338:	6141      	str	r1, [r0, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 800233a:	6001      	str	r1, [r0, #0]
 800233c:	9104      	str	r1, [sp, #16]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800233e:	f888 b31c 	strb.w	fp, [r8, #796]	; 0x31c
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002342:	f8c8 a180 	str.w	sl, [r8, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002346:	f8c8 a000 	str.w	sl, [r8]
 800234a:	f8ce 5008 	str.w	r5, [lr, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800234e:	f8de 900c 	ldr.w	r9, [lr, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8002352:	486a      	ldr	r0, [pc, #424]	; (80024fc <main+0x32c>)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 8002354:	ea09 0404 	and.w	r4, r9, r4
  reg_value  =  (reg_value                                   |
 8002358:	4320      	orrs	r0, r4

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800235a:	4c69      	ldr	r4, [pc, #420]	; (8002500 <main+0x330>)
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800235c:	f8ce 000c 	str.w	r0, [lr, #12]
 8002360:	68e0      	ldr	r0, [r4, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002362:	f8df a1e0 	ldr.w	sl, [pc, #480]	; 8002544 <main+0x374>

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002366:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 800236a:	60e0      	str	r0, [r4, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800236c:	f8da 0000 	ldr.w	r0, [sl]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002370:	4c64      	ldr	r4, [pc, #400]	; (8002504 <main+0x334>)
 8002372:	f040 0001 	orr.w	r0, r0, #1
 8002376:	f8ca 0000 	str.w	r0, [sl]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)IRQn < 0) {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800237a:	2010      	movs	r0, #16
 800237c:	f04f 0a20 	mov.w	sl, #32
 8002380:	f88e 001f 	strb.w	r0, [lr, #31]
 8002384:	f88e a022 	strb.w	sl, [lr, #34]	; 0x22
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 8002388:	f8dd c014 	ldr.w	ip, [sp, #20]
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 800238c:	f104 001c 	add.w	r0, r4, #28
  SD1.usart = USART1;
 8002390:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 8002548 <main+0x378>
 8002394:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 800254c <main+0x37c>
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 8002398:	f8a4 c024 	strh.w	ip, [r4, #36]	; 0x24

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 800239c:	2200      	movs	r2, #0
 800239e:	2300      	movs	r3, #0
 80023a0:	6024      	str	r4, [r4, #0]
  tqp->p_prev = (thread_t *)tqp;
 80023a2:	6064      	str	r4, [r4, #4]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 80023a4:	60a5      	str	r5, [r4, #8]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 80023a6:	6124      	str	r4, [r4, #16]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 80023a8:	6164      	str	r4, [r4, #20]
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 80023aa:	61e0      	str	r0, [r4, #28]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 80023ac:	6220      	str	r0, [r4, #32]
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 80023ae:	a806      	add	r0, sp, #24

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 80023b0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 80023b4:	f8cd c018 	str.w	ip, [sp, #24]
 80023b8:	f8c9 b2ac 	str.w	fp, [r9, #684]	; 0x2ac
  ch.vtlist.vt_delta = (systime_t)-1;
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = (systime_t)0;
 80023bc:	84e5      	strh	r5, [r4, #38]	; 0x26
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 80023be:	6725      	str	r5, [r4, #112]	; 0x70
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 80023c0:	9507      	str	r5, [sp, #28]
  tmp->last       = (rtcnt_t)0;
 80023c2:	9508      	str	r5, [sp, #32]
  tmp->n          = (ucnt_t)0;
 80023c4:	9509      	str	r5, [sp, #36]	; 0x24
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 80023c6:	f003 ffe3 	bl	8006390 <chTMStartMeasurementX.constprop.71>
  chTMStopMeasurementX(&tm);
 80023ca:	a806      	add	r0, sp, #24
 80023cc:	f7fe ffd0 	bl	8001370 <chTMStopMeasurementX>
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 80023d0:	484d      	ldr	r0, [pc, #308]	; (8002508 <main+0x338>)
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 80023d2:	4b4e      	ldr	r3, [pc, #312]	; (800250c <main+0x33c>)
 80023d4:	f020 0107 	bic.w	r1, r0, #7
  ch.tm.offset = tm.last;
 80023d8:	9808      	ldr	r0, [sp, #32]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80023da:	f8d4 c014 	ldr.w	ip, [r4, #20]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80023de:	f103 0e10 	add.w	lr, r3, #16
 80023e2:	9103      	str	r1, [sp, #12]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80023e4:	9904      	ldr	r1, [sp, #16]
 80023e6:	f8c3 e010 	str.w	lr, [r3, #16]
  tqp->p_prev = (thread_t *)tqp;
 80023ea:	f8c3 e014 	str.w	lr, [r3, #20]
 80023ee:	6720      	str	r0, [r4, #112]	; 0x70
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 80023f0:	f04f 0e40 	mov.w	lr, #64	; 0x40
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80023f4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80023f8:	f8c4 c040 	str.w	ip, [r4, #64]	; 0x40
 80023fc:	619d      	str	r5, [r3, #24]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 80023fe:	f8c4 e034 	str.w	lr, [r4, #52]	; 0x34
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8002402:	f8c4 e068 	str.w	lr, [r4, #104]	; 0x68
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8002406:	f884 5049 	strb.w	r5, [r4, #73]	; 0x49
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 800240a:	6665      	str	r5, [r4, #100]	; 0x64
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 800240c:	6625      	str	r5, [r4, #96]	; 0x60
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 800240e:	f884 104a 	strb.w	r1, [r4, #74]	; 0x4a
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8002412:	6465      	str	r5, [r4, #68]	; 0x44
  REG_INSERT(tp);
 8002414:	63e4      	str	r4, [r4, #60]	; 0x3c
 8002416:	f8cc 0010 	str.w	r0, [ip, #16]
 800241a:	f8df c134 	ldr.w	ip, [pc, #308]	; 8002550 <main+0x380>
  default_heap.h_free.h.u.next = NULL;
 800241e:	609d      	str	r5, [r3, #8]
  default_heap.h_free.h.size = 0;
 8002420:	60dd      	str	r5, [r3, #12]
 8002422:	6160      	str	r0, [r4, #20]
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8002424:	61a0      	str	r0, [r4, #24]
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 8002426:	f8c3 c000 	str.w	ip, [r3]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 800242a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800242e:	f104 0354 	add.w	r3, r4, #84	; 0x54
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8002432:	4a37      	ldr	r2, [pc, #220]	; (8002510 <main+0x340>)
 8002434:	f8df e11c 	ldr.w	lr, [pc, #284]	; 8002554 <main+0x384>
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8002438:	6520      	str	r0, [r4, #80]	; 0x50
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800243a:	6563      	str	r3, [r4, #84]	; 0x54
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800243c:	4835      	ldr	r0, [pc, #212]	; (8002514 <main+0x344>)
  tqp->p_prev = (thread_t *)tqp;
 800243e:	65a3      	str	r3, [r4, #88]	; 0x58
 8002440:	9b03      	ldr	r3, [sp, #12]
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8002442:	f022 0207 	bic.w	r2, r2, #7
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 8002446:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
 800244a:	f8ce 2000 	str.w	r2, [lr]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800244e:	6003      	str	r3, [r0, #0]
 8002450:	f385 8811 	msr	BASEPRI, r5
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8002454:	b662      	cpsie	i
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 8002456:	f8df e100 	ldr.w	lr, [pc, #256]	; 8002558 <main+0x388>
 800245a:	69a3      	ldr	r3, [r4, #24]
#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
    thread_t *tp =  chThdCreateStatic(ch.idle_thread_wa,
 800245c:	460a      	mov	r2, r1
 800245e:	f8c3 e018 	str.w	lr, [r3, #24]
 8002462:	21d8      	movs	r1, #216	; 0xd8
 8002464:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8002468:	9500      	str	r5, [sp, #0]
 800246a:	4b2b      	ldr	r3, [pc, #172]	; (8002518 <main+0x348>)
 800246c:	f7ff f8a0 	bl	80015b0 <chThdCreateStatic>
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 8002470:	4b2a      	ldr	r3, [pc, #168]	; (800251c <main+0x34c>)
 8002472:	6183      	str	r3, [r0, #24]
 * @notapi
 */
void sd_lld_init(void) {

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1, NULL, notify1);
 8002474:	f004 f974 	bl	8006760 <sdObjectInit.constprop.23>
  SD1.usart = USART1;
 8002478:	f8c9 b2ac 	str.w	fp, [r9, #684]	; 0x2ac

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800247c:	f38a 8811 	msr	BASEPRI, sl
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 8002480:	f899 3008 	ldrb.w	r3, [r9, #8]
 8002484:	2b01      	cmp	r3, #1
 8002486:	f000 80e0 	beq.w	800264a <main+0x47a>
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
#else
  if (sdp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / config->speed;
 800248a:	4925      	ldr	r1, [pc, #148]	; (8002520 <main+0x350>)
 800248c:	4a25      	ldr	r2, [pc, #148]	; (8002524 <main+0x354>)
 800248e:	6808      	ldr	r0, [r1, #0]
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] config    the architecture-dependent serial driver configuration
 */
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
  USART_TypeDef *u = sdp->usart;
 8002490:	f8d9 32ac 	ldr.w	r3, [r9, #684]	; 0x2ac
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
#else
  if (sdp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / config->speed;
 8002494:	fbb2 f2f0 	udiv	r2, r2, r0
 8002498:	609a      	str	r2, [r3, #8]

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 800249a:	888a      	ldrh	r2, [r1, #4]
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800249c:	88c8      	ldrh	r0, [r1, #6]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 800249e:	8909      	ldrh	r1, [r1, #8]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 80024a0:	f442 5204 	orr.w	r2, r2, #8448	; 0x2100
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80024a4:	f040 0040 	orr.w	r0, r0, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 80024a8:	f042 022c 	orr.w	r2, r2, #44	; 0x2c
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80024ac:	f041 0101 	orr.w	r1, r1, #1
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80024b0:	b280      	uxth	r0, r0
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 80024b2:	b292      	uxth	r2, r2
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80024b4:	b289      	uxth	r1, r1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->SR = 0;
 80024b6:	2700      	movs	r7, #0
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80024b8:	6118      	str	r0, [r3, #16]

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
  sdp->state = SD_READY;
 80024ba:	f04f 0802 	mov.w	r8, #2
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80024be:	6159      	str	r1, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 80024c0:	60da      	str	r2, [r3, #12]
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->SR = 0;
 80024c2:	601f      	str	r7, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 80024c4:	681a      	ldr	r2, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f889 8008 	strb.w	r8, [r9, #8]
 80024cc:	f387 8811 	msr	BASEPRI, r7
 80024d0:	4b15      	ldr	r3, [pc, #84]	; (8002528 <main+0x358>)
void consoleInit(void){
  sdInit();
  /* Shell initialization.*/
  sdStart(&SD1, &ser_cfg);
  shellInit();
  consoleThread = NULL;
 80024d2:	4c16      	ldr	r4, [pc, #88]	; (800252c <main+0x35c>)
  consoleInit();
  chThdSleepMilliseconds(100);



  palClearPad(GPIOB, GPIOB_LED3);
 80024d4:	4d16      	ldr	r5, [pc, #88]	; (8002530 <main+0x360>)
   */
  halInit();
  chSysInit();

  consoleInit();
  chThdSleepMilliseconds(100);
 80024d6:	20c8      	movs	r0, #200	; 0xc8
 80024d8:	6027      	str	r7, [r4, #0]
 80024da:	601b      	str	r3, [r3, #0]



  palClearPad(GPIOB, GPIOB_LED3);
 80024dc:	2720      	movs	r7, #32
 80024de:	e03d      	b.n	800255c <main+0x38c>
 80024e0:	40021000 	.word	0x40021000
 80024e4:	40007000 	.word	0x40007000
 80024e8:	20000908 	.word	0x20000908
 80024ec:	40010800 	.word	0x40010800
 80024f0:	40011000 	.word	0x40011000
 80024f4:	40011800 	.word	0x40011800
 80024f8:	88894334 	.word	0x88894334
 80024fc:	05fa0300 	.word	0x05fa0300
 8002500:	e000edf0 	.word	0xe000edf0
 8002504:	20001098 	.word	0x20001098
 8002508:	20005000 	.word	0x20005000
 800250c:	200008e0 	.word	0x200008e0
 8002510:	200014c7 	.word	0x200014c7
 8002514:	20000a2c 	.word	0x20000a2c
 8002518:	08001241 	.word	0x08001241
 800251c:	08006ad8 	.word	0x08006ad8
 8002520:	20000818 	.word	0x20000818
 8002524:	02255100 	.word	0x02255100
 8002528:	20000904 	.word	0x20000904
 800252c:	20000900 	.word	0x20000900
 8002530:	40010c00 	.word	0x40010c00
 8002534:	33333844 	.word	0x33333844
 8002538:	e0042000 	.word	0xe0042000
 800253c:	e000ed00 	.word	0xe000ed00
 8002540:	e000e100 	.word	0xe000e100
 8002544:	e0001000 	.word	0xe0001000
 8002548:	2000120c 	.word	0x2000120c
 800254c:	40013800 	.word	0x40013800
 8002550:	08002e51 	.word	0x08002e51
 8002554:	20000a28 	.word	0x20000a28
 8002558:	08006d20 	.word	0x08006d20
   */
  halInit();
  chSysInit();

  consoleInit();
  chThdSleepMilliseconds(100);
 800255c:	f7ff fc70 	bl	8001e40 <chThdSleep>



  palClearPad(GPIOB, GPIOB_LED3);
  palClearPad(GPIOB, GPIOB_LED1);
 8002560:	2280      	movs	r2, #128	; 0x80
  palClearPad(GPIOB, GPIOB_LED2);
 8002562:	2340      	movs	r3, #64	; 0x40
  consoleInit();
  chThdSleepMilliseconds(100);



  palClearPad(GPIOB, GPIOB_LED3);
 8002564:	616f      	str	r7, [r5, #20]
  palClearPad(GPIOB, GPIOB_LED1);
  palClearPad(GPIOB, GPIOB_LED2);

  chThdSleepMilliseconds(100);
 8002566:	20c8      	movs	r0, #200	; 0xc8
  chThdSleepMilliseconds(100);



  palClearPad(GPIOB, GPIOB_LED3);
  palClearPad(GPIOB, GPIOB_LED1);
 8002568:	616a      	str	r2, [r5, #20]
  palClearPad(GPIOB, GPIOB_LED2);
 800256a:	616b      	str	r3, [r5, #20]

  chThdSleepMilliseconds(100);
 800256c:	f7ff fc68 	bl	8001e40 <chThdSleep>
  palSetPad(GPIOB, GPIOB_LED3);

  palSetPad(GPIOA, GPIOA_TXD1);
 8002570:	4b3c      	ldr	r3, [pc, #240]	; (8002664 <main+0x494>)
 8002572:	f44f 7100 	mov.w	r1, #512	; 0x200
  palSetPad(GPIOA, GPIOA_RXD1);
 8002576:	f44f 6280 	mov.w	r2, #1024	; 0x400
  palClearPad(GPIOB, GPIOB_LED3);
  palClearPad(GPIOB, GPIOB_LED1);
  palClearPad(GPIOB, GPIOB_LED2);

  chThdSleepMilliseconds(100);
  palSetPad(GPIOB, GPIOB_LED3);
 800257a:	612f      	str	r7, [r5, #16]

  palSetPad(GPIOA, GPIOA_TXD1);
 800257c:	6119      	str	r1, [r3, #16]
  palSetPad(GPIOA, GPIOA_RXD1);
 800257e:	611a      	str	r2, [r3, #16]
 8002580:	f387 8811 	msr	BASEPRI, r7

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002584:	4b38      	ldr	r3, [pc, #224]	; (8002668 <main+0x498>)
 8002586:	22b0      	movs	r2, #176	; 0xb0
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002588:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
 800258c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    nvicEnableVector(STM32_CAN1_TX_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
    nvicEnableVector(STM32_CAN1_RX0_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
    nvicEnableVector(STM32_CAN1_RX1_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
    nvicEnableVector(STM32_CAN1_SCE_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
#endif
    rccEnableCAN1(FALSE);
 8002590:	4836      	ldr	r0, [pc, #216]	; (800266c <main+0x49c>)
 8002592:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
 8002596:	f44f 1780 	mov.w	r7, #1048576	; 0x100000

  osalSysLock();
  osalDbgAssert(canp->state == CAN_STOP, "invalid state");

  /* Entering initialization mode. */
  canp->state = CAN_STARTING;
 800259a:	f886 8000 	strb.w	r8, [r6]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800259e:	f883 2313 	strb.w	r2, [r3, #787]	; 0x313
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80025a2:	f8c3 e180 	str.w	lr, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80025a6:	f8c3 e000 	str.w	lr, [r3]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80025aa:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80025ae:	f8c3 7180 	str.w	r7, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80025b2:	601f      	str	r7, [r3, #0]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80025b4:	f883 2315 	strb.w	r2, [r3, #789]	; 0x315
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80025b8:	f8c3 5180 	str.w	r5, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80025bc:	601d      	str	r5, [r3, #0]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80025be:	f883 2316 	strb.w	r2, [r3, #790]	; 0x316
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80025c2:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80025c6:	6019      	str	r1, [r3, #0]
 80025c8:	69c1      	ldr	r1, [r0, #28]
    rccEnableCAN2(FALSE);
  }
#endif

  /* Configuring CAN. */
  canp->can->MCR = CAN_MCR_INRQ;
 80025ca:	6af3      	ldr	r3, [r6, #44]	; 0x2c
  canp->config = config;
 80025cc:	4a28      	ldr	r2, [pc, #160]	; (8002670 <main+0x4a0>)
    nvicEnableVector(STM32_CAN1_TX_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
    nvicEnableVector(STM32_CAN1_RX0_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
    nvicEnableVector(STM32_CAN1_RX1_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
    nvicEnableVector(STM32_CAN1_SCE_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
#endif
    rccEnableCAN1(FALSE);
 80025ce:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
    rccEnableCAN2(FALSE);
  }
#endif

  /* Configuring CAN. */
  canp->can->MCR = CAN_MCR_INRQ;
 80025d2:	2501      	movs	r5, #1
    nvicEnableVector(STM32_CAN1_TX_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
    nvicEnableVector(STM32_CAN1_RX0_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
    nvicEnableVector(STM32_CAN1_RX1_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
    nvicEnableVector(STM32_CAN1_SCE_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
#endif
    rccEnableCAN1(FALSE);
 80025d4:	61c1      	str	r1, [r0, #28]
 80025d6:	6072      	str	r2, [r6, #4]
    rccEnableCAN2(FALSE);
  }
#endif

  /* Configuring CAN. */
  canp->can->MCR = CAN_MCR_INRQ;
 80025d8:	601d      	str	r5, [r3, #0]
  while ((canp->can->MSR & CAN_MSR_INAK) == 0)
 80025da:	6859      	ldr	r1, [r3, #4]
 80025dc:	07c8      	lsls	r0, r1, #31
 80025de:	d409      	bmi.n	80025f4 <main+0x424>
 80025e0:	2101      	movs	r1, #1
 80025e2:	2008      	movs	r0, #8
 80025e4:	f7ff fb34 	bl	8001c50 <chSchGoSleepTimeoutS>
 80025e8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80025ea:	4a22      	ldr	r2, [pc, #136]	; (8002674 <main+0x4a4>)
 80025ec:	6859      	ldr	r1, [r3, #4]
 80025ee:	07c9      	lsls	r1, r1, #31
 80025f0:	d5f6      	bpl.n	80025e0 <main+0x410>
 80025f2:	6852      	ldr	r2, [r2, #4]
  canp->can->IER = CAN_IER_TMEIE  | CAN_IER_FMPIE0 | CAN_IER_FMPIE1 |
                   CAN_IER_WKUIE  | CAN_IER_ERRIE  | CAN_IER_LECIE  |
                   CAN_IER_BOFIE  | CAN_IER_EPVIE  | CAN_IER_EWGIE  |
                   CAN_IER_FOVIE0 | CAN_IER_FOVIE1;
#else
  canp->can->IER = CAN_IER_TMEIE  | CAN_IER_FMPIE0 | CAN_IER_FMPIE1 |
 80025f4:	4820      	ldr	r0, [pc, #128]	; (8002678 <main+0x4a8>)
  /* Low level initialization, could be a slow process and sleeps could
     be performed inside.*/
  can_lld_start(canp);

  /* The driver finally goes into the ready state.*/
  canp->state = CAN_READY;
 80025f6:	2103      	movs	r1, #3
  /* Configuring CAN. */
  canp->can->MCR = CAN_MCR_INRQ;
  while ((canp->can->MSR & CAN_MSR_INAK) == 0)
    osalThreadSleepS(1);
  canp->can->BTR = canp->config->btr;
  canp->can->MCR = canp->config->mcr;
 80025f8:	e892 00a0 	ldmia.w	r2, {r5, r7}
 80025fc:	2200      	movs	r2, #0

  /* Configuring CAN. */
  canp->can->MCR = CAN_MCR_INRQ;
  while ((canp->can->MSR & CAN_MSR_INAK) == 0)
    osalThreadSleepS(1);
  canp->can->BTR = canp->config->btr;
 80025fe:	61df      	str	r7, [r3, #28]
  canp->can->MCR = canp->config->mcr;
 8002600:	601d      	str	r5, [r3, #0]
  canp->can->IER = CAN_IER_TMEIE  | CAN_IER_FMPIE0 | CAN_IER_FMPIE1 |
                   CAN_IER_WKUIE  | CAN_IER_ERRIE  | CAN_IER_LECIE  |
                   CAN_IER_BOFIE  | CAN_IER_EPVIE  | CAN_IER_EWGIE  |
                   CAN_IER_FOVIE0 | CAN_IER_FOVIE1;
#else
  canp->can->IER = CAN_IER_TMEIE  | CAN_IER_FMPIE0 | CAN_IER_FMPIE1 |
 8002602:	6158      	str	r0, [r3, #20]
 8002604:	7031      	strb	r1, [r6, #0]
 8002606:	f382 8811 	msr	BASEPRI, r2
 800260a:	4e1c      	ldr	r6, [pc, #112]	; (800267c <main+0x4ac>)
}

void consoleStart(void){
  if (!consoleThread) {
 800260c:	4d1c      	ldr	r5, [pc, #112]	; (8002680 <main+0x4b0>)
 800260e:	e003      	b.n	8002618 <main+0x448>
   * pressed the test procedure is launched.
   */
  while (true) {
    sdPut(&SD1, 'c');
    consoleStart();
    chThdSleepMilliseconds(200);
 8002610:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002614:	f7ff fc14 	bl	8001e40 <chThdSleep>
 *
 * @api
 */
static inline msg_t chOQPut(output_queue_t *oqp, uint8_t b) {

  return chOQPutTimeout(oqp, b, TIME_INFINITE);
 8002618:	481a      	ldr	r0, [pc, #104]	; (8002684 <main+0x4b4>)
 800261a:	2163      	movs	r1, #99	; 0x63
 800261c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002620:	f7ff fb76 	bl	8001d10 <chOQPutTimeout>
 8002624:	6820      	ldr	r0, [r4, #0]
 8002626:	b138      	cbz	r0, 8002638 <main+0x468>
    consoleThread = shellCreate(&shCfg, SHELL_WA_SIZE, NORMALPRIO);
  }
  else if (chThdTerminatedX(consoleThread)) {
 8002628:	7f03      	ldrb	r3, [r0, #28]
 800262a:	2b0f      	cmp	r3, #15
 800262c:	d1f0      	bne.n	8002610 <main+0x440>
    chThdRelease(consoleThread);    /* Recovers memory of the previous shell.   */
 800262e:	f7fe fe47 	bl	80012c0 <chThdRelease>
    consoleThread = NULL;           /* Triggers spawning of a new shell.        */
 8002632:	2300      	movs	r3, #0
 8002634:	602b      	str	r3, [r5, #0]
 8002636:	e7eb      	b.n	8002610 <main+0x440>
 * @api
 */
#if CH_CFG_USE_HEAP && CH_CFG_USE_DYNAMIC
thread_t *shellCreate(const ShellConfig *scp, size_t size, tprio_t prio) {

  return chThdCreateFromHeap(NULL, size, prio, shell_thread, (void *)scp);
 8002638:	9600      	str	r6, [sp, #0]
 800263a:	f640 01c8 	movw	r1, #2248	; 0x8c8
 800263e:	2240      	movs	r2, #64	; 0x40
 8002640:	4b11      	ldr	r3, [pc, #68]	; (8002688 <main+0x4b8>)
 8002642:	f7fe ff6d 	bl	8001520 <chThdCreateFromHeap>
  consoleThread = NULL;
}

void consoleStart(void){
  if (!consoleThread) {
    consoleThread = shellCreate(&shCfg, SHELL_WA_SIZE, NORMALPRIO);
 8002646:	6028      	str	r0, [r5, #0]
 8002648:	e7e2      	b.n	8002610 <main+0x440>
    config = &default_config;

  if (sdp->state == SD_STOP) {
#if STM32_SERIAL_USE_USART1
    if (&SD1 == sdp) {
      rccEnableUSART1(FALSE);
 800264a:	69bb      	ldr	r3, [r7, #24]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800264c:	22c0      	movs	r2, #192	; 0xc0
 800264e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002652:	61bb      	str	r3, [r7, #24]
 8002654:	f888 2325 	strb.w	r2, [r8, #805]	; 0x325
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002658:	f8c8 a184 	str.w	sl, [r8, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800265c:	f8c8 a004 	str.w	sl, [r8, #4]
 8002660:	e713      	b.n	800248a <main+0x2ba>
 8002662:	bf00      	nop
 8002664:	40010800 	.word	0x40010800
 8002668:	e000e100 	.word	0xe000e100
 800266c:	40021000 	.word	0x40021000
 8002670:	080069d0 	.word	0x080069d0
 8002674:	20000908 	.word	0x20000908
 8002678:	0001875b 	.word	0x0001875b
 800267c:	08006d40 	.word	0x08006d40
 8002680:	20000900 	.word	0x20000900
 8002684:	2000123c 	.word	0x2000123c
 8002688:	080029b1 	.word	0x080029b1
 800268c:	00000000 	.word	0x00000000

08002690 <chprintf>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8002690:	b40e      	push	{r1, r2, r3}
 8002692:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	aa0f      	add	r2, sp, #60	; 0x3c
 800269a:	f852 9b04 	ldr.w	r9, [r2], #4
 800269e:	4682      	mov	sl, r0
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 80026a0:	46cb      	mov	fp, r9
 80026a2:	4615      	mov	r5, r2
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 80026a4:	9202      	str	r2, [sp, #8]
 80026a6:	f10d 030d 	add.w	r3, sp, #13
 80026aa:	aa03      	add	r2, sp, #12
 80026ac:	1a9b      	subs	r3, r3, r2
 80026ae:	9301      	str	r3, [sp, #4]
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 80026b0:	f04f 0800 	mov.w	r8, #0
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 80026b4:	f89b 1000 	ldrb.w	r1, [fp]
 80026b8:	f10b 0301 	add.w	r3, fp, #1
    if (c == 0)
 80026bc:	b179      	cbz	r1, 80026de <chprintf+0x4e>
      return n;
    if (c != '%') {
 80026be:	2925      	cmp	r1, #37	; 0x25
 80026c0:	d013      	beq.n	80026ea <chprintf+0x5a>
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 80026c2:	469b      	mov	fp, r3
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
 80026c4:	f8da 2000 	ldr.w	r2, [sl]
 80026c8:	4650      	mov	r0, sl
 80026ca:	6892      	ldr	r2, [r2, #8]
 80026cc:	4790      	blx	r2
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 80026ce:	f89b 1000 	ldrb.w	r1, [fp]
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
      n++;
 80026d2:	f108 0801 	add.w	r8, r8, #1
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 80026d6:	f10b 0301 	add.w	r3, fp, #1
    if (c == 0)
 80026da:	2900      	cmp	r1, #0
 80026dc:	d1ef      	bne.n	80026be <chprintf+0x2e>
  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 80026de:	4640      	mov	r0, r8
 80026e0:	b006      	add	sp, #24
 80026e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026e6:	b003      	add	sp, #12
 80026e8:	4770      	bx	lr
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 80026ea:	f89b 2001 	ldrb.w	r2, [fp, #1]
    filler = ' ';
    if (*fmt == '0') {
      fmt++;
      filler = '0';
    }
    width = 0;
 80026ee:	2600      	movs	r6, #0
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 80026f0:	2a2d      	cmp	r2, #45	; 0x2d
 80026f2:	bf03      	ittte	eq
 80026f4:	f89b 2002 	ldrbeq.w	r2, [fp, #2]
      fmt++;
 80026f8:	f10b 0302 	addeq.w	r3, fp, #2
      left_align = TRUE;
 80026fc:	f04f 0901 	moveq.w	r9, #1
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
 8002700:	f04f 0900 	movne.w	r9, #0
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
 8002704:	2a30      	cmp	r2, #48	; 0x30
 8002706:	bf03      	ittte	eq
 8002708:	785a      	ldrbeq	r2, [r3, #1]
      fmt++;
 800270a:	3301      	addeq	r3, #1
      filler = '0';
 800270c:	2730      	moveq	r7, #48	; 0x30
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
 800270e:	2720      	movne	r7, #32
 8002710:	1c59      	adds	r1, r3, #1
 8002712:	e006      	b.n	8002722 <chprintf+0x92>
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
 8002714:	782b      	ldrb	r3, [r5, #0]
 8002716:	3504      	adds	r5, #4
 8002718:	f89b 2000 	ldrb.w	r2, [fp]
      else
        break;
      width = width * 10 + c;
 800271c:	eb03 0640 	add.w	r6, r3, r0, lsl #1
 8002720:	3101      	adds	r1, #1
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 8002722:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8002726:	b2db      	uxtb	r3, r3
 8002728:	2b09      	cmp	r3, #9
      fmt++;
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
 800272a:	468b      	mov	fp, r1
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
      else
        break;
      width = width * 10 + c;
 800272c:	eb06 0086 	add.w	r0, r6, r6, lsl #2
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 8002730:	d9f2      	bls.n	8002718 <chprintf+0x88>
        c -= '0';
      else if (c == '*')
 8002732:	2a2a      	cmp	r2, #42	; 0x2a
 8002734:	d0ee      	beq.n	8002714 <chprintf+0x84>
      else
        break;
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
 8002736:	2a2e      	cmp	r2, #46	; 0x2e
 8002738:	f04f 0100 	mov.w	r1, #0
 800273c:	d043      	beq.n	80027c6 <chprintf+0x136>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 800273e:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8002742:	2b4c      	cmp	r3, #76	; 0x4c
 8002744:	d04e      	beq.n	80027e4 <chprintf+0x154>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8002746:	f1a2 0044 	sub.w	r0, r2, #68	; 0x44
 800274a:	2834      	cmp	r0, #52	; 0x34
 800274c:	f200 80f6 	bhi.w	800293c <chprintf+0x2ac>
 8002750:	e8df f010 	tbh	[pc, r0, lsl #1]
 8002754:	00f400ea 	.word	0x00f400ea
 8002758:	00f400f4 	.word	0x00f400f4
 800275c:	00ea00f4 	.word	0x00ea00f4
 8002760:	00f400f4 	.word	0x00f400f4
 8002764:	00f400f4 	.word	0x00f400f4
 8002768:	00e800f4 	.word	0x00e800f4
 800276c:	00f400f4 	.word	0x00f400f4
 8002770:	00f400f4 	.word	0x00f400f4
 8002774:	00dd00f4 	.word	0x00dd00f4
 8002778:	00f400f4 	.word	0x00f400f4
 800277c:	00f400f1 	.word	0x00f400f1
 8002780:	00f400f4 	.word	0x00f400f4
 8002784:	00f400f4 	.word	0x00f400f4
 8002788:	00f400f4 	.word	0x00f400f4
 800278c:	00f400f4 	.word	0x00f400f4
 8002790:	00a100f4 	.word	0x00a100f4
 8002794:	00f400ea 	.word	0x00f400ea
 8002798:	00f400f4 	.word	0x00f400f4
 800279c:	00ea00f4 	.word	0x00ea00f4
 80027a0:	00f400f4 	.word	0x00f400f4
 80027a4:	00f400f4 	.word	0x00f400f4
 80027a8:	00e800f4 	.word	0x00e800f4
 80027ac:	00f400f4 	.word	0x00f400f4
 80027b0:	007100f4 	.word	0x007100f4
 80027b4:	00dd00f4 	.word	0x00dd00f4
 80027b8:	00f400f4 	.word	0x00f400f4
 80027bc:	00f1      	.short	0x00f1
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
 80027be:	782b      	ldrb	r3, [r5, #0]
 80027c0:	3504      	adds	r5, #4
        else
          break;
        precision *= 10;
        precision += c;
 80027c2:	eb03 0140 	add.w	r1, r3, r0, lsl #1
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
 80027c6:	f81b 2b01 	ldrb.w	r2, [fp], #1
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
        else
          break;
        precision *= 10;
 80027ca:	eb01 0081 	add.w	r0, r1, r1, lsl #2
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
 80027ce:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b09      	cmp	r3, #9
 80027d6:	d9f4      	bls.n	80027c2 <chprintf+0x132>
          c -= '0';
        else if (c == '*')
 80027d8:	2a2a      	cmp	r2, #42	; 0x2a
 80027da:	d0f0      	beq.n	80027be <chprintf+0x12e>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 80027dc:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 80027e0:	2b4c      	cmp	r3, #76	; 0x4c
 80027e2:	d1b0      	bne.n	8002746 <chprintf+0xb6>
      is_long = TRUE;
      if (*fmt)
 80027e4:	f89b 3000 	ldrb.w	r3, [fp]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 80a7 	beq.w	800293c <chprintf+0x2ac>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 80027ee:	f1a3 0244 	sub.w	r2, r3, #68	; 0x44
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = TRUE;
      if (*fmt)
        c = *fmt++;
 80027f2:	f10b 0b01 	add.w	fp, fp, #1
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 80027f6:	2a34      	cmp	r2, #52	; 0x34
 80027f8:	f200 809f 	bhi.w	800293a <chprintf+0x2aa>
 80027fc:	e8df f002 	tbb	[pc, r2]
 8002800:	9d9d9d94 	.word	0x9d9d9d94
 8002804:	9d9d949d 	.word	0x9d9d949d
 8002808:	929d9d9d 	.word	0x929d9d9d
 800280c:	9d9d9d9d 	.word	0x9d9d9d9d
 8002810:	9d9d879d 	.word	0x9d9d879d
 8002814:	9d9d9d9b 	.word	0x9d9d9d9b
 8002818:	9d9d9d9d 	.word	0x9d9d9d9d
 800281c:	4b9d9d9d 	.word	0x4b9d9d9d
 8002820:	9d9d9d94 	.word	0x9d9d9d94
 8002824:	9d9d949d 	.word	0x9d9d949d
 8002828:	929d9d9d 	.word	0x929d9d9d
 800282c:	1b9d9d9d 	.word	0x1b9d9d9d
 8002830:	9d9d879d 	.word	0x9d9d879d
 8002834:	9b          	.byte	0x9b
 8002835:	00          	.byte	0x00
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 8002836:	682c      	ldr	r4, [r5, #0]
        s = "(null)";
 8002838:	4b59      	ldr	r3, [pc, #356]	; (80029a0 <chprintf+0x310>)
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 800283a:	3504      	adds	r5, #4
        s = "(null)";
 800283c:	2c00      	cmp	r4, #0
 800283e:	bf08      	it	eq
 8002840:	461c      	moveq	r4, r3
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8002842:	7823      	ldrb	r3, [r4, #0]
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
 8002844:	2900      	cmp	r1, #0
 8002846:	f000 8093 	beq.w	8002970 <chprintf+0x2e0>
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 8095 	beq.w	800297a <chprintf+0x2ea>
 8002850:	3901      	subs	r1, #1
 8002852:	4620      	mov	r0, r4
 8002854:	e001      	b.n	800285a <chprintf+0x1ca>
 8002856:	3901      	subs	r1, #1
 8002858:	d403      	bmi.n	8002862 <chprintf+0x1d2>
 800285a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f9      	bne.n	8002856 <chprintf+0x1c6>
 8002862:	1b00      	subs	r0, r0, r4
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 8002864:	1a36      	subs	r6, r6, r0
 8002866:	1e43      	subs	r3, r0, #1
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 8002868:	2720      	movs	r7, #32
 800286a:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 800286e:	f1b9 0f00 	cmp.w	r9, #0
 8002872:	d01f      	beq.n	80028b4 <chprintf+0x224>
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8002874:	2b00      	cmp	r3, #0
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	da34      	bge.n	80028e4 <chprintf+0x254>
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 800287a:	2e00      	cmp	r6, #0
 800287c:	f43f af1a 	beq.w	80026b4 <chprintf+0x24>
 8002880:	4634      	mov	r4, r6
      streamPut(chp, (uint8_t)filler);
 8002882:	f8da 3000 	ldr.w	r3, [sl]
 8002886:	4650      	mov	r0, sl
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	4639      	mov	r1, r7
 800288c:	4798      	blx	r3
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 800288e:	3c01      	subs	r4, #1
 8002890:	d1f7      	bne.n	8002882 <chprintf+0x1f2>
 8002892:	44b0      	add	r8, r6
 8002894:	e70e      	b.n	80026b4 <chprintf+0x24>
 8002896:	9a01      	ldr	r2, [sp, #4]

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
 8002898:	682b      	ldr	r3, [r5, #0]
 800289a:	4610      	mov	r0, r2
 800289c:	f88d 300c 	strb.w	r3, [sp, #12]
 80028a0:	3504      	adds	r5, #4
 80028a2:	1e53      	subs	r3, r2, #1
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
 80028a4:	2720      	movs	r7, #32
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 80028a6:	ac03      	add	r4, sp, #12
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 80028a8:	1a36      	subs	r6, r6, r0
 80028aa:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      width = 0;
    if (left_align == FALSE)
 80028ae:	f1b9 0f00 	cmp.w	r9, #0
 80028b2:	d1df      	bne.n	8002874 <chprintf+0x1e4>
 80028b4:	9300      	str	r3, [sp, #0]
      width = -width;
 80028b6:	f1c6 0900 	rsb	r9, r6, #0
    if (width < 0) {
 80028ba:	f1b9 0f00 	cmp.w	r9, #0
 80028be:	d044      	beq.n	800294a <chprintf+0x2ba>
      if (*s == '-' && filler == '0') {
 80028c0:	7821      	ldrb	r1, [r4, #0]
 80028c2:	292d      	cmp	r1, #45	; 0x2d
 80028c4:	d046      	beq.n	8002954 <chprintf+0x2c4>
        streamPut(chp, (uint8_t)*s++);
        n++;
 80028c6:	464e      	mov	r6, r9
        i--;
      }
      do {
        streamPut(chp, (uint8_t)filler);
 80028c8:	f8da 3000 	ldr.w	r3, [sl]
 80028cc:	4650      	mov	r0, sl
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	4639      	mov	r1, r7
 80028d2:	4798      	blx	r3
        n++;
      } while (++width != 0);
 80028d4:	3601      	adds	r6, #1
 80028d6:	d1f7      	bne.n	80028c8 <chprintf+0x238>
    }
    while (--i >= 0) {
 80028d8:	9b00      	ldr	r3, [sp, #0]
 80028da:	ebc9 0808 	rsb	r8, r9, r8
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f6ff aee8 	blt.w	80026b4 <chprintf+0x24>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 80028e4:	f8dd 9000 	ldr.w	r9, [sp]
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
 80028e8:	f8da 3000 	ldr.w	r3, [sl]
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 80028ec:	f109 39ff 	add.w	r9, r9, #4294967295
      streamPut(chp, (uint8_t)*s++);
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	4650      	mov	r0, sl
 80028f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028f8:	4798      	blx	r3
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 80028fa:	f1b9 3fff 	cmp.w	r9, #4294967295
 80028fe:	d1f3      	bne.n	80028e8 <chprintf+0x258>
 8002900:	9b00      	ldr	r3, [sp, #0]
 8002902:	f108 0801 	add.w	r8, r8, #1
 8002906:	2b00      	cmp	r3, #0
 8002908:	bfa8      	it	ge
 800290a:	4498      	addge	r8, r3
 800290c:	e7b5      	b.n	800287a <chprintf+0x1ea>
 800290e:	220a      	movs	r2, #10
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 8002910:	6829      	ldr	r1, [r5, #0]
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8002912:	a803      	add	r0, sp, #12
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 8002914:	3504      	adds	r5, #4
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8002916:	f003 ff7b 	bl	8006810 <long_to_string_with_divisor.constprop.4>
 800291a:	ab03      	add	r3, sp, #12
 800291c:	1ac0      	subs	r0, r0, r3
 800291e:	1e43      	subs	r3, r0, #1
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8002920:	ac03      	add	r4, sp, #12
 8002922:	e7c1      	b.n	80028a8 <chprintf+0x218>
 8002924:	2208      	movs	r2, #8
 8002926:	e7f3      	b.n	8002910 <chprintf+0x280>
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
 8002928:	6829      	ldr	r1, [r5, #0]
 800292a:	3504      	adds	r5, #4
      if (l < 0) {
 800292c:	2900      	cmp	r1, #0
 800292e:	db2e      	blt.n	800298e <chprintf+0x2fe>
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 8002930:	a803      	add	r0, sp, #12
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8002932:	220a      	movs	r2, #10
 8002934:	e7ef      	b.n	8002916 <chprintf+0x286>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8002936:	2210      	movs	r2, #16
 8002938:	e7ea      	b.n	8002910 <chprintf+0x280>
 800293a:	461a      	mov	r2, r3
 800293c:	9b01      	ldr	r3, [sp, #4]
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 800293e:	ac03      	add	r4, sp, #12
 8002940:	4618      	mov	r0, r3
      else
        l = va_arg(ap, unsigned int);
      p = ch_ltoa(p, l, c);
      break;
    default:
      *p++ = c;
 8002942:	f88d 200c 	strb.w	r2, [sp, #12]
 8002946:	3b01      	subs	r3, #1
 8002948:	e7ae      	b.n	80028a8 <chprintf+0x218>
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 800294a:	9b00      	ldr	r3, [sp, #0]
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
 800294c:	464e      	mov	r6, r9
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 800294e:	2b00      	cmp	r3, #0
 8002950:	dac8      	bge.n	80028e4 <chprintf+0x254>
 8002952:	e6af      	b.n	80026b4 <chprintf+0x24>
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
 8002954:	2f30      	cmp	r7, #48	; 0x30
 8002956:	d1b6      	bne.n	80028c6 <chprintf+0x236>
        streamPut(chp, (uint8_t)*s++);
 8002958:	f8da 3000 	ldr.w	r3, [sl]
 800295c:	4650      	mov	r0, sl
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	4798      	blx	r3
 8002962:	9b00      	ldr	r3, [sp, #0]
 8002964:	3401      	adds	r4, #1
 8002966:	3b01      	subs	r3, #1
        n++;
 8002968:	f108 0801 	add.w	r8, r8, #1
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	e7aa      	b.n	80028c6 <chprintf+0x236>
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8002970:	f647 71fe 	movw	r1, #32766	; 0x7ffe
 8002974:	2b00      	cmp	r3, #0
 8002976:	f47f af6c 	bne.w	8002852 <chprintf+0x1c2>
 800297a:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 800297e:	f1b9 0f00 	cmp.w	r9, #0
 8002982:	d10b      	bne.n	800299c <chprintf+0x30c>
 8002984:	f04f 33ff 	mov.w	r3, #4294967295
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	2720      	movs	r7, #32
 800298c:	e793      	b.n	80028b6 <chprintf+0x226>
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 800298e:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 8002990:	4249      	negs	r1, r1
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 8002992:	f88d 300c 	strb.w	r3, [sp, #12]
 8002996:	f10d 000d 	add.w	r0, sp, #13
 800299a:	e7ca      	b.n	8002932 <chprintf+0x2a2>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 800299c:	2720      	movs	r7, #32
 800299e:	e76c      	b.n	800287a <chprintf+0x1ea>
 80029a0:	08006ae0 	.word	0x08006ae0
	...

080029b0 <shell_thread>:
/**
 * @brief   Shell thread function.
 *
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
static THD_FUNCTION(shell_thread, p) {
 80029b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 80029b4:	4b79      	ldr	r3, [pc, #484]	; (8002b9c <shell_thread+0x1ec>)
  int n;
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
 80029b6:	6804      	ldr	r4, [r0, #0]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	4a79      	ldr	r2, [pc, #484]	; (8002ba0 <shell_thread+0x1f0>)
/**
 * @brief   Shell thread function.
 *
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
static THD_FUNCTION(shell_thread, p) {
 80029bc:	b098      	sub	sp, #96	; 0x60
  int n;
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
  const ShellCommand *scp = ((ShellConfig *)p)->sc_commands;
 80029be:	f8d0 8004 	ldr.w	r8, [r0, #4]
  char *lp, *cmd, *tokp, line[SHELL_MAX_LINE_LENGTH];
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
  chprintf(chp, "\r\nChibiOS/RT Shell\r\n");
 80029c2:	4978      	ldr	r1, [pc, #480]	; (8002ba4 <shell_thread+0x1f4>)
 80029c4:	4620      	mov	r0, r4
 80029c6:	619a      	str	r2, [r3, #24]
 80029c8:	f7ff fe62 	bl	8002690 <chprintf>
 80029cc:	ae08      	add	r6, sp, #32
      *p = 0;
      return false;
    }
    if (c < 0x20)
      continue;
    if (p < line + size - 1) {
 80029ce:	f10d 075f 	add.w	r7, sp, #95	; 0x5f
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
  chprintf(chp, "\r\nChibiOS/RT Shell\r\n");
  while (true) {
    chprintf(chp, "ch> ");
 80029d2:	4620      	mov	r0, r4
 80029d4:	4974      	ldr	r1, [pc, #464]	; (8002ba8 <shell_thread+0x1f8>)
 80029d6:	f7ff fe5b 	bl	8002690 <chprintf>
 * @retval false        operation successful.
 *
 * @api
 */
bool shellGetLine(BaseSequentialStream *chp, char *line, unsigned size) {
  char *p = line;
 80029da:	4635      	mov	r5, r6

  while (true) {
    char c;

    if (chSequentialStreamRead(chp, (uint8_t *)&c, 1) == 0)
 80029dc:	6823      	ldr	r3, [r4, #0]
 80029de:	4620      	mov	r0, r4
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f10d 0107 	add.w	r1, sp, #7
 80029e6:	2201      	movs	r2, #1
 80029e8:	4798      	blx	r3
 80029ea:	b370      	cbz	r0, 8002a4a <shell_thread+0x9a>
      return true;
    if (c == 4) {
 80029ec:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80029f0:	2904      	cmp	r1, #4
 80029f2:	d026      	beq.n	8002a42 <shell_thread+0x92>
      chprintf(chp, "^D");
      return true;
    }
    if ((c == 8) || (c == 127)) {
 80029f4:	2908      	cmp	r1, #8
 80029f6:	d011      	beq.n	8002a1c <shell_thread+0x6c>
 80029f8:	297f      	cmp	r1, #127	; 0x7f
 80029fa:	d00f      	beq.n	8002a1c <shell_thread+0x6c>
        chSequentialStreamPut(chp, c);
        p--;
      }
      continue;
    }
    if (c == '\r') {
 80029fc:	290d      	cmp	r1, #13
 80029fe:	d035      	beq.n	8002a6c <shell_thread+0xbc>
      chprintf(chp, "\r\n");
      *p = 0;
      return false;
    }
    if (c < 0x20)
 8002a00:	291f      	cmp	r1, #31
 8002a02:	d9eb      	bls.n	80029dc <shell_thread+0x2c>
      continue;
    if (p < line + size - 1) {
 8002a04:	42bd      	cmp	r5, r7
 8002a06:	d2e9      	bcs.n	80029dc <shell_thread+0x2c>
      chSequentialStreamPut(chp, c);
 8002a08:	6823      	ldr	r3, [r4, #0]
 8002a0a:	4620      	mov	r0, r4
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	4798      	blx	r3
      *p++ = (char)c;
 8002a10:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002a14:	3501      	adds	r5, #1
 8002a16:	f805 3c01 	strb.w	r3, [r5, #-1]
 8002a1a:	e7df      	b.n	80029dc <shell_thread+0x2c>
    if (c == 4) {
      chprintf(chp, "^D");
      return true;
    }
    if ((c == 8) || (c == 127)) {
      if (p != line) {
 8002a1c:	42b5      	cmp	r5, r6
 8002a1e:	d0dd      	beq.n	80029dc <shell_thread+0x2c>
        chSequentialStreamPut(chp, c);
 8002a20:	6823      	ldr	r3, [r4, #0]
 8002a22:	4620      	mov	r0, r4
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	4798      	blx	r3
        chSequentialStreamPut(chp, 0x20);
 8002a28:	6823      	ldr	r3, [r4, #0]
 8002a2a:	4620      	mov	r0, r4
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	2120      	movs	r1, #32
 8002a30:	4798      	blx	r3
        chSequentialStreamPut(chp, c);
 8002a32:	6823      	ldr	r3, [r4, #0]
 8002a34:	4620      	mov	r0, r4
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f89d 1007 	ldrb.w	r1, [sp, #7]
        p--;
 8002a3c:	3d01      	subs	r5, #1
    }
    if ((c == 8) || (c == 127)) {
      if (p != line) {
        chSequentialStreamPut(chp, c);
        chSequentialStreamPut(chp, 0x20);
        chSequentialStreamPut(chp, c);
 8002a3e:	4798      	blx	r3
 8002a40:	e7cc      	b.n	80029dc <shell_thread+0x2c>
    char c;

    if (chSequentialStreamRead(chp, (uint8_t *)&c, 1) == 0)
      return true;
    if (c == 4) {
      chprintf(chp, "^D");
 8002a42:	4620      	mov	r0, r4
 8002a44:	4959      	ldr	r1, [pc, #356]	; (8002bac <shell_thread+0x1fc>)
 8002a46:	f7ff fe23 	bl	8002690 <chprintf>
  chRegSetThreadName("shell");
  chprintf(chp, "\r\nChibiOS/RT Shell\r\n");
  while (true) {
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
 8002a4a:	4620      	mov	r0, r4
 8002a4c:	4958      	ldr	r1, [pc, #352]	; (8002bb0 <shell_thread+0x200>)
 8002a4e:	f7ff fe1f 	bl	8002690 <chprintf>
 8002a52:	2320      	movs	r3, #32
 8002a54:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void chEvtBroadcastI(event_source_t *esp) {

  chEvtBroadcastFlagsI(esp, (eventflags_t)0);
 8002a58:	2100      	movs	r1, #0
 8002a5a:	4856      	ldr	r0, [pc, #344]	; (8002bb4 <shell_thread+0x204>)
 8002a5c:	f7fe fee8 	bl	8001830 <chEvtBroadcastFlagsI>

  /* Atomically broadcasting the event source and terminating the thread,
     there is not a chSysUnlock() because the thread terminates upon return.*/
  chSysLock();
  chEvtBroadcastI(&shell_terminated);
  chThdExitS(msg);
 8002a60:	2000      	movs	r0, #0
 8002a62:	f7ff f84d 	bl	8001b00 <chThdExitS>
        chprintf(chp, " ?\r\n");
      }
    }
  }
  shellExit(MSG_OK);
}
 8002a66:	b018      	add	sp, #96	; 0x60
 8002a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p--;
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, "\r\n");
 8002a6c:	4952      	ldr	r1, [pc, #328]	; (8002bb8 <shell_thread+0x208>)
 8002a6e:	4620      	mov	r0, r4
 8002a70:	f7ff fe0e 	bl	8002690 <chprintf>
      *p = 0;
 8002a74:	2300      	movs	r3, #0
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 8002a76:	a902      	add	r1, sp, #8
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, "\r\n");
      *p = 0;
 8002a78:	702b      	strb	r3, [r5, #0]
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 8002a7a:	4630      	mov	r0, r6
    cmd = lp;
    n = 0;
 8002a7c:	461d      	mov	r5, r3
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 8002a7e:	f003 feef 	bl	8006860 <_strtok.constprop.3>
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8002a82:	a902      	add	r1, sp, #8
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 8002a84:	4682      	mov	sl, r0
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8002a86:	2000      	movs	r0, #0
 8002a88:	f10d 090c 	add.w	r9, sp, #12
 8002a8c:	f003 fee8 	bl	8006860 <_strtok.constprop.3>
 8002a90:	b150      	cbz	r0, 8002aa8 <shell_thread+0xf8>
      if (n >= SHELL_MAX_ARGUMENTS) {
 8002a92:	2d04      	cmp	r5, #4
 8002a94:	d01d      	beq.n	8002ad2 <shell_thread+0x122>
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 8002a96:	f849 0b04 	str.w	r0, [r9], #4
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8002a9a:	a902      	add	r1, sp, #8
 8002a9c:	2000      	movs	r0, #0
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 8002a9e:	3501      	adds	r5, #1
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8002aa0:	f003 fede 	bl	8006860 <_strtok.constprop.3>
 8002aa4:	2800      	cmp	r0, #0
 8002aa6:	d1f4      	bne.n	8002a92 <shell_thread+0xe2>
        cmd = NULL;
        break;
      }
      args[n++] = lp;
    }
    args[n] = NULL;
 8002aa8:	ab18      	add	r3, sp, #96	; 0x60
 8002aaa:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8002aae:	f843 0c54 	str.w	r0, [r3, #-84]
    if (cmd != NULL) {
 8002ab2:	f1ba 0f00 	cmp.w	sl, #0
 8002ab6:	d08c      	beq.n	80029d2 <shell_thread+0x22>
      if (strcmp(cmd, "exit") == 0) {
 8002ab8:	4650      	mov	r0, sl
 8002aba:	4940      	ldr	r1, [pc, #256]	; (8002bbc <shell_thread+0x20c>)
 8002abc:	f7fd fbd0 	bl	8000260 <strcmp>
 8002ac0:	b970      	cbnz	r0, 8002ae0 <shell_thread+0x130>
        if (n > 0) {
 8002ac2:	2d00      	cmp	r5, #0
 8002ac4:	d0c5      	beq.n	8002a52 <shell_thread+0xa2>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8002ac6:	4620      	mov	r0, r4
 8002ac8:	493d      	ldr	r1, [pc, #244]	; (8002bc0 <shell_thread+0x210>)
 8002aca:	4a3c      	ldr	r2, [pc, #240]	; (8002bbc <shell_thread+0x20c>)
 8002acc:	f7ff fde0 	bl	8002690 <chprintf>
 8002ad0:	e77f      	b.n	80029d2 <shell_thread+0x22>
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
 8002ad2:	4620      	mov	r0, r4
 8002ad4:	493b      	ldr	r1, [pc, #236]	; (8002bc4 <shell_thread+0x214>)
 8002ad6:	f7ff fddb 	bl	8002690 <chprintf>
        cmd = NULL;
        break;
      }
      args[n++] = lp;
    }
    args[n] = NULL;
 8002ada:	2300      	movs	r3, #0
 8002adc:	9307      	str	r3, [sp, #28]
 8002ade:	e778      	b.n	80029d2 <shell_thread+0x22>
          usage(chp, "exit");
          continue;
        }
        break;
      }
      else if (strcmp(cmd, "help") == 0) {
 8002ae0:	4650      	mov	r0, sl
 8002ae2:	4939      	ldr	r1, [pc, #228]	; (8002bc8 <shell_thread+0x218>)
 8002ae4:	f7fd fbbc 	bl	8000260 <strcmp>
 8002ae8:	b930      	cbnz	r0, 8002af8 <shell_thread+0x148>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8002aea:	4620      	mov	r0, r4
          continue;
        }
        break;
      }
      else if (strcmp(cmd, "help") == 0) {
        if (n > 0) {
 8002aec:	b1c5      	cbz	r5, 8002b20 <shell_thread+0x170>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8002aee:	4934      	ldr	r1, [pc, #208]	; (8002bc0 <shell_thread+0x210>)
 8002af0:	4a35      	ldr	r2, [pc, #212]	; (8002bc8 <shell_thread+0x218>)
 8002af2:	f7ff fdcd 	bl	8002690 <chprintf>
 8002af6:	e76c      	b.n	80029d2 <shell_thread+0x22>
};

static bool cmdexec(const ShellCommand *scp, BaseSequentialStream *chp,
                      char *name, int argc, char *argv[]) {

  while (scp->sc_name != NULL) {
 8002af8:	4b34      	ldr	r3, [pc, #208]	; (8002bcc <shell_thread+0x21c>)
 8002afa:	6818      	ldr	r0, [r3, #0]
 8002afc:	4699      	mov	r9, r3
 8002afe:	b918      	cbnz	r0, 8002b08 <shell_thread+0x158>
 8002b00:	e031      	b.n	8002b66 <shell_thread+0x1b6>
 8002b02:	f859 0f08 	ldr.w	r0, [r9, #8]!
 8002b06:	b370      	cbz	r0, 8002b66 <shell_thread+0x1b6>
    if (strcmp(scp->sc_name, name) == 0) {
 8002b08:	4651      	mov	r1, sl
 8002b0a:	f7fd fba9 	bl	8000260 <strcmp>
 8002b0e:	2800      	cmp	r0, #0
 8002b10:	d1f7      	bne.n	8002b02 <shell_thread+0x152>
      scp->sc_function(chp, argc, argv);
 8002b12:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002b16:	4629      	mov	r1, r5
 8002b18:	aa03      	add	r2, sp, #12
 8002b1a:	4620      	mov	r0, r4
 8002b1c:	4798      	blx	r3
 8002b1e:	e758      	b.n	80029d2 <shell_thread+0x22>
      else if (strcmp(cmd, "help") == 0) {
        if (n > 0) {
          usage(chp, "help");
          continue;
        }
        chprintf(chp, "Commands: help exit ");
 8002b20:	492b      	ldr	r1, [pc, #172]	; (8002bd0 <shell_thread+0x220>)
 8002b22:	f7ff fdb5 	bl	8002690 <chprintf>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8002b26:	4b29      	ldr	r3, [pc, #164]	; (8002bcc <shell_thread+0x21c>)
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	461d      	mov	r5, r3
 8002b2c:	b13a      	cbz	r2, 8002b3e <shell_thread+0x18e>
    chprintf(chp, "%s ", scp->sc_name);
 8002b2e:	4620      	mov	r0, r4
 8002b30:	4928      	ldr	r1, [pc, #160]	; (8002bd4 <shell_thread+0x224>)
 8002b32:	f7ff fdad 	bl	8002690 <chprintf>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8002b36:	f855 2f08 	ldr.w	r2, [r5, #8]!
 8002b3a:	2a00      	cmp	r2, #0
 8002b3c:	d1f7      	bne.n	8002b2e <shell_thread+0x17e>
          usage(chp, "help");
          continue;
        }
        chprintf(chp, "Commands: help exit ");
        list_commands(chp, local_commands);
        if (scp != NULL)
 8002b3e:	f1b8 0f00 	cmp.w	r8, #0
 8002b42:	d00b      	beq.n	8002b5c <shell_thread+0x1ac>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8002b44:	f8d8 2000 	ldr.w	r2, [r8]
 8002b48:	b142      	cbz	r2, 8002b5c <shell_thread+0x1ac>
 8002b4a:	4645      	mov	r5, r8
    chprintf(chp, "%s ", scp->sc_name);
 8002b4c:	4620      	mov	r0, r4
 8002b4e:	4921      	ldr	r1, [pc, #132]	; (8002bd4 <shell_thread+0x224>)
 8002b50:	f7ff fd9e 	bl	8002690 <chprintf>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8002b54:	f855 2f08 	ldr.w	r2, [r5, #8]!
 8002b58:	2a00      	cmp	r2, #0
 8002b5a:	d1f7      	bne.n	8002b4c <shell_thread+0x19c>
        }
        chprintf(chp, "Commands: help exit ");
        list_commands(chp, local_commands);
        if (scp != NULL)
          list_commands(chp, scp);
        chprintf(chp, "\r\n");
 8002b5c:	4620      	mov	r0, r4
 8002b5e:	4916      	ldr	r1, [pc, #88]	; (8002bb8 <shell_thread+0x208>)
 8002b60:	f7ff fd96 	bl	8002690 <chprintf>
 8002b64:	e735      	b.n	80029d2 <shell_thread+0x22>
      }
      else if (cmdexec(local_commands, chp, cmd, n, args) &&
 8002b66:	f1b8 0f00 	cmp.w	r8, #0
 8002b6a:	d00d      	beq.n	8002b88 <shell_thread+0x1d8>
};

static bool cmdexec(const ShellCommand *scp, BaseSequentialStream *chp,
                      char *name, int argc, char *argv[]) {

  while (scp->sc_name != NULL) {
 8002b6c:	f8d8 0000 	ldr.w	r0, [r8]
 8002b70:	b150      	cbz	r0, 8002b88 <shell_thread+0x1d8>
 8002b72:	46c1      	mov	r9, r8
 8002b74:	e002      	b.n	8002b7c <shell_thread+0x1cc>
 8002b76:	f859 0f08 	ldr.w	r0, [r9, #8]!
 8002b7a:	b128      	cbz	r0, 8002b88 <shell_thread+0x1d8>
    if (strcmp(scp->sc_name, name) == 0) {
 8002b7c:	4651      	mov	r1, sl
 8002b7e:	f7fd fb6f 	bl	8000260 <strcmp>
 8002b82:	2800      	cmp	r0, #0
 8002b84:	d1f7      	bne.n	8002b76 <shell_thread+0x1c6>
 8002b86:	e7c4      	b.n	8002b12 <shell_thread+0x162>
          list_commands(chp, scp);
        chprintf(chp, "\r\n");
      }
      else if (cmdexec(local_commands, chp, cmd, n, args) &&
          ((scp == NULL) || cmdexec(scp, chp, cmd, n, args))) {
        chprintf(chp, "%s", cmd);
 8002b88:	4652      	mov	r2, sl
 8002b8a:	4620      	mov	r0, r4
 8002b8c:	4912      	ldr	r1, [pc, #72]	; (8002bd8 <shell_thread+0x228>)
 8002b8e:	f7ff fd7f 	bl	8002690 <chprintf>
        chprintf(chp, " ?\r\n");
 8002b92:	4620      	mov	r0, r4
 8002b94:	4911      	ldr	r1, [pc, #68]	; (8002bdc <shell_thread+0x22c>)
 8002b96:	f7ff fd7b 	bl	8002690 <chprintf>
 8002b9a:	e71a      	b.n	80029d2 <shell_thread+0x22>
 8002b9c:	20001098 	.word	0x20001098
 8002ba0:	08006ae8 	.word	0x08006ae8
 8002ba4:	08006af0 	.word	0x08006af0
 8002ba8:	08006b08 	.word	0x08006b08
 8002bac:	08006b10 	.word	0x08006b10
 8002bb0:	08006b70 	.word	0x08006b70
 8002bb4:	20000904 	.word	0x20000904
 8002bb8:	08006cc4 	.word	0x08006cc4
 8002bbc:	08006b2c 	.word	0x08006b2c
 8002bc0:	08006b34 	.word	0x08006b34
 8002bc4:	08006b14 	.word	0x08006b14
 8002bc8:	08006b40 	.word	0x08006b40
 8002bcc:	20000800 	.word	0x20000800
 8002bd0:	08006b48 	.word	0x08006b48
 8002bd4:	08006b60 	.word	0x08006b60
 8002bd8:	08006b64 	.word	0x08006b64
 8002bdc:	08006b68 	.word	0x08006b68

08002be0 <cmd_systime>:
}

static void cmd_systime(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc > 0) {
 8002be0:	2900      	cmp	r1, #0
 8002be2:	dd03      	ble.n	8002bec <cmd_systime+0xc>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8002be4:	4908      	ldr	r1, [pc, #32]	; (8002c08 <cmd_systime+0x28>)
 8002be6:	4a09      	ldr	r2, [pc, #36]	; (8002c0c <cmd_systime+0x2c>)
 8002be8:	f7ff bd52 	b.w	8002690 <chprintf>
 8002bec:	2320      	movs	r3, #32
 8002bee:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8002bf2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002bf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	f383 8811 	msr	BASEPRI, r3
  (void)argv;
  if (argc > 0) {
    usage(chp, "systime");
    return;
  }
  chprintf(chp, "%lu\r\n", (unsigned long)chVTGetSystemTime());
 8002bfe:	4904      	ldr	r1, [pc, #16]	; (8002c10 <cmd_systime+0x30>)
 8002c00:	b292      	uxth	r2, r2
 8002c02:	f7ff bd45 	b.w	8002690 <chprintf>
 8002c06:	bf00      	nop
 8002c08:	08006b34 	.word	0x08006b34
 8002c0c:	08006b7c 	.word	0x08006b7c
 8002c10:	08006b84 	.word	0x08006b84
	...

08002c20 <cmd_info>:
}

static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc > 0) {
 8002c20:	2900      	cmp	r1, #0
 8002c22:	dd03      	ble.n	8002c2c <cmd_info+0xc>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8002c24:	4919      	ldr	r1, [pc, #100]	; (8002c8c <cmd_info+0x6c>)
 8002c26:	4a1a      	ldr	r2, [pc, #104]	; (8002c90 <cmd_info+0x70>)
 8002c28:	f7ff bd32 	b.w	8002690 <chprintf>
    chprintf(chp, "%s ", scp->sc_name);
    scp++;
  }
}

static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 8002c2c:	b510      	push	{r4, lr}
 8002c2e:	4604      	mov	r4, r0
 8002c30:	b082      	sub	sp, #8
  if (argc > 0) {
    usage(chp, "info");
    return;
  }

  chprintf(chp, "Kernel:       %s\r\n", CH_KERNEL_VERSION);
 8002c32:	4918      	ldr	r1, [pc, #96]	; (8002c94 <cmd_info+0x74>)
 8002c34:	4a18      	ldr	r2, [pc, #96]	; (8002c98 <cmd_info+0x78>)
 8002c36:	f7ff fd2b 	bl	8002690 <chprintf>
#ifdef PORT_COMPILER_NAME
  chprintf(chp, "Compiler:     %s\r\n", PORT_COMPILER_NAME);
 8002c3a:	4620      	mov	r0, r4
 8002c3c:	4917      	ldr	r1, [pc, #92]	; (8002c9c <cmd_info+0x7c>)
 8002c3e:	4a18      	ldr	r2, [pc, #96]	; (8002ca0 <cmd_info+0x80>)
 8002c40:	f7ff fd26 	bl	8002690 <chprintf>
#endif
  chprintf(chp, "Architecture: %s\r\n", PORT_ARCHITECTURE_NAME);
 8002c44:	4620      	mov	r0, r4
 8002c46:	4917      	ldr	r1, [pc, #92]	; (8002ca4 <cmd_info+0x84>)
 8002c48:	4a17      	ldr	r2, [pc, #92]	; (8002ca8 <cmd_info+0x88>)
 8002c4a:	f7ff fd21 	bl	8002690 <chprintf>
#ifdef PORT_CORE_VARIANT_NAME
  chprintf(chp, "Core Variant: %s\r\n", PORT_CORE_VARIANT_NAME);
 8002c4e:	4620      	mov	r0, r4
 8002c50:	4916      	ldr	r1, [pc, #88]	; (8002cac <cmd_info+0x8c>)
 8002c52:	4a17      	ldr	r2, [pc, #92]	; (8002cb0 <cmd_info+0x90>)
 8002c54:	f7ff fd1c 	bl	8002690 <chprintf>
#endif
#ifdef PORT_INFO
  chprintf(chp, "Port Info:    %s\r\n", PORT_INFO);
 8002c58:	4620      	mov	r0, r4
 8002c5a:	4916      	ldr	r1, [pc, #88]	; (8002cb4 <cmd_info+0x94>)
 8002c5c:	4a16      	ldr	r2, [pc, #88]	; (8002cb8 <cmd_info+0x98>)
 8002c5e:	f7ff fd17 	bl	8002690 <chprintf>
#endif
#ifdef PLATFORM_NAME
  chprintf(chp, "Platform:     %s\r\n", PLATFORM_NAME);
 8002c62:	4620      	mov	r0, r4
 8002c64:	4915      	ldr	r1, [pc, #84]	; (8002cbc <cmd_info+0x9c>)
 8002c66:	4a16      	ldr	r2, [pc, #88]	; (8002cc0 <cmd_info+0xa0>)
 8002c68:	f7ff fd12 	bl	8002690 <chprintf>
#endif
#ifdef BOARD_NAME
  chprintf(chp, "Board:        %s\r\n", BOARD_NAME);
 8002c6c:	4620      	mov	r0, r4
 8002c6e:	4915      	ldr	r1, [pc, #84]	; (8002cc4 <cmd_info+0xa4>)
 8002c70:	4a15      	ldr	r2, [pc, #84]	; (8002cc8 <cmd_info+0xa8>)
 8002c72:	f7ff fd0d 	bl	8002690 <chprintf>
#endif
#ifdef __DATE__
#ifdef __TIME__
  chprintf(chp, "Build time:   %s%s%s\r\n", __DATE__, " - ", __TIME__);
 8002c76:	4b15      	ldr	r3, [pc, #84]	; (8002ccc <cmd_info+0xac>)
 8002c78:	4620      	mov	r0, r4
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	4914      	ldr	r1, [pc, #80]	; (8002cd0 <cmd_info+0xb0>)
 8002c7e:	4a15      	ldr	r2, [pc, #84]	; (8002cd4 <cmd_info+0xb4>)
 8002c80:	4b15      	ldr	r3, [pc, #84]	; (8002cd8 <cmd_info+0xb8>)
 8002c82:	f7ff fd05 	bl	8002690 <chprintf>
#endif
#endif
}
 8002c86:	b002      	add	sp, #8
 8002c88:	bd10      	pop	{r4, pc}
 8002c8a:	bf00      	nop
 8002c8c:	08006b34 	.word	0x08006b34
 8002c90:	08006b8c 	.word	0x08006b8c
 8002c94:	08006b94 	.word	0x08006b94
 8002c98:	08006ba8 	.word	0x08006ba8
 8002c9c:	08006bb0 	.word	0x08006bb0
 8002ca0:	08006bc4 	.word	0x08006bc4
 8002ca4:	08006c0c 	.word	0x08006c0c
 8002ca8:	08006c20 	.word	0x08006c20
 8002cac:	08006c28 	.word	0x08006c28
 8002cb0:	08006c3c 	.word	0x08006c3c
 8002cb4:	08006c48 	.word	0x08006c48
 8002cb8:	08006c5c 	.word	0x08006c5c
 8002cbc:	08006c74 	.word	0x08006c74
 8002cc0:	08006c88 	.word	0x08006c88
 8002cc4:	08006cb4 	.word	0x08006cb4
 8002cc8:	08006cc8 	.word	0x08006cc8
 8002ccc:	08006d08 	.word	0x08006d08
 8002cd0:	08006ce0 	.word	0x08006ce0
 8002cd4:	08006cf8 	.word	0x08006cf8
 8002cd8:	08006d04 	.word	0x08006d04
 8002cdc:	00000000 	.word	0x00000000

08002ce0 <print_line>:
    tcp->teardown();

  test_wait_threads();
}

static void print_line(void) {
 8002ce0:	b570      	push	{r4, r5, r6, lr}
 8002ce2:	4e09      	ldr	r6, [pc, #36]	; (8002d08 <print_line+0x28>)
 8002ce4:	244c      	movs	r4, #76	; 0x4c
  unsigned i;

  for (i = 0; i < 76; i++)
    chSequentialStreamPut(chp, '-');
 8002ce6:	6830      	ldr	r0, [r6, #0]
 8002ce8:	212d      	movs	r1, #45	; 0x2d
 8002cea:	6803      	ldr	r3, [r0, #0]
 8002cec:	4d06      	ldr	r5, [pc, #24]	; (8002d08 <print_line+0x28>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	4798      	blx	r3
}

static void print_line(void) {
  unsigned i;

  for (i = 0; i < 76; i++)
 8002cf2:	3c01      	subs	r4, #1
 8002cf4:	d1f7      	bne.n	8002ce6 <print_line+0x6>
    chSequentialStreamPut(chp, '-');
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 8002cf6:	6828      	ldr	r0, [r5, #0]
 8002cf8:	4904      	ldr	r1, [pc, #16]	; (8002d0c <print_line+0x2c>)
 8002cfa:	6803      	ldr	r3, [r0, #0]
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	681b      	ldr	r3, [r3, #0]
}
 8002d00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
static void print_line(void) {
  unsigned i;

  for (i = 0; i < 76; i++)
    chSequentialStreamPut(chp, '-');
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 8002d04:	4718      	bx	r3
 8002d06:	bf00      	nop
 8002d08:	2000095c 	.word	0x2000095c
 8002d0c:	08006cc4 	.word	0x08006cc4

08002d10 <tmr.lto_priv.75>:

static virtual_timer_t vt;
static void tmr(void *p) {
  (void)p;

  test_timer_done = TRUE;
 8002d10:	4b01      	ldr	r3, [pc, #4]	; (8002d18 <tmr.lto_priv.75+0x8>)
 8002d12:	2201      	movs	r2, #1
 8002d14:	701a      	strb	r2, [r3, #0]
 8002d16:	4770      	bx	lr
 8002d18:	200011e8 	.word	0x200011e8
 8002d1c:	00000000 	.word	0x00000000

08002d20 <notify1.lto_priv.74>:

#if STM32_SERIAL_USE_USART1 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  USART1->CR1 |= USART_CR1_TXEIE;
 8002d20:	4a02      	ldr	r2, [pc, #8]	; (8002d2c <notify1.lto_priv.74+0xc>)
 8002d22:	68d3      	ldr	r3, [r2, #12]
 8002d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d28:	60d3      	str	r3, [r2, #12]
 8002d2a:	4770      	bx	lr
 8002d2c:	40013800 	.word	0x40013800

08002d30 <_port_irq_epilogue>:
 8002d30:	2320      	movs	r3, #32
 8002d32:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8002d36:	4b0f      	ldr	r3, [pc, #60]	; (8002d74 <_port_irq_epilogue+0x44>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002d3e:	d102      	bne.n	8002d46 <_port_irq_epilogue+0x16>
 8002d40:	f383 8811 	msr	BASEPRI, r3
 8002d44:	4770      	bx	lr
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8002d46:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 8002d4a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d4e:	f843 2c04 	str.w	r2, [r3, #-4]
    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 8002d52:	f1a3 0220 	sub.w	r2, r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8002d56:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 8002d5a:	4a07      	ldr	r2, [pc, #28]	; (8002d78 <_port_irq_epilogue+0x48>)
 8002d5c:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->p_prio;
 8002d5e:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8002d60:	6889      	ldr	r1, [r1, #8]
 8002d62:	6892      	ldr	r2, [r2, #8]
 8002d64:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8002d66:	bf8c      	ite	hi
 8002d68:	4a04      	ldrhi	r2, [pc, #16]	; (8002d7c <_port_irq_epilogue+0x4c>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8002d6a:	4a05      	ldrls	r2, [pc, #20]	; (8002d80 <_port_irq_epilogue+0x50>)
 8002d6c:	f843 2c08 	str.w	r2, [r3, #-8]
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	e000ed00 	.word	0xe000ed00
 8002d78:	20001098 	.word	0x20001098
 8002d7c:	08000251 	.word	0x08000251
 8002d80:	08000254 	.word	0x08000254
	...

08002d90 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8002d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8002d94:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8002d98:	6923      	ldr	r3, [r4, #16]
 8002d9a:	079b      	lsls	r3, r3, #30
 8002d9c:	d403      	bmi.n	8002da6 <VectorB0+0x16>
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 8002d9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8002da2:	f7ff bfc5 	b.w	8002d30 <_port_irq_epilogue>

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
    STM32_ST_TIM->SR = 0U;
 8002da6:	2700      	movs	r7, #0
 8002da8:	6127      	str	r7, [r4, #16]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8002daa:	2520      	movs	r5, #32
 8002dac:	f385 8811 	msr	BASEPRI, r5
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 8002db0:	4e1e      	ldr	r6, [pc, #120]	; (8002e2c <VectorB0+0x9c>)
 8002db2:	6a62      	ldr	r2, [r4, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8002db4:	f8b6 e026 	ldrh.w	lr, [r6, #38]	; 0x26
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 8002db8:	69f3      	ldr	r3, [r6, #28]
 8002dba:	b290      	uxth	r0, r2

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8002dbc:	ebce 0100 	rsb	r1, lr, r0
 8002dc0:	891a      	ldrh	r2, [r3, #8]
 8002dc2:	b289      	uxth	r1, r1
 8002dc4:	4291      	cmp	r1, r2
 8002dc6:	f106 081c 	add.w	r8, r6, #28
 8002dca:	d31b      	bcc.n	8002e04 <VectorB0+0x74>
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8002dcc:	6819      	ldr	r1, [r3, #0]
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8002dce:	4472      	add	r2, lr
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8002dd0:	4541      	cmp	r1, r8
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8002dd2:	84f2      	strh	r2, [r6, #38]	; 0x26

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
 8002dd4:	68da      	ldr	r2, [r3, #12]
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8002dd6:	f8c1 8004 	str.w	r8, [r1, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 8002dda:	61f1      	str	r1, [r6, #28]
    fn = vtp->vt_func;
    vtp->vt_func = NULL;
 8002ddc:	60df      	str	r7, [r3, #12]
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8002dde:	bf08      	it	eq
 8002de0:	60e7      	streq	r7, [r4, #12]
 8002de2:	f387 8811 	msr	BASEPRI, r7
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->vt_par);
 8002de6:	6918      	ldr	r0, [r3, #16]
 8002de8:	4790      	blx	r2
 8002dea:	f385 8811 	msr	BASEPRI, r5
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8002dee:	6a62      	ldr	r2, [r4, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8002df0:	f8b6 e026 	ldrh.w	lr, [r6, #38]	; 0x26
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.vt_next;
 8002df4:	69f3      	ldr	r3, [r6, #28]
 8002df6:	b290      	uxth	r0, r2

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8002df8:	ebce 0100 	rsb	r1, lr, r0
 8002dfc:	891a      	ldrh	r2, [r3, #8]
 8002dfe:	b289      	uxth	r1, r1
 8002e00:	428a      	cmp	r2, r1
 8002e02:	d9e3      	bls.n	8002dcc <VectorB0+0x3c>
    vtp = ch.vtlist.vt_next;
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8002e04:	4543      	cmp	r3, r8
 8002e06:	d00a      	beq.n	8002e1e <VectorB0+0x8e>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.vt_lasttime + vtp->vt_delta - now;
 8002e08:	4472      	add	r2, lr
 8002e0a:	1a12      	subs	r2, r2, r0
 8002e0c:	b292      	uxth	r2, r2
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 8002e0e:	2a01      	cmp	r2, #1
 8002e10:	bf98      	it	ls
 8002e12:	2202      	movls	r2, #2
  }
  port_timer_set_alarm(now + delta);
 8002e14:	4402      	add	r2, r0
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8002e16:	b292      	uxth	r2, r2
 8002e18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e1c:	635a      	str	r2, [r3, #52]	; 0x34
 8002e1e:	2300      	movs	r3, #0
 8002e20:	f383 8811 	msr	BASEPRI, r3
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 8002e24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8002e28:	f7ff bf82 	b.w	8002d30 <_port_irq_epilogue>
 8002e2c:	20001098 	.word	0x20001098

08002e30 <SVC_Handler>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8002e30:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 8002e34:	3320      	adds	r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8002e36:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	f383 8811 	msr	BASEPRI, r3
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
	...

08002e50 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 8002e50:	b410      	push	{r4}
 8002e52:	2320      	movs	r3, #32
 8002e54:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8002e58:	4c09      	ldr	r4, [pc, #36]	; (8002e80 <chCoreAlloc+0x30>)
 8002e5a:	4b0a      	ldr	r3, [pc, #40]	; (8002e84 <chCoreAlloc+0x34>)
 8002e5c:	6822      	ldr	r2, [r4, #0]
 8002e5e:	6819      	ldr	r1, [r3, #0]
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
 8002e60:	1dc3      	adds	r3, r0, #7
 8002e62:	f023 0307 	bic.w	r3, r3, #7
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8002e66:	1a89      	subs	r1, r1, r2
 8002e68:	428b      	cmp	r3, r1
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 8002e6a:	bf9d      	ittte	ls
 8002e6c:	189b      	addls	r3, r3, r2
 8002e6e:	6023      	strls	r3, [r4, #0]

  return p;
 8002e70:	4610      	movls	r0, r2

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
  /*lint -restore*/
    return NULL;
 8002e72:	2000      	movhi	r0, #0
 8002e74:	2300      	movs	r3, #0
 8002e76:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocI(size);
  chSysUnlock();

  return p;
}
 8002e7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e7e:	4770      	bx	lr
 8002e80:	20000a28 	.word	0x20000a28
 8002e84:	20000a2c 	.word	0x20000a2c
	...

08002e90 <Vector98>:
/**
 * @brief   CAN1 SCE interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_SCE_HANDLER) {
 8002e90:	b538      	push	{r3, r4, r5, lr}
 */
static void can_lld_sce_handler(CANDriver *canp) {
  uint32_t msr;

  /* Clearing IRQ sources.*/
  msr = canp->can->MSR;
 8002e92:	4d15      	ldr	r5, [pc, #84]	; (8002ee8 <Vector98+0x58>)
 8002e94:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002e96:	685c      	ldr	r4, [r3, #4]
  canp->can->MSR = msr;

  /* Wakeup event.*/
#if CAN_USE_SLEEP_MODE
  if (msr & CAN_MSR_WKUI) {
 8002e98:	0722      	lsls	r2, r4, #28
static void can_lld_sce_handler(CANDriver *canp) {
  uint32_t msr;

  /* Clearing IRQ sources.*/
  msr = canp->can->MSR;
  canp->can->MSR = msr;
 8002e9a:	605c      	str	r4, [r3, #4]

  /* Wakeup event.*/
#if CAN_USE_SLEEP_MODE
  if (msr & CAN_MSR_WKUI) {
 8002e9c:	d411      	bmi.n	8002ec2 <Vector98+0x32>
    osalEventBroadcastFlagsI(&canp->wakeup_event, 0);
    osalSysUnlockFromISR();
  }
#endif /* CAN_USE_SLEEP_MODE */
  /* Error event.*/
  if (msr & CAN_MSR_ERRI) {
 8002e9e:	0763      	lsls	r3, r4, #29
 8002ea0:	d50b      	bpl.n	8002eba <Vector98+0x2a>
    eventflags_t flags;
    uint32_t esr = canp->can->ESR;
 8002ea2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002ea4:	2320      	movs	r3, #32
 8002ea6:	6991      	ldr	r1, [r2, #24]
 8002ea8:	f383 8811 	msr	BASEPRI, r3
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8002eac:	480f      	ldr	r0, [pc, #60]	; (8002eec <Vector98+0x5c>)
 8002eae:	0409      	lsls	r1, r1, #16
 8002eb0:	f7fe fcbe 	bl	8001830 <chEvtBroadcastFlagsI>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_sce_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 8002eba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  OSAL_IRQ_PROLOGUE();

  can_lld_sce_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
 8002ebe:	f7ff bf37 	b.w	8002d30 <_port_irq_epilogue>
  canp->can->MSR = msr;

  /* Wakeup event.*/
#if CAN_USE_SLEEP_MODE
  if (msr & CAN_MSR_WKUI) {
    canp->state = CAN_READY;
 8002ec2:	4628      	mov	r0, r5
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 8002ec4:	681a      	ldr	r2, [r3, #0]
  canp->can->MSR = msr;

  /* Wakeup event.*/
#if CAN_USE_SLEEP_MODE
  if (msr & CAN_MSR_WKUI) {
    canp->state = CAN_READY;
 8002ec6:	2103      	movs	r1, #3
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 8002ec8:	f022 0202 	bic.w	r2, r2, #2
  canp->can->MSR = msr;

  /* Wakeup event.*/
#if CAN_USE_SLEEP_MODE
  if (msr & CAN_MSR_WKUI) {
    canp->state = CAN_READY;
 8002ecc:	f800 1b28 	strb.w	r1, [r0], #40
 8002ed0:	2120      	movs	r1, #32
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	f381 8811 	msr	BASEPRI, r1
 8002ed8:	2100      	movs	r1, #0
 8002eda:	f7fe fca9 	bl	8001830 <chEvtBroadcastFlagsI>
 8002ede:	2300      	movs	r3, #0
 8002ee0:	f383 8811 	msr	BASEPRI, r3
 8002ee4:	e7db      	b.n	8002e9e <Vector98+0xe>
 8002ee6:	bf00      	nop
 8002ee8:	20000908 	.word	0x20000908
 8002eec:	20000928 	.word	0x20000928

08002ef0 <Vector94>:
/**
 * @brief   CAN1 RX1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_RX1_HANDLER) {
 8002ef0:	b538      	push	{r3, r4, r5, lr}
 * @notapi
 */
static void can_lld_rx1_handler(CANDriver *canp) {
  uint32_t rf1r;

  rf1r = canp->can->RF1R;
 8002ef2:	4d16      	ldr	r5, [pc, #88]	; (8002f4c <Vector94+0x5c>)
 8002ef4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002ef6:	691c      	ldr	r4, [r3, #16]
  if ((rf1r & CAN_RF1R_FMP1) > 0) {
 8002ef8:	07a2      	lsls	r2, r4, #30
 8002efa:	d111      	bne.n	8002f20 <Vector94+0x30>
    osalSysLockFromISR();
    osalThreadDequeueAllI(&canp->rxqueue, MSG_OK);
    osalEventBroadcastFlagsI(&canp->rxfull_event, CAN_MAILBOX_TO_MASK(2U));
    osalSysUnlockFromISR();
  }
  if ((rf1r & CAN_RF1R_FOVR1) > 0) {
 8002efc:	06e3      	lsls	r3, r4, #27
 8002efe:	d50b      	bpl.n	8002f18 <Vector94+0x28>
    /* Overflow events handling.*/
    canp->can->RF1R = CAN_RF1R_FOVR1;
 8002f00:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002f02:	2110      	movs	r1, #16
 8002f04:	6119      	str	r1, [r3, #16]
 8002f06:	2320      	movs	r3, #32
 8002f08:	f383 8811 	msr	BASEPRI, r3
 8002f0c:	4810      	ldr	r0, [pc, #64]	; (8002f50 <Vector94+0x60>)
 8002f0e:	f7fe fc8f 	bl	8001830 <chEvtBroadcastFlagsI>
 8002f12:	2300      	movs	r3, #0
 8002f14:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_rx1_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 8002f18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  OSAL_IRQ_PROLOGUE();

  can_lld_rx1_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
 8002f1c:	f7ff bf08 	b.w	8002d30 <_port_irq_epilogue>
  uint32_t rf1r;

  rf1r = canp->can->RF1R;
  if ((rf1r & CAN_RF1R_FMP1) > 0) {
    /* No more receive events until the queue 0 has been emptied.*/
    canp->can->IER &= ~CAN_IER_FMPIE1;
 8002f20:	695a      	ldr	r2, [r3, #20]
 8002f22:	2120      	movs	r1, #32
 8002f24:	f022 0210 	bic.w	r2, r2, #16
 8002f28:	615a      	str	r2, [r3, #20]
 8002f2a:	f381 8811 	msr	BASEPRI, r1
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 8002f2e:	2100      	movs	r1, #0
 8002f30:	f105 0010 	add.w	r0, r5, #16
 8002f34:	f7fe fdcc 	bl	8001ad0 <chThdDequeueAllI>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8002f38:	f105 0018 	add.w	r0, r5, #24
 8002f3c:	2102      	movs	r1, #2
 8002f3e:	f7fe fc77 	bl	8001830 <chEvtBroadcastFlagsI>
 8002f42:	2300      	movs	r3, #0
 8002f44:	f383 8811 	msr	BASEPRI, r3
 8002f48:	e7d8      	b.n	8002efc <Vector94+0xc>
 8002f4a:	bf00      	nop
 8002f4c:	20000908 	.word	0x20000908
 8002f50:	20000928 	.word	0x20000928
	...

08002f60 <Vector90>:
/*
 * @brief   CAN1 RX0 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_RX0_HANDLER) {
 8002f60:	b538      	push	{r3, r4, r5, lr}
 * @notapi
 */
static void can_lld_rx0_handler(CANDriver *canp) {
  uint32_t rf0r;

  rf0r = canp->can->RF0R;
 8002f62:	4d16      	ldr	r5, [pc, #88]	; (8002fbc <Vector90+0x5c>)
 8002f64:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002f66:	68dc      	ldr	r4, [r3, #12]
  if ((rf0r & CAN_RF0R_FMP0) > 0) {
 8002f68:	07a2      	lsls	r2, r4, #30
 8002f6a:	d111      	bne.n	8002f90 <Vector90+0x30>
    osalSysLockFromISR();
    osalThreadDequeueAllI(&canp->rxqueue, MSG_OK);
    osalEventBroadcastFlagsI(&canp->rxfull_event, CAN_MAILBOX_TO_MASK(1U));
    osalSysUnlockFromISR();
  }
  if ((rf0r & CAN_RF0R_FOVR0) > 0) {
 8002f6c:	06e3      	lsls	r3, r4, #27
 8002f6e:	d50b      	bpl.n	8002f88 <Vector90+0x28>
    /* Overflow events handling.*/
    canp->can->RF0R = CAN_RF0R_FOVR0;
 8002f70:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002f72:	2110      	movs	r1, #16
 8002f74:	60d9      	str	r1, [r3, #12]
 8002f76:	2320      	movs	r3, #32
 8002f78:	f383 8811 	msr	BASEPRI, r3
 8002f7c:	4810      	ldr	r0, [pc, #64]	; (8002fc0 <Vector90+0x60>)
 8002f7e:	f7fe fc57 	bl	8001830 <chEvtBroadcastFlagsI>
 8002f82:	2300      	movs	r3, #0
 8002f84:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_rx0_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 8002f88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  OSAL_IRQ_PROLOGUE();

  can_lld_rx0_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
 8002f8c:	f7ff bed0 	b.w	8002d30 <_port_irq_epilogue>
  uint32_t rf0r;

  rf0r = canp->can->RF0R;
  if ((rf0r & CAN_RF0R_FMP0) > 0) {
    /* No more receive events until the queue 0 has been emptied.*/
    canp->can->IER &= ~CAN_IER_FMPIE0;
 8002f90:	695a      	ldr	r2, [r3, #20]
 8002f92:	2120      	movs	r1, #32
 8002f94:	f022 0202 	bic.w	r2, r2, #2
 8002f98:	615a      	str	r2, [r3, #20]
 8002f9a:	f381 8811 	msr	BASEPRI, r1
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	f105 0010 	add.w	r0, r5, #16
 8002fa4:	f7fe fd94 	bl	8001ad0 <chThdDequeueAllI>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8002fa8:	f105 0018 	add.w	r0, r5, #24
 8002fac:	2101      	movs	r1, #1
 8002fae:	f7fe fc3f 	bl	8001830 <chEvtBroadcastFlagsI>
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	f383 8811 	msr	BASEPRI, r3
 8002fb8:	e7d8      	b.n	8002f6c <Vector90+0xc>
 8002fba:	bf00      	nop
 8002fbc:	20000908 	.word	0x20000908
 8002fc0:	20000928 	.word	0x20000928
	...

08002fd0 <Vector8C>:
static void can_lld_tx_handler(CANDriver *canp) {
  uint32_t tsr;
  eventflags_t flags;

  /* Clearing IRQ sources.*/
  tsr = canp->can->TSR;
 8002fd0:	4b18      	ldr	r3, [pc, #96]	; (8003034 <Vector8C+0x64>)
/**
 * @brief   CAN1 TX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_TX_HANDLER) {
 8002fd2:	b510      	push	{r4, lr}
static void can_lld_tx_handler(CANDriver *canp) {
  uint32_t tsr;
  eventflags_t flags;

  /* Clearing IRQ sources.*/
  tsr = canp->can->TSR;
 8002fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fd6:	6893      	ldr	r3, [r2, #8]

  /* Flags to be signaled through the TX event source.*/
  flags = 0U;

  /* Checking mailbox 0.*/
  if ((tsr & CAN_TSR_RQCP0) != 0U) {
 8002fd8:	f013 0401 	ands.w	r4, r3, #1
  uint32_t tsr;
  eventflags_t flags;

  /* Clearing IRQ sources.*/
  tsr = canp->can->TSR;
  canp->can->TSR = tsr;
 8002fdc:	6093      	str	r3, [r2, #8]

  /* Flags to be signaled through the TX event source.*/
  flags = 0U;

  /* Checking mailbox 0.*/
  if ((tsr & CAN_TSR_RQCP0) != 0U) {
 8002fde:	d005      	beq.n	8002fec <Vector8C+0x1c>
    if ((tsr & (CAN_TSR_ALST0 | CAN_TSR_TERR0)) != 0U) {
      flags |= CAN_MAILBOX_TO_MASK(1U) << 16U;
    }
    else {
      flags |= CAN_MAILBOX_TO_MASK(1U);
 8002fe0:	f013 0f0c 	tst.w	r3, #12
 8002fe4:	bf14      	ite	ne
 8002fe6:	f44f 3480 	movne.w	r4, #65536	; 0x10000
 8002fea:	2401      	moveq	r4, #1
    }
  }

  /* Checking mailbox 1.*/
  if ((tsr & CAN_TSR_RQCP1) != 0U) {
 8002fec:	05d9      	lsls	r1, r3, #23
 8002fee:	d506      	bpl.n	8002ffe <Vector8C+0x2e>
    if ((tsr & (CAN_TSR_ALST1 | CAN_TSR_TERR1)) != 0U) {
 8002ff0:	f413 6f40 	tst.w	r3, #3072	; 0xc00
      flags |= CAN_MAILBOX_TO_MASK(2U) << 16U;
 8002ff4:	bf14      	ite	ne
 8002ff6:	f444 3400 	orrne.w	r4, r4, #131072	; 0x20000
    }
    else {
      flags |= CAN_MAILBOX_TO_MASK(2U);
 8002ffa:	f044 0402 	orreq.w	r4, r4, #2
    }
  }

  /* Checking mailbox 2.*/
  if ((tsr & CAN_TSR_RQCP2) != 0U) {
 8002ffe:	03da      	lsls	r2, r3, #15
 8003000:	d506      	bpl.n	8003010 <Vector8C+0x40>
    if ((tsr & (CAN_TSR_ALST2 | CAN_TSR_TERR2)) != 0U) {
 8003002:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
      flags |= CAN_MAILBOX_TO_MASK(3U) << 16U;
 8003006:	bf14      	ite	ne
 8003008:	f444 2480 	orrne.w	r4, r4, #262144	; 0x40000
    }
    else {
      flags |= CAN_MAILBOX_TO_MASK(3U);
 800300c:	f044 0404 	orreq.w	r4, r4, #4
 8003010:	2320      	movs	r3, #32
 8003012:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 8003016:	4808      	ldr	r0, [pc, #32]	; (8003038 <Vector8C+0x68>)
 8003018:	2100      	movs	r1, #0
 800301a:	f7fe fd59 	bl	8001ad0 <chThdDequeueAllI>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 800301e:	4621      	mov	r1, r4
 8003020:	4806      	ldr	r0, [pc, #24]	; (800303c <Vector8C+0x6c>)
 8003022:	f7fe fc05 	bl	8001830 <chEvtBroadcastFlagsI>
 8003026:	2300      	movs	r3, #0
 8003028:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_tx_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 800302c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  can_lld_tx_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
 8003030:	f7ff be7e 	b.w	8002d30 <_port_irq_epilogue>
 8003034:	20000908 	.word	0x20000908
 8003038:	20000910 	.word	0x20000910
 800303c:	20000924 	.word	0x20000924

08003040 <readt.lto_priv.83>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8003040:	300c      	adds	r0, #12
 8003042:	f7fe be95 	b.w	8001d70 <chIQReadTimeout>
 8003046:	bf00      	nop
	...

08003050 <read.lto_priv.77>:
                        n, TIME_INFINITE);
}

static size_t read(void *ip, uint8_t *bp, size_t n) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8003050:	300c      	adds	r0, #12
 8003052:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003056:	f7fe be8b 	b.w	8001d70 <chIQReadTimeout>
 800305a:	bf00      	nop
 800305c:	0000      	movs	r0, r0
	...

08003060 <gett.lto_priv.81>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
}

static msg_t gett(void *ip, systime_t timeout) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8003060:	300c      	adds	r0, #12
 8003062:	f7fe bec5 	b.w	8001df0 <chIQGetTimeout>
 8003066:	bf00      	nop
	...

08003070 <get.lto_priv.79>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t get(void *ip) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8003070:	300c      	adds	r0, #12
 8003072:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003076:	f7fe bebb 	b.w	8001df0 <chIQGetTimeout>
 800307a:	bf00      	nop
 800307c:	0000      	movs	r0, r0
	...

08003080 <putt.lto_priv.80>:
}

static msg_t putt(void *ip, uint8_t b, systime_t timeout) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8003080:	3030      	adds	r0, #48	; 0x30
 8003082:	f7fe be45 	b.w	8001d10 <chOQPutTimeout>
 8003086:	bf00      	nop
	...

08003090 <put.lto_priv.78>:
                       n, TIME_INFINITE);
}

static msg_t put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8003090:	3030      	adds	r0, #48	; 0x30
 8003092:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003096:	f7fe be3b 	b.w	8001d10 <chOQPutTimeout>
 800309a:	bf00      	nop
 800309c:	0000      	movs	r0, r0
	...

080030a0 <test_wait_tick>:
/**
 * @brief   Delays execution until next system time tick.
 *
 * @return              The system time.
 */
systime_t test_wait_tick(void) {
 80030a0:	b508      	push	{r3, lr}

  chThdSleep(1);
 80030a2:	2001      	movs	r0, #1
 80030a4:	f7fe fecc 	bl	8001e40 <chThdSleep>
 80030a8:	2320      	movs	r3, #32
 80030aa:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80030ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80030b2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80030b4:	2300      	movs	r3, #0
 80030b6:	f383 8811 	msr	BASEPRI, r3
  return chVTGetSystemTime();
}
 80030ba:	b280      	uxth	r0, r0
 80030bc:	bd08      	pop	{r3, pc}
 80030be:	bf00      	nop

080030c0 <test_wait_threads>:
}

/**
 * @brief   Waits for the completion of all the test-spawned threads.
 */
void test_wait_threads(void) {
 80030c0:	b570      	push	{r4, r5, r6, lr}
 80030c2:	4c07      	ldr	r4, [pc, #28]	; (80030e0 <test_wait_threads+0x20>)
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
      chThdWait(threads[i]);
      threads[i] = NULL;
 80030c4:	2600      	movs	r6, #0
 80030c6:	f104 0514 	add.w	r5, r4, #20
 */
void test_wait_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
 80030ca:	f854 0b04 	ldr.w	r0, [r4], #4
 80030ce:	b118      	cbz	r0, 80030d8 <test_wait_threads+0x18>
      chThdWait(threads[i]);
 80030d0:	f7fe fb0e 	bl	80016f0 <chThdWait>
      threads[i] = NULL;
 80030d4:	f844 6c04 	str.w	r6, [r4, #-4]
 * @brief   Waits for the completion of all the test-spawned threads.
 */
void test_wait_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
 80030d8:	42ac      	cmp	r4, r5
 80030da:	d1f6      	bne.n	80030ca <test_wait_threads+0xa>
    if (threads[i] != NULL) {
      chThdWait(threads[i]);
      threads[i] = NULL;
    }
}
 80030dc:	bd70      	pop	{r4, r5, r6, pc}
 80030de:	bf00      	nop
 80030e0:	20000a04 	.word	0x20000a04
	...

080030f0 <test_terminate_threads>:
 */

/**
 * @brief   Sets a termination request in all the test-spawned threads.
 */
void test_terminate_threads(void) {
 80030f0:	4b0a      	ldr	r3, [pc, #40]	; (800311c <test_terminate_threads+0x2c>)
 80030f2:	b430      	push	{r4, r5}
 80030f4:	f103 0014 	add.w	r0, r3, #20
 80030f8:	2520      	movs	r5, #32
 80030fa:	2400      	movs	r4, #0
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i])
 80030fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003100:	b13a      	cbz	r2, 8003112 <test_terminate_threads+0x22>
 8003102:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
void chThdTerminate(thread_t *tp) {

  chSysLock();
  tp->p_flags |= CH_FLAG_TERMINATE;
 8003106:	7f51      	ldrb	r1, [r2, #29]
 8003108:	f041 0104 	orr.w	r1, r1, #4
 800310c:	7751      	strb	r1, [r2, #29]
 800310e:	f384 8811 	msr	BASEPRI, r4
 * @brief   Sets a termination request in all the test-spawned threads.
 */
void test_terminate_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
 8003112:	4283      	cmp	r3, r0
 8003114:	d1f2      	bne.n	80030fc <test_terminate_threads+0xc>
    if (threads[i])
      chThdTerminate(threads[i]);
}
 8003116:	bc30      	pop	{r4, r5}
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	20000a04 	.word	0x20000a04

08003120 <_test_assert_time_window>:
    return _test_fail(point);
  clear_tokens();
  return FALSE;
}

bool _test_assert_time_window(unsigned point, systime_t start, systime_t end) {
 8003120:	b410      	push	{r4}
 8003122:	2320      	movs	r3, #32
 8003124:	f383 8811 	msr	BASEPRI, r3
 8003128:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800312c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800312e:	2300      	movs	r3, #0
 8003130:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chVTIsTimeWithinX(systime_t time,
                                     systime_t start,
                                     systime_t end) {

  return (bool)((systime_t)(time - start) < (systime_t)(end - start));
 8003134:	1a52      	subs	r2, r2, r1
 8003136:	1a64      	subs	r4, r4, r1
  return TRUE;
}

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
 8003138:	b2a1      	uxth	r1, r4
 800313a:	b292      	uxth	r2, r2
 800313c:	4291      	cmp	r1, r2
 800313e:	d306      	bcc.n	800314e <_test_assert_time_window+0x2e>
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 8003140:	4c05      	ldr	r4, [pc, #20]	; (8003158 <_test_assert_time_window+0x38>)
  local_fail = TRUE;
 8003142:	4906      	ldr	r1, [pc, #24]	; (800315c <_test_assert_time_window+0x3c>)
  failpoint = point;
 8003144:	4a06      	ldr	r2, [pc, #24]	; (8003160 <_test_assert_time_window+0x40>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 8003146:	2301      	movs	r3, #1
 8003148:	7023      	strb	r3, [r4, #0]
  local_fail = TRUE;
 800314a:	700b      	strb	r3, [r1, #0]
  failpoint = point;
 800314c:	6010      	str	r0, [r2, #0]
}

bool _test_assert_time_window(unsigned point, systime_t start, systime_t end) {

  return _test_assert(point, chVTIsSystemTimeWithin(start, end));
}
 800314e:	4618      	mov	r0, r3
 8003150:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	20000958 	.word	0x20000958
 800315c:	20000959 	.word	0x20000959
 8003160:	20000970 	.word	0x20000970
	...

08003170 <_test_assert_sequence>:
  if (!condition)
    return _test_fail(point);
  return FALSE;
}

bool _test_assert_sequence(unsigned point, char *expected) {
 8003170:	b4f0      	push	{r4, r5, r6, r7}
 8003172:	4e0e      	ldr	r6, [pc, #56]	; (80031ac <_test_assert_sequence+0x3c>)
  char *cp = tokens_buffer;
 8003174:	4f0e      	ldr	r7, [pc, #56]	; (80031b0 <_test_assert_sequence+0x40>)
 8003176:	6835      	ldr	r5, [r6, #0]
 8003178:	463b      	mov	r3, r7
 800317a:	e005      	b.n	8003188 <_test_assert_sequence+0x18>
  while (cp < tokp) {
    if (*cp++ != *expected++)
 800317c:	f813 4b01 	ldrb.w	r4, [r3], #1
 8003180:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003184:	4294      	cmp	r4, r2
 8003186:	d107      	bne.n	8003198 <_test_assert_sequence+0x28>
  return FALSE;
}

bool _test_assert_sequence(unsigned point, char *expected) {
  char *cp = tokens_buffer;
  while (cp < tokp) {
 8003188:	42ab      	cmp	r3, r5
 800318a:	d3f7      	bcc.n	800317c <_test_assert_sequence+0xc>
    if (*cp++ != *expected++)
     return _test_fail(point);
  }
  if (*expected)
 800318c:	780b      	ldrb	r3, [r1, #0]
 800318e:	b91b      	cbnz	r3, 8003198 <_test_assert_sequence+0x28>
/*
 * Tokens.
 */
static void clear_tokens(void) {

  tokp = tokens_buffer;
 8003190:	6037      	str	r7, [r6, #0]
  }
  if (*expected)
    return _test_fail(point);
  clear_tokens();
  return FALSE;
}
 8003192:	4618      	mov	r0, r3
 8003194:	bcf0      	pop	{r4, r5, r6, r7}
 8003196:	4770      	bx	lr
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 8003198:	4c06      	ldr	r4, [pc, #24]	; (80031b4 <_test_assert_sequence+0x44>)
  local_fail = TRUE;
 800319a:	4907      	ldr	r1, [pc, #28]	; (80031b8 <_test_assert_sequence+0x48>)
  failpoint = point;
 800319c:	4a07      	ldr	r2, [pc, #28]	; (80031bc <_test_assert_sequence+0x4c>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 800319e:	2301      	movs	r3, #1
 80031a0:	7023      	strb	r3, [r4, #0]
  local_fail = TRUE;
  failpoint = point;
 80031a2:	6010      	str	r0, [r2, #0]
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
  local_fail = TRUE;
 80031a4:	700b      	strb	r3, [r1, #0]
  }
  if (*expected)
    return _test_fail(point);
  clear_tokens();
  return FALSE;
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	bcf0      	pop	{r4, r5, r6, r7}
 80031aa:	4770      	bx	lr
 80031ac:	20000954 	.word	0x20000954
 80031b0:	20000960 	.word	0x20000960
 80031b4:	20000958 	.word	0x20000958
 80031b8:	20000959 	.word	0x20000959
 80031bc:	20000970 	.word	0x20000970

080031c0 <_test_assert>:
  return TRUE;
}

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
 80031c0:	b959      	cbnz	r1, 80031da <_test_assert+0x1a>
  local_fail = TRUE;
  failpoint = point;
  return TRUE;
}

bool _test_assert(unsigned point, bool condition) {
 80031c2:	b410      	push	{r4}
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
  local_fail = TRUE;
 80031c4:	4906      	ldr	r1, [pc, #24]	; (80031e0 <_test_assert+0x20>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 80031c6:	4c07      	ldr	r4, [pc, #28]	; (80031e4 <_test_assert+0x24>)
  local_fail = TRUE;
  failpoint = point;
 80031c8:	4a07      	ldr	r2, [pc, #28]	; (80031e8 <_test_assert+0x28>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 80031ca:	2301      	movs	r3, #1
 80031cc:	7023      	strb	r3, [r4, #0]
  local_fail = TRUE;
  failpoint = point;
 80031ce:	6010      	str	r0, [r2, #0]
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
  local_fail = TRUE;
 80031d0:	700b      	strb	r3, [r1, #0]
bool _test_assert(unsigned point, bool condition) {

  if (!condition)
    return _test_fail(point);
  return FALSE;
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80031d8:	4770      	bx	lr

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
    return _test_fail(point);
  return FALSE;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	4770      	bx	lr
 80031e0:	20000959 	.word	0x20000959
 80031e4:	20000958 	.word	0x20000958
 80031e8:	20000970 	.word	0x20000970
 80031ec:	00000000 	.word	0x00000000

080031f0 <test_emit_token>:
/**
 * @brief   Emits a token into the tokens buffer.
 *
 * @param[in] token     the token as a char
 */
void test_emit_token(char token) {
 80031f0:	b410      	push	{r4}
 80031f2:	2320      	movs	r3, #32
 80031f4:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  *tokp++ = token;
 80031f8:	4b05      	ldr	r3, [pc, #20]	; (8003210 <test_emit_token+0x20>)
 80031fa:	2100      	movs	r1, #0
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	1c54      	adds	r4, r2, #1
 8003200:	7010      	strb	r0, [r2, #0]
 8003202:	601c      	str	r4, [r3, #0]
 8003204:	f381 8811 	msr	BASEPRI, r1
  chSysUnlock();
}
 8003208:	f85d 4b04 	ldr.w	r4, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	20000954 	.word	0x20000954
	...

08003220 <thread.lto_priv.107>:
 * priority order regardless of the initial order.
 */

static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
 8003220:	7800      	ldrb	r0, [r0, #0]
 8003222:	f7ff bfe5 	b.w	80031f0 <test_emit_token>
 8003226:	bf00      	nop
	...

08003230 <test_println>:
/**
 * @brief   Prints a line.
 *
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {
 8003230:	b570      	push	{r4, r5, r6, lr}
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8003232:	7801      	ldrb	r1, [r0, #0]
/**
 * @brief   Prints a line.
 *
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {
 8003234:	4604      	mov	r4, r0
 8003236:	4d09      	ldr	r5, [pc, #36]	; (800325c <test_println+0x2c>)
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8003238:	b139      	cbz	r1, 800324a <test_println+0x1a>
    chSequentialStreamPut(chp, *msgp++);
 800323a:	6828      	ldr	r0, [r5, #0]
 800323c:	6803      	ldr	r3, [r0, #0]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8003242:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8003246:	2900      	cmp	r1, #0
 8003248:	d1f7      	bne.n	800323a <test_println+0xa>
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {

  test_print(msgp);
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 800324a:	6828      	ldr	r0, [r5, #0]
 800324c:	4904      	ldr	r1, [pc, #16]	; (8003260 <test_println+0x30>)
 800324e:	6803      	ldr	r3, [r0, #0]
 8003250:	2202      	movs	r2, #2
 8003252:	681b      	ldr	r3, [r3, #0]
}
 8003254:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {

  test_print(msgp);
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 8003258:	4718      	bx	r3
 800325a:	bf00      	nop
 800325c:	2000095c 	.word	0x2000095c
 8003260:	08006cc4 	.word	0x08006cc4
	...

08003270 <test_print>:
/**
 * @brief   Prints a line without final end-of-line.
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {
 8003270:	b538      	push	{r3, r4, r5, lr}

  while (*msgp)
 8003272:	7801      	ldrb	r1, [r0, #0]
/**
 * @brief   Prints a line without final end-of-line.
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {
 8003274:	4604      	mov	r4, r0

  while (*msgp)
 8003276:	b141      	cbz	r1, 800328a <test_print+0x1a>
 8003278:	4d04      	ldr	r5, [pc, #16]	; (800328c <test_print+0x1c>)
    chSequentialStreamPut(chp, *msgp++);
 800327a:	6828      	ldr	r0, [r5, #0]
 800327c:	6803      	ldr	r3, [r0, #0]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8003282:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8003286:	2900      	cmp	r1, #0
 8003288:	d1f7      	bne.n	800327a <test_print+0xa>
 800328a:	bd38      	pop	{r3, r4, r5, pc}
 800328c:	2000095c 	.word	0x2000095c

08003290 <test_printn>:
 * @param[in] n         the number to be printed
 */
void test_printn(uint32_t n) {
  char buf[16], *p;

  if (!n)
 8003290:	b310      	cbz	r0, 80032d8 <test_printn+0x48>
/**
 * @brief   Prints a decimal unsigned number.
 *
 * @param[in] n         the number to be printed
 */
void test_printn(uint32_t n) {
 8003292:	b570      	push	{r4, r5, r6, lr}
 8003294:	b084      	sub	sp, #16
  char buf[16], *p;

  if (!n)
 8003296:	466d      	mov	r5, sp
 8003298:	466c      	mov	r4, sp
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
 800329a:	4a12      	ldr	r2, [pc, #72]	; (80032e4 <test_printn+0x54>)
 800329c:	fba2 1300 	umull	r1, r3, r2, r0
 80032a0:	08db      	lsrs	r3, r3, #3
 80032a2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80032a6:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
 80032aa:	f100 0130 	add.w	r1, r0, #48	; 0x30
 80032ae:	b2c9      	uxtb	r1, r1
 80032b0:	f804 1b01 	strb.w	r1, [r4], #1

  if (!n)
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
 80032b4:	4618      	mov	r0, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f0      	bne.n	800329c <test_printn+0xc>
      *p++ = (n % 10) + '0', n /= 10;
    while (p > buf)
 80032ba:	42ac      	cmp	r4, r5
 80032bc:	d90a      	bls.n	80032d4 <test_printn+0x44>
 80032be:	4e0a      	ldr	r6, [pc, #40]	; (80032e8 <test_printn+0x58>)
 80032c0:	3c01      	subs	r4, #1
 80032c2:	e001      	b.n	80032c8 <test_printn+0x38>
 80032c4:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
      chSequentialStreamPut(chp, *--p);
 80032c8:	6830      	ldr	r0, [r6, #0]
 80032ca:	6803      	ldr	r3, [r0, #0]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	4798      	blx	r3
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
    while (p > buf)
 80032d0:	42ac      	cmp	r4, r5
 80032d2:	d1f7      	bne.n	80032c4 <test_printn+0x34>
      chSequentialStreamPut(chp, *--p);
  }
}
 80032d4:	b004      	add	sp, #16
 80032d6:	bd70      	pop	{r4, r5, r6, pc}
 */
void test_printn(uint32_t n) {
  char buf[16], *p;

  if (!n)
    chSequentialStreamPut(chp, '0');
 80032d8:	4b03      	ldr	r3, [pc, #12]	; (80032e8 <test_printn+0x58>)
 80032da:	2130      	movs	r1, #48	; 0x30
 80032dc:	6818      	ldr	r0, [r3, #0]
 80032de:	6803      	ldr	r3, [r0, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	4718      	bx	r3
 80032e4:	cccccccd 	.word	0xcccccccd
 80032e8:	2000095c 	.word	0x2000095c
 80032ec:	00000000 	.word	0x00000000

080032f0 <TestThread>:
/**
 * @brief   Test execution thread function.
 *
 * @param[in] p         pointer to a @p BaseChannel object for test output
 */
void TestThread(void *p) {
 80032f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int i, j;

  chp = p;
 80032f4:	4c9f      	ldr	r4, [pc, #636]	; (8003574 <TestThread+0x284>)
/**
 * @brief   Test execution thread function.
 *
 * @param[in] p         pointer to a @p BaseChannel object for test output
 */
void TestThread(void *p) {
 80032f6:	b083      	sub	sp, #12
  int i, j;

  chp = p;
 80032f8:	6020      	str	r0, [r4, #0]
  test_println("");
 80032fa:	489f      	ldr	r0, [pc, #636]	; (8003578 <TestThread+0x288>)
 80032fc:	f7ff ff98 	bl	8003230 <test_println>
  test_println("*** ChibiOS/RT test suite");
 8003300:	489e      	ldr	r0, [pc, #632]	; (800357c <TestThread+0x28c>)
 8003302:	f7ff ff95 	bl	8003230 <test_println>
  test_println("***");
 8003306:	4d9e      	ldr	r5, [pc, #632]	; (8003580 <TestThread+0x290>)
 8003308:	489e      	ldr	r0, [pc, #632]	; (8003584 <TestThread+0x294>)
 800330a:	f7ff ff91 	bl	8003230 <test_println>
 800330e:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8003310:	6820      	ldr	r0, [r4, #0]
 8003312:	6803      	ldr	r3, [r0, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8003318:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800331c:	2900      	cmp	r1, #0
 800331e:	d1f7      	bne.n	8003310 <TestThread+0x20>
  chp = p;
  test_println("");
  test_println("*** ChibiOS/RT test suite");
  test_println("***");
  test_print("*** Kernel:       ");
  test_println(CH_KERNEL_VERSION);
 8003320:	4899      	ldr	r0, [pc, #612]	; (8003588 <TestThread+0x298>)
 8003322:	4d9a      	ldr	r5, [pc, #616]	; (800358c <TestThread+0x29c>)
 8003324:	f7ff ff84 	bl	8003230 <test_println>
 8003328:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 800332a:	6820      	ldr	r0, [r4, #0]
 800332c:	6803      	ldr	r3, [r0, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8003332:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8003336:	2900      	cmp	r1, #0
 8003338:	d1f7      	bne.n	800332a <TestThread+0x3a>
  test_println("*** ChibiOS/RT test suite");
  test_println("***");
  test_print("*** Kernel:       ");
  test_println(CH_KERNEL_VERSION);
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
 800333a:	4895      	ldr	r0, [pc, #596]	; (8003590 <TestThread+0x2a0>)
 800333c:	4d95      	ldr	r5, [pc, #596]	; (8003594 <TestThread+0x2a4>)
 800333e:	f7ff ff77 	bl	8003230 <test_println>
 8003342:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8003344:	6820      	ldr	r0, [r4, #0]
 8003346:	6803      	ldr	r3, [r0, #0]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 800334c:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8003350:	2900      	cmp	r1, #0
 8003352:	d1f7      	bne.n	8003344 <TestThread+0x54>
  test_println(CH_KERNEL_VERSION);
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
#ifdef PORT_COMPILER_NAME
  test_print("*** Compiler:     ");
  test_println(PORT_COMPILER_NAME);
 8003354:	4890      	ldr	r0, [pc, #576]	; (8003598 <TestThread+0x2a8>)
 8003356:	4d91      	ldr	r5, [pc, #580]	; (800359c <TestThread+0x2ac>)
 8003358:	f7ff ff6a 	bl	8003230 <test_println>
 800335c:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 800335e:	6820      	ldr	r0, [r4, #0]
 8003360:	6803      	ldr	r3, [r0, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8003366:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800336a:	2900      	cmp	r1, #0
 800336c:	d1f7      	bne.n	800335e <TestThread+0x6e>
#ifdef PORT_COMPILER_NAME
  test_print("*** Compiler:     ");
  test_println(PORT_COMPILER_NAME);
#endif
  test_print("*** Architecture: ");
  test_println(PORT_ARCHITECTURE_NAME);
 800336e:	488c      	ldr	r0, [pc, #560]	; (80035a0 <TestThread+0x2b0>)
 8003370:	4d8c      	ldr	r5, [pc, #560]	; (80035a4 <TestThread+0x2b4>)
 8003372:	f7ff ff5d 	bl	8003230 <test_println>
 8003376:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8003378:	6820      	ldr	r0, [r4, #0]
 800337a:	6803      	ldr	r3, [r0, #0]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8003380:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8003384:	2900      	cmp	r1, #0
 8003386:	d1f7      	bne.n	8003378 <TestThread+0x88>
#endif
  test_print("*** Architecture: ");
  test_println(PORT_ARCHITECTURE_NAME);
#ifdef PORT_CORE_VARIANT_NAME
  test_print("*** Core Variant: ");
  test_println(PORT_CORE_VARIANT_NAME);
 8003388:	4887      	ldr	r0, [pc, #540]	; (80035a8 <TestThread+0x2b8>)
 800338a:	4d88      	ldr	r5, [pc, #544]	; (80035ac <TestThread+0x2bc>)
 800338c:	f7ff ff50 	bl	8003230 <test_println>
 8003390:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8003392:	6820      	ldr	r0, [r4, #0]
 8003394:	6803      	ldr	r3, [r0, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 800339a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800339e:	2900      	cmp	r1, #0
 80033a0:	d1f7      	bne.n	8003392 <TestThread+0xa2>
  test_print("*** Core Variant: ");
  test_println(PORT_CORE_VARIANT_NAME);
#endif
#ifdef PORT_INFO
  test_print("*** Port Info:    ");
  test_println(PORT_INFO);
 80033a2:	4883      	ldr	r0, [pc, #524]	; (80035b0 <TestThread+0x2c0>)
 80033a4:	4d83      	ldr	r5, [pc, #524]	; (80035b4 <TestThread+0x2c4>)
 80033a6:	f7ff ff43 	bl	8003230 <test_println>
 80033aa:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 80033ac:	6820      	ldr	r0, [r4, #0]
 80033ae:	6803      	ldr	r3, [r0, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80033b4:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80033b8:	2900      	cmp	r1, #0
 80033ba:	d1f7      	bne.n	80033ac <TestThread+0xbc>
  test_print("*** Port Info:    ");
  test_println(PORT_INFO);
#endif
#ifdef PLATFORM_NAME
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
 80033bc:	487e      	ldr	r0, [pc, #504]	; (80035b8 <TestThread+0x2c8>)
 80033be:	4d7f      	ldr	r5, [pc, #508]	; (80035bc <TestThread+0x2cc>)
 80033c0:	f7ff ff36 	bl	8003230 <test_println>
 80033c4:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 80033c6:	6820      	ldr	r0, [r4, #0]
 80033c8:	6803      	ldr	r3, [r0, #0]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80033ce:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80033d2:	2900      	cmp	r1, #0
 80033d4:	d1f7      	bne.n	80033c6 <TestThread+0xd6>
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
#endif
#ifdef BOARD_NAME
  test_print("*** Test Board:   ");
  test_println(BOARD_NAME);
 80033d6:	487a      	ldr	r0, [pc, #488]	; (80035c0 <TestThread+0x2d0>)
 80033d8:	9100      	str	r1, [sp, #0]
 80033da:	f7ff ff29 	bl	8003230 <test_println>
#endif
  test_println("");
 80033de:	4866      	ldr	r0, [pc, #408]	; (8003578 <TestThread+0x288>)
 80033e0:	f7ff ff26 	bl	8003230 <test_println>

  test_global_fail = FALSE;
 80033e4:	4b77      	ldr	r3, [pc, #476]	; (80035c4 <TestThread+0x2d4>)
 80033e6:	9900      	ldr	r1, [sp, #0]
 80033e8:	4f77      	ldr	r7, [pc, #476]	; (80035c8 <TestThread+0x2d8>)
 80033ea:	7019      	strb	r1, [r3, #0]
 80033ec:	4b77      	ldr	r3, [pc, #476]	; (80035cc <TestThread+0x2dc>)
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 80033ee:	f8df b184 	ldr.w	fp, [pc, #388]	; 8003574 <TestThread+0x284>
 80033f2:	9301      	str	r3, [sp, #4]
 80033f4:	9b00      	ldr	r3, [sp, #0]
}

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
 80033f6:	2600      	movs	r6, #0
 80033f8:	3301      	adds	r3, #1
 80033fa:	9300      	str	r3, [sp, #0]

  test_global_fail = FALSE;
  i = 0;
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
 80033fc:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
 8003400:	eb07 0886 	add.w	r8, r7, r6, lsl #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	f000 808b 	beq.w	8003520 <TestThread+0x230>
      print_line();
 800340a:	4d71      	ldr	r5, [pc, #452]	; (80035d0 <TestThread+0x2e0>)
 800340c:	f7ff fc68 	bl	8002ce0 <print_line>
 8003410:	212d      	movs	r1, #45	; 0x2d
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8003412:	6820      	ldr	r0, [r4, #0]
 8003414:	6803      	ldr	r3, [r0, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 800341a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800341e:	2900      	cmp	r1, #0
 8003420:	d1f7      	bne.n	8003412 <TestThread+0x122>
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
 8003422:	9800      	ldr	r0, [sp, #0]
 8003424:	f7ff ff34 	bl	8003290 <test_printn>
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8003428:	f8db 0000 	ldr.w	r0, [fp]
 800342c:	212e      	movs	r1, #46	; 0x2e
 800342e:	6803      	ldr	r3, [r0, #0]
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
 8003430:	3601      	adds	r6, #1
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	4798      	blx	r3
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
 8003436:	4d67      	ldr	r5, [pc, #412]	; (80035d4 <TestThread+0x2e4>)
 8003438:	4630      	mov	r0, r6
 800343a:	f7ff ff29 	bl	8003290 <test_printn>
 800343e:	2120      	movs	r1, #32
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8003440:	6820      	ldr	r0, [r4, #0]
 8003442:	6803      	ldr	r3, [r0, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8003448:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800344c:	2900      	cmp	r1, #0
 800344e:	d1f7      	bne.n	8003440 <TestThread+0x150>
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
      test_print(" (");
      test_print(patterns[i][j]->name);
 8003450:	f8d8 3000 	ldr.w	r3, [r8]
 8003454:	681d      	ldr	r5, [r3, #0]
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8003456:	7829      	ldrb	r1, [r5, #0]
 8003458:	b139      	cbz	r1, 800346a <TestThread+0x17a>
    chSequentialStreamPut(chp, *msgp++);
 800345a:	6820      	ldr	r0, [r4, #0]
 800345c:	6803      	ldr	r3, [r0, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8003462:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8003466:	2900      	cmp	r1, #0
 8003468:	d1f7      	bne.n	800345a <TestThread+0x16a>
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
      test_print(" (");
      test_print(patterns[i][j]->name);
      test_println(")");
 800346a:	485b      	ldr	r0, [pc, #364]	; (80035d8 <TestThread+0x2e8>)
 800346c:	f7ff fee0 	bl	8003230 <test_println>
#if DELAY_BETWEEN_TESTS > 0
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
 8003470:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003474:	f7fe fce4 	bl	8001e40 <chThdSleep>

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;
 8003478:	4a58      	ldr	r2, [pc, #352]	; (80035dc <TestThread+0x2ec>)
      test_print(patterns[i][j]->name);
      test_println(")");
#if DELAY_BETWEEN_TESTS > 0
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
#endif
      execute_test(patterns[i][j]);
 800347a:	f8d8 a000 	ldr.w	sl, [r8]
static void execute_test(const struct testcase *tcp) {
  int i;

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
 800347e:	2300      	movs	r3, #0
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;
 8003480:	6013      	str	r3, [r2, #0]
 8003482:	6053      	str	r3, [r2, #4]
 8003484:	6093      	str	r3, [r2, #8]
 8003486:	60d3      	str	r3, [r2, #12]
 8003488:	6113      	str	r3, [r2, #16]
static void execute_test(const struct testcase *tcp) {
  int i;

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
 800348a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8003608 <TestThread+0x318>
/*
 * Tokens.
 */
static void clear_tokens(void) {

  tokp = tokens_buffer;
 800348e:	4d54      	ldr	r5, [pc, #336]	; (80035e0 <TestThread+0x2f0>)
 8003490:	f8df 915c 	ldr.w	r9, [pc, #348]	; 80035f0 <TestThread+0x300>
  clear_tokens();
  local_fail = FALSE;
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;

  if (tcp->setup != NULL)
 8003494:	f8da 2004 	ldr.w	r2, [sl, #4]
static void execute_test(const struct testcase *tcp) {
  int i;

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
 8003498:	f888 3000 	strb.w	r3, [r8]
/*
 * Tokens.
 */
static void clear_tokens(void) {

  tokp = tokens_buffer;
 800349c:	f8c5 9000 	str.w	r9, [r5]
  clear_tokens();
  local_fail = FALSE;
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;

  if (tcp->setup != NULL)
 80034a0:	b102      	cbz	r2, 80034a4 <TestThread+0x1b4>
    tcp->setup();
 80034a2:	4790      	blx	r2
  tcp->execute();
 80034a4:	f8da 300c 	ldr.w	r3, [sl, #12]
 80034a8:	4798      	blx	r3
  if (tcp->teardown != NULL)
 80034aa:	f8da 3008 	ldr.w	r3, [sl, #8]
 80034ae:	b103      	cbz	r3, 80034b2 <TestThread+0x1c2>
    tcp->teardown();
 80034b0:	4798      	blx	r3

  test_wait_threads();
 80034b2:	f7ff fe05 	bl	80030c0 <test_wait_threads>
      test_println(")");
#if DELAY_BETWEEN_TESTS > 0
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
#endif
      execute_test(patterns[i][j]);
      if (local_fail) {
 80034b6:	f898 3000 	ldrb.w	r3, [r8]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d04f      	beq.n	800355e <TestThread+0x26e>
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
 80034be:	4f49      	ldr	r7, [pc, #292]	; (80035e4 <TestThread+0x2f4>)
 80034c0:	212d      	movs	r1, #45	; 0x2d
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 80034c2:	6820      	ldr	r0, [r4, #0]
 80034c4:	6803      	ldr	r3, [r0, #0]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80034ca:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 80034ce:	2900      	cmp	r1, #0
 80034d0:	d1f7      	bne.n	80034c2 <TestThread+0x1d2>
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
#endif
      execute_test(patterns[i][j]);
      if (local_fail) {
        test_print("--- Result: FAILURE (#");
        test_printn(failpoint);
 80034d2:	4b45      	ldr	r3, [pc, #276]	; (80035e8 <TestThread+0x2f8>)
 80034d4:	4f45      	ldr	r7, [pc, #276]	; (80035ec <TestThread+0x2fc>)
 80034d6:	6818      	ldr	r0, [r3, #0]
 80034d8:	f7ff feda 	bl	8003290 <test_printn>
 80034dc:	2120      	movs	r1, #32
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 80034de:	6820      	ldr	r0, [r4, #0]
 80034e0:	6803      	ldr	r3, [r0, #0]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80034e6:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 80034ea:	2900      	cmp	r1, #0
 80034ec:	d1f7      	bne.n	80034de <TestThread+0x1ee>
}

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
 80034ee:	682b      	ldr	r3, [r5, #0]
 80034f0:	454b      	cmp	r3, r9
 80034f2:	d909      	bls.n	8003508 <TestThread+0x218>
 80034f4:	4f3e      	ldr	r7, [pc, #248]	; (80035f0 <TestThread+0x300>)
    chSequentialStreamPut(chp, *cp++);
 80034f6:	6820      	ldr	r0, [r4, #0]
 80034f8:	f817 1b01 	ldrb.w	r1, [r7], #1
 80034fc:	6803      	ldr	r3, [r0, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	4798      	blx	r3
}

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
 8003502:	682b      	ldr	r3, [r5, #0]
 8003504:	429f      	cmp	r7, r3
 8003506:	d3f6      	bcc.n	80034f6 <TestThread+0x206>
      if (local_fail) {
        test_print("--- Result: FAILURE (#");
        test_printn(failpoint);
        test_print(" [");
        print_tokens();
        test_println("])");
 8003508:	483a      	ldr	r0, [pc, #232]	; (80035f4 <TestThread+0x304>)
 800350a:	f7ff fe91 	bl	8003230 <test_println>
 800350e:	9b01      	ldr	r3, [sp, #4]
 8003510:	681f      	ldr	r7, [r3, #0]

  test_global_fail = FALSE;
  i = 0;
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
 8003512:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
 8003516:	eb07 0886 	add.w	r8, r7, r6, lsl #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	f47f af75 	bne.w	800340a <TestThread+0x11a>
#endif
  test_println("");

  test_global_fail = FALSE;
  i = 0;
  while (patterns[i]) {
 8003520:	9b01      	ldr	r3, [sp, #4]
 8003522:	f853 7f04 	ldr.w	r7, [r3, #4]!
 8003526:	9301      	str	r3, [sp, #4]
 8003528:	2f00      	cmp	r7, #0
 800352a:	f47f af63 	bne.w	80033f4 <TestThread+0x104>
        test_println("--- Result: SUCCESS");
      j++;
    }
    i++;
  }
  print_line();
 800352e:	f7ff fbd7 	bl	8002ce0 <print_line>
  test_println("");
 8003532:	4d31      	ldr	r5, [pc, #196]	; (80035f8 <TestThread+0x308>)
 8003534:	4810      	ldr	r0, [pc, #64]	; (8003578 <TestThread+0x288>)
 8003536:	f7ff fe7b 	bl	8003230 <test_println>
 800353a:	2146      	movs	r1, #70	; 0x46
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 800353c:	6820      	ldr	r0, [r4, #0]
 800353e:	6803      	ldr	r3, [r0, #0]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8003544:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8003548:	2900      	cmp	r1, #0
 800354a:	d1f7      	bne.n	800353c <TestThread+0x24c>
    i++;
  }
  print_line();
  test_println("");
  test_print("Final result: ");
  if (test_global_fail)
 800354c:	4b1d      	ldr	r3, [pc, #116]	; (80035c4 <TestThread+0x2d4>)
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	b94b      	cbnz	r3, 8003566 <TestThread+0x276>
    test_println("FAILURE");
  else
    test_println("SUCCESS");
 8003552:	482a      	ldr	r0, [pc, #168]	; (80035fc <TestThread+0x30c>)
}
 8003554:	b003      	add	sp, #12
 8003556:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_println("");
  test_print("Final result: ");
  if (test_global_fail)
    test_println("FAILURE");
  else
    test_println("SUCCESS");
 800355a:	f7ff be69 	b.w	8003230 <test_println>
        test_print(" [");
        print_tokens();
        test_println("])");
      }
      else
        test_println("--- Result: SUCCESS");
 800355e:	4828      	ldr	r0, [pc, #160]	; (8003600 <TestThread+0x310>)
 8003560:	f7ff fe66 	bl	8003230 <test_println>
 8003564:	e74a      	b.n	80033fc <TestThread+0x10c>
  }
  print_line();
  test_println("");
  test_print("Final result: ");
  if (test_global_fail)
    test_println("FAILURE");
 8003566:	4827      	ldr	r0, [pc, #156]	; (8003604 <TestThread+0x314>)
  else
    test_println("SUCCESS");
}
 8003568:	b003      	add	sp, #12
 800356a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_println("");
  test_print("Final result: ");
  if (test_global_fail)
    test_println("FAILURE");
  else
    test_println("SUCCESS");
 800356e:	f7ff be5f 	b.w	8003230 <test_println>
 8003572:	bf00      	nop
 8003574:	2000095c 	.word	0x2000095c
 8003578:	08006b6c 	.word	0x08006b6c
 800357c:	08007210 	.word	0x08007210
 8003580:	08007130 	.word	0x08007130
 8003584:	0800722c 	.word	0x0800722c
 8003588:	08006ba8 	.word	0x08006ba8
 800358c:	08007144 	.word	0x08007144
 8003590:	08007254 	.word	0x08007254
 8003594:	08007158 	.word	0x08007158
 8003598:	08006bc4 	.word	0x08006bc4
 800359c:	0800716c 	.word	0x0800716c
 80035a0:	08006c20 	.word	0x08006c20
 80035a4:	08007180 	.word	0x08007180
 80035a8:	08006c3c 	.word	0x08006c3c
 80035ac:	08007194 	.word	0x08007194
 80035b0:	08006c5c 	.word	0x08006c5c
 80035b4:	080071a8 	.word	0x080071a8
 80035b8:	08006c88 	.word	0x08006c88
 80035bc:	080071bc 	.word	0x080071bc
 80035c0:	08006cc8 	.word	0x08006cc8
 80035c4:	20000958 	.word	0x20000958
 80035c8:	08006f00 	.word	0x08006f00
 80035cc:	08006f70 	.word	0x08006f70
 80035d0:	080071d0 	.word	0x080071d0
 80035d4:	080071e0 	.word	0x080071e0
 80035d8:	08007230 	.word	0x08007230
 80035dc:	20000a04 	.word	0x20000a04
 80035e0:	20000954 	.word	0x20000954
 80035e4:	080071e4 	.word	0x080071e4
 80035e8:	20000970 	.word	0x20000970
 80035ec:	080071fc 	.word	0x080071fc
 80035f0:	20000960 	.word	0x20000960
 80035f4:	08007234 	.word	0x08007234
 80035f8:	08007200 	.word	0x08007200
 80035fc:	08007244 	.word	0x08007244
 8003600:	08007238 	.word	0x08007238
 8003604:	0800724c 	.word	0x0800724c
 8003608:	20000959 	.word	0x20000959
 800360c:	00000000 	.word	0x00000000

08003610 <__early_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8003610:	4b1f      	ldr	r3, [pc, #124]	; (8003690 <__early_init+0x80>)
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8003612:	4619      	mov	r1, r3
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	f042 0201 	orr.w	r2, r2, #1
 800361a:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 800361c:	680b      	ldr	r3, [r1, #0]
 800361e:	4a1c      	ldr	r2, [pc, #112]	; (8003690 <__early_init+0x80>)
 8003620:	079b      	lsls	r3, r3, #30
 8003622:	d5fb      	bpl.n	800361c <__early_init+0xc>
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  RCC->CFGR = 0;                            /* CFGR reset value.            */
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8003624:	4611      	mov	r1, r2
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8003626:	6813      	ldr	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8003628:	2000      	movs	r0, #0
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 800362a:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
 800362e:	6013      	str	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8003630:	6050      	str	r0, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8003632:	684b      	ldr	r3, [r1, #4]
 8003634:	4a16      	ldr	r2, [pc, #88]	; (8003690 <__early_init+0x80>)
 8003636:	f013 0f0c 	tst.w	r3, #12
 800363a:	d1fa      	bne.n	8003632 <__early_init+0x22>
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
  while (!(RCC->CR & RCC_CR_HSERDY))
 800363c:	4611      	mov	r1, r2
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
 800363e:	6813      	ldr	r3, [r2, #0]
 8003640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003644:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 8003646:	680b      	ldr	r3, [r1, #0]
 8003648:	4a11      	ldr	r2, [pc, #68]	; (8003690 <__early_init+0x80>)
 800364a:	0398      	lsls	r0, r3, #14
 800364c:	d5fb      	bpl.n	8003646 <__early_init+0x36>

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
  RCC->CR   |= RCC_CR_PLLON;
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800364e:	4611      	mov	r1, r2
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 8003650:	6853      	ldr	r3, [r2, #4]
 8003652:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8003656:	6053      	str	r3, [r2, #4]
  RCC->CR   |= RCC_CR_PLLON;
 8003658:	6813      	ldr	r3, [r2, #0]
 800365a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800365e:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8003660:	680b      	ldr	r3, [r1, #0]
 8003662:	4a0b      	ldr	r2, [pc, #44]	; (8003690 <__early_init+0x80>)
 8003664:	019b      	lsls	r3, r3, #6
 8003666:	d5fb      	bpl.n	8003660 <__early_init+0x50>

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8003668:	4611      	mov	r1, r2
/*
 * Early initialization code.
 * This initialization must be performed just after stack setup and before
 * any other initialization.
 */
void __early_init(void) {
 800366a:	b410      	push	{r4}
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 800366c:	4b09      	ldr	r3, [pc, #36]	; (8003694 <__early_init+0x84>)
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Clock settings.*/
#if STM32_HAS_USB
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 800366e:	4c0a      	ldr	r4, [pc, #40]	; (8003698 <__early_init+0x88>)
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8003670:	2012      	movs	r0, #18
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Clock settings.*/
#if STM32_HAS_USB
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 8003672:	6054      	str	r4, [r2, #4]
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8003674:	6018      	str	r0, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 8003676:	6853      	ldr	r3, [r2, #4]
 8003678:	f043 0302 	orr.w	r3, r3, #2
 800367c:	6053      	str	r3, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800367e:	684b      	ldr	r3, [r1, #4]
 8003680:	f003 030c 	and.w	r3, r3, #12
 8003684:	2b08      	cmp	r3, #8
 8003686:	d1fa      	bne.n	800367e <__early_init+0x6e>

  stm32_clock_init();
}
 8003688:	f85d 4b04 	ldr.w	r4, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	40021000 	.word	0x40021000
 8003694:	40022000 	.word	0x40022000
 8003698:	001d6400 	.word	0x001d6400
 800369c:	00000000 	.word	0x00000000

080036a0 <chPoolAlloc>:
 * @return              The pointer to the allocated object.
 * @retval NULL         if pool is empty.
 *
 * @api
 */
void *chPoolAlloc(memory_pool_t *mp) {
 80036a0:	b508      	push	{r3, lr}
 80036a2:	2220      	movs	r2, #32
 80036a4:	4603      	mov	r3, r0
 80036a6:	f382 8811 	msr	BASEPRI, r2
  void *objp;

  chDbgCheckClassI();
  chDbgCheck(mp != NULL);

  objp = mp->mp_next;
 80036aa:	6800      	ldr	r0, [r0, #0]
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (objp != NULL) {
 80036ac:	b128      	cbz	r0, 80036ba <chPoolAlloc+0x1a>
    mp->mp_next = mp->mp_next->ph_next;
 80036ae:	6802      	ldr	r2, [r0, #0]
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	2300      	movs	r3, #0
 80036b4:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  objp = chPoolAllocI(mp);
  chSysUnlock();

  return objp;
}
 80036b8:	bd08      	pop	{r3, pc}
  objp = mp->mp_next;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (objp != NULL) {
    mp->mp_next = mp->mp_next->ph_next;
  }
  else if (mp->mp_provider != NULL) {
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	2a00      	cmp	r2, #0
 80036be:	d0f8      	beq.n	80036b2 <chPoolAlloc+0x12>
    objp = mp->mp_provider(mp->mp_object_size);
 80036c0:	6858      	ldr	r0, [r3, #4]
 80036c2:	4790      	blx	r2
 80036c4:	2300      	movs	r3, #0
 80036c6:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  objp = chPoolAllocI(mp);
  chSysUnlock();

  return objp;
}
 80036ca:	bd08      	pop	{r3, pc}
 80036cc:	0000      	movs	r0, r0
	...

080036d0 <chHeapStatus>:
 *                      fragmented free space
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *sizep) {
 80036d0:	b570      	push	{r4, r5, r6, lr}
  union heap_header *qp;
  size_t n, sz;

  if (heapp == NULL) {
    heapp = &default_heap;
 80036d2:	4c0f      	ldr	r4, [pc, #60]	; (8003710 <chHeapStatus+0x40>)
 *                      fragmented free space
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *sizep) {
 80036d4:	460e      	mov	r6, r1
  union heap_header *qp;
  size_t n, sz;

  if (heapp == NULL) {
    heapp = &default_heap;
 80036d6:	2800      	cmp	r0, #0
 80036d8:	bf18      	it	ne
 80036da:	4604      	movne	r4, r0
  }

  H_LOCK(heapp);
 80036dc:	f104 0510 	add.w	r5, r4, #16
 80036e0:	4628      	mov	r0, r5
 80036e2:	f7fe f9b5 	bl	8001a50 <chMtxLock>
  sz = 0;
  n = 0;
  qp = &heapp->h_free;
  while (qp->h.u.next != NULL) {
 80036e6:	68a3      	ldr	r3, [r4, #8]
 80036e8:	b173      	cbz	r3, 8003708 <chHeapStatus+0x38>
 80036ea:	2200      	movs	r2, #0
 80036ec:	4614      	mov	r4, r2
    sz += qp->h.u.next->h.size;
 80036ee:	6858      	ldr	r0, [r3, #4]

  H_LOCK(heapp);
  sz = 0;
  n = 0;
  qp = &heapp->h_free;
  while (qp->h.u.next != NULL) {
 80036f0:	681b      	ldr	r3, [r3, #0]
    sz += qp->h.u.next->h.size;
    n++;
 80036f2:	3401      	adds	r4, #1
  H_LOCK(heapp);
  sz = 0;
  n = 0;
  qp = &heapp->h_free;
  while (qp->h.u.next != NULL) {
    sz += qp->h.u.next->h.size;
 80036f4:	4402      	add	r2, r0

  H_LOCK(heapp);
  sz = 0;
  n = 0;
  qp = &heapp->h_free;
  while (qp->h.u.next != NULL) {
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1f9      	bne.n	80036ee <chHeapStatus+0x1e>
    sz += qp->h.u.next->h.size;
    n++;
    qp = qp->h.u.next;
  }
  if (sizep != NULL) {
 80036fa:	b106      	cbz	r6, 80036fe <chHeapStatus+0x2e>
    *sizep = sz;
 80036fc:	6032      	str	r2, [r6, #0]
  }
  H_UNLOCK(heapp);
 80036fe:	4628      	mov	r0, r5
 8003700:	f7fe f906 	bl	8001910 <chMtxUnlock>

  return n;
}
 8003704:	4620      	mov	r0, r4
 8003706:	bd70      	pop	{r4, r5, r6, pc}
  if (heapp == NULL) {
    heapp = &default_heap;
  }

  H_LOCK(heapp);
  sz = 0;
 8003708:	461a      	mov	r2, r3
  n = 0;
 800370a:	461c      	mov	r4, r3
 800370c:	e7f5      	b.n	80036fa <chHeapStatus+0x2a>
 800370e:	bf00      	nop
 8003710:	200008e0 	.word	0x200008e0
	...

08003720 <chHeapFree>:
 *
 * @param[in] p         pointer to the memory block to be freed
 *
 * @api
 */
void chHeapFree(void *p) {
 8003720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  chDbgCheck(p != NULL);

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (union heap_header *)p - 1;
  /*lint -restore*/
  heapp = hp->h.u.heap;
 8003722:	f850 5c08 	ldr.w	r5, [r0, #-8]
 *
 * @param[in] p         pointer to the memory block to be freed
 *
 * @api
 */
void chHeapFree(void *p) {
 8003726:	4606      	mov	r6, r0
  hp = (union heap_header *)p - 1;
  /*lint -restore*/
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;

  H_LOCK(heapp);
 8003728:	f105 0710 	add.w	r7, r5, #16
  memory_heap_t *heapp;

  chDbgCheck(p != NULL);

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (union heap_header *)p - 1;
 800372c:	f1a0 0408 	sub.w	r4, r0, #8
  /*lint -restore*/
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;
 8003730:	3508      	adds	r5, #8

  H_LOCK(heapp);
 8003732:	4638      	mov	r0, r7
 8003734:	f7fe f98c 	bl	8001a50 <chMtxLock>

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (union heap_header *)p - 1;
  /*lint -restore*/
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;
 8003738:	462b      	mov	r3, r5

  H_LOCK(heapp);
  while (true) {
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
 800373a:	42ab      	cmp	r3, r5
 800373c:	d004      	beq.n	8003748 <chHeapFree+0x28>
 800373e:	42a3      	cmp	r3, r4
 8003740:	d302      	bcc.n	8003748 <chHeapFree+0x28>
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	42ab      	cmp	r3, r5
 8003746:	d1fa      	bne.n	800373e <chHeapFree+0x1e>
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
 8003748:	681a      	ldr	r2, [r3, #0]

  H_LOCK(heapp);
  while (true) {
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
 800374a:	b11a      	cbz	r2, 8003754 <chHeapFree+0x34>
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
 800374c:	4294      	cmp	r4, r2
 800374e:	d301      	bcc.n	8003754 <chHeapFree+0x34>
 8003750:	4613      	mov	r3, r2
 8003752:	e7f2      	b.n	800373a <chHeapFree+0x1a>
      /* Insertion after qp.*/
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
 8003754:	f856 1c04 	ldr.w	r1, [r6, #-4]
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
      /* Insertion after qp.*/
      hp->h.u.next = qp->h.u.next;
 8003758:	f846 2c08 	str.w	r2, [r6, #-8]
      qp->h.u.next = hp;
 800375c:	601c      	str	r4, [r3, #0]
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
 800375e:	f101 0208 	add.w	r2, r1, #8
 8003762:	f856 5c08 	ldr.w	r5, [r6, #-8]
 8003766:	18a0      	adds	r0, r4, r2
 8003768:	42a8      	cmp	r0, r5
 800376a:	d00a      	beq.n	8003782 <chHeapFree+0x62>
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
 800376c:	6859      	ldr	r1, [r3, #4]
 800376e:	f101 0208 	add.w	r2, r1, #8
 8003772:	441a      	add	r2, r3
 8003774:	4294      	cmp	r4, r2
 8003776:	d010      	beq.n	800379a <chHeapFree+0x7a>
      }
      break;
    }
    qp = qp->h.u.next;
  }
  H_UNLOCK(heapp);
 8003778:	4638      	mov	r0, r7

  return;
}
 800377a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      }
      break;
    }
    qp = qp->h.u.next;
  }
  H_UNLOCK(heapp);
 800377e:	f7fe b8c7 	b.w	8001910 <chMtxUnlock>
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
 8003782:	6845      	ldr	r5, [r0, #4]
        hp->h.u.next = hp->h.u.next->h.u.next;
 8003784:	58a0      	ldr	r0, [r4, r2]
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
 8003786:	194a      	adds	r2, r1, r5
 8003788:	3208      	adds	r2, #8
        hp->h.u.next = hp->h.u.next->h.u.next;
 800378a:	e906 0005 	stmdb	r6, {r0, r2}
      }
      if ((LIMIT(qp) == hp)) {
 800378e:	6859      	ldr	r1, [r3, #4]
 8003790:	f101 0208 	add.w	r2, r1, #8
 8003794:	441a      	add	r2, r3
 8003796:	4294      	cmp	r4, r2
 8003798:	d1ee      	bne.n	8003778 <chHeapFree+0x58>
        /* Merge with the previous block.*/
        qp->h.size += hp->h.size + sizeof(union heap_header);
        qp->h.u.next = hp->h.u.next;
 800379a:	e916 0005 	ldmdb	r6, {r0, r2}
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
        /* Merge with the previous block.*/
        qp->h.size += hp->h.size + sizeof(union heap_header);
 800379e:	440a      	add	r2, r1
 80037a0:	3208      	adds	r2, #8
        qp->h.u.next = hp->h.u.next;
 80037a2:	e883 0005 	stmia.w	r3, {r0, r2}
      }
      break;
    }
    qp = qp->h.u.next;
  }
  H_UNLOCK(heapp);
 80037a6:	4638      	mov	r0, r7

  return;
}
 80037a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      }
      break;
    }
    qp = qp->h.u.next;
  }
  H_UNLOCK(heapp);
 80037ac:	f7fe b8b0 	b.w	8001910 <chMtxUnlock>

080037b0 <chHeapAlloc>:
 * @return              A pointer to the allocated block.
 * @retval NULL         if the block cannot be allocated.
 *
 * @api
 */
void *chHeapAlloc(memory_heap_t *heapp, size_t size) {
 80037b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  union heap_header *qp, *hp, *fp;

  if (heapp == NULL) {
    heapp = &default_heap;
 80037b2:	4e21      	ldr	r6, [pc, #132]	; (8003838 <chHeapAlloc+0x88>)
  }

  size = MEM_ALIGN_NEXT(size);
 80037b4:	3107      	adds	r1, #7
 */
void *chHeapAlloc(memory_heap_t *heapp, size_t size) {
  union heap_header *qp, *hp, *fp;

  if (heapp == NULL) {
    heapp = &default_heap;
 80037b6:	2800      	cmp	r0, #0
 80037b8:	bf18      	it	ne
 80037ba:	4606      	movne	r6, r0
  }

  size = MEM_ALIGN_NEXT(size);
  qp = &heapp->h_free;

  H_LOCK(heapp);
 80037bc:	f106 0710 	add.w	r7, r6, #16
 80037c0:	4638      	mov	r0, r7

  if (heapp == NULL) {
    heapp = &default_heap;
  }

  size = MEM_ALIGN_NEXT(size);
 80037c2:	f021 0507 	bic.w	r5, r1, #7
  qp = &heapp->h_free;
 80037c6:	f106 0408 	add.w	r4, r6, #8

  H_LOCK(heapp);
 80037ca:	f7fe f941 	bl	8001a50 <chMtxLock>
 80037ce:	e003      	b.n	80037d8 <chHeapAlloc+0x28>
  while (qp->h.u.next != NULL) {
    hp = qp->h.u.next;
    if (hp->h.size >= size) {
 80037d0:	6843      	ldr	r3, [r0, #4]
 80037d2:	429d      	cmp	r5, r3
 80037d4:	d912      	bls.n	80037fc <chHeapAlloc+0x4c>
 80037d6:	4604      	mov	r4, r0

  size = MEM_ALIGN_NEXT(size);
  qp = &heapp->h_free;

  H_LOCK(heapp);
  while (qp->h.u.next != NULL) {
 80037d8:	6820      	ldr	r0, [r4, #0]
 80037da:	2800      	cmp	r0, #0
 80037dc:	d1f8      	bne.n	80037d0 <chHeapAlloc+0x20>
      return (void *)(hp + 1);
      /*lint -restore*/
    }
    qp = hp;
  }
  H_UNLOCK(heapp);
 80037de:	4638      	mov	r0, r7
 80037e0:	f7fe f896 	bl	8001910 <chMtxUnlock>

  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->h_provider != NULL) {
 80037e4:	6833      	ldr	r3, [r6, #0]
 80037e6:	b323      	cbz	r3, 8003832 <chHeapAlloc+0x82>
    hp = heapp->h_provider(size + sizeof(union heap_header));
 80037e8:	f105 0008 	add.w	r0, r5, #8
 80037ec:	4798      	blx	r3
    if (hp != NULL) {
 80037ee:	b300      	cbz	r0, 8003832 <chHeapAlloc+0x82>
      hp->h.u.heap = heapp;
 80037f0:	6006      	str	r6, [r0, #0]
      hp->h.size = size;
 80037f2:	6045      	str	r5, [r0, #4]
      hp++;
 80037f4:	f100 0408 	add.w	r4, r0, #8
      /*lint -restore*/
    }
  }

  return NULL;
}
 80037f8:	4620      	mov	r0, r4
 80037fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  H_LOCK(heapp);
  while (qp->h.u.next != NULL) {
    hp = qp->h.u.next;
    if (hp->h.size >= size) {
      if (hp->h.size < (size + sizeof(union heap_header))) {
 80037fc:	f105 0108 	add.w	r1, r5, #8
 8003800:	4299      	cmp	r1, r3
 8003802:	d909      	bls.n	8003818 <chHeapAlloc+0x68>
        /* Gets the whole block even if it is slightly bigger than the
           requested size because the fragment would be too small to be
           useful.*/
        qp->h.u.next = hp->h.u.next;
 8003804:	6803      	ldr	r3, [r0, #0]
 8003806:	6023      	str	r3, [r4, #0]
        fp->h.u.next = hp->h.u.next;
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
        qp->h.u.next = fp;
        hp->h.size = size;
      }
      hp->h.u.heap = heapp;
 8003808:	4604      	mov	r4, r0
      H_UNLOCK(heapp);
 800380a:	4638      	mov	r0, r7
        fp->h.u.next = hp->h.u.next;
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
        qp->h.u.next = fp;
        hp->h.size = size;
      }
      hp->h.u.heap = heapp;
 800380c:	f844 6b08 	str.w	r6, [r4], #8
      H_UNLOCK(heapp);
 8003810:	f7fe f87e 	bl	8001910 <chMtxUnlock>
      /*lint -restore*/
    }
  }

  return NULL;
}
 8003814:	4620      	mov	r0, r4
 8003816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003818:	f06f 0e07 	mvn.w	lr, #7
 800381c:	ebc5 0e0e 	rsb	lr, r5, lr
        /* Block bigger enough, must split it.*/
        /*lint -save -e9087 [11.3] Safe cast.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
        /*lint -restore*/
        fp->h.u.next = hp->h.u.next;
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
 8003820:	449e      	add	lr, r3
      else {
        /* Block bigger enough, must split it.*/
        /*lint -save -e9087 [11.3] Safe cast.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
        /*lint -restore*/
        fp->h.u.next = hp->h.u.next;
 8003822:	6803      	ldr	r3, [r0, #0]
        qp->h.u.next = hp->h.u.next;
      }
      else {
        /* Block bigger enough, must split it.*/
        /*lint -save -e9087 [11.3] Safe cast.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
 8003824:	1842      	adds	r2, r0, r1
        /*lint -restore*/
        fp->h.u.next = hp->h.u.next;
 8003826:	5043      	str	r3, [r0, r1]
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
 8003828:	f8c2 e004 	str.w	lr, [r2, #4]
        qp->h.u.next = fp;
 800382c:	6022      	str	r2, [r4, #0]
        hp->h.size = size;
 800382e:	6045      	str	r5, [r0, #4]
 8003830:	e7ea      	b.n	8003808 <chHeapAlloc+0x58>
      return (void *)hp;
      /*lint -restore*/
    }
  }

  return NULL;
 8003832:	2400      	movs	r4, #0
 8003834:	e7e0      	b.n	80037f8 <chHeapAlloc+0x48>
 8003836:	bf00      	nop
 8003838:	200008e0 	.word	0x200008e0
 800383c:	00000000 	.word	0x00000000

08003840 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
 8003840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003844:	b083      	sub	sp, #12
 8003846:	4604      	mov	r4, r0
 8003848:	468b      	mov	fp, r1
 800384a:	4615      	mov	r5, r2
 800384c:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 800384e:	69c7      	ldr	r7, [r0, #28]
 8003850:	f04f 0820 	mov.w	r8, #32
 8003854:	f388 8811 	msr	BASEPRI, r8
  size_t w = 0;
 8003858:	2600      	movs	r6, #0
 800385a:	46b1      	mov	r9, r6
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 800385c:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 800385e:	f10b 0a01 	add.w	sl, fp, #1

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 8003862:	b1fb      	cbz	r3, 80038a4 <chOQWriteTimeout+0x64>
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8003864:	6962      	ldr	r2, [r4, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 8003866:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8003868:	1c50      	adds	r0, r2, #1
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 800386a:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
 800386c:	6160      	str	r0, [r4, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 800386e:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8003870:	f89b 3000 	ldrb.w	r3, [fp]
 8003874:	7013      	strb	r3, [r2, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 8003876:	6923      	ldr	r3, [r4, #16]
 8003878:	6962      	ldr	r2, [r4, #20]
 800387a:	429a      	cmp	r2, r3
      oqp->q_wrptr = oqp->q_buffer;
 800387c:	bf24      	itt	cs
 800387e:	68e3      	ldrcs	r3, [r4, #12]
 8003880:	6163      	strcs	r3, [r4, #20]
    }

    if (nfy != NULL) {
 8003882:	b10f      	cbz	r7, 8003888 <chOQWriteTimeout+0x48>
      nfy(oqp);
 8003884:	4620      	mov	r0, r4
 8003886:	47b8      	blx	r7
 8003888:	f389 8811 	msr	BASEPRI, r9
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
    if (--n == 0U) {
 800388c:	3d01      	subs	r5, #1
    if (nfy != NULL) {
      nfy(oqp);
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
 800388e:	f106 0601 	add.w	r6, r6, #1
    if (--n == 0U) {
 8003892:	d011      	beq.n	80038b8 <chOQWriteTimeout+0x78>
 8003894:	f388 8811 	msr	BASEPRI, r8
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8003898:	46d3      	mov	fp, sl
 800389a:	68a3      	ldr	r3, [r4, #8]
 800389c:	f10b 0a01 	add.w	sl, fp, #1

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1df      	bne.n	8003864 <chOQWriteTimeout+0x24>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
 80038a4:	4620      	mov	r0, r4
 80038a6:	9901      	ldr	r1, [sp, #4]
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	f7fe fa19 	bl	8001ce0 <chThdEnqueueTimeoutS>
 80038ae:	9b00      	ldr	r3, [sp, #0]
 80038b0:	2800      	cmp	r0, #0
 80038b2:	d0d3      	beq.n	800385c <chOQWriteTimeout+0x1c>
 80038b4:	f383 8811 	msr	BASEPRI, r3
    if (--n == 0U) {
      return w;
    }
    chSysLock();
  }
}
 80038b8:	4630      	mov	r0, r6
 80038ba:	b003      	add	sp, #12
 80038bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080038c0 <writet.lto_priv.82>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
}

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 80038c0:	3030      	adds	r0, #48	; 0x30
 80038c2:	f7ff bfbd 	b.w	8003840 <chOQWriteTimeout>
 80038c6:	bf00      	nop
	...

080038d0 <write.lto_priv.76>:
 * queue-level function or macro.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 80038d0:	3030      	adds	r0, #48	; 0x30
 80038d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038d6:	f7ff bfb3 	b.w	8003840 <chOQWriteTimeout>
 80038da:	bf00      	nop
 80038dc:	0000      	movs	r0, r0
	...

080038e0 <chOQGetI>:
 * @return              The byte value from the queue.
 * @retval Q_EMPTY      if the queue is empty.
 *
 * @iclass
 */
msg_t chOQGetI(output_queue_t *oqp) {
 80038e0:	b538      	push	{r3, r4, r5, lr}
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 80038e2:	6942      	ldr	r2, [r0, #20]
 80038e4:	6983      	ldr	r3, [r0, #24]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d019      	beq.n	800391e <chOQGetI+0x3e>

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 80038ea:	6882      	ldr	r2, [r0, #8]
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
 80038ec:	6905      	ldr	r5, [r0, #16]
  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 80038ee:	1c59      	adds	r1, r3, #1

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 80038f0:	3201      	adds	r2, #1
 80038f2:	6082      	str	r2, [r0, #8]
  b = *oqp->q_rdptr++;
 80038f4:	6181      	str	r1, [r0, #24]
  if (oqp->q_rdptr >= oqp->q_top) {
 80038f6:	42a9      	cmp	r1, r5
  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 80038f8:	781c      	ldrb	r4, [r3, #0]
  if (oqp->q_rdptr >= oqp->q_top) {
 80038fa:	d20d      	bcs.n	8003918 <chOQGetI+0x38>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 80038fc:	6802      	ldr	r2, [r0, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 80038fe:	4290      	cmp	r0, r2
 8003900:	d008      	beq.n	8003914 <chOQGetI+0x34>
 8003902:	4603      	mov	r3, r0
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8003904:	6811      	ldr	r1, [r2, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8003906:	2500      	movs	r5, #0
 8003908:	6001      	str	r1, [r0, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800390a:	604b      	str	r3, [r1, #4]
  (void) chSchReadyI(tp);
 800390c:	4610      	mov	r0, r2

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 800390e:	6215      	str	r5, [r2, #32]
  (void) chSchReadyI(tp);
 8003910:	f7fd ff0e 	bl	8001730 <chSchReadyI>
    oqp->q_rdptr = oqp->q_buffer;
  }

  chThdDequeueNextI(&oqp->q_waiting, Q_OK);

  return (msg_t)b;
 8003914:	4620      	mov	r0, r4
 8003916:	bd38      	pop	{r3, r4, r5, pc}
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
    oqp->q_rdptr = oqp->q_buffer;
 8003918:	68c3      	ldr	r3, [r0, #12]
 800391a:	6183      	str	r3, [r0, #24]
 800391c:	e7ee      	b.n	80038fc <chOQGetI+0x1c>
 800391e:	6882      	ldr	r2, [r0, #8]
 8003920:	2a00      	cmp	r2, #0
 8003922:	d0e2      	beq.n	80038ea <chOQGetI+0xa>
  uint8_t b;

  chDbgCheckClassI();

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
 8003924:	f06f 0002 	mvn.w	r0, #2
 8003928:	bd38      	pop	{r3, r4, r5, pc}
 800392a:	bf00      	nop
 800392c:	0000      	movs	r0, r0
	...

08003930 <VectorD4>:
/**
 * @brief   USART1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8003930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
 8003934:	4f4b      	ldr	r7, [pc, #300]	; (8003a64 <VectorD4+0x134>)
 8003936:	f8d7 52ac 	ldr.w	r5, [r7, #684]	; 0x2ac
  uint16_t cr1 = u->CR1;
 800393a:	f8d5 800c 	ldr.w	r8, [r5, #12]
  uint16_t sr = u->SR;
 800393e:	682b      	ldr	r3, [r5, #0]

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 8003940:	05de      	lsls	r6, r3, #23
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
  uint16_t cr1 = u->CR1;
  uint16_t sr = u->SR;
 8003942:	b29c      	uxth	r4, r3

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 8003944:	d45e      	bmi.n	8003a04 <VectorD4+0xd4>
 8003946:	2320      	movs	r3, #32
 8003948:	f383 8811 	msr	BASEPRI, r3
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800394c:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8003950:	d108      	bne.n	8003964 <VectorD4+0x34>
 8003952:	e031      	b.n	80039b8 <VectorD4+0x88>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
    if (sr & USART_SR_RXNE)
 8003954:	06a0      	lsls	r0, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
 8003956:	686e      	ldr	r6, [r5, #4]
    if (sr & USART_SR_RXNE)
 8003958:	d41d      	bmi.n	8003996 <VectorD4+0x66>
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 800395a:	682c      	ldr	r4, [r5, #0]
 800395c:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800395e:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8003962:	d029      	beq.n	80039b8 <VectorD4+0x88>
               USART_SR_PE)) {
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8003964:	0720      	lsls	r0, r4, #28
 8003966:	d0f5      	beq.n	8003954 <VectorD4+0x24>
 */
static void set_error(SerialDriver *sdp, uint16_t sr) {
  eventflags_t sts = 0;

  if (sr & USART_SR_ORE)
    sts |= SD_OVERRUN_ERROR;
 8003968:	f014 0f08 	tst.w	r4, #8
 800396c:	bf0c      	ite	eq
 800396e:	2100      	moveq	r1, #0
 8003970:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 8003972:	07e2      	lsls	r2, r4, #31
    sts |= SD_PARITY_ERROR;
 8003974:	bf48      	it	mi
 8003976:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 800397a:	07a3      	lsls	r3, r4, #30
    sts |= SD_FRAMING_ERROR;
 800397c:	bf48      	it	mi
 800397e:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 8003982:	0766      	lsls	r6, r4, #29
    sts |= SD_NOISE_ERROR;
 8003984:	bf48      	it	mi
 8003986:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 800398a:	4837      	ldr	r0, [pc, #220]	; (8003a68 <VectorD4+0x138>)
 800398c:	f7fd ff50 	bl	8001830 <chEvtBroadcastFlagsI>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
    if (sr & USART_SR_RXNE)
 8003990:	06a0      	lsls	r0, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
 8003992:	686e      	ldr	r6, [r5, #4]
    if (sr & USART_SR_RXNE)
 8003994:	d5e1      	bpl.n	800395a <VectorD4+0x2a>
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 8003996:	697b      	ldr	r3, [r7, #20]
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8003998:	b37b      	cbz	r3, 80039fa <VectorD4+0xca>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < Q_OK)
 800399a:	b2f1      	uxtb	r1, r6
 800399c:	4833      	ldr	r0, [pc, #204]	; (8003a6c <VectorD4+0x13c>)
 800399e:	f7fd fedf 	bl	8001760 <chIQPutI>
 80039a2:	2800      	cmp	r0, #0
 80039a4:	dad9      	bge.n	800395a <VectorD4+0x2a>
 80039a6:	4830      	ldr	r0, [pc, #192]	; (8003a68 <VectorD4+0x138>)
 80039a8:	2180      	movs	r1, #128	; 0x80
 80039aa:	f7fd ff41 	bl	8001830 <chEvtBroadcastFlagsI>
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 80039ae:	682c      	ldr	r4, [r5, #0]
 80039b0:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80039b2:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 80039b6:	d1d5      	bne.n	8003964 <VectorD4+0x34>
 80039b8:	2300      	movs	r3, #0
 80039ba:	f383 8811 	msr	BASEPRI, r3
    sr = u->SR;
  }
  osalSysUnlockFromISR();

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 80039be:	f018 0f80 	tst.w	r8, #128	; 0x80
 80039c2:	d001      	beq.n	80039c8 <VectorD4+0x98>
 80039c4:	0622      	lsls	r2, r4, #24
 80039c6:	d42c      	bmi.n	8003a22 <VectorD4+0xf2>
      u->DR = b;
    osalSysUnlockFromISR();
  }

  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
 80039c8:	0663      	lsls	r3, r4, #25
 80039ca:	d512      	bpl.n	80039f2 <VectorD4+0xc2>
 80039cc:	2320      	movs	r3, #32
 80039ce:	f383 8811 	msr	BASEPRI, r3
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 80039d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039d6:	4823      	ldr	r0, [pc, #140]	; (8003a64 <VectorD4+0x134>)
 80039d8:	429a      	cmp	r2, r3
 80039da:	d02f      	beq.n	8003a3c <VectorD4+0x10c>
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 80039dc:	f64f 73bf 	movw	r3, #65471	; 0xffbf
    u->SR = ~USART_SR_TC;
 80039e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 80039e4:	ea08 0303 	and.w	r3, r8, r3
 80039e8:	60eb      	str	r3, [r5, #12]
 80039ea:	2300      	movs	r3, #0
    u->SR = ~USART_SR_TC;
 80039ec:	602a      	str	r2, [r5, #0]
 80039ee:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD1);

  OSAL_IRQ_EPILOGUE();
}
 80039f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD1);

  OSAL_IRQ_EPILOGUE();
 80039f6:	f7ff b99b 	b.w	8002d30 <_port_irq_epilogue>
 80039fa:	481b      	ldr	r0, [pc, #108]	; (8003a68 <VectorD4+0x138>)
 80039fc:	2104      	movs	r1, #4
 80039fe:	f7fd ff17 	bl	8001830 <chEvtBroadcastFlagsI>
 8003a02:	e7ca      	b.n	800399a <VectorD4+0x6a>
 8003a04:	2320      	movs	r3, #32
 8003a06:	f383 8811 	msr	BASEPRI, r3
 8003a0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a0e:	1d38      	adds	r0, r7, #4
 8003a10:	f7fd ff0e 	bl	8001830 <chEvtBroadcastFlagsI>

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
    osalSysLockFromISR();
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
    u->SR = ~USART_SR_LBD;
 8003a14:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8003a18:	602b      	str	r3, [r5, #0]
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	f383 8811 	msr	BASEPRI, r3
 8003a20:	e791      	b.n	8003946 <VectorD4+0x16>
 8003a22:	2320      	movs	r3, #32
 8003a24:	f383 8811 	msr	BASEPRI, r3

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
 8003a28:	4811      	ldr	r0, [pc, #68]	; (8003a70 <VectorD4+0x140>)
 8003a2a:	f7ff ff59 	bl	80038e0 <chOQGetI>
    if (b < Q_OK) {
 8003a2e:	2800      	cmp	r0, #0
 8003a30:	db0c      	blt.n	8003a4c <VectorD4+0x11c>
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
    }
    else
      u->DR = b;
 8003a32:	6068      	str	r0, [r5, #4]
 8003a34:	2300      	movs	r3, #0
 8003a36:	f383 8811 	msr	BASEPRI, r3
 8003a3a:	e7c5      	b.n	80039c8 <VectorD4+0x98>
 8003a3c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d0cc      	beq.n	80039dc <VectorD4+0xac>
 8003a42:	3004      	adds	r0, #4
 8003a44:	2110      	movs	r1, #16
 8003a46:	f7fd fef3 	bl	8001830 <chEvtBroadcastFlagsI>
 8003a4a:	e7c7      	b.n	80039dc <VectorD4+0xac>
 8003a4c:	4806      	ldr	r0, [pc, #24]	; (8003a68 <VectorD4+0x138>)
 8003a4e:	2108      	movs	r1, #8
 8003a50:	f7fd feee 	bl	8001830 <chEvtBroadcastFlagsI>
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
    if (b < Q_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 8003a54:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8003a58:	ea08 0303 	and.w	r3, r8, r3
 8003a5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a60:	60eb      	str	r3, [r5, #12]
 8003a62:	e7e7      	b.n	8003a34 <VectorD4+0x104>
 8003a64:	2000120c 	.word	0x2000120c
 8003a68:	20001210 	.word	0x20001210
 8003a6c:	20001218 	.word	0x20001218
 8003a70:	2000123c 	.word	0x2000123c
	...

08003a80 <mbox1_setup.lto_priv.136>:
 * Messages are posted/fetched from a mailbox in carefully designed sequences
 * in order to stimulate all the possible code paths inside the mailbox.<br>
 * The test expects to find a consistent mailbox status after each operation.
 */

static void mbox1_setup(void) {
 8003a80:	b470      	push	{r4, r5, r6}
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, cnt_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (cnt_t)0));

  mbp->mb_buffer = buf;
 8003a82:	4b0b      	ldr	r3, [pc, #44]	; (8003ab0 <mbox1_setup.lto_priv.136+0x30>)
 8003a84:	4a0b      	ldr	r2, [pc, #44]	; (8003ab4 <mbox1_setup.lto_priv.136+0x34>)
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));

  queue_init(&sp->s_queue);
  sp->s_cnt = n;
 8003a86:	2505      	movs	r5, #5
  mbp->mb_rdptr = buf;
  mbp->mb_wrptr = buf;
  mbp->mb_top = &buf[n];
 8003a88:	f102 0614 	add.w	r6, r2, #20
 8003a8c:	2400      	movs	r4, #0
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8003a8e:	f103 001c 	add.w	r0, r3, #28
 8003a92:	f103 0110 	add.w	r1, r3, #16
 8003a96:	605e      	str	r6, [r3, #4]
 8003a98:	625d      	str	r5, [r3, #36]	; 0x24
 8003a9a:	619c      	str	r4, [r3, #24]
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, cnt_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (cnt_t)0));

  mbp->mb_buffer = buf;
 8003a9c:	601a      	str	r2, [r3, #0]
  mbp->mb_rdptr = buf;
 8003a9e:	60da      	str	r2, [r3, #12]
  mbp->mb_wrptr = buf;
 8003aa0:	609a      	str	r2, [r3, #8]
 8003aa2:	61d8      	str	r0, [r3, #28]
  tqp->p_prev = (thread_t *)tqp;
 8003aa4:	6218      	str	r0, [r3, #32]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8003aa6:	6119      	str	r1, [r3, #16]
  tqp->p_prev = (thread_t *)tqp;
 8003aa8:	6159      	str	r1, [r3, #20]

  chMBObjectInit(&mb1, (msg_t *)test.wa.T0, MB_SIZE);
}
 8003aaa:	bc70      	pop	{r4, r5, r6}
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	200008ac 	.word	0x200008ac
 8003ab4:	20000a30 	.word	0x20000a30
	...

08003ac0 <mtx8_setup.lto_priv.133>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8003ac0:	4a06      	ldr	r2, [pc, #24]	; (8003adc <mtx8_setup.lto_priv.133+0x1c>)
 8003ac2:	4b07      	ldr	r3, [pc, #28]	; (8003ae0 <mtx8_setup.lto_priv.133+0x20>)
 8003ac4:	4907      	ldr	r1, [pc, #28]	; (8003ae4 <mtx8_setup.lto_priv.133+0x24>)
 8003ac6:	2000      	movs	r0, #0
 8003ac8:	6009      	str	r1, [r1, #0]
  tqp->p_prev = (thread_t *)tqp;
 8003aca:	6049      	str	r1, [r1, #4]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8003acc:	6012      	str	r2, [r2, #0]
  tqp->p_prev = (thread_t *)tqp;
 8003ace:	6052      	str	r2, [r2, #4]
 8003ad0:	6090      	str	r0, [r2, #8]
 8003ad2:	6098      	str	r0, [r3, #8]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8003ad4:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8003ad6:	605b      	str	r3, [r3, #4]
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	20000824 	.word	0x20000824
 8003ae0:	20000834 	.word	0x20000834
 8003ae4:	200008d4 	.word	0x200008d4
	...

08003af0 <mtx7_setup.lto_priv.131>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8003af0:	4b04      	ldr	r3, [pc, #16]	; (8003b04 <mtx7_setup.lto_priv.131+0x14>)
 8003af2:	4a05      	ldr	r2, [pc, #20]	; (8003b08 <mtx7_setup.lto_priv.131+0x18>)
 8003af4:	2100      	movs	r1, #0
 8003af6:	6012      	str	r2, [r2, #0]
  tqp->p_prev = (thread_t *)tqp;
 8003af8:	6052      	str	r2, [r2, #4]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8003afa:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8003afc:	605b      	str	r3, [r3, #4]
 8003afe:	6099      	str	r1, [r3, #8]
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	20000824 	.word	0x20000824
 8003b08:	200008d4 	.word	0x200008d4
 8003b0c:	00000000 	.word	0x00000000

08003b10 <mtx6_setup.lto_priv.129>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8003b10:	4b04      	ldr	r3, [pc, #16]	; (8003b24 <mtx6_setup.lto_priv.129+0x14>)
 8003b12:	4a05      	ldr	r2, [pc, #20]	; (8003b28 <mtx6_setup.lto_priv.129+0x18>)
 8003b14:	2100      	movs	r1, #0
 8003b16:	6012      	str	r2, [r2, #0]
  tqp->p_prev = (thread_t *)tqp;
 8003b18:	6052      	str	r2, [r2, #4]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8003b1a:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8003b1c:	605b      	str	r3, [r3, #4]
 8003b1e:	6099      	str	r1, [r3, #8]
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	20000824 	.word	0x20000824
 8003b28:	200008d4 	.word	0x200008d4
 8003b2c:	00000000 	.word	0x00000000

08003b30 <mbox1_execute.lto_priv.137>:

static void mbox1_execute(void) {
 8003b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b34:	2320      	movs	r3, #32
 8003b36:	b082      	sub	sp, #8
 8003b38:	f383 8811 	msr	BASEPRI, r3
 8003b3c:	4d95      	ldr	r5, [pc, #596]	; (8003d94 <mbox1_execute.lto_priv.137+0x264>)
  unsigned i;

  /*
   * Testing initial space.
   */
  test_assert_lock(1, chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
 8003b3e:	2001      	movs	r0, #1
 8003b40:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8003b42:	f1a1 0105 	sub.w	r1, r1, #5
 8003b46:	fab1 f181 	clz	r1, r1
 8003b4a:	0949      	lsrs	r1, r1, #5
 8003b4c:	f7ff fb38 	bl	80031c0 <_test_assert>
 8003b50:	2800      	cmp	r0, #0
 8003b52:	f040 8089 	bne.w	8003c68 <mbox1_execute.lto_priv.137+0x138>
 8003b56:	f380 8811 	msr	BASEPRI, r0
 8003b5a:	2442      	movs	r4, #66	; 0x42

  /*
   * Testing enqueuing and backward circularity.
   */
  for (i = 0; i < MB_SIZE - 1; i++) {
    msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
 8003b5c:	4620      	mov	r0, r4
 8003b5e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003b62:	f002 fd25 	bl	80065b0 <chMBPost.constprop.33>
    test_assert(2, msg1 == MSG_OK, "wrong wake-up message");
 8003b66:	fab0 f180 	clz	r1, r0
 8003b6a:	2002      	movs	r0, #2
 8003b6c:	0949      	lsrs	r1, r1, #5
 8003b6e:	f7ff fb27 	bl	80031c0 <_test_assert>
 8003b72:	3401      	adds	r4, #1
 8003b74:	b970      	cbnz	r0, 8003b94 <mbox1_execute.lto_priv.137+0x64>
  test_assert_lock(1, chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");

  /*
   * Testing enqueuing and backward circularity.
   */
  for (i = 0; i < MB_SIZE - 1; i++) {
 8003b76:	2c46      	cmp	r4, #70	; 0x46
 8003b78:	d1f0      	bne.n	8003b5c <mbox1_execute.lto_priv.137+0x2c>
    msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
    test_assert(2, msg1 == MSG_OK, "wrong wake-up message");
  }
  msg1 = chMBPostAhead(&mb1, 'A', TIME_INFINITE);
 8003b7a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003b7e:	2041      	movs	r0, #65	; 0x41
 8003b80:	f002 fd5e 	bl	8006640 <chMBPostAhead.constprop.31>
  test_assert(3, msg1 == MSG_OK, "wrong wake-up message");
 8003b84:	fab0 f180 	clz	r1, r0
 8003b88:	2003      	movs	r0, #3
 8003b8a:	0949      	lsrs	r1, r1, #5
 8003b8c:	f7ff fb18 	bl	80031c0 <_test_assert>
 8003b90:	2800      	cmp	r0, #0
 8003b92:	d06f      	beq.n	8003c74 <mbox1_execute.lto_priv.137+0x144>
   */
  test_assert_lock(44, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
  test_assert_lock(45, chMBGetUsedCountI(&mb1) == 0, "still full");
  test_assert_lock(46, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
  test_assert_lock(47, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
}
 8003b94:	b002      	add	sp, #8
 8003b96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b9a:	f386 8811 	msr	BASEPRI, r6
 8003b9e:	f387 8811 	msr	BASEPRI, r7
    test_assert(39, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
  }
  test_assert_sequence(40, "ABCDE");
  test_assert_lock(41, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
  test_assert_lock(42, chMBGetUsedCountI(&mb1) == 0, "still full");
 8003ba2:	69a1      	ldr	r1, [r4, #24]
 8003ba4:	202a      	movs	r0, #42	; 0x2a
 8003ba6:	fab1 f181 	clz	r1, r1
 8003baa:	0949      	lsrs	r1, r1, #5
 8003bac:	f7ff fb08 	bl	80031c0 <_test_assert>
 8003bb0:	2800      	cmp	r0, #0
 8003bb2:	f040 8299 	bne.w	80040e8 <mbox1_execute.lto_priv.137+0x5b8>
 8003bb6:	f386 8811 	msr	BASEPRI, r6
  test_assert(43, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8003bba:	68e1      	ldr	r1, [r4, #12]
 8003bbc:	68a3      	ldr	r3, [r4, #8]
 8003bbe:	202b      	movs	r0, #43	; 0x2b
 8003bc0:	ebc3 0e01 	rsb	lr, r3, r1
 8003bc4:	f1de 0100 	rsbs	r1, lr, #0
 8003bc8:	eb41 010e 	adc.w	r1, r1, lr
 8003bcc:	f7ff faf8 	bl	80031c0 <_test_assert>
 8003bd0:	2800      	cmp	r0, #0
 8003bd2:	d1df      	bne.n	8003b94 <mbox1_execute.lto_priv.137+0x64>
 8003bd4:	f387 8811 	msr	BASEPRI, r7
void chMBResetI(mailbox_t *mbp) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->mb_wrptr = mbp->mb_buffer;
 8003bd8:	6823      	ldr	r3, [r4, #0]
  mbp->mb_rdptr = mbp->mb_buffer;
  chSemResetI(&mbp->mb_emptysem, (cnt_t)(mbp->mb_top - mbp->mb_buffer));
 8003bda:	6862      	ldr	r2, [r4, #4]
 8003bdc:	f104 001c 	add.w	r0, r4, #28
 8003be0:	1ad1      	subs	r1, r2, r3
 8003be2:	1089      	asrs	r1, r1, #2
void chMBResetI(mailbox_t *mbp) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->mb_wrptr = mbp->mb_buffer;
 8003be4:	60a3      	str	r3, [r4, #8]
  mbp->mb_rdptr = mbp->mb_buffer;
 8003be6:	60e3      	str	r3, [r4, #12]
  chSemResetI(&mbp->mb_emptysem, (cnt_t)(mbp->mb_top - mbp->mb_buffer));
 8003be8:	f7fd ff5a 	bl	8001aa0 <chSemResetI>
  chSemResetI(&mbp->mb_fullsem, (cnt_t)0);
 8003bec:	f104 0010 	add.w	r0, r4, #16
 8003bf0:	4631      	mov	r1, r6
 8003bf2:	f7fd ff55 	bl	8001aa0 <chSemResetI>
 */
void chMBReset(mailbox_t *mbp) {

  chSysLock();
  chMBResetI(mbp);
  chSchRescheduleS();
 8003bf6:	f7fd fc1b 	bl	8001430 <chSchRescheduleS>
 8003bfa:	f386 8811 	msr	BASEPRI, r6
 8003bfe:	f387 8811 	msr	BASEPRI, r7
  chMBReset(&mb1);

  /*
   * Re-testing final conditions.
   */
  test_assert_lock(44, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8003c02:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003c04:	202c      	movs	r0, #44	; 0x2c
 8003c06:	1f4d      	subs	r5, r1, #5
 8003c08:	4269      	negs	r1, r5
 8003c0a:	4169      	adcs	r1, r5
 8003c0c:	f7ff fad8 	bl	80031c0 <_test_assert>
 8003c10:	2800      	cmp	r0, #0
 8003c12:	f040 8269 	bne.w	80040e8 <mbox1_execute.lto_priv.137+0x5b8>
 8003c16:	f386 8811 	msr	BASEPRI, r6
 8003c1a:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(45, chMBGetUsedCountI(&mb1) == 0, "still full");
 8003c1e:	69a1      	ldr	r1, [r4, #24]
 8003c20:	202d      	movs	r0, #45	; 0x2d
 8003c22:	fab1 f181 	clz	r1, r1
 8003c26:	0949      	lsrs	r1, r1, #5
 8003c28:	f7ff faca 	bl	80031c0 <_test_assert>
 8003c2c:	2800      	cmp	r0, #0
 8003c2e:	f040 825b 	bne.w	80040e8 <mbox1_execute.lto_priv.137+0x5b8>
 8003c32:	f386 8811 	msr	BASEPRI, r6
 8003c36:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(46, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
 8003c3a:	6821      	ldr	r1, [r4, #0]
 8003c3c:	68a3      	ldr	r3, [r4, #8]
 8003c3e:	202e      	movs	r0, #46	; 0x2e
 8003c40:	1aca      	subs	r2, r1, r3
 8003c42:	4251      	negs	r1, r2
 8003c44:	4151      	adcs	r1, r2
 8003c46:	f7ff fabb 	bl	80031c0 <_test_assert>
 8003c4a:	2800      	cmp	r0, #0
 8003c4c:	f040 824c 	bne.w	80040e8 <mbox1_execute.lto_priv.137+0x5b8>
 8003c50:	f386 8811 	msr	BASEPRI, r6
 8003c54:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(47, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
 8003c58:	6821      	ldr	r1, [r4, #0]
 8003c5a:	68e3      	ldr	r3, [r4, #12]
 8003c5c:	202f      	movs	r0, #47	; 0x2f
 8003c5e:	1acb      	subs	r3, r1, r3
 8003c60:	4259      	negs	r1, r3
 8003c62:	4159      	adcs	r1, r3
 8003c64:	f7ff faac 	bl	80031c0 <_test_assert>
 8003c68:	2300      	movs	r3, #0
 8003c6a:	f383 8811 	msr	BASEPRI, r3
}
 8003c6e:	b002      	add	sp, #8
 8003c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_assert(3, msg1 == MSG_OK, "wrong wake-up message");

  /*
   * Testing post timeout.
   */
  msg1 = chMBPost(&mb1, 'X', 1);
 8003c74:	2101      	movs	r1, #1
 8003c76:	2058      	movs	r0, #88	; 0x58
 8003c78:	f002 fc9a 	bl	80065b0 <chMBPost.constprop.33>
  test_assert(4, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8003c7c:	f1a0 31ff 	sub.w	r1, r0, #4294967295
 8003c80:	fab1 f181 	clz	r1, r1
 8003c84:	2004      	movs	r0, #4
 8003c86:	0949      	lsrs	r1, r1, #5
 8003c88:	f7ff fa9a 	bl	80031c0 <_test_assert>
 8003c8c:	4604      	mov	r4, r0
 8003c8e:	2800      	cmp	r0, #0
 8003c90:	d180      	bne.n	8003b94 <mbox1_execute.lto_priv.137+0x64>
 8003c92:	2620      	movs	r6, #32
 8003c94:	f386 8811 	msr	BASEPRI, r6
  chSysLock();
  msg1 = chMBPostI(&mb1, 'X');
 8003c98:	2058      	movs	r0, #88	; 0x58
 8003c9a:	f002 fcb1 	bl	8006600 <chMBPostI.constprop.32>
 8003c9e:	4601      	mov	r1, r0
 8003ca0:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();
  test_assert(5, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8003ca4:	f1a1 31ff 	sub.w	r1, r1, #4294967295
 8003ca8:	fab1 f181 	clz	r1, r1
 8003cac:	2005      	movs	r0, #5
 8003cae:	0949      	lsrs	r1, r1, #5
 8003cb0:	f7ff fa86 	bl	80031c0 <_test_assert>
 8003cb4:	2800      	cmp	r0, #0
 8003cb6:	f47f af6d 	bne.w	8003b94 <mbox1_execute.lto_priv.137+0x64>
  msg1 = chMBPostAhead(&mb1, 'X', 1);
 8003cba:	2101      	movs	r1, #1
 8003cbc:	2058      	movs	r0, #88	; 0x58
 8003cbe:	f002 fcbf 	bl	8006640 <chMBPostAhead.constprop.31>
  test_assert(6, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8003cc2:	f1a0 31ff 	sub.w	r1, r0, #4294967295
 8003cc6:	fab1 f181 	clz	r1, r1
 8003cca:	2006      	movs	r0, #6
 8003ccc:	0949      	lsrs	r1, r1, #5
 8003cce:	f7ff fa77 	bl	80031c0 <_test_assert>
 8003cd2:	4604      	mov	r4, r0
 8003cd4:	2800      	cmp	r0, #0
 8003cd6:	f47f af5d 	bne.w	8003b94 <mbox1_execute.lto_priv.137+0x64>
 8003cda:	f386 8811 	msr	BASEPRI, r6
  chSysLock();
  msg1 = chMBPostAheadI(&mb1, 'X');
 8003cde:	2058      	movs	r0, #88	; 0x58
 8003ce0:	f002 fcd6 	bl	8006690 <chMBPostAheadI.constprop.30>
 8003ce4:	4601      	mov	r1, r0
 8003ce6:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();
  test_assert(7, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8003cea:	f1a1 31ff 	sub.w	r1, r1, #4294967295
 8003cee:	fab1 f181 	clz	r1, r1
 8003cf2:	2007      	movs	r0, #7
 8003cf4:	0949      	lsrs	r1, r1, #5
 8003cf6:	f7ff fa63 	bl	80031c0 <_test_assert>
 8003cfa:	4680      	mov	r8, r0
 8003cfc:	2800      	cmp	r0, #0
 8003cfe:	f47f af49 	bne.w	8003b94 <mbox1_execute.lto_priv.137+0x64>
 8003d02:	f386 8811 	msr	BASEPRI, r6

  /*
   * Testing final conditions.
   */
  test_assert_lock(8, chMBGetFreeCountI(&mb1) == 0, "still empty");
 8003d06:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8003d08:	2008      	movs	r0, #8
 8003d0a:	fab1 f181 	clz	r1, r1
 8003d0e:	0949      	lsrs	r1, r1, #5
 8003d10:	f7ff fa56 	bl	80031c0 <_test_assert>
 8003d14:	4c1f      	ldr	r4, [pc, #124]	; (8003d94 <mbox1_execute.lto_priv.137+0x264>)
 8003d16:	4607      	mov	r7, r0
 8003d18:	b110      	cbz	r0, 8003d20 <mbox1_execute.lto_priv.137+0x1f0>
 8003d1a:	f388 8811 	msr	BASEPRI, r8
 8003d1e:	e739      	b.n	8003b94 <mbox1_execute.lto_priv.137+0x64>
 8003d20:	f380 8811 	msr	BASEPRI, r0
 8003d24:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(9, chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 8003d28:	69a1      	ldr	r1, [r4, #24]
 8003d2a:	2009      	movs	r0, #9
 8003d2c:	f1a1 0e05 	sub.w	lr, r1, #5
 8003d30:	f1de 0100 	rsbs	r1, lr, #0
 8003d34:	eb41 010e 	adc.w	r1, r1, lr
 8003d38:	f7ff fa42 	bl	80031c0 <_test_assert>
 8003d3c:	b110      	cbz	r0, 8003d44 <mbox1_execute.lto_priv.137+0x214>
 8003d3e:	f387 8811 	msr	BASEPRI, r7
 8003d42:	e727      	b.n	8003b94 <mbox1_execute.lto_priv.137+0x64>
 8003d44:	f380 8811 	msr	BASEPRI, r0
 8003d48:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(10, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8003d4c:	68e1      	ldr	r1, [r4, #12]
 8003d4e:	68a3      	ldr	r3, [r4, #8]
 8003d50:	200a      	movs	r0, #10
 8003d52:	1acf      	subs	r7, r1, r3
 8003d54:	4279      	negs	r1, r7
 8003d56:	4179      	adcs	r1, r7
 8003d58:	f7ff fa32 	bl	80031c0 <_test_assert>
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	2800      	cmp	r0, #0
 8003d60:	d183      	bne.n	8003c6a <mbox1_execute.lto_priv.137+0x13a>
 8003d62:	f383 8811 	msr	BASEPRI, r3
 8003d66:	2405      	movs	r4, #5
 8003d68:	e005      	b.n	8003d76 <mbox1_execute.lto_priv.137+0x246>
   * Testing dequeuing.
   */
  for (i = 0; i < MB_SIZE; i++) {
    msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
    test_assert(11, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
 8003d6a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8003d6e:	f7ff fa3f 	bl	80031f0 <test_emit_token>
  test_assert_lock(10, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");

  /*
   * Testing dequeuing.
   */
  for (i = 0; i < MB_SIZE; i++) {
 8003d72:	3c01      	subs	r4, #1
 8003d74:	d010      	beq.n	8003d98 <mbox1_execute.lto_priv.137+0x268>
    msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
 8003d76:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003d7a:	a801      	add	r0, sp, #4
 8003d7c:	f002 fca8 	bl	80066d0 <chMBFetch.constprop.29>
    test_assert(11, msg1 == MSG_OK, "wrong wake-up message");
 8003d80:	fab0 f180 	clz	r1, r0
 8003d84:	200b      	movs	r0, #11
 8003d86:	0949      	lsrs	r1, r1, #5
 8003d88:	f7ff fa1a 	bl	80031c0 <_test_assert>
 8003d8c:	2800      	cmp	r0, #0
 8003d8e:	d0ec      	beq.n	8003d6a <mbox1_execute.lto_priv.137+0x23a>
 8003d90:	e700      	b.n	8003b94 <mbox1_execute.lto_priv.137+0x64>
 8003d92:	bf00      	nop
 8003d94:	200008ac 	.word	0x200008ac
    test_emit_token(msg2);
  }
  test_assert_sequence(12, "ABCDE");
 8003d98:	200c      	movs	r0, #12
 8003d9a:	49d5      	ldr	r1, [pc, #852]	; (80040f0 <mbox1_execute.lto_priv.137+0x5c0>)
 8003d9c:	f7ff f9e8 	bl	8003170 <_test_assert_sequence>
 8003da0:	2800      	cmp	r0, #0
 8003da2:	f47f aef7 	bne.w	8003b94 <mbox1_execute.lto_priv.137+0x64>

  /*
   * Testing buffer circularity.
   */
  msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
 8003da6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003daa:	2047      	movs	r0, #71	; 0x47
 8003dac:	f002 fc00 	bl	80065b0 <chMBPost.constprop.33>
  test_assert(13, msg1 == MSG_OK, "wrong wake-up message");
 8003db0:	fab0 f180 	clz	r1, r0
 8003db4:	200d      	movs	r0, #13
 8003db6:	0949      	lsrs	r1, r1, #5
 8003db8:	f7ff fa02 	bl	80031c0 <_test_assert>
 8003dbc:	2800      	cmp	r0, #0
 8003dbe:	f47f aee9 	bne.w	8003b94 <mbox1_execute.lto_priv.137+0x64>
  msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
 8003dc2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003dc6:	a801      	add	r0, sp, #4
 8003dc8:	f002 fc82 	bl	80066d0 <chMBFetch.constprop.29>
  test_assert(14, msg1 == MSG_OK, "wrong wake-up message");
 8003dcc:	fab0 f180 	clz	r1, r0
 8003dd0:	200e      	movs	r0, #14
 8003dd2:	0949      	lsrs	r1, r1, #5
 8003dd4:	f7ff f9f4 	bl	80031c0 <_test_assert>
 8003dd8:	2800      	cmp	r0, #0
 8003dda:	f47f aedb 	bne.w	8003b94 <mbox1_execute.lto_priv.137+0x64>
  test_assert(15, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
 8003dde:	6829      	ldr	r1, [r5, #0]
 8003de0:	68ab      	ldr	r3, [r5, #8]
 8003de2:	200f      	movs	r0, #15
 8003de4:	1ace      	subs	r6, r1, r3
 8003de6:	4271      	negs	r1, r6
 8003de8:	4171      	adcs	r1, r6
 8003dea:	4ec2      	ldr	r6, [pc, #776]	; (80040f4 <mbox1_execute.lto_priv.137+0x5c4>)
 8003dec:	f7ff f9e8 	bl	80031c0 <_test_assert>
 8003df0:	2800      	cmp	r0, #0
 8003df2:	f47f aecf 	bne.w	8003b94 <mbox1_execute.lto_priv.137+0x64>
  test_assert(16, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
 8003df6:	6831      	ldr	r1, [r6, #0]
 8003df8:	68f3      	ldr	r3, [r6, #12]
 8003dfa:	2010      	movs	r0, #16
 8003dfc:	1aca      	subs	r2, r1, r3
 8003dfe:	4251      	negs	r1, r2
 8003e00:	4151      	adcs	r1, r2
 8003e02:	f7ff f9dd 	bl	80031c0 <_test_assert>
 8003e06:	2800      	cmp	r0, #0
 8003e08:	f47f aec4 	bne.w	8003b94 <mbox1_execute.lto_priv.137+0x64>

  /*
   * Testing fetch timeout.
   */
  msg1 = chMBFetch(&mb1, &msg2, 1);
 8003e0c:	2101      	movs	r1, #1
 8003e0e:	a801      	add	r0, sp, #4
 8003e10:	f002 fc5e 	bl	80066d0 <chMBFetch.constprop.29>
  test_assert(17, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8003e14:	1c43      	adds	r3, r0, #1
 8003e16:	4259      	negs	r1, r3
 8003e18:	4159      	adcs	r1, r3
 8003e1a:	2011      	movs	r0, #17
 8003e1c:	f7ff f9d0 	bl	80031c0 <_test_assert>
 8003e20:	2800      	cmp	r0, #0
 8003e22:	f47f aeb7 	bne.w	8003b94 <mbox1_execute.lto_priv.137+0x64>
 8003e26:	2720      	movs	r7, #32
 8003e28:	f387 8811 	msr	BASEPRI, r7
  chSysLock();
  msg1 = chMBFetchI(&mb1, &msg2);
 8003e2c:	a801      	add	r0, sp, #4
 8003e2e:	f002 fc77 	bl	8006720 <chMBFetchI.constprop.28>
 8003e32:	4601      	mov	r1, r0
 8003e34:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();
  test_assert(18, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8003e38:	f101 0801 	add.w	r8, r1, #1
 8003e3c:	f1d8 0100 	rsbs	r1, r8, #0
 8003e40:	eb41 0108 	adc.w	r1, r1, r8
 8003e44:	2012      	movs	r0, #18
 8003e46:	f7ff f9bb 	bl	80031c0 <_test_assert>
 8003e4a:	2800      	cmp	r0, #0
 8003e4c:	f47f aea2 	bne.w	8003b94 <mbox1_execute.lto_priv.137+0x64>
 8003e50:	f387 8811 	msr	BASEPRI, r7

  /*
   * Testing final conditions.
   */
  test_assert_lock(19, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8003e54:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8003e56:	2013      	movs	r0, #19
 8003e58:	f1a1 0c05 	sub.w	ip, r1, #5
 8003e5c:	f1dc 0100 	rsbs	r1, ip, #0
 8003e60:	eb41 010c 	adc.w	r1, r1, ip
 8003e64:	f7ff f9ac 	bl	80031c0 <_test_assert>
 8003e68:	2800      	cmp	r0, #0
 8003e6a:	f47f aefd 	bne.w	8003c68 <mbox1_execute.lto_priv.137+0x138>
 8003e6e:	f04f 0800 	mov.w	r8, #0
 8003e72:	f388 8811 	msr	BASEPRI, r8
 8003e76:	2420      	movs	r4, #32
 8003e78:	f384 8811 	msr	BASEPRI, r4
  test_assert_lock(20, chMBGetUsedCountI(&mb1) == 0, "still full");
 8003e7c:	69a9      	ldr	r1, [r5, #24]
 8003e7e:	2014      	movs	r0, #20
 8003e80:	fab1 f181 	clz	r1, r1
 8003e84:	0949      	lsrs	r1, r1, #5
 8003e86:	f7ff f99b 	bl	80031c0 <_test_assert>
 8003e8a:	4e9a      	ldr	r6, [pc, #616]	; (80040f4 <mbox1_execute.lto_priv.137+0x5c4>)
 8003e8c:	4607      	mov	r7, r0
 8003e8e:	2800      	cmp	r0, #0
 8003e90:	f47f af43 	bne.w	8003d1a <mbox1_execute.lto_priv.137+0x1ea>
 8003e94:	f380 8811 	msr	BASEPRI, r0
 8003e98:	f384 8811 	msr	BASEPRI, r4
  test_assert_lock(21, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8003e9c:	68f1      	ldr	r1, [r6, #12]
 8003e9e:	68b3      	ldr	r3, [r6, #8]
 8003ea0:	2015      	movs	r0, #21
 8003ea2:	ebc3 0e01 	rsb	lr, r3, r1
 8003ea6:	f1de 0100 	rsbs	r1, lr, #0
 8003eaa:	eb41 010e 	adc.w	r1, r1, lr
 8003eae:	f7ff f987 	bl	80031c0 <_test_assert>
 8003eb2:	2800      	cmp	r0, #0
 8003eb4:	f47f af43 	bne.w	8003d3e <mbox1_execute.lto_priv.137+0x20e>
 8003eb8:	f380 8811 	msr	BASEPRI, r0
 8003ebc:	f384 8811 	msr	BASEPRI, r4

  /*
   * Testing I-Class.
   */
  chSysLock();
  msg1 = chMBPostI(&mb1, 'A');
 8003ec0:	2041      	movs	r0, #65	; 0x41
 8003ec2:	f002 fb9d 	bl	8006600 <chMBPostI.constprop.32>
  test_assert(22, msg1 == MSG_OK, "wrong wake-up message");
 8003ec6:	fab0 f180 	clz	r1, r0
 8003eca:	2016      	movs	r0, #22
 8003ecc:	0949      	lsrs	r1, r1, #5
 8003ece:	f7ff f977 	bl	80031c0 <_test_assert>
 8003ed2:	2800      	cmp	r0, #0
 8003ed4:	f47f ae5e 	bne.w	8003b94 <mbox1_execute.lto_priv.137+0x64>
  msg1 = chMBPostI(&mb1, 'B');
 8003ed8:	2042      	movs	r0, #66	; 0x42
 8003eda:	f002 fb91 	bl	8006600 <chMBPostI.constprop.32>
  test_assert(23, msg1 == MSG_OK, "wrong wake-up message");
 8003ede:	fab0 f180 	clz	r1, r0
 8003ee2:	2017      	movs	r0, #23
 8003ee4:	0949      	lsrs	r1, r1, #5
 8003ee6:	f7ff f96b 	bl	80031c0 <_test_assert>
 8003eea:	2800      	cmp	r0, #0
 8003eec:	f47f ae52 	bne.w	8003b94 <mbox1_execute.lto_priv.137+0x64>
  msg1 = chMBPostI(&mb1, 'C');
 8003ef0:	2043      	movs	r0, #67	; 0x43
 8003ef2:	f002 fb85 	bl	8006600 <chMBPostI.constprop.32>
  test_assert(24, msg1 == MSG_OK, "wrong wake-up message");
 8003ef6:	fab0 f180 	clz	r1, r0
 8003efa:	2018      	movs	r0, #24
 8003efc:	0949      	lsrs	r1, r1, #5
 8003efe:	f7ff f95f 	bl	80031c0 <_test_assert>
 8003f02:	2800      	cmp	r0, #0
 8003f04:	f47f ae46 	bne.w	8003b94 <mbox1_execute.lto_priv.137+0x64>
  msg1 = chMBPostI(&mb1, 'D');
 8003f08:	2044      	movs	r0, #68	; 0x44
 8003f0a:	f002 fb79 	bl	8006600 <chMBPostI.constprop.32>
  test_assert(25, msg1 == MSG_OK, "wrong wake-up message");
 8003f0e:	fab0 f180 	clz	r1, r0
 8003f12:	2019      	movs	r0, #25
 8003f14:	0949      	lsrs	r1, r1, #5
 8003f16:	f7ff f953 	bl	80031c0 <_test_assert>
 8003f1a:	4607      	mov	r7, r0
 8003f1c:	2800      	cmp	r0, #0
 8003f1e:	f47f ae39 	bne.w	8003b94 <mbox1_execute.lto_priv.137+0x64>
  msg1 = chMBPostI(&mb1, 'E');
 8003f22:	2045      	movs	r0, #69	; 0x45
 8003f24:	f002 fb6c 	bl	8006600 <chMBPostI.constprop.32>
 8003f28:	f387 8811 	msr	BASEPRI, r7
  chSysUnlock();
  test_assert(26, msg1 == MSG_OK, "wrong wake-up message");
 8003f2c:	fab0 f180 	clz	r1, r0
 8003f30:	201a      	movs	r0, #26
 8003f32:	0949      	lsrs	r1, r1, #5
 8003f34:	f7ff f944 	bl	80031c0 <_test_assert>
 8003f38:	2800      	cmp	r0, #0
 8003f3a:	f47f ae2b 	bne.w	8003b94 <mbox1_execute.lto_priv.137+0x64>
  test_assert(27, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8003f3e:	68f1      	ldr	r1, [r6, #12]
 8003f40:	68b3      	ldr	r3, [r6, #8]
 8003f42:	201b      	movs	r0, #27
 8003f44:	1ace      	subs	r6, r1, r3
 8003f46:	4271      	negs	r1, r6
 8003f48:	4171      	adcs	r1, r6
 8003f4a:	f7ff f939 	bl	80031c0 <_test_assert>
 8003f4e:	2800      	cmp	r0, #0
 8003f50:	f47f ae20 	bne.w	8003b94 <mbox1_execute.lto_priv.137+0x64>
 8003f54:	4680      	mov	r8, r0
 8003f56:	4626      	mov	r6, r4
 8003f58:	2405      	movs	r4, #5
 8003f5a:	2720      	movs	r7, #32
 8003f5c:	f386 8811 	msr	BASEPRI, r6
  for (i = 0; i < MB_SIZE; i++) {
    chSysLock();
    msg1 = chMBFetchI(&mb1, &msg2);
 8003f60:	a801      	add	r0, sp, #4
 8003f62:	f002 fbdd 	bl	8006720 <chMBFetchI.constprop.28>
 8003f66:	f388 8811 	msr	BASEPRI, r8
    chSysUnlock();
    test_assert(28, msg1 == MSG_OK, "wrong wake-up message");
 8003f6a:	fab0 f180 	clz	r1, r0
 8003f6e:	201c      	movs	r0, #28
 8003f70:	0949      	lsrs	r1, r1, #5
 8003f72:	f7ff f925 	bl	80031c0 <_test_assert>
 8003f76:	2800      	cmp	r0, #0
 8003f78:	f47f ae0c 	bne.w	8003b94 <mbox1_execute.lto_priv.137+0x64>
    test_emit_token(msg2);
 8003f7c:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8003f80:	f7ff f936 	bl	80031f0 <test_emit_token>
  test_assert(25, msg1 == MSG_OK, "wrong wake-up message");
  msg1 = chMBPostI(&mb1, 'E');
  chSysUnlock();
  test_assert(26, msg1 == MSG_OK, "wrong wake-up message");
  test_assert(27, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
  for (i = 0; i < MB_SIZE; i++) {
 8003f84:	3c01      	subs	r4, #1
 8003f86:	d1e8      	bne.n	8003f5a <mbox1_execute.lto_priv.137+0x42a>
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(28, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
  }
  test_assert_sequence(29, "ABCDE");
 8003f88:	201d      	movs	r0, #29
 8003f8a:	4959      	ldr	r1, [pc, #356]	; (80040f0 <mbox1_execute.lto_priv.137+0x5c0>)
 8003f8c:	f7ff f8f0 	bl	8003170 <_test_assert_sequence>
 8003f90:	2800      	cmp	r0, #0
 8003f92:	f47f adff 	bne.w	8003b94 <mbox1_execute.lto_priv.137+0x64>
 8003f96:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(30, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8003f9a:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8003f9c:	201e      	movs	r0, #30
 8003f9e:	1f4a      	subs	r2, r1, #5
 8003fa0:	4251      	negs	r1, r2
 8003fa2:	4151      	adcs	r1, r2
 8003fa4:	4e53      	ldr	r6, [pc, #332]	; (80040f4 <mbox1_execute.lto_priv.137+0x5c4>)
 8003fa6:	f7ff f90b 	bl	80031c0 <_test_assert>
 8003faa:	b110      	cbz	r0, 8003fb2 <mbox1_execute.lto_priv.137+0x482>
 8003fac:	f384 8811 	msr	BASEPRI, r4
 8003fb0:	e5f0      	b.n	8003b94 <mbox1_execute.lto_priv.137+0x64>
 8003fb2:	f384 8811 	msr	BASEPRI, r4
 8003fb6:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(31, chMBGetUsedCountI(&mb1) == 0, "still full");
 8003fba:	69b1      	ldr	r1, [r6, #24]
 8003fbc:	201f      	movs	r0, #31
 8003fbe:	fab1 f181 	clz	r1, r1
 8003fc2:	0949      	lsrs	r1, r1, #5
 8003fc4:	f7ff f8fc 	bl	80031c0 <_test_assert>
 8003fc8:	2800      	cmp	r0, #0
 8003fca:	d1ef      	bne.n	8003fac <mbox1_execute.lto_priv.137+0x47c>
 8003fcc:	f384 8811 	msr	BASEPRI, r4
  test_assert(32, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8003fd0:	68f1      	ldr	r1, [r6, #12]
 8003fd2:	68b3      	ldr	r3, [r6, #8]
 8003fd4:	4638      	mov	r0, r7
 8003fd6:	1acb      	subs	r3, r1, r3
 8003fd8:	4259      	negs	r1, r3
 8003fda:	4159      	adcs	r1, r3
 8003fdc:	f7ff f8f0 	bl	80031c0 <_test_assert>
 8003fe0:	2800      	cmp	r0, #0
 8003fe2:	f47f add7 	bne.w	8003b94 <mbox1_execute.lto_priv.137+0x64>
 8003fe6:	f387 8811 	msr	BASEPRI, r7

  chSysLock();
  msg1 = chMBPostAheadI(&mb1, 'E');
 8003fea:	2045      	movs	r0, #69	; 0x45
 8003fec:	f002 fb50 	bl	8006690 <chMBPostAheadI.constprop.30>
  test_assert(33, msg1 == MSG_OK, "wrong wake-up message");
 8003ff0:	fab0 f180 	clz	r1, r0
 8003ff4:	2021      	movs	r0, #33	; 0x21
 8003ff6:	0949      	lsrs	r1, r1, #5
 8003ff8:	f7ff f8e2 	bl	80031c0 <_test_assert>
 8003ffc:	2800      	cmp	r0, #0
 8003ffe:	f47f adc9 	bne.w	8003b94 <mbox1_execute.lto_priv.137+0x64>
  msg1 = chMBPostAheadI(&mb1, 'D');
 8004002:	2044      	movs	r0, #68	; 0x44
 8004004:	f002 fb44 	bl	8006690 <chMBPostAheadI.constprop.30>
  test_assert(34, msg1 == MSG_OK, "wrong wake-up message");
 8004008:	fab0 f180 	clz	r1, r0
 800400c:	2022      	movs	r0, #34	; 0x22
 800400e:	0949      	lsrs	r1, r1, #5
 8004010:	f7ff f8d6 	bl	80031c0 <_test_assert>
 8004014:	2800      	cmp	r0, #0
 8004016:	f47f adbd 	bne.w	8003b94 <mbox1_execute.lto_priv.137+0x64>
  msg1 = chMBPostAheadI(&mb1, 'C');
 800401a:	2043      	movs	r0, #67	; 0x43
 800401c:	f002 fb38 	bl	8006690 <chMBPostAheadI.constprop.30>
  test_assert(35, msg1 == MSG_OK, "wrong wake-up message");
 8004020:	fab0 f180 	clz	r1, r0
 8004024:	2023      	movs	r0, #35	; 0x23
 8004026:	0949      	lsrs	r1, r1, #5
 8004028:	f7ff f8ca 	bl	80031c0 <_test_assert>
 800402c:	2800      	cmp	r0, #0
 800402e:	f47f adb1 	bne.w	8003b94 <mbox1_execute.lto_priv.137+0x64>
  msg1 = chMBPostAheadI(&mb1, 'B');
 8004032:	2042      	movs	r0, #66	; 0x42
 8004034:	f002 fb2c 	bl	8006690 <chMBPostAheadI.constprop.30>
  test_assert(36, msg1 == MSG_OK, "wrong wake-up message");
 8004038:	fab0 f180 	clz	r1, r0
 800403c:	2024      	movs	r0, #36	; 0x24
 800403e:	0949      	lsrs	r1, r1, #5
 8004040:	f7ff f8be 	bl	80031c0 <_test_assert>
 8004044:	2800      	cmp	r0, #0
 8004046:	f47f ada5 	bne.w	8003b94 <mbox1_execute.lto_priv.137+0x64>
  msg1 = chMBPostAheadI(&mb1, 'A');
 800404a:	2041      	movs	r0, #65	; 0x41
 800404c:	f002 fb20 	bl	8006690 <chMBPostAheadI.constprop.30>
 8004050:	2300      	movs	r3, #0
 8004052:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  test_assert(37, msg1 == MSG_OK, "wrong wake-up message");
 8004056:	fab0 f180 	clz	r1, r0
 800405a:	2025      	movs	r0, #37	; 0x25
 800405c:	0949      	lsrs	r1, r1, #5
 800405e:	f7ff f8af 	bl	80031c0 <_test_assert>
 8004062:	2800      	cmp	r0, #0
 8004064:	f47f ad96 	bne.w	8003b94 <mbox1_execute.lto_priv.137+0x64>
  test_assert(38, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8004068:	68e9      	ldr	r1, [r5, #12]
 800406a:	68ab      	ldr	r3, [r5, #8]
 800406c:	2026      	movs	r0, #38	; 0x26
 800406e:	ebc3 0801 	rsb	r8, r3, r1
 8004072:	f1d8 0100 	rsbs	r1, r8, #0
 8004076:	eb41 0108 	adc.w	r1, r1, r8
 800407a:	f7ff f8a1 	bl	80031c0 <_test_assert>
 800407e:	2800      	cmp	r0, #0
 8004080:	f47f ad88 	bne.w	8003b94 <mbox1_execute.lto_priv.137+0x64>
 8004084:	4604      	mov	r4, r0
 8004086:	2605      	movs	r6, #5
 8004088:	f04f 0820 	mov.w	r8, #32
 800408c:	2720      	movs	r7, #32
 800408e:	f388 8811 	msr	BASEPRI, r8
  for (i = 0; i < MB_SIZE; i++) {
    chSysLock();
    msg1 = chMBFetchI(&mb1, &msg2);
 8004092:	a801      	add	r0, sp, #4
 8004094:	f002 fb44 	bl	8006720 <chMBFetchI.constprop.28>
 8004098:	f384 8811 	msr	BASEPRI, r4
    chSysUnlock();
    test_assert(39, msg1 == MSG_OK, "wrong wake-up message");
 800409c:	fab0 f180 	clz	r1, r0
 80040a0:	2027      	movs	r0, #39	; 0x27
 80040a2:	0949      	lsrs	r1, r1, #5
 80040a4:	f7ff f88c 	bl	80031c0 <_test_assert>
 80040a8:	2800      	cmp	r0, #0
 80040aa:	f47f ad73 	bne.w	8003b94 <mbox1_execute.lto_priv.137+0x64>
    test_emit_token(msg2);
 80040ae:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80040b2:	f7ff f89d 	bl	80031f0 <test_emit_token>
  test_assert(36, msg1 == MSG_OK, "wrong wake-up message");
  msg1 = chMBPostAheadI(&mb1, 'A');
  chSysUnlock();
  test_assert(37, msg1 == MSG_OK, "wrong wake-up message");
  test_assert(38, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
  for (i = 0; i < MB_SIZE; i++) {
 80040b6:	3e01      	subs	r6, #1
 80040b8:	d1e8      	bne.n	800408c <mbox1_execute.lto_priv.137+0x55c>
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(39, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
  }
  test_assert_sequence(40, "ABCDE");
 80040ba:	2028      	movs	r0, #40	; 0x28
 80040bc:	490c      	ldr	r1, [pc, #48]	; (80040f0 <mbox1_execute.lto_priv.137+0x5c0>)
 80040be:	f7ff f857 	bl	8003170 <_test_assert_sequence>
 80040c2:	2800      	cmp	r0, #0
 80040c4:	f47f ad66 	bne.w	8003b94 <mbox1_execute.lto_priv.137+0x64>
 80040c8:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(41, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 80040cc:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80040ce:	2029      	movs	r0, #41	; 0x29
 80040d0:	f1a1 0c05 	sub.w	ip, r1, #5
 80040d4:	f1dc 0100 	rsbs	r1, ip, #0
 80040d8:	eb41 010c 	adc.w	r1, r1, ip
 80040dc:	4c05      	ldr	r4, [pc, #20]	; (80040f4 <mbox1_execute.lto_priv.137+0x5c4>)
 80040de:	f7ff f86f 	bl	80031c0 <_test_assert>
 80040e2:	2800      	cmp	r0, #0
 80040e4:	f43f ad59 	beq.w	8003b9a <mbox1_execute.lto_priv.137+0x6a>
 80040e8:	f386 8811 	msr	BASEPRI, r6
 80040ec:	e552      	b.n	8003b94 <mbox1_execute.lto_priv.137+0x64>
 80040ee:	bf00      	nop
 80040f0:	0800693c 	.word	0x0800693c
 80040f4:	200008ac 	.word	0x200008ac
	...

08004100 <thread>:
 * A thread is spawned that sends four messages back to the tester thread.<br>
 * The test expect to receive the messages in the correct sequence and to
 * not find a fifth message waiting.
 */

static THD_FUNCTION(thread, p) {
 8004100:	b510      	push	{r4, lr}
 8004102:	4604      	mov	r4, r0

  chMsgSend(p, 'A');
 8004104:	2141      	movs	r1, #65	; 0x41
 8004106:	f7fd fb5b 	bl	80017c0 <chMsgSend>
  chMsgSend(p, 'B');
 800410a:	4620      	mov	r0, r4
 800410c:	2142      	movs	r1, #66	; 0x42
 800410e:	f7fd fb57 	bl	80017c0 <chMsgSend>
  chMsgSend(p, 'C');
 8004112:	4620      	mov	r0, r4
}
 8004114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

static THD_FUNCTION(thread, p) {

  chMsgSend(p, 'A');
  chMsgSend(p, 'B');
  chMsgSend(p, 'C');
 8004118:	2143      	movs	r1, #67	; 0x43
 800411a:	f7fd bb51 	b.w	80017c0 <chMsgSend>
 800411e:	bf00      	nop

08004120 <msg1_execute.lto_priv.135>:
}

static void msg1_execute(void) {
 8004120:	b570      	push	{r4, r5, r6, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004122:	4b1f      	ldr	r3, [pc, #124]	; (80041a0 <msg1_execute.lto_priv.135+0x80>)
 8004124:	b082      	sub	sp, #8
 8004126:	699c      	ldr	r4, [r3, #24]
  msg_t msg;

  /*
   * Testing the whole messages loop.
   */
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8004128:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800412c:	68a2      	ldr	r2, [r4, #8]
 800412e:	4b1d      	ldr	r3, [pc, #116]	; (80041a4 <msg1_execute.lto_priv.135+0x84>)
 8004130:	3201      	adds	r2, #1
 8004132:	9400      	str	r4, [sp, #0]
 8004134:	481c      	ldr	r0, [pc, #112]	; (80041a8 <msg1_execute.lto_priv.135+0x88>)
 8004136:	f7fd fa3b 	bl	80015b0 <chThdCreateStatic>
 800413a:	4b1c      	ldr	r3, [pc, #112]	; (80041ac <msg1_execute.lto_priv.135+0x8c>)
 800413c:	2520      	movs	r5, #32
 800413e:	6018      	str	r0, [r3, #0]
                                 thread, chThdGetSelfX());
  tp = chMsgWait();
 8004140:	f7fd fa8e 	bl	8001660 <chMsgWait>
 8004144:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8004146:	f385 8811 	msr	BASEPRI, r5
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 800414a:	4631      	mov	r1, r6
 800414c:	f7fd f998 	bl	8001480 <chSchWakeupS>
 8004150:	2400      	movs	r4, #0
 8004152:	f384 8811 	msr	BASEPRI, r4
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
 8004156:	b2f0      	uxtb	r0, r6
 8004158:	f7ff f84a 	bl	80031f0 <test_emit_token>
  tp = chMsgWait();
 800415c:	f7fd fa80 	bl	8001660 <chMsgWait>
 8004160:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8004162:	f385 8811 	msr	BASEPRI, r5
 8004166:	4631      	mov	r1, r6
 8004168:	f7fd f98a 	bl	8001480 <chSchWakeupS>
 800416c:	f384 8811 	msr	BASEPRI, r4
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
 8004170:	b2f0      	uxtb	r0, r6
 8004172:	f7ff f83d 	bl	80031f0 <test_emit_token>
  tp = chMsgWait();
 8004176:	f7fd fa73 	bl	8001660 <chMsgWait>
 800417a:	6b06      	ldr	r6, [r0, #48]	; 0x30
 800417c:	f385 8811 	msr	BASEPRI, r5
 8004180:	4631      	mov	r1, r6
 8004182:	f7fd f97d 	bl	8001480 <chSchWakeupS>
 8004186:	f384 8811 	msr	BASEPRI, r4
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
 800418a:	b2f0      	uxtb	r0, r6
 800418c:	f7ff f830 	bl	80031f0 <test_emit_token>
  test_assert_sequence(1, "ABC");
 8004190:	4907      	ldr	r1, [pc, #28]	; (80041b0 <msg1_execute.lto_priv.135+0x90>)
 8004192:	2001      	movs	r0, #1
}
 8004194:	b002      	add	sp, #8
 8004196:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  test_emit_token(msg);
  tp = chMsgWait();
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
  test_assert_sequence(1, "ABC");
 800419a:	f7fe bfe9 	b.w	8003170 <_test_assert_sequence>
 800419e:	bf00      	nop
 80041a0:	20001098 	.word	0x20001098
 80041a4:	08004101 	.word	0x08004101
 80041a8:	20000a30 	.word	0x20000a30
 80041ac:	20000a04 	.word	0x20000a04
 80041b0:	08007760 	.word	0x08007760
	...

080041c0 <mtx8_execute.lto_priv.134>:
  chMtxLock(&m2);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m2);
}

static void mtx8_execute(void) {
 80041c0:	b570      	push	{r4, r5, r6, lr}
 80041c2:	4b19      	ldr	r3, [pc, #100]	; (8004228 <mtx8_execute.lto_priv.134+0x68>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
 80041c4:	4d19      	ldr	r5, [pc, #100]	; (800422c <mtx8_execute.lto_priv.134+0x6c>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80041c6:	699a      	ldr	r2, [r3, #24]
 80041c8:	4b19      	ldr	r3, [pc, #100]	; (8004230 <mtx8_execute.lto_priv.134+0x70>)
 80041ca:	6896      	ldr	r6, [r2, #8]
  chMtxLock(&m2);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m2);
}

static void mtx8_execute(void) {
 80041cc:	b082      	sub	sp, #8

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
 80041ce:	1c72      	adds	r2, r6, #1
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	4628      	mov	r0, r5
 80041d4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80041d8:	4b16      	ldr	r3, [pc, #88]	; (8004234 <mtx8_execute.lto_priv.134+0x74>)
 80041da:	f7fd f9e9 	bl	80015b0 <chThdCreateStatic>
 80041de:	4c16      	ldr	r4, [pc, #88]	; (8004238 <mtx8_execute.lto_priv.134+0x78>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
 80041e0:	4b16      	ldr	r3, [pc, #88]	; (800423c <mtx8_execute.lto_priv.134+0x7c>)
}

static void mtx8_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
 80041e2:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
 80041e4:	1cb2      	adds	r2, r6, #2
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	f505 70a4 	add.w	r0, r5, #328	; 0x148
 80041ec:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80041f0:	4b13      	ldr	r3, [pc, #76]	; (8004240 <mtx8_execute.lto_priv.134+0x80>)
 80041f2:	f7fd f9dd 	bl	80015b0 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread12, "B");
 80041f6:	4b13      	ldr	r3, [pc, #76]	; (8004244 <mtx8_execute.lto_priv.134+0x84>)
 80041f8:	1cf2      	adds	r2, r6, #3
 80041fa:	f44f 71a4 	mov.w	r1, #328	; 0x148

static void mtx8_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
 80041fe:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread12, "B");
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	f505 7024 	add.w	r0, r5, #656	; 0x290
 8004206:	4b10      	ldr	r3, [pc, #64]	; (8004248 <mtx8_execute.lto_priv.134+0x88>)
 8004208:	f7fd f9d2 	bl	80015b0 <chThdCreateStatic>
 800420c:	60a0      	str	r0, [r4, #8]
  chCondSignal(&c1);
 800420e:	f002 f94f 	bl	80064b0 <chCondSignal.constprop.61>
  chCondSignal(&c1);
 8004212:	f002 f94d 	bl	80064b0 <chCondSignal.constprop.61>
  test_wait_threads();
 8004216:	f7fe ff53 	bl	80030c0 <test_wait_threads>
  test_assert_sequence(1, "ABC");
 800421a:	490c      	ldr	r1, [pc, #48]	; (800424c <mtx8_execute.lto_priv.134+0x8c>)
 800421c:	2001      	movs	r0, #1
}
 800421e:	b002      	add	sp, #8
 8004220:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread12, "B");
  chCondSignal(&c1);
  chCondSignal(&c1);
  test_wait_threads();
  test_assert_sequence(1, "ABC");
 8004224:	f7fe bfa4 	b.w	8003170 <_test_assert_sequence>
 8004228:	20001098 	.word	0x20001098
 800422c:	20000a30 	.word	0x20000a30
 8004230:	08006934 	.word	0x08006934
 8004234:	08004271 	.word	0x08004271
 8004238:	20000a04 	.word	0x20000a04
 800423c:	08006938 	.word	0x08006938
 8004240:	08004301 	.word	0x08004301
 8004244:	08006930 	.word	0x08006930
 8004248:	08004251 	.word	0x08004251
 800424c:	08007760 	.word	0x08007760

08004250 <thread12>:
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
  chMtxUnlock(&m2);
}

static THD_FUNCTION(thread12, p) {
 8004250:	b538      	push	{r3, r4, r5, lr}
 8004252:	4605      	mov	r5, r0

  chMtxLock(&m2);
 8004254:	4c05      	ldr	r4, [pc, #20]	; (800426c <thread12+0x1c>)
 8004256:	4620      	mov	r0, r4
 8004258:	f7fd fbfa 	bl	8001a50 <chMtxLock>
  test_emit_token(*(char *)p);
 800425c:	7828      	ldrb	r0, [r5, #0]
 800425e:	f7fe ffc7 	bl	80031f0 <test_emit_token>
  chMtxUnlock(&m2);
 8004262:	4620      	mov	r0, r4
}
 8004264:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

static THD_FUNCTION(thread12, p) {

  chMtxLock(&m2);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m2);
 8004268:	f7fd bb52 	b.w	8001910 <chMtxUnlock>
 800426c:	20000834 	.word	0x20000834

08004270 <thread11>:
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}

static THD_FUNCTION(thread11, p) {
 8004270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004272:	4607      	mov	r7, r0

  chMtxLock(&m2);
 8004274:	481c      	ldr	r0, [pc, #112]	; (80042e8 <thread11+0x78>)
 8004276:	f7fd fbeb 	bl	8001a50 <chMtxLock>
  chMtxLock(&m1);
 800427a:	481c      	ldr	r0, [pc, #112]	; (80042ec <thread11+0x7c>)
 800427c:	f7fd fbe8 	bl	8001a50 <chMtxLock>
 8004280:	2320      	movs	r3, #32
 8004282:	f383 8811 	msr	BASEPRI, r3
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004286:	4d1a      	ldr	r5, [pc, #104]	; (80042f0 <thread11+0x80>)
 *
 * @sclass
 */
static inline mutex_t *chMtxGetNextMutexS(void) {

  return chThdGetSelfX()->p_mtxlist;
 8004288:	69ab      	ldr	r3, [r5, #24]
 800428a:	6b9e      	ldr	r6, [r3, #56]	; 0x38
  chDbgCheck((cp != NULL) && (time != TIME_IMMEDIATE));
  chDbgAssert(currp->p_mtxlist != NULL, "not owning a mutex");

  /* Getting "current" mutex and releasing it.*/
  mp = chMtxGetNextMutexS();
  chMtxUnlockS(mp);
 800428c:	4630      	mov	r0, r6
 800428e:	f7fd fb17 	bl	80018c0 <chMtxUnlockS>

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  currp->p_u.wtobjp = cp;
 8004292:	4a18      	ldr	r2, [pc, #96]	; (80042f4 <thread11+0x84>)
 8004294:	69ac      	ldr	r4, [r5, #24]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8004296:	4610      	mov	r0, r2
 8004298:	4613      	mov	r3, r2
 800429a:	6222      	str	r2, [r4, #32]
 800429c:	e003      	b.n	80042a6 <thread11+0x36>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 800429e:	6899      	ldr	r1, [r3, #8]
 80042a0:	68a2      	ldr	r2, [r4, #8]
 80042a2:	4291      	cmp	r1, r2
 80042a4:	d302      	bcc.n	80042ac <thread11+0x3c>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 80042a6:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80042a8:	4283      	cmp	r3, r0
 80042aa:	d1f8      	bne.n	800429e <thread11+0x2e>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80042ac:	685a      	ldr	r2, [r3, #4]
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 80042ae:	2007      	movs	r0, #7

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 80042b0:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 80042b2:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 80042b4:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 80042b6:	605c      	str	r4, [r3, #4]
 80042b8:	f7fd f9ba 	bl	8001630 <chSchGoSleepS>
  }

  return currp->p_u.rdymsg;
 80042bc:	69ab      	ldr	r3, [r5, #24]
  queue_prio_insert(currp, &cp->c_queue);
  msg = chSchGoSleepTimeoutS(CH_STATE_WTCOND, time);
  if (msg != MSG_TIMEOUT) {
 80042be:	6a1b      	ldr	r3, [r3, #32]
 80042c0:	3301      	adds	r3, #1
 80042c2:	d002      	beq.n	80042ca <thread11+0x5a>
    chMtxLockS(mp);
 80042c4:	4630      	mov	r0, r6
 80042c6:	f7fd fb5b 	bl	8001980 <chMtxLockS>
 80042ca:	2300      	movs	r3, #0
 80042cc:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_CONDVARS_TIMEOUT || defined(__DOXYGEN__)
  chCondWaitTimeout(&c1, TIME_INFINITE);
#else
  chCondWait(&c1);
#endif
  test_emit_token(*(char *)p);
 80042d0:	7838      	ldrb	r0, [r7, #0]
 80042d2:	f7fe ff8d 	bl	80031f0 <test_emit_token>
  chMtxUnlock(&m1);
 80042d6:	4805      	ldr	r0, [pc, #20]	; (80042ec <thread11+0x7c>)
 80042d8:	f7fd fb1a 	bl	8001910 <chMtxUnlock>
  chMtxUnlock(&m2);
}
 80042dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
#else
  chCondWait(&c1);
#endif
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
  chMtxUnlock(&m2);
 80042e0:	4801      	ldr	r0, [pc, #4]	; (80042e8 <thread11+0x78>)
 80042e2:	f7fd bb15 	b.w	8001910 <chMtxUnlock>
 80042e6:	bf00      	nop
 80042e8:	20000834 	.word	0x20000834
 80042ec:	20000824 	.word	0x20000824
 80042f0:	20001098 	.word	0x20001098
 80042f4:	200008d4 	.word	0x200008d4
	...

08004300 <thread10>:

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static THD_FUNCTION(thread10, p) {
 8004300:	b570      	push	{r4, r5, r6, lr}
 8004302:	4606      	mov	r6, r0

  chMtxLock(&m1);
 8004304:	4816      	ldr	r0, [pc, #88]	; (8004360 <thread10+0x60>)
 8004306:	f7fd fba3 	bl	8001a50 <chMtxLock>
 800430a:	2320      	movs	r3, #32
 800430c:	f383 8811 	msr	BASEPRI, r3
 *                      @p chCondBroadcast().
 *
 * @sclass
 */
msg_t chCondWaitS(condition_variable_t *cp) {
  thread_t *ctp = currp;
 8004310:	4b14      	ldr	r3, [pc, #80]	; (8004364 <thread10+0x64>)
 8004312:	699c      	ldr	r4, [r3, #24]
 8004314:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  chDbgCheck(cp != NULL);
  chDbgAssert(ctp->p_mtxlist != NULL, "not owning a mutex");

  /* Getting "current" mutex and releasing it.*/
  mp = chMtxGetNextMutexS();
  chMtxUnlockS(mp);
 8004316:	4628      	mov	r0, r5
 8004318:	f7fd fad2 	bl	80018c0 <chMtxUnlockS>

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  ctp->p_u.wtobjp = cp;
 800431c:	4a12      	ldr	r2, [pc, #72]	; (8004368 <thread10+0x68>)
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 800431e:	4610      	mov	r0, r2
 8004320:	4613      	mov	r3, r2
 8004322:	6222      	str	r2, [r4, #32]
 8004324:	e003      	b.n	800432e <thread10+0x2e>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8004326:	6899      	ldr	r1, [r3, #8]
 8004328:	68a2      	ldr	r2, [r4, #8]
 800432a:	4291      	cmp	r1, r2
 800432c:	d302      	bcc.n	8004334 <thread10+0x34>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 800432e:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8004330:	4283      	cmp	r3, r0
 8004332:	d1f8      	bne.n	8004326 <thread10+0x26>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8004334:	685a      	ldr	r2, [r3, #4]
  queue_prio_insert(ctp, &cp->c_queue);
  chSchGoSleepS(CH_STATE_WTCOND);
 8004336:	2007      	movs	r0, #7

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8004338:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 800433a:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 800433c:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800433e:	605c      	str	r4, [r3, #4]
 8004340:	f7fd f976 	bl	8001630 <chSchGoSleepS>
  msg = ctp->p_u.rdymsg;
  chMtxLockS(mp);
 8004344:	4628      	mov	r0, r5
 8004346:	f7fd fb1b 	bl	8001980 <chMtxLockS>
 800434a:	2300      	movs	r3, #0
 800434c:	f383 8811 	msr	BASEPRI, r3
  chCondWait(&c1);
  test_emit_token(*(char *)p);
 8004350:	7830      	ldrb	r0, [r6, #0]
 8004352:	f7fe ff4d 	bl	80031f0 <test_emit_token>
  chMtxUnlock(&m1);
}
 8004356:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
static THD_FUNCTION(thread10, p) {

  chMtxLock(&m1);
  chCondWait(&c1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
 800435a:	4801      	ldr	r0, [pc, #4]	; (8004360 <thread10+0x60>)
 800435c:	f7fd bad8 	b.w	8001910 <chMtxUnlock>
 8004360:	20000824 	.word	0x20000824
 8004364:	20001098 	.word	0x20001098
 8004368:	200008d4 	.word	0x200008d4
 800436c:	00000000 	.word	0x00000000

08004370 <mtx7_execute.lto_priv.132>:

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static void mtx7_execute(void) {
 8004370:	b530      	push	{r4, r5, lr}
 8004372:	4a2c      	ldr	r2, [pc, #176]	; (8004424 <mtx7_execute.lto_priv.132+0xb4>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8004374:	4b2c      	ldr	r3, [pc, #176]	; (8004428 <mtx7_execute.lto_priv.132+0xb8>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004376:	6992      	ldr	r2, [r2, #24]

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static void mtx7_execute(void) {
 8004378:	b083      	sub	sp, #12
 800437a:	6895      	ldr	r5, [r2, #8]

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 800437c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004380:	1c6a      	adds	r2, r5, #1
 8004382:	9300      	str	r3, [sp, #0]
 8004384:	4829      	ldr	r0, [pc, #164]	; (800442c <mtx7_execute.lto_priv.132+0xbc>)
 8004386:	4b2a      	ldr	r3, [pc, #168]	; (8004430 <mtx7_execute.lto_priv.132+0xc0>)
 8004388:	f7fd f912 	bl	80015b0 <chThdCreateStatic>
 800438c:	4c29      	ldr	r4, [pc, #164]	; (8004434 <mtx7_execute.lto_priv.132+0xc4>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 800438e:	4b2a      	ldr	r3, [pc, #168]	; (8004438 <mtx7_execute.lto_priv.132+0xc8>)
}

static void mtx7_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8004390:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8004392:	1caa      	adds	r2, r5, #2
 8004394:	9300      	str	r3, [sp, #0]
 8004396:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800439a:	4b25      	ldr	r3, [pc, #148]	; (8004430 <mtx7_execute.lto_priv.132+0xc0>)
 800439c:	4827      	ldr	r0, [pc, #156]	; (800443c <mtx7_execute.lto_priv.132+0xcc>)
 800439e:	f7fd f907 	bl	80015b0 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 80043a2:	4b27      	ldr	r3, [pc, #156]	; (8004440 <mtx7_execute.lto_priv.132+0xd0>)

static void mtx7_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 80043a4:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 80043a6:	1cea      	adds	r2, r5, #3
 80043a8:	9300      	str	r3, [sp, #0]
 80043aa:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80043ae:	4b20      	ldr	r3, [pc, #128]	; (8004430 <mtx7_execute.lto_priv.132+0xc0>)
 80043b0:	4824      	ldr	r0, [pc, #144]	; (8004444 <mtx7_execute.lto_priv.132+0xd4>)
 80043b2:	f7fd f8fd 	bl	80015b0 <chThdCreateStatic>
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 80043b6:	4b24      	ldr	r3, [pc, #144]	; (8004448 <mtx7_execute.lto_priv.132+0xd8>)
static void mtx7_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 80043b8:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 80043ba:	1d2a      	adds	r2, r5, #4
 80043bc:	9300      	str	r3, [sp, #0]
 80043be:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80043c2:	4b1b      	ldr	r3, [pc, #108]	; (8004430 <mtx7_execute.lto_priv.132+0xc0>)
 80043c4:	4821      	ldr	r0, [pc, #132]	; (800444c <mtx7_execute.lto_priv.132+0xdc>)
 80043c6:	f7fd f8f3 	bl	80015b0 <chThdCreateStatic>
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 80043ca:	4b21      	ldr	r3, [pc, #132]	; (8004450 <mtx7_execute.lto_priv.132+0xe0>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 80043cc:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 80043ce:	1d6a      	adds	r2, r5, #5
 80043d0:	9300      	str	r3, [sp, #0]
 80043d2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80043d6:	4b16      	ldr	r3, [pc, #88]	; (8004430 <mtx7_execute.lto_priv.132+0xc0>)
 80043d8:	481e      	ldr	r0, [pc, #120]	; (8004454 <mtx7_execute.lto_priv.132+0xe4>)
 80043da:	f7fd f8e9 	bl	80015b0 <chThdCreateStatic>
 80043de:	2320      	movs	r3, #32
 80043e0:	6120      	str	r0, [r4, #16]
 80043e2:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 80043e6:	4c1c      	ldr	r4, [pc, #112]	; (8004458 <mtx7_execute.lto_priv.132+0xe8>)
 80043e8:	6823      	ldr	r3, [r4, #0]
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (queue_notempty(&cp->c_queue)) {
 80043ea:	42a3      	cmp	r3, r4
    chSchReadyI(queue_fifo_remove(&cp->c_queue))->p_u.rdymsg = MSG_RESET;
 80043ec:	bf18      	it	ne
 80043ee:	f06f 0501 	mvnne.w	r5, #1
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (queue_notempty(&cp->c_queue)) {
 80043f2:	d009      	beq.n	8004408 <mtx7_execute.lto_priv.132+0x98>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80043f4:	681a      	ldr	r2, [r3, #0]
    chSchReadyI(queue_fifo_remove(&cp->c_queue))->p_u.rdymsg = MSG_RESET;
 80043f6:	4618      	mov	r0, r3
  tqp->p_next->p_prev = (thread_t *)tqp;
 80043f8:	6054      	str	r4, [r2, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80043fa:	6022      	str	r2, [r4, #0]
 80043fc:	f7fd f998 	bl	8001730 <chSchReadyI>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8004400:	6823      	ldr	r3, [r4, #0]
 8004402:	6205      	str	r5, [r0, #32]
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (queue_notempty(&cp->c_queue)) {
 8004404:	42a3      	cmp	r3, r4
 8004406:	d1f5      	bne.n	80043f4 <mtx7_execute.lto_priv.132+0x84>
 */
void chCondBroadcast(condition_variable_t *cp) {

  chSysLock();
  chCondBroadcastI(cp);
  chSchRescheduleS();
 8004408:	f7fd f812 	bl	8001430 <chSchRescheduleS>
 800440c:	2300      	movs	r3, #0
 800440e:	f383 8811 	msr	BASEPRI, r3
  chCondBroadcast(&c1);
  test_wait_threads();
 8004412:	f7fe fe55 	bl	80030c0 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8004416:	4911      	ldr	r1, [pc, #68]	; (800445c <mtx7_execute.lto_priv.132+0xec>)
 8004418:	2001      	movs	r0, #1
}
 800441a:	b003      	add	sp, #12
 800441c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
  chCondBroadcast(&c1);
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 8004420:	f7fe bea6 	b.w	8003170 <_test_assert_sequence>
 8004424:	20001098 	.word	0x20001098
 8004428:	08006940 	.word	0x08006940
 800442c:	20000a30 	.word	0x20000a30
 8004430:	08004301 	.word	0x08004301
 8004434:	20000a04 	.word	0x20000a04
 8004438:	08007948 	.word	0x08007948
 800443c:	20000b78 	.word	0x20000b78
 8004440:	08006938 	.word	0x08006938
 8004444:	20000cc0 	.word	0x20000cc0
 8004448:	08006930 	.word	0x08006930
 800444c:	20000e08 	.word	0x20000e08
 8004450:	08006934 	.word	0x08006934
 8004454:	20000f50 	.word	0x20000f50
 8004458:	200008d4 	.word	0x200008d4
 800445c:	0800693c 	.word	0x0800693c

08004460 <mtx6_execute.lto_priv.130>:
  chCondWait(&c1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
}

static void mtx6_execute(void) {
 8004460:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004462:	4b2c      	ldr	r3, [pc, #176]	; (8004514 <mtx6_execute.lto_priv.130+0xb4>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8004464:	4e2c      	ldr	r6, [pc, #176]	; (8004518 <mtx6_execute.lto_priv.130+0xb8>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	4d2c      	ldr	r5, [pc, #176]	; (800451c <mtx6_execute.lto_priv.130+0xbc>)
 800446a:	689f      	ldr	r7, [r3, #8]
 800446c:	492c      	ldr	r1, [pc, #176]	; (8004520 <mtx6_execute.lto_priv.130+0xc0>)
  chCondWait(&c1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
}

static void mtx6_execute(void) {
 800446e:	b083      	sub	sp, #12

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8004470:	1c7a      	adds	r2, r7, #1
 8004472:	462b      	mov	r3, r5
 8004474:	9100      	str	r1, [sp, #0]
 8004476:	4630      	mov	r0, r6
 8004478:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800447c:	f7fd f898 	bl	80015b0 <chThdCreateStatic>
 8004480:	4c28      	ldr	r4, [pc, #160]	; (8004524 <mtx6_execute.lto_priv.130+0xc4>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8004482:	4929      	ldr	r1, [pc, #164]	; (8004528 <mtx6_execute.lto_priv.130+0xc8>)
}

static void mtx6_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8004484:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8004486:	1cba      	adds	r2, r7, #2
 8004488:	462b      	mov	r3, r5
 800448a:	9100      	str	r1, [sp, #0]
 800448c:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 8004490:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004494:	f7fd f88c 	bl	80015b0 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8004498:	4924      	ldr	r1, [pc, #144]	; (800452c <mtx6_execute.lto_priv.130+0xcc>)

static void mtx6_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 800449a:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 800449c:	1cfa      	adds	r2, r7, #3
 800449e:	462b      	mov	r3, r5
 80044a0:	9100      	str	r1, [sp, #0]
 80044a2:	f506 7024 	add.w	r0, r6, #656	; 0x290
 80044a6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80044aa:	f7fd f881 	bl	80015b0 <chThdCreateStatic>
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 80044ae:	4920      	ldr	r1, [pc, #128]	; (8004530 <mtx6_execute.lto_priv.130+0xd0>)
static void mtx6_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 80044b0:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 80044b2:	1d3a      	adds	r2, r7, #4
 80044b4:	462b      	mov	r3, r5
 80044b6:	9100      	str	r1, [sp, #0]
 80044b8:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 80044bc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80044c0:	f7fd f876 	bl	80015b0 <chThdCreateStatic>
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 80044c4:	491b      	ldr	r1, [pc, #108]	; (8004534 <mtx6_execute.lto_priv.130+0xd4>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 80044c6:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 80044c8:	462b      	mov	r3, r5
 80044ca:	9100      	str	r1, [sp, #0]
 80044cc:	1d7a      	adds	r2, r7, #5
 80044ce:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 80044d2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80044d6:	f7fd f86b 	bl	80015b0 <chThdCreateStatic>
 80044da:	2320      	movs	r3, #32
 80044dc:	6120      	str	r0, [r4, #16]
 80044de:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chCondSignalI(&c1);
 80044e2:	f001 fffd 	bl	80064e0 <chCondSignalI.constprop.60>
  chCondSignalI(&c1);
 80044e6:	f001 fffb 	bl	80064e0 <chCondSignalI.constprop.60>
  chCondSignalI(&c1);
 80044ea:	f001 fff9 	bl	80064e0 <chCondSignalI.constprop.60>
  chCondSignalI(&c1);
 80044ee:	f001 fff7 	bl	80064e0 <chCondSignalI.constprop.60>
  chCondSignalI(&c1);
 80044f2:	f001 fff5 	bl	80064e0 <chCondSignalI.constprop.60>
  chSchRescheduleS();
 80044f6:	f7fc ff9b 	bl	8001430 <chSchRescheduleS>
 80044fa:	2300      	movs	r3, #0
 80044fc:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  test_wait_threads();
 8004500:	f7fe fdde 	bl	80030c0 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8004504:	490c      	ldr	r1, [pc, #48]	; (8004538 <mtx6_execute.lto_priv.130+0xd8>)
 8004506:	2001      	movs	r0, #1
}
 8004508:	b003      	add	sp, #12
 800450a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  chCondSignalI(&c1);
  chCondSignalI(&c1);
  chSchRescheduleS();
  chSysUnlock();
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 800450e:	f7fe be2f 	b.w	8003170 <_test_assert_sequence>
 8004512:	bf00      	nop
 8004514:	20001098 	.word	0x20001098
 8004518:	20000a30 	.word	0x20000a30
 800451c:	08004301 	.word	0x08004301
 8004520:	08006940 	.word	0x08006940
 8004524:	20000a04 	.word	0x20000a04
 8004528:	08007948 	.word	0x08007948
 800452c:	08006938 	.word	0x08006938
 8004530:	08006930 	.word	0x08006930
 8004534:	08006934 	.word	0x08006934
 8004538:	0800693c 	.word	0x0800693c
 800453c:	00000000 	.word	0x00000000

08004540 <mtx5_execute.lto_priv.128>:
static void mtx5_setup(void) {

  chMtxObjectInit(&m1);
}

static void mtx5_execute(void) {
 8004540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004544:	4d3b      	ldr	r5, [pc, #236]	; (8004634 <mtx5_execute.lto_priv.128+0xf4>)
 8004546:	2320      	movs	r3, #32
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004548:	69aa      	ldr	r2, [r5, #24]
 800454a:	6896      	ldr	r6, [r2, #8]
 800454c:	f383 8811 	msr	BASEPRI, r3
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->m_owner != NULL) {
 8004550:	4c39      	ldr	r4, [pc, #228]	; (8004638 <mtx5_execute.lto_priv.128+0xf8>)
    if (mp->m_owner == currp) {
      mp->m_cnt++;
      return true;
    }
#endif
    return false;
 8004552:	2100      	movs	r1, #0
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->m_owner != NULL) {
 8004554:	68a3      	ldr	r3, [r4, #8]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d05e      	beq.n	8004618 <mtx5_execute.lto_priv.128+0xd8>
 800455a:	2300      	movs	r3, #0
 800455c:	f383 8811 	msr	BASEPRI, r3
#if !CH_CFG_USE_MUTEXES_RECURSIVE
  bool b;
  tprio_t prio = chThdGetPriorityX();

  b = chMtxTryLock(&m1);
  test_assert(1, b, "already locked");
 8004560:	2001      	movs	r0, #1
 8004562:	f7fe fe2d 	bl	80031c0 <_test_assert>
 8004566:	4601      	mov	r1, r0
 8004568:	b108      	cbz	r0, 800456e <mtx5_execute.lto_priv.128+0x2e>
 800456a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800456e:	2320      	movs	r3, #32
 8004570:	f383 8811 	msr	BASEPRI, r3
 8004574:	68a3      	ldr	r3, [r4, #8]
 8004576:	4a30      	ldr	r2, [pc, #192]	; (8004638 <mtx5_execute.lto_priv.128+0xf8>)
 8004578:	2b00      	cmp	r3, #0
 800457a:	d054      	beq.n	8004626 <mtx5_execute.lto_priv.128+0xe6>
 800457c:	2101      	movs	r1, #1
 800457e:	2300      	movs	r3, #0
 8004580:	f383 8811 	msr	BASEPRI, r3

  b = chMtxTryLock(&m1);
  test_assert(2, !b, "not locked");
 8004584:	2002      	movs	r0, #2
 8004586:	f7fe fe1b 	bl	80031c0 <_test_assert>
 800458a:	4607      	mov	r7, r0
 800458c:	2800      	cmp	r0, #0
 800458e:	d1ec      	bne.n	800456a <mtx5_execute.lto_priv.128+0x2a>
 8004590:	2320      	movs	r3, #32
 8004592:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chMtxUnlockS(&m1);
 8004596:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8004638 <mtx5_execute.lto_priv.128+0xf8>
 800459a:	4640      	mov	r0, r8
 800459c:	f7fd f990 	bl	80018c0 <chMtxUnlockS>
 80045a0:	f387 8811 	msr	BASEPRI, r7
 *
 * @notapi
 */
static inline bool queue_isempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next == (const thread_t *)tqp);
 80045a4:	6821      	ldr	r1, [r4, #0]
  chSysUnlock();

  test_assert(3, queue_isempty(&m1.m_queue), "queue not empty");
 80045a6:	2003      	movs	r0, #3
 80045a8:	1b09      	subs	r1, r1, r4
 80045aa:	fab1 f181 	clz	r1, r1
 80045ae:	0949      	lsrs	r1, r1, #5
 80045b0:	f7fe fe06 	bl	80031c0 <_test_assert>
 80045b4:	2800      	cmp	r0, #0
 80045b6:	d1d8      	bne.n	800456a <mtx5_execute.lto_priv.128+0x2a>
  test_assert(4, m1.m_owner == NULL, "still owned");
 80045b8:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80045bc:	2004      	movs	r0, #4
 80045be:	fab1 f181 	clz	r1, r1
 80045c2:	0949      	lsrs	r1, r1, #5
 80045c4:	f7fe fdfc 	bl	80031c0 <_test_assert>
 80045c8:	2800      	cmp	r0, #0
 80045ca:	d1ce      	bne.n	800456a <mtx5_execute.lto_priv.128+0x2a>
 80045cc:	69ab      	ldr	r3, [r5, #24]
  test_assert(5, chThdGetPriorityX() == prio, "wrong priority level");
 80045ce:	2005      	movs	r0, #5
 80045d0:	6899      	ldr	r1, [r3, #8]
 80045d2:	1a71      	subs	r1, r6, r1
 80045d4:	fab1 f181 	clz	r1, r1
 80045d8:	0949      	lsrs	r1, r1, #5
 80045da:	f7fe fdf1 	bl	80031c0 <_test_assert>
 80045de:	2800      	cmp	r0, #0
 80045e0:	d1c3      	bne.n	800456a <mtx5_execute.lto_priv.128+0x2a>
#endif /* !CH_CFG_USE_MUTEXES_RECURSIVE */
  
  chMtxLock(&m1);
 80045e2:	4640      	mov	r0, r8
 80045e4:	f7fd fa34 	bl	8001a50 <chMtxLock>
  chMtxUnlockAll();
 80045e8:	f7fd f93a 	bl	8001860 <chMtxUnlockAll>
 80045ec:	f8d8 1000 	ldr.w	r1, [r8]
  test_assert(6, queue_isempty(&m1.m_queue), "queue not empty");
 80045f0:	2006      	movs	r0, #6
 80045f2:	ebc8 0101 	rsb	r1, r8, r1
 80045f6:	fab1 f181 	clz	r1, r1
 80045fa:	0949      	lsrs	r1, r1, #5
 80045fc:	f7fe fde0 	bl	80031c0 <_test_assert>
 8004600:	2800      	cmp	r0, #0
 8004602:	d1b2      	bne.n	800456a <mtx5_execute.lto_priv.128+0x2a>
  test_assert(7, m1.m_owner == NULL, "still owned");
 8004604:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8004608:	2007      	movs	r0, #7
 800460a:	fab1 f181 	clz	r1, r1
}
 800460e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* !CH_CFG_USE_MUTEXES_RECURSIVE */
  
  chMtxLock(&m1);
  chMtxUnlockAll();
  test_assert(6, queue_isempty(&m1.m_queue), "queue not empty");
  test_assert(7, m1.m_owner == NULL, "still owned");
 8004612:	0949      	lsrs	r1, r1, #5
 8004614:	f7fe bdd4 	b.w	80031c0 <_test_assert>

  chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 8004618:	69ab      	ldr	r3, [r5, #24]
  mp->m_next = currp->p_mtxlist;
  currp->p_mtxlist = mp;
 800461a:	2101      	movs	r1, #1
  chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
  mp->m_next = currp->p_mtxlist;
 800461c:	6b9a      	ldr	r2, [r3, #56]	; 0x38

  chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 800461e:	60a3      	str	r3, [r4, #8]
  mp->m_next = currp->p_mtxlist;
 8004620:	60e2      	str	r2, [r4, #12]
  currp->p_mtxlist = mp;
 8004622:	639c      	str	r4, [r3, #56]	; 0x38
 8004624:	e799      	b.n	800455a <mtx5_execute.lto_priv.128+0x1a>

  chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 8004626:	69ab      	ldr	r3, [r5, #24]
  mp->m_next = currp->p_mtxlist;
 8004628:	6b98      	ldr	r0, [r3, #56]	; 0x38

  chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 800462a:	6093      	str	r3, [r2, #8]
  mp->m_next = currp->p_mtxlist;
 800462c:	60d0      	str	r0, [r2, #12]
  currp->p_mtxlist = mp;
 800462e:	639a      	str	r2, [r3, #56]	; 0x38
 8004630:	e7a5      	b.n	800457e <mtx5_execute.lto_priv.128+0x3e>
 8004632:	bf00      	nop
 8004634:	20001098 	.word	0x20001098
 8004638:	20000824 	.word	0x20000824
 800463c:	00000000 	.word	0x00000000

08004640 <notify.lto_priv.93>:

#if CH_CFG_USE_QUEUES || defined(__DOXYGEN__)

#define TEST_QUEUES_SIZE 4

static void notify(io_queue_t *qp) {
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
	...

08004650 <queues2_setup.lto_priv.156>:
 * This test case tests synchronous and asynchronous operations on an
 * @p OutputQueue object including timeouts. The queue state must remain
 * consistent through the whole test.
 */

static void queues2_setup(void) {
 8004650:	b430      	push	{r4, r5}
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
 8004652:	4a08      	ldr	r2, [pc, #32]	; (8004674 <queues2_setup.lto_priv.156+0x24>)
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8004654:	4b08      	ldr	r3, [pc, #32]	; (8004678 <queues2_setup.lto_priv.156+0x28>)
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 8004656:	4809      	ldr	r0, [pc, #36]	; (800467c <queues2_setup.lto_priv.156+0x2c>)
  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8004658:	1d15      	adds	r5, r2, #4
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 800465a:	2404      	movs	r4, #4
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
 800465c:	2100      	movs	r1, #0
  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 800465e:	611d      	str	r5, [r3, #16]
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8004660:	609c      	str	r4, [r3, #8]
 8004662:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8004664:	605b      	str	r3, [r3, #4]
  oqp->q_buffer  = bp;
 8004666:	60da      	str	r2, [r3, #12]
  oqp->q_rdptr   = bp;
 8004668:	619a      	str	r2, [r3, #24]
  oqp->q_wrptr   = bp;
 800466a:	615a      	str	r2, [r3, #20]
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 800466c:	61d8      	str	r0, [r3, #28]
  oqp->q_link    = link;
 800466e:	6219      	str	r1, [r3, #32]

  chOQObjectInit(&oq, wa[0], TEST_QUEUES_SIZE, notify, NULL);
}
 8004670:	bc30      	pop	{r4, r5}
 8004672:	4770      	bx	lr
 8004674:	20000a30 	.word	0x20000a30
 8004678:	20000874 	.word	0x20000874
 800467c:	08004641 	.word	0x08004641

08004680 <queues1_setup.lto_priv.154>:
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 8004680:	4a08      	ldr	r2, [pc, #32]	; (80046a4 <queues1_setup.lto_priv.154+0x24>)
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8004682:	4b09      	ldr	r3, [pc, #36]	; (80046a8 <queues1_setup.lto_priv.154+0x28>)
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 8004684:	4809      	ldr	r0, [pc, #36]	; (80046ac <queues1_setup.lto_priv.154+0x2c>)
 * This test case tests synchronous and asynchronous operations on an
 * @p InputQueue object including timeouts. The queue state must remain
 * consistent through the whole test.
 */

static void queues1_setup(void) {
 8004686:	b410      	push	{r4}
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8004688:	2100      	movs	r1, #0
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 800468a:	1d14      	adds	r4, r2, #4
 800468c:	611c      	str	r4, [r3, #16]
 800468e:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8004690:	605b      	str	r3, [r3, #4]
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 8004692:	60da      	str	r2, [r3, #12]
  iqp->q_rdptr   = bp;
 8004694:	619a      	str	r2, [r3, #24]
  iqp->q_wrptr   = bp;
 8004696:	615a      	str	r2, [r3, #20]
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 8004698:	61d8      	str	r0, [r3, #28]
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 800469a:	6099      	str	r1, [r3, #8]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
  iqp->q_link    = link;
 800469c:	6219      	str	r1, [r3, #32]

  chIQObjectInit(&iq, wa[0], TEST_QUEUES_SIZE, notify, NULL);
}
 800469e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046a2:	4770      	bx	lr
 80046a4:	20000a30 	.word	0x20000a30
 80046a8:	20000850 	.word	0x20000850
 80046ac:	08004641 	.word	0x08004641

080046b0 <dyn3_setup.lto_priv.152>:
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
  heapp->h_free.h.u.next = hp;
 80046b0:	4909      	ldr	r1, [pc, #36]	; (80046d8 <dyn3_setup.lto_priv.152+0x28>)
    ftp = chRegNextThread(ftp);
  } while (ftp != NULL);
  return found;
}

static void dyn3_setup(void) {
 80046b2:	b410      	push	{r4}
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 80046b4:	2200      	movs	r2, #0
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 80046b6:	f44f 64cc 	mov.w	r4, #1632	; 0x660
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 80046ba:	4b08      	ldr	r3, [pc, #32]	; (80046dc <dyn3_setup.lto_priv.152+0x2c>)
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 80046bc:	e881 0014 	stmia.w	r1, {r2, r4}
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80046c0:	f103 0010 	add.w	r0, r3, #16

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
 80046c4:	60da      	str	r2, [r3, #12]
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
  heapp->h_free.h.u.next = hp;
 80046c6:	6099      	str	r1, [r3, #8]
 80046c8:	6118      	str	r0, [r3, #16]
  tqp->p_prev = (thread_t *)tqp;
 80046ca:	6158      	str	r0, [r3, #20]
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 80046cc:	601a      	str	r2, [r3, #0]
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 80046ce:	619a      	str	r2, [r3, #24]

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}
 80046d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	20000a30 	.word	0x20000a30
 80046dc:	20000998 	.word	0x20000998

080046e0 <dyn2_setup.lto_priv.150>:
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 80046e0:	4b03      	ldr	r3, [pc, #12]	; (80046f0 <dyn2_setup.lto_priv.150+0x10>)
 80046e2:	2200      	movs	r2, #0
  mp->mp_object_size = size;
 80046e4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80046e8:	6059      	str	r1, [r3, #4]
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 80046ea:	601a      	str	r2, [r3, #0]
  mp->mp_object_size = size;
  mp->mp_provider = provider;
 80046ec:	609a      	str	r2, [r3, #8]
 80046ee:	4770      	bx	lr
 80046f0:	200011ec 	.word	0x200011ec
	...

08004700 <dyn1_setup.lto_priv.148>:
  heapp->h_free.h.u.next = hp;
 8004700:	4909      	ldr	r1, [pc, #36]	; (8004728 <dyn1_setup.lto_priv.148+0x28>)

  test_emit_token(*(char *)p);
}

#if CH_CFG_USE_HEAP || defined(__DOXYGEN__)
static void dyn1_setup(void) {
 8004702:	b410      	push	{r4}
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 8004704:	2200      	movs	r2, #0
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 8004706:	f44f 64cc 	mov.w	r4, #1632	; 0x660
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 800470a:	4b08      	ldr	r3, [pc, #32]	; (800472c <dyn1_setup.lto_priv.148+0x2c>)
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 800470c:	e881 0014 	stmia.w	r1, {r2, r4}
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8004710:	f103 0010 	add.w	r0, r3, #16

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
 8004714:	60da      	str	r2, [r3, #12]
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
  heapp->h_free.h.u.next = hp;
 8004716:	6099      	str	r1, [r3, #8]
 8004718:	6118      	str	r0, [r3, #16]
  tqp->p_prev = (thread_t *)tqp;
 800471a:	6158      	str	r0, [r3, #20]
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 800471c:	601a      	str	r2, [r3, #0]
 800471e:	619a      	str	r2, [r3, #24]

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}
 8004720:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	20000a30 	.word	0x20000a30
 800472c:	20000998 	.word	0x20000998

08004730 <null_provider>:

static void *null_provider(size_t size) {

  (void)size;
  return NULL;
}
 8004730:	2000      	movs	r0, #0
 8004732:	4770      	bx	lr
	...

08004740 <pools1_setup.lto_priv.146>:
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 8004740:	4b03      	ldr	r3, [pc, #12]	; (8004750 <pools1_setup.lto_priv.146+0x10>)
 8004742:	2200      	movs	r2, #0
  mp->mp_object_size = size;
 8004744:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004748:	6059      	str	r1, [r3, #4]
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 800474a:	601a      	str	r2, [r3, #0]
  mp->mp_object_size = size;
  mp->mp_provider = provider;
 800474c:	609a      	str	r2, [r3, #8]
 800474e:	4770      	bx	lr
 8004750:	20000844 	.word	0x20000844
	...

08004760 <heap1_setup.lto_priv.144>:
  heapp->h_free.h.u.next = hp;
 8004760:	4909      	ldr	r1, [pc, #36]	; (8004788 <heap1_setup.lto_priv.144+0x28>)
 * allocator.<br>
 * The test expects to find the heap back to the initial status after each
 * sequence.
 */

static void heap1_setup(void) {
 8004762:	b410      	push	{r4}
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 8004764:	2200      	movs	r2, #0
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 8004766:	f44f 64cc 	mov.w	r4, #1632	; 0x660
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 800476a:	4b08      	ldr	r3, [pc, #32]	; (800478c <heap1_setup.lto_priv.144+0x2c>)
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 800476c:	e881 0014 	stmia.w	r1, {r2, r4}
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8004770:	f103 0010 	add.w	r0, r3, #16

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
 8004774:	60da      	str	r2, [r3, #12]
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
  heapp->h_free.h.u.next = hp;
 8004776:	6099      	str	r1, [r3, #8]
 8004778:	6118      	str	r0, [r3, #16]
  tqp->p_prev = (thread_t *)tqp;
 800477a:	6158      	str	r0, [r3, #20]
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 800477c:	601a      	str	r2, [r3, #0]
 800477e:	619a      	str	r2, [r3, #24]

  chHeapObjectInit(&test_heap, test.buffer, sizeof(union test_buffers));
}
 8004780:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	20000a30 	.word	0x20000a30
 800478c:	20000978 	.word	0x20000978

08004790 <thread1>:

static THD_FUNCTION(thread1, p) {

  (void)p;
  chIQGetTimeout(&iq, MS2ST(200));
 8004790:	4802      	ldr	r0, [pc, #8]	; (800479c <thread1+0xc>)
 8004792:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004796:	f7fd bb2b 	b.w	8001df0 <chIQGetTimeout>
 800479a:	bf00      	nop
 800479c:	20000850 	.word	0x20000850

080047a0 <thread.lto_priv.73>:
 * one to fail.
 */

static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
 80047a0:	7800      	ldrb	r0, [r0, #0]
 80047a2:	f7fe bd25 	b.w	80031f0 <test_emit_token>
 80047a6:	bf00      	nop
	...

080047b0 <queues1_execute.lto_priv.155>:
}

static void queues1_execute(void) {
 80047b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047b2:	2420      	movs	r4, #32
 80047b4:	b083      	sub	sp, #12
 80047b6:	f384 8811 	msr	BASEPRI, r4
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 80047ba:	4b90      	ldr	r3, [pc, #576]	; (80049fc <queues1_execute.lto_priv.155+0x24c>)
  unsigned i;
  size_t n;

  /* Initial empty state */
  test_assert_lock(1, chIQIsEmptyI(&iq), "not empty");
 80047bc:	2001      	movs	r0, #1
 80047be:	6899      	ldr	r1, [r3, #8]
 80047c0:	fab1 f181 	clz	r1, r1
 80047c4:	0949      	lsrs	r1, r1, #5
 80047c6:	f7fe fcfb 	bl	80031c0 <_test_assert>
 80047ca:	4606      	mov	r6, r0
 80047cc:	b9e8      	cbnz	r0, 800480a <queues1_execute.lto_priv.155+0x5a>
 80047ce:	f380 8811 	msr	BASEPRI, r0
 80047d2:	f384 8811 	msr	BASEPRI, r4
 80047d6:	2441      	movs	r4, #65	; 0x41

  /* Queue filling */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
 80047d8:	4d88      	ldr	r5, [pc, #544]	; (80049fc <queues1_execute.lto_priv.155+0x24c>)
 80047da:	4621      	mov	r1, r4
 80047dc:	3401      	adds	r4, #1
 80047de:	4628      	mov	r0, r5
 80047e0:	b2e4      	uxtb	r4, r4
 80047e2:	f7fc ffbd 	bl	8001760 <chIQPutI>
  /* Initial empty state */
  test_assert_lock(1, chIQIsEmptyI(&iq), "not empty");

  /* Queue filling */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 80047e6:	2c45      	cmp	r4, #69	; 0x45
 80047e8:	d1f6      	bne.n	80047d8 <queues1_execute.lto_priv.155+0x28>
 80047ea:	2300      	movs	r3, #0
 80047ec:	f383 8811 	msr	BASEPRI, r3
 80047f0:	2320      	movs	r3, #32
 80047f2:	f383 8811 	msr	BASEPRI, r3
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 80047f6:	69aa      	ldr	r2, [r5, #24]
 80047f8:	696b      	ldr	r3, [r5, #20]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d038      	beq.n	8004870 <queues1_execute.lto_priv.155+0xc0>
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();
  test_assert_lock(2, chIQIsFullI(&iq), "still has space");
 80047fe:	4631      	mov	r1, r6
 8004800:	2002      	movs	r0, #2
 8004802:	f7fe fcdd 	bl	80031c0 <_test_assert>
 8004806:	4604      	mov	r4, r0
 8004808:	b120      	cbz	r0, 8004814 <queues1_execute.lto_priv.155+0x64>
 800480a:	2300      	movs	r3, #0
 800480c:	f383 8811 	msr	BASEPRI, r3
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
  test_wait_threads();

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
}
 8004810:	b003      	add	sp, #12
 8004812:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004814:	f380 8811 	msr	BASEPRI, r0
 8004818:	2320      	movs	r3, #32
 800481a:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();
  test_assert_lock(2, chIQIsFullI(&iq), "still has space");
  test_assert_lock(3, chIQPutI(&iq, 0) == Q_FULL, "failed to report Q_FULL");
 800481e:	4877      	ldr	r0, [pc, #476]	; (80049fc <queues1_execute.lto_priv.155+0x24c>)
 8004820:	4621      	mov	r1, r4
 8004822:	f7fc ff9d 	bl	8001760 <chIQPutI>
 8004826:	3004      	adds	r0, #4
 8004828:	bf14      	ite	ne
 800482a:	2100      	movne	r1, #0
 800482c:	2101      	moveq	r1, #1
 800482e:	2003      	movs	r0, #3
 8004830:	f7fe fcc6 	bl	80031c0 <_test_assert>
 8004834:	b9c0      	cbnz	r0, 8004868 <queues1_execute.lto_priv.155+0xb8>
 8004836:	f380 8811 	msr	BASEPRI, r0
 800483a:	2404      	movs	r4, #4
 *
 * @api
 */
static inline msg_t chIQGet(input_queue_t *iqp) {

  return chIQGetTimeout(iqp, TIME_INFINITE);
 800483c:	4d6f      	ldr	r5, [pc, #444]	; (80049fc <queues1_execute.lto_priv.155+0x24c>)
 800483e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004842:	4628      	mov	r0, r5
 8004844:	f7fd fad4 	bl	8001df0 <chIQGetTimeout>

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    test_emit_token(chIQGet(&iq));
 8004848:	b2c0      	uxtb	r0, r0
 800484a:	f7fe fcd1 	bl	80031f0 <test_emit_token>
  chSysUnlock();
  test_assert_lock(2, chIQIsFullI(&iq), "still has space");
  test_assert_lock(3, chIQPutI(&iq, 0) == Q_FULL, "failed to report Q_FULL");

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 800484e:	3c01      	subs	r4, #1
 8004850:	d1f4      	bne.n	800483c <queues1_execute.lto_priv.155+0x8c>
 8004852:	2620      	movs	r6, #32
 8004854:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 8004858:	68a9      	ldr	r1, [r5, #8]
    test_emit_token(chIQGet(&iq));
  test_assert_lock(4, chIQIsEmptyI(&iq), "still full");
 800485a:	2004      	movs	r0, #4
 800485c:	fab1 f181 	clz	r1, r1
 8004860:	0949      	lsrs	r1, r1, #5
 8004862:	f7fe fcad 	bl	80031c0 <_test_assert>
 8004866:	b140      	cbz	r0, 800487a <queues1_execute.lto_priv.155+0xca>
 8004868:	f384 8811 	msr	BASEPRI, r4
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
  test_wait_threads();

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
}
 800486c:	b003      	add	sp, #12
 800486e:	bdf0      	pop	{r4, r5, r6, r7, pc}
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 8004870:	68ae      	ldr	r6, [r5, #8]
 8004872:	3600      	adds	r6, #0
 8004874:	bf18      	it	ne
 8004876:	2601      	movne	r6, #1
 8004878:	e7c1      	b.n	80047fe <queues1_execute.lto_priv.155+0x4e>
 800487a:	f384 8811 	msr	BASEPRI, r4

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    test_emit_token(chIQGet(&iq));
  test_assert_lock(4, chIQIsEmptyI(&iq), "still full");
  test_assert_sequence(5, "ABCD");
 800487e:	2005      	movs	r0, #5
 8004880:	495f      	ldr	r1, [pc, #380]	; (8004a00 <queues1_execute.lto_priv.155+0x250>)
 8004882:	f7fe fc75 	bl	8003170 <_test_assert_sequence>
 8004886:	2800      	cmp	r0, #0
 8004888:	d1c2      	bne.n	8004810 <queues1_execute.lto_priv.155+0x60>
 800488a:	f386 8811 	msr	BASEPRI, r6
 800488e:	2441      	movs	r4, #65	; 0x41

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
 8004890:	4d5a      	ldr	r5, [pc, #360]	; (80049fc <queues1_execute.lto_priv.155+0x24c>)
 8004892:	4621      	mov	r1, r4
 8004894:	3401      	adds	r4, #1
 8004896:	4628      	mov	r0, r5
 8004898:	b2e4      	uxtb	r4, r4
 800489a:	f7fc ff61 	bl	8001760 <chIQPutI>
  test_assert_lock(4, chIQIsEmptyI(&iq), "still full");
  test_assert_sequence(5, "ABCD");

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 800489e:	2c45      	cmp	r4, #69	; 0x45
 80048a0:	d1f6      	bne.n	8004890 <queues1_execute.lto_priv.155+0xe0>
 80048a2:	2300      	movs	r3, #0
 80048a4:	f383 8811 	msr	BASEPRI, r3
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();

  /* Reading the whole thing */
  n = chIQReadTimeout(&iq, wa[1], TEST_QUEUES_SIZE * 2, TIME_IMMEDIATE);
 80048a8:	4956      	ldr	r1, [pc, #344]	; (8004a04 <queues1_execute.lto_priv.155+0x254>)
 80048aa:	2208      	movs	r2, #8
 80048ac:	4628      	mov	r0, r5
 80048ae:	f7fd fa5f 	bl	8001d70 <chIQReadTimeout>
  test_assert(6, n == TEST_QUEUES_SIZE, "wrong returned size");
 80048b2:	f1a0 0104 	sub.w	r1, r0, #4
 80048b6:	fab1 f181 	clz	r1, r1
 80048ba:	2006      	movs	r0, #6
 80048bc:	0949      	lsrs	r1, r1, #5
 80048be:	f7fe fc7f 	bl	80031c0 <_test_assert>
 80048c2:	4604      	mov	r4, r0
 80048c4:	2800      	cmp	r0, #0
 80048c6:	d1a3      	bne.n	8004810 <queues1_execute.lto_priv.155+0x60>
 80048c8:	2620      	movs	r6, #32
 80048ca:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 80048ce:	68a9      	ldr	r1, [r5, #8]
  test_assert_lock(7, chIQIsEmptyI(&iq), "still full");
 80048d0:	2007      	movs	r0, #7
 80048d2:	fab1 f181 	clz	r1, r1
 80048d6:	0949      	lsrs	r1, r1, #5
 80048d8:	f7fe fc72 	bl	80031c0 <_test_assert>
 80048dc:	2800      	cmp	r0, #0
 80048de:	d1c3      	bne.n	8004868 <queues1_execute.lto_priv.155+0xb8>
 80048e0:	f380 8811 	msr	BASEPRI, r0
 80048e4:	f386 8811 	msr	BASEPRI, r6
 80048e8:	2441      	movs	r4, #65	; 0x41

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
 80048ea:	4d44      	ldr	r5, [pc, #272]	; (80049fc <queues1_execute.lto_priv.155+0x24c>)
 80048ec:	4621      	mov	r1, r4
 80048ee:	3401      	adds	r4, #1
 80048f0:	4628      	mov	r0, r5
 80048f2:	b2e4      	uxtb	r4, r4
 80048f4:	f7fc ff34 	bl	8001760 <chIQPutI>
  test_assert(6, n == TEST_QUEUES_SIZE, "wrong returned size");
  test_assert_lock(7, chIQIsEmptyI(&iq), "still full");

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 80048f8:	2c45      	cmp	r4, #69	; 0x45
 80048fa:	d1f6      	bne.n	80048ea <queues1_execute.lto_priv.155+0x13a>
 80048fc:	2300      	movs	r3, #0
 80048fe:	f383 8811 	msr	BASEPRI, r3
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();

  /* Partial reads */
  n = chIQReadTimeout(&iq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8004902:	4940      	ldr	r1, [pc, #256]	; (8004a04 <queues1_execute.lto_priv.155+0x254>)
 8004904:	4628      	mov	r0, r5
 8004906:	2202      	movs	r2, #2
 8004908:	f7fd fa32 	bl	8001d70 <chIQReadTimeout>
  test_assert(8, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 800490c:	f1a0 0102 	sub.w	r1, r0, #2
 8004910:	fab1 f181 	clz	r1, r1
 8004914:	2008      	movs	r0, #8
 8004916:	0949      	lsrs	r1, r1, #5
 8004918:	f7fe fc52 	bl	80031c0 <_test_assert>
 800491c:	2800      	cmp	r0, #0
 800491e:	f47f af77 	bne.w	8004810 <queues1_execute.lto_priv.155+0x60>
  n = chIQReadTimeout(&iq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8004922:	4603      	mov	r3, r0
 8004924:	4937      	ldr	r1, [pc, #220]	; (8004a04 <queues1_execute.lto_priv.155+0x254>)
 8004926:	2202      	movs	r2, #2
 8004928:	4628      	mov	r0, r5
 800492a:	f7fd fa21 	bl	8001d70 <chIQReadTimeout>
  test_assert(9, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 800492e:	f1a0 0102 	sub.w	r1, r0, #2
 8004932:	fab1 f181 	clz	r1, r1
 8004936:	2009      	movs	r0, #9
 8004938:	0949      	lsrs	r1, r1, #5
 800493a:	f7fe fc41 	bl	80031c0 <_test_assert>
 800493e:	4606      	mov	r6, r0
 8004940:	2800      	cmp	r0, #0
 8004942:	f47f af65 	bne.w	8004810 <queues1_execute.lto_priv.155+0x60>
 8004946:	2720      	movs	r7, #32
 8004948:	f387 8811 	msr	BASEPRI, r7
 800494c:	68a9      	ldr	r1, [r5, #8]
  test_assert_lock(10, chIQIsEmptyI(&iq), "still full");
 800494e:	200a      	movs	r0, #10
 8004950:	fab1 f181 	clz	r1, r1
 8004954:	0949      	lsrs	r1, r1, #5
 8004956:	f7fe fc33 	bl	80031c0 <_test_assert>
 800495a:	4604      	mov	r4, r0
 800495c:	b110      	cbz	r0, 8004964 <queues1_execute.lto_priv.155+0x1b4>
 800495e:	f386 8811 	msr	BASEPRI, r6
 8004962:	e755      	b.n	8004810 <queues1_execute.lto_priv.155+0x60>
 8004964:	f380 8811 	msr	BASEPRI, r0
 8004968:	f387 8811 	msr	BASEPRI, r7

  /* Testing reset */
  chSysLock();
  chIQPutI(&iq, 0);
 800496c:	4621      	mov	r1, r4
 800496e:	4628      	mov	r0, r5
 8004970:	f7fc fef6 	bl	8001760 <chIQPutI>
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
 8004974:	68eb      	ldr	r3, [r5, #12]
  iqp->q_wrptr = iqp->q_buffer;
  iqp->q_counter = 0;
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 8004976:	4628      	mov	r0, r5
 8004978:	f06f 0101 	mvn.w	r1, #1

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
  iqp->q_wrptr = iqp->q_buffer;
  iqp->q_counter = 0;
 800497c:	60ac      	str	r4, [r5, #8]
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
 800497e:	61ab      	str	r3, [r5, #24]
  iqp->q_wrptr = iqp->q_buffer;
 8004980:	616b      	str	r3, [r5, #20]
  iqp->q_counter = 0;
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 8004982:	f7fd f8a5 	bl	8001ad0 <chThdDequeueAllI>
 8004986:	f384 8811 	msr	BASEPRI, r4
 800498a:	f387 8811 	msr	BASEPRI, r7
 */
static inline size_t chIQGetFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (size_t)chQSpaceI(iqp);
 800498e:	68a9      	ldr	r1, [r5, #8]
  chIQResetI(&iq);
  chSysUnlock();
  test_assert_lock(11, chIQGetFullI(&iq) == 0, "still full");
 8004990:	200b      	movs	r0, #11
 8004992:	fab1 f181 	clz	r1, r1
 8004996:	0949      	lsrs	r1, r1, #5
 8004998:	f7fe fc12 	bl	80031c0 <_test_assert>
 800499c:	4606      	mov	r6, r0
 800499e:	2800      	cmp	r0, #0
 80049a0:	f47f af62 	bne.w	8004868 <queues1_execute.lto_priv.155+0xb8>
 80049a4:	f380 8811 	msr	BASEPRI, r0
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80049a8:	4b17      	ldr	r3, [pc, #92]	; (8004a08 <queues1_execute.lto_priv.155+0x258>)
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, NULL);
 80049aa:	f44f 71a4 	mov.w	r1, #328	; 0x148
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	4816      	ldr	r0, [pc, #88]	; (8004a0c <queues1_execute.lto_priv.155+0x25c>)
 80049b2:	689a      	ldr	r2, [r3, #8]
 80049b4:	4b16      	ldr	r3, [pc, #88]	; (8004a10 <queues1_execute.lto_priv.155+0x260>)
 80049b6:	3201      	adds	r2, #1
 80049b8:	9600      	str	r6, [sp, #0]
 80049ba:	f7fc fdf9 	bl	80015b0 <chThdCreateStatic>
 80049be:	4b15      	ldr	r3, [pc, #84]	; (8004a14 <queues1_execute.lto_priv.155+0x264>)
 80049c0:	6018      	str	r0, [r3, #0]
 80049c2:	f387 8811 	msr	BASEPRI, r7
 80049c6:	68a9      	ldr	r1, [r5, #8]
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
 80049c8:	200c      	movs	r0, #12
 80049ca:	fab1 f181 	clz	r1, r1
 80049ce:	0949      	lsrs	r1, r1, #5
 80049d0:	f7fe fbf6 	bl	80031c0 <_test_assert>
 80049d4:	2800      	cmp	r0, #0
 80049d6:	d1c2      	bne.n	800495e <queues1_execute.lto_priv.155+0x1ae>
 80049d8:	f380 8811 	msr	BASEPRI, r0
  test_wait_threads();
 80049dc:	f7fe fb70 	bl	80030c0 <test_wait_threads>

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
 80049e0:	4628      	mov	r0, r5
 80049e2:	210a      	movs	r1, #10
 80049e4:	f7fd fa04 	bl	8001df0 <chIQGetTimeout>
 80049e8:	1c43      	adds	r3, r0, #1
 80049ea:	4259      	negs	r1, r3
 80049ec:	4159      	adcs	r1, r3
 80049ee:	200d      	movs	r0, #13
}
 80049f0:	b003      	add	sp, #12
 80049f2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, NULL);
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
  test_wait_threads();

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
 80049f6:	f7fe bbe3 	b.w	80031c0 <_test_assert>
 80049fa:	bf00      	nop
 80049fc:	20000850 	.word	0x20000850
 8004a00:	08007770 	.word	0x08007770
 8004a04:	20000b78 	.word	0x20000b78
 8004a08:	20001098 	.word	0x20001098
 8004a0c:	20000a30 	.word	0x20000a30
 8004a10:	08004791 	.word	0x08004791
 8004a14:	20000a04 	.word	0x20000a04
	...

08004a20 <regfind>:
 * <h2>Description</h2>
 * Registry and Thread References APIs are tested for functionality and
 * coverage.
 */

static bool regfind(thread_t *tp) {
 8004a20:	b538      	push	{r3, r4, r5, lr}
 8004a22:	4605      	mov	r5, r0
 8004a24:	2320      	movs	r3, #32
 8004a26:	f383 8811 	msr	BASEPRI, r3
 */
thread_t *chRegFirstThread(void) {
  thread_t *tp;

  chSysLock();
  tp = ch.rlist.r_newer;
 8004a2a:	4b0a      	ldr	r3, [pc, #40]	; (8004a54 <regfind+0x34>)
 8004a2c:	2400      	movs	r4, #0
 8004a2e:	691b      	ldr	r3, [r3, #16]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs++;
 8004a30:	7f9a      	ldrb	r2, [r3, #30]
 8004a32:	3201      	adds	r2, #1
 8004a34:	779a      	strb	r2, [r3, #30]
 8004a36:	f384 8811 	msr	BASEPRI, r4
  bool found = false;

  ftp = chRegFirstThread();
  do {
    found |= ftp == tp;
    ftp = chRegNextThread(ftp);
 8004a3a:	4618      	mov	r0, r3
  thread_t *ftp;
  bool found = false;

  ftp = chRegFirstThread();
  do {
    found |= ftp == tp;
 8004a3c:	42ab      	cmp	r3, r5
 8004a3e:	bf08      	it	eq
 8004a40:	f044 0401 	orreq.w	r4, r4, #1
    ftp = chRegNextThread(ftp);
 8004a44:	f7fc fc7c 	bl	8001340 <chRegNextThread>
  } while (ftp != NULL);
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2800      	cmp	r0, #0
 8004a4c:	d1f5      	bne.n	8004a3a <regfind+0x1a>
  return found;
}
 8004a4e:	4620      	mov	r0, r4
 8004a50:	bd38      	pop	{r3, r4, r5, pc}
 8004a52:	bf00      	nop
 8004a54:	20001098 	.word	0x20001098
	...

08004a60 <dyn3_execute.lto_priv.153>:
static void dyn3_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}

static void dyn3_execute(void) {
 8004a60:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004a62:	4a4a      	ldr	r2, [pc, #296]	; (8004b8c <dyn3_execute.lto_priv.153+0x12c>)
  thread_t *tp;
  tprio_t prio = chThdGetPriorityX();

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
 8004a64:	4b4a      	ldr	r3, [pc, #296]	; (8004b90 <dyn3_execute.lto_priv.153+0x130>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004a66:	6992      	ldr	r2, [r2, #24]
static void dyn3_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}

static void dyn3_execute(void) {
 8004a68:	b082      	sub	sp, #8
  thread_t *tp;
  tprio_t prio = chThdGetPriorityX();

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
 8004a6a:	6892      	ldr	r2, [r2, #8]
 8004a6c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	4848      	ldr	r0, [pc, #288]	; (8004b94 <dyn3_execute.lto_priv.153+0x134>)
 8004a74:	3a01      	subs	r2, #1
 8004a76:	4b48      	ldr	r3, [pc, #288]	; (8004b98 <dyn3_execute.lto_priv.153+0x138>)
 8004a78:	f7fc fd52 	bl	8001520 <chThdCreateFromHeap>
  test_assert(1, tp->p_refs == 1, "wrong initial reference counter");
 8004a7c:	7f81      	ldrb	r1, [r0, #30]
static void dyn3_execute(void) {
  thread_t *tp;
  tprio_t prio = chThdGetPriorityX();

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
 8004a7e:	4604      	mov	r4, r0
  test_assert(1, tp->p_refs == 1, "wrong initial reference counter");
 8004a80:	2001      	movs	r0, #1
 8004a82:	1a09      	subs	r1, r1, r0
 8004a84:	fab1 f181 	clz	r1, r1
 8004a88:	0949      	lsrs	r1, r1, #5
 8004a8a:	f7fe fb99 	bl	80031c0 <_test_assert>
 8004a8e:	b108      	cbz	r0, 8004a94 <dyn3_execute.lto_priv.153+0x34>
  test_assert(10, tp->p_state == CH_STATE_FINAL, "invalid state");

  /* Clearing the zombie by scanning the registry.*/
  test_assert(11, regfind(tp), "thread disappeared");
  test_assert(12, !regfind(tp), "thread still in registry");
}
 8004a90:	b002      	add	sp, #8
 8004a92:	bd10      	pop	{r4, pc}
 8004a94:	2320      	movs	r3, #32
 8004a96:	f383 8811 	msr	BASEPRI, r3
 */
thread_t *chThdAddRef(thread_t *tp) {

  chSysLock();
  chDbgAssert(tp->p_refs < (trefs_t)255, "too many references");
  tp->p_refs++;
 8004a9a:	7fa3      	ldrb	r3, [r4, #30]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	77a3      	strb	r3, [r4, #30]
 8004aa0:	f380 8811 	msr	BASEPRI, r0

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
  test_assert(1, tp->p_refs == 1, "wrong initial reference counter");
  chThdAddRef(tp);
  test_assert(2, tp->p_refs == 2, "references increase failure");
 8004aa4:	7fa1      	ldrb	r1, [r4, #30]
 8004aa6:	2002      	movs	r0, #2
 8004aa8:	1a09      	subs	r1, r1, r0
 8004aaa:	fab1 f181 	clz	r1, r1
 8004aae:	0949      	lsrs	r1, r1, #5
 8004ab0:	f7fe fb86 	bl	80031c0 <_test_assert>
 8004ab4:	2800      	cmp	r0, #0
 8004ab6:	d1eb      	bne.n	8004a90 <dyn3_execute.lto_priv.153+0x30>
  chThdRelease(tp);
 8004ab8:	4620      	mov	r0, r4
 8004aba:	f7fc fc01 	bl	80012c0 <chThdRelease>
  test_assert(3, tp->p_refs == 1, "references decrease failure");
 8004abe:	7fa1      	ldrb	r1, [r4, #30]
 8004ac0:	2003      	movs	r0, #3
 8004ac2:	f1a1 0101 	sub.w	r1, r1, #1
 8004ac6:	fab1 f181 	clz	r1, r1
 8004aca:	0949      	lsrs	r1, r1, #5
 8004acc:	f7fe fb78 	bl	80031c0 <_test_assert>
 8004ad0:	2800      	cmp	r0, #0
 8004ad2:	d1dd      	bne.n	8004a90 <dyn3_execute.lto_priv.153+0x30>

  /* Verify the new threads count.*/
  test_assert(4, regfind(tp), "thread missing from registry");
 8004ad4:	4620      	mov	r0, r4
 8004ad6:	f7ff ffa3 	bl	8004a20 <regfind>
 8004ada:	4601      	mov	r1, r0
 8004adc:	2004      	movs	r0, #4
 8004ade:	f7fe fb6f 	bl	80031c0 <_test_assert>
 8004ae2:	2800      	cmp	r0, #0
 8004ae4:	d1d4      	bne.n	8004a90 <dyn3_execute.lto_priv.153+0x30>
  test_assert(5, regfind(tp), "thread disappeared");
 8004ae6:	4620      	mov	r0, r4
 8004ae8:	f7ff ff9a 	bl	8004a20 <regfind>
 8004aec:	4601      	mov	r1, r0
 8004aee:	2005      	movs	r0, #5
 8004af0:	f7fe fb66 	bl	80031c0 <_test_assert>
 8004af4:	2800      	cmp	r0, #0
 8004af6:	d1cb      	bne.n	8004a90 <dyn3_execute.lto_priv.153+0x30>

  /* Detach and let the thread execute and terminate.*/
  chThdRelease(tp);
 8004af8:	4620      	mov	r0, r4
 8004afa:	f7fc fbe1 	bl	80012c0 <chThdRelease>
  test_assert(6, tp->p_refs == 0, "detach failure");
 8004afe:	7fa1      	ldrb	r1, [r4, #30]
 8004b00:	2006      	movs	r0, #6
 8004b02:	fab1 f181 	clz	r1, r1
 8004b06:	0949      	lsrs	r1, r1, #5
 8004b08:	f7fe fb5a 	bl	80031c0 <_test_assert>
 8004b0c:	2800      	cmp	r0, #0
 8004b0e:	d1bf      	bne.n	8004a90 <dyn3_execute.lto_priv.153+0x30>
  test_assert(7, tp->p_state == CH_STATE_READY, "invalid state");
 8004b10:	7f21      	ldrb	r1, [r4, #28]
 8004b12:	2007      	movs	r0, #7
 8004b14:	fab1 f181 	clz	r1, r1
 8004b18:	0949      	lsrs	r1, r1, #5
 8004b1a:	f7fe fb51 	bl	80031c0 <_test_assert>
 8004b1e:	2800      	cmp	r0, #0
 8004b20:	d1b6      	bne.n	8004a90 <dyn3_execute.lto_priv.153+0x30>
  test_assert(8, regfind(tp), "thread disappeared");
 8004b22:	4620      	mov	r0, r4
 8004b24:	f7ff ff7c 	bl	8004a20 <regfind>
 8004b28:	4601      	mov	r1, r0
 8004b2a:	2008      	movs	r0, #8
 8004b2c:	f7fe fb48 	bl	80031c0 <_test_assert>
 8004b30:	2800      	cmp	r0, #0
 8004b32:	d1ad      	bne.n	8004a90 <dyn3_execute.lto_priv.153+0x30>
  test_assert(9, regfind(tp), "thread disappeared");
 8004b34:	4620      	mov	r0, r4
 8004b36:	f7ff ff73 	bl	8004a20 <regfind>
 8004b3a:	4601      	mov	r1, r0
 8004b3c:	2009      	movs	r0, #9
 8004b3e:	f7fe fb3f 	bl	80031c0 <_test_assert>
 8004b42:	2800      	cmp	r0, #0
 8004b44:	d1a4      	bne.n	8004a90 <dyn3_execute.lto_priv.153+0x30>
  chThdSleepMilliseconds(50);           /* The thread just terminates.      */
 8004b46:	2064      	movs	r0, #100	; 0x64
 8004b48:	f7fd f97a 	bl	8001e40 <chThdSleep>
  test_assert(10, tp->p_state == CH_STATE_FINAL, "invalid state");
 8004b4c:	7f21      	ldrb	r1, [r4, #28]
 8004b4e:	200a      	movs	r0, #10
 8004b50:	f1a1 030f 	sub.w	r3, r1, #15
 8004b54:	4259      	negs	r1, r3
 8004b56:	4159      	adcs	r1, r3
 8004b58:	f7fe fb32 	bl	80031c0 <_test_assert>
 8004b5c:	2800      	cmp	r0, #0
 8004b5e:	d197      	bne.n	8004a90 <dyn3_execute.lto_priv.153+0x30>

  /* Clearing the zombie by scanning the registry.*/
  test_assert(11, regfind(tp), "thread disappeared");
 8004b60:	4620      	mov	r0, r4
 8004b62:	f7ff ff5d 	bl	8004a20 <regfind>
 8004b66:	4601      	mov	r1, r0
 8004b68:	200b      	movs	r0, #11
 8004b6a:	f7fe fb29 	bl	80031c0 <_test_assert>
 8004b6e:	2800      	cmp	r0, #0
 8004b70:	d18e      	bne.n	8004a90 <dyn3_execute.lto_priv.153+0x30>
  test_assert(12, !regfind(tp), "thread still in registry");
 8004b72:	4620      	mov	r0, r4
 8004b74:	f7ff ff54 	bl	8004a20 <regfind>
 8004b78:	f080 0101 	eor.w	r1, r0, #1
 8004b7c:	b2c9      	uxtb	r1, r1
 8004b7e:	200c      	movs	r0, #12
}
 8004b80:	b002      	add	sp, #8
 8004b82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chThdSleepMilliseconds(50);           /* The thread just terminates.      */
  test_assert(10, tp->p_state == CH_STATE_FINAL, "invalid state");

  /* Clearing the zombie by scanning the registry.*/
  test_assert(11, regfind(tp), "thread disappeared");
  test_assert(12, !regfind(tp), "thread still in registry");
 8004b86:	f7fe bb1b 	b.w	80031c0 <_test_assert>
 8004b8a:	bf00      	nop
 8004b8c:	20001098 	.word	0x20001098
 8004b90:	08006934 	.word	0x08006934
 8004b94:	20000998 	.word	0x20000998
 8004b98:	080047a1 	.word	0x080047a1
 8004b9c:	00000000 	.word	0x00000000

08004ba0 <pools1_execute.lto_priv.147>:
static void pools1_setup(void) {

  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}

static void pools1_execute(void) {
 8004ba0:	b570      	push	{r4, r5, r6, lr}
 8004ba2:	4b2f      	ldr	r3, [pc, #188]	; (8004c60 <pools1_execute.lto_priv.147+0xc0>)
 8004ba4:	4c2f      	ldr	r4, [pc, #188]	; (8004c64 <pools1_execute.lto_priv.147+0xc4>)
 8004ba6:	2205      	movs	r2, #5
 8004ba8:	2520      	movs	r5, #32
 8004baa:	2000      	movs	r0, #0
 8004bac:	f385 8811 	msr	BASEPRI, r5
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8004bb0:	6821      	ldr	r1, [r4, #0]
  mp->mp_next = php;
 8004bb2:	6023      	str	r3, [r4, #0]
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8004bb4:	6019      	str	r1, [r3, #0]
 8004bb6:	f380 8811 	msr	BASEPRI, r0
  chDbgCheck((mp != NULL) && (n != 0U));

  while (n != 0U) {
    chPoolAdd(mp, p);
    /*lint -save -e9087 [11.3] Safe cast.*/
    p = (void *)(((uint8_t *)p) + mp->mp_object_size);
 8004bba:	6861      	ldr	r1, [r4, #4]
 */
void chPoolLoadArray(memory_pool_t *mp, void *p, size_t n) {

  chDbgCheck((mp != NULL) && (n != 0U));

  while (n != 0U) {
 8004bbc:	3a01      	subs	r2, #1
    chPoolAdd(mp, p);
    /*lint -save -e9087 [11.3] Safe cast.*/
    p = (void *)(((uint8_t *)p) + mp->mp_object_size);
 8004bbe:	440b      	add	r3, r1
 */
void chPoolLoadArray(memory_pool_t *mp, void *p, size_t n) {

  chDbgCheck((mp != NULL) && (n != 0U));

  while (n != 0U) {
 8004bc0:	d1f4      	bne.n	8004bac <pools1_execute.lto_priv.147+0xc>
 8004bc2:	2505      	movs	r5, #5
  /* Adding the WAs to the pool.*/
  chPoolLoadArray(&mp1, wa[0], MAX_THREADS);

  /* Emptying the pool.*/
  for (i = 0; i < MAX_THREADS; i++)
    test_assert(1, chPoolAlloc(&mp1) != NULL, "list empty");
 8004bc4:	4827      	ldr	r0, [pc, #156]	; (8004c64 <pools1_execute.lto_priv.147+0xc4>)
 8004bc6:	f7fe fd6b 	bl	80036a0 <chPoolAlloc>
 8004bca:	1c01      	adds	r1, r0, #0
 8004bcc:	bf18      	it	ne
 8004bce:	2101      	movne	r1, #1
 8004bd0:	2001      	movs	r0, #1
 8004bd2:	f7fe faf5 	bl	80031c0 <_test_assert>
 8004bd6:	bb90      	cbnz	r0, 8004c3e <pools1_execute.lto_priv.147+0x9e>

  /* Adding the WAs to the pool.*/
  chPoolLoadArray(&mp1, wa[0], MAX_THREADS);

  /* Emptying the pool.*/
  for (i = 0; i < MAX_THREADS; i++)
 8004bd8:	3d01      	subs	r5, #1
 8004bda:	d1f3      	bne.n	8004bc4 <pools1_execute.lto_priv.147+0x24>
    test_assert(1, chPoolAlloc(&mp1) != NULL, "list empty");

  /* Now must be empty.*/
  test_assert(2, chPoolAlloc(&mp1) == NULL, "list not empty");
 8004bdc:	4821      	ldr	r0, [pc, #132]	; (8004c64 <pools1_execute.lto_priv.147+0xc4>)
 8004bde:	f7fe fd5f 	bl	80036a0 <chPoolAlloc>
 8004be2:	fab0 f180 	clz	r1, r0
 8004be6:	2002      	movs	r0, #2
 8004be8:	0949      	lsrs	r1, r1, #5
 8004bea:	f7fe fae9 	bl	80031c0 <_test_assert>
 8004bee:	bb30      	cbnz	r0, 8004c3e <pools1_execute.lto_priv.147+0x9e>
 8004bf0:	4b1d      	ldr	r3, [pc, #116]	; (8004c68 <pools1_execute.lto_priv.147+0xc8>)
 8004bf2:	2620      	movs	r6, #32
 8004bf4:	f103 0014 	add.w	r0, r3, #20

  /* Adding the WAs to the pool, one by one this time.*/
  for (i = 0; i < MAX_THREADS; i++)
    chPoolFree(&mp1, wa[i]);
 8004bf8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bfc:	f386 8811 	msr	BASEPRI, r6
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8004c00:	6821      	ldr	r1, [r4, #0]
 8004c02:	6011      	str	r1, [r2, #0]
  mp->mp_next = php;
 8004c04:	6022      	str	r2, [r4, #0]
 8004c06:	f385 8811 	msr	BASEPRI, r5

  /* Now must be empty.*/
  test_assert(2, chPoolAlloc(&mp1) == NULL, "list not empty");

  /* Adding the WAs to the pool, one by one this time.*/
  for (i = 0; i < MAX_THREADS; i++)
 8004c0a:	4283      	cmp	r3, r0
 8004c0c:	d1f4      	bne.n	8004bf8 <pools1_execute.lto_priv.147+0x58>
 8004c0e:	2405      	movs	r4, #5
    chPoolFree(&mp1, wa[i]);

  /* Emptying the pool again.*/
  for (i = 0; i < MAX_THREADS; i++)
    test_assert(3, chPoolAlloc(&mp1) != NULL, "list empty");
 8004c10:	4d14      	ldr	r5, [pc, #80]	; (8004c64 <pools1_execute.lto_priv.147+0xc4>)
 8004c12:	4628      	mov	r0, r5
 8004c14:	f7fe fd44 	bl	80036a0 <chPoolAlloc>
 8004c18:	1c01      	adds	r1, r0, #0
 8004c1a:	bf18      	it	ne
 8004c1c:	2101      	movne	r1, #1
 8004c1e:	2003      	movs	r0, #3
 8004c20:	f7fe face 	bl	80031c0 <_test_assert>
 8004c24:	b958      	cbnz	r0, 8004c3e <pools1_execute.lto_priv.147+0x9e>
  /* Adding the WAs to the pool, one by one this time.*/
  for (i = 0; i < MAX_THREADS; i++)
    chPoolFree(&mp1, wa[i]);

  /* Emptying the pool again.*/
  for (i = 0; i < MAX_THREADS; i++)
 8004c26:	3c01      	subs	r4, #1
 8004c28:	d1f2      	bne.n	8004c10 <pools1_execute.lto_priv.147+0x70>
    test_assert(3, chPoolAlloc(&mp1) != NULL, "list empty");

  /* Now must be empty again.*/
  test_assert(4, chPoolAlloc(&mp1) == NULL, "list not empty");
 8004c2a:	4628      	mov	r0, r5
 8004c2c:	f7fe fd38 	bl	80036a0 <chPoolAlloc>
 8004c30:	fab0 f180 	clz	r1, r0
 8004c34:	2004      	movs	r0, #4
 8004c36:	0949      	lsrs	r1, r1, #5
 8004c38:	f7fe fac2 	bl	80031c0 <_test_assert>
 8004c3c:	b100      	cbz	r0, 8004c40 <pools1_execute.lto_priv.147+0xa0>
 8004c3e:	bd70      	pop	{r4, r5, r6, pc}

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
  mp->mp_object_size = size;
  mp->mp_provider = provider;
 8004c40:	4a0a      	ldr	r2, [pc, #40]	; (8004c6c <pools1_execute.lto_priv.147+0xcc>)
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
  mp->mp_object_size = size;
 8004c42:	2310      	movs	r3, #16

  /* Covering the case where a provider is unable to return more memory.*/
  chPoolObjectInit(&mp1, 16, null_provider);
  test_assert(5, chPoolAlloc(&mp1) == NULL, "provider returned memory");
 8004c44:	4628      	mov	r0, r5
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 8004c46:	602c      	str	r4, [r5, #0]
  mp->mp_object_size = size;
  mp->mp_provider = provider;
 8004c48:	60aa      	str	r2, [r5, #8]
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
  mp->mp_object_size = size;
 8004c4a:	606b      	str	r3, [r5, #4]
 8004c4c:	f7fe fd28 	bl	80036a0 <chPoolAlloc>
}
 8004c50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  /* Now must be empty again.*/
  test_assert(4, chPoolAlloc(&mp1) == NULL, "list not empty");

  /* Covering the case where a provider is unable to return more memory.*/
  chPoolObjectInit(&mp1, 16, null_provider);
  test_assert(5, chPoolAlloc(&mp1) == NULL, "provider returned memory");
 8004c54:	fab0 f180 	clz	r1, r0
 8004c58:	2005      	movs	r0, #5
 8004c5a:	0949      	lsrs	r1, r1, #5
 8004c5c:	f7fe bab0 	b.w	80031c0 <_test_assert>
 8004c60:	20000a30 	.word	0x20000a30
 8004c64:	20000844 	.word	0x20000844
 8004c68:	08007780 	.word	0x08007780
 8004c6c:	08004731 	.word	0x08004731

08004c70 <dyn2_execute.lto_priv.151>:
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004c70:	4a2f      	ldr	r2, [pc, #188]	; (8004d30 <dyn2_execute.lto_priv.151+0xc0>)
static void dyn2_setup(void) {

  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}

static void dyn2_execute(void) {
 8004c72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004c74:	6992      	ldr	r2, [r2, #24]
 8004c76:	4b2f      	ldr	r3, [pc, #188]	; (8004d34 <dyn2_execute.lto_priv.151+0xc4>)
 8004c78:	492f      	ldr	r1, [pc, #188]	; (8004d38 <dyn2_execute.lto_priv.151+0xc8>)
 8004c7a:	6895      	ldr	r5, [r2, #8]
 8004c7c:	f103 0710 	add.w	r7, r3, #16
 8004c80:	2620      	movs	r6, #32
 8004c82:	2400      	movs	r4, #0
  int i;
  tprio_t prio = chThdGetPriorityX();

  /* Adding the WAs to the pool. */
  for (i = 0; i < 4; i++)
    chPoolFree(&mp1, wa[i]);
 8004c84:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c88:	f386 8811 	msr	BASEPRI, r6
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8004c8c:	6808      	ldr	r0, [r1, #0]
 8004c8e:	6010      	str	r0, [r2, #0]
  mp->mp_next = php;
 8004c90:	600a      	str	r2, [r1, #0]
 8004c92:	f384 8811 	msr	BASEPRI, r4
static void dyn2_execute(void) {
  int i;
  tprio_t prio = chThdGetPriorityX();

  /* Adding the WAs to the pool. */
  for (i = 0; i < 4; i++)
 8004c96:	42bb      	cmp	r3, r7
 8004c98:	d1f4      	bne.n	8004c84 <dyn2_execute.lto_priv.151+0x14>
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
 8004c9a:	4928      	ldr	r1, [pc, #160]	; (8004d3c <dyn2_execute.lto_priv.151+0xcc>)
 8004c9c:	1e68      	subs	r0, r5, #1
 8004c9e:	f001 fb7f 	bl	80063a0 <chThdCreateFromMemoryPool.constprop.69>
 8004ca2:	4c27      	ldr	r4, [pc, #156]	; (8004d40 <dyn2_execute.lto_priv.151+0xd0>)
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
 8004ca4:	4927      	ldr	r1, [pc, #156]	; (8004d44 <dyn2_execute.lto_priv.151+0xd4>)
  /* Adding the WAs to the pool. */
  for (i = 0; i < 4; i++)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
 8004ca6:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
 8004ca8:	1ea8      	subs	r0, r5, #2
 8004caa:	f001 fb79 	bl	80063a0 <chThdCreateFromMemoryPool.constprop.69>
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
 8004cae:	4926      	ldr	r1, [pc, #152]	; (8004d48 <dyn2_execute.lto_priv.151+0xd8>)
  for (i = 0; i < 4; i++)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
 8004cb0:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
 8004cb2:	1ee8      	subs	r0, r5, #3
 8004cb4:	f001 fb74 	bl	80063a0 <chThdCreateFromMemoryPool.constprop.69>
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
 8004cb8:	4924      	ldr	r1, [pc, #144]	; (8004d4c <dyn2_execute.lto_priv.151+0xdc>)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
 8004cba:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
 8004cbc:	1f28      	subs	r0, r5, #4
 8004cbe:	f001 fb6f 	bl	80063a0 <chThdCreateFromMemoryPool.constprop.69>
  threads[4] = chThdCreateFromMemoryPool(&mp1, prio-5, thread, "E");
 8004cc2:	4923      	ldr	r1, [pc, #140]	; (8004d50 <dyn2_execute.lto_priv.151+0xe0>)

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
 8004cc4:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateFromMemoryPool(&mp1, prio-5, thread, "E");
 8004cc6:	1f68      	subs	r0, r5, #5
 8004cc8:	f001 fb6a 	bl	80063a0 <chThdCreateFromMemoryPool.constprop.69>

  test_assert(1, (threads[0] != NULL) &&
 8004ccc:	6821      	ldr	r1, [r4, #0]
  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
  threads[4] = chThdCreateFromMemoryPool(&mp1, prio-5, thread, "E");
 8004cce:	6120      	str	r0, [r4, #16]

  test_assert(1, (threads[0] != NULL) &&
 8004cd0:	b141      	cbz	r1, 8004ce4 <dyn2_execute.lto_priv.151+0x74>
 8004cd2:	6861      	ldr	r1, [r4, #4]
 8004cd4:	b131      	cbz	r1, 8004ce4 <dyn2_execute.lto_priv.151+0x74>
 8004cd6:	68a1      	ldr	r1, [r4, #8]
 8004cd8:	b121      	cbz	r1, 8004ce4 <dyn2_execute.lto_priv.151+0x74>
 8004cda:	68e1      	ldr	r1, [r4, #12]
 8004cdc:	b111      	cbz	r1, 8004ce4 <dyn2_execute.lto_priv.151+0x74>
 8004cde:	fab0 f180 	clz	r1, r0
 8004ce2:	0949      	lsrs	r1, r1, #5
 8004ce4:	2001      	movs	r0, #1
 8004ce6:	f7fe fa6b 	bl	80031c0 <_test_assert>
 8004cea:	b100      	cbz	r0, 8004cee <dyn2_execute.lto_priv.151+0x7e>
 8004cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                 (threads[3] != NULL) &&
                 (threads[4] == NULL),
                 "thread creation failed");

  /* Claiming the memory from terminated threads. */
  test_wait_threads();
 8004cee:	f7fe f9e7 	bl	80030c0 <test_wait_threads>
  test_assert_sequence(2, "ABCD");
 8004cf2:	2002      	movs	r0, #2
 8004cf4:	4917      	ldr	r1, [pc, #92]	; (8004d54 <dyn2_execute.lto_priv.151+0xe4>)
 8004cf6:	f7fe fa3b 	bl	8003170 <_test_assert_sequence>
 8004cfa:	2800      	cmp	r0, #0
 8004cfc:	d1f6      	bne.n	8004cec <dyn2_execute.lto_priv.151+0x7c>
 8004cfe:	2404      	movs	r4, #4

  /* Now the pool must be full again. */
  for (i = 0; i < 4; i++)
    test_assert(3, chPoolAlloc(&mp1) != NULL, "pool list empty");
 8004d00:	480d      	ldr	r0, [pc, #52]	; (8004d38 <dyn2_execute.lto_priv.151+0xc8>)
 8004d02:	f7fe fccd 	bl	80036a0 <chPoolAlloc>
 8004d06:	1c01      	adds	r1, r0, #0
 8004d08:	bf18      	it	ne
 8004d0a:	2101      	movne	r1, #1
 8004d0c:	2003      	movs	r0, #3
 8004d0e:	f7fe fa57 	bl	80031c0 <_test_assert>
 8004d12:	2800      	cmp	r0, #0
 8004d14:	d1ea      	bne.n	8004cec <dyn2_execute.lto_priv.151+0x7c>
  /* Claiming the memory from terminated threads. */
  test_wait_threads();
  test_assert_sequence(2, "ABCD");

  /* Now the pool must be full again. */
  for (i = 0; i < 4; i++)
 8004d16:	3c01      	subs	r4, #1
 8004d18:	d1f2      	bne.n	8004d00 <dyn2_execute.lto_priv.151+0x90>
    test_assert(3, chPoolAlloc(&mp1) != NULL, "pool list empty");
  test_assert(4, chPoolAlloc(&mp1) == NULL, "pool list not empty");
 8004d1a:	4807      	ldr	r0, [pc, #28]	; (8004d38 <dyn2_execute.lto_priv.151+0xc8>)
 8004d1c:	f7fe fcc0 	bl	80036a0 <chPoolAlloc>
}
 8004d20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  test_assert_sequence(2, "ABCD");

  /* Now the pool must be full again. */
  for (i = 0; i < 4; i++)
    test_assert(3, chPoolAlloc(&mp1) != NULL, "pool list empty");
  test_assert(4, chPoolAlloc(&mp1) == NULL, "pool list not empty");
 8004d24:	fab0 f180 	clz	r1, r0
 8004d28:	2004      	movs	r0, #4
 8004d2a:	0949      	lsrs	r1, r1, #5
 8004d2c:	f7fe ba48 	b.w	80031c0 <_test_assert>
 8004d30:	20001098 	.word	0x20001098
 8004d34:	08007780 	.word	0x08007780
 8004d38:	200011ec 	.word	0x200011ec
 8004d3c:	08006934 	.word	0x08006934
 8004d40:	20000a04 	.word	0x20000a04
 8004d44:	08006930 	.word	0x08006930
 8004d48:	08006938 	.word	0x08006938
 8004d4c:	08007948 	.word	0x08007948
 8004d50:	08006940 	.word	0x08006940
 8004d54:	08007770 	.word	0x08007770
	...

08004d60 <dyn1_execute.lto_priv.149>:
static void dyn1_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}

static void dyn1_execute(void) {
 8004d60:	b570      	push	{r4, r5, r6, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004d62:	4b34      	ldr	r3, [pc, #208]	; (8004e34 <dyn1_execute.lto_priv.149+0xd4>)
 8004d64:	b084      	sub	sp, #16
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004d66:	699b      	ldr	r3, [r3, #24]
  size_t n, sz;
  void *p1;
  tprio_t prio = chThdGetPriorityX();

  (void)chHeapStatus(&heap1, &sz);
 8004d68:	a903      	add	r1, sp, #12
 8004d6a:	4833      	ldr	r0, [pc, #204]	; (8004e38 <dyn1_execute.lto_priv.149+0xd8>)
 8004d6c:	689d      	ldr	r5, [r3, #8]
 8004d6e:	f7fe fcaf 	bl	80036d0 <chHeapStatus>
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
 8004d72:	4b32      	ldr	r3, [pc, #200]	; (8004e3c <dyn1_execute.lto_priv.149+0xdc>)
 8004d74:	1e6a      	subs	r2, r5, #1
 8004d76:	9300      	str	r3, [sp, #0]
 8004d78:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004d7c:	4b30      	ldr	r3, [pc, #192]	; (8004e40 <dyn1_execute.lto_priv.149+0xe0>)
 8004d7e:	482e      	ldr	r0, [pc, #184]	; (8004e38 <dyn1_execute.lto_priv.149+0xd8>)
 8004d80:	f7fc fbce 	bl	8001520 <chThdCreateFromHeap>
 8004d84:	4c2f      	ldr	r4, [pc, #188]	; (8004e44 <dyn1_execute.lto_priv.149+0xe4>)
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-1, thread, "A");
  threads[1] = chThdCreateFromHeap(&heap1,
 8004d86:	4b30      	ldr	r3, [pc, #192]	; (8004e48 <dyn1_execute.lto_priv.149+0xe8>)
 8004d88:	1eaa      	subs	r2, r5, #2
  void *p1;
  tprio_t prio = chThdGetPriorityX();

  (void)chHeapStatus(&heap1, &sz);
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
 8004d8a:	6020      	str	r0, [r4, #0]
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-1, thread, "A");
  threads[1] = chThdCreateFromHeap(&heap1,
 8004d8c:	9300      	str	r3, [sp, #0]
 8004d8e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004d92:	4b2b      	ldr	r3, [pc, #172]	; (8004e40 <dyn1_execute.lto_priv.149+0xe0>)
 8004d94:	4828      	ldr	r0, [pc, #160]	; (8004e38 <dyn1_execute.lto_priv.149+0xd8>)
 8004d96:	f7fc fbc3 	bl	8001520 <chThdCreateFromHeap>
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-2, thread, "B");
  /* Allocating the whole heap in order to make the thread creation fail.*/
  (void)chHeapStatus(&heap1, &n);
 8004d9a:	a902      	add	r1, sp, #8
  (void)chHeapStatus(&heap1, &sz);
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-1, thread, "A");
  threads[1] = chThdCreateFromHeap(&heap1,
 8004d9c:	6060      	str	r0, [r4, #4]
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-2, thread, "B");
  /* Allocating the whole heap in order to make the thread creation fail.*/
  (void)chHeapStatus(&heap1, &n);
 8004d9e:	4826      	ldr	r0, [pc, #152]	; (8004e38 <dyn1_execute.lto_priv.149+0xd8>)
 8004da0:	f7fe fc96 	bl	80036d0 <chHeapStatus>
  p1 = chHeapAlloc(&heap1, n);
 8004da4:	9902      	ldr	r1, [sp, #8]
 8004da6:	4824      	ldr	r0, [pc, #144]	; (8004e38 <dyn1_execute.lto_priv.149+0xd8>)
 8004da8:	f7fe fd02 	bl	80037b0 <chHeapAlloc>
  threads[2] = chThdCreateFromHeap(&heap1,
 8004dac:	4b27      	ldr	r3, [pc, #156]	; (8004e4c <dyn1_execute.lto_priv.149+0xec>)
 8004dae:	f44f 71a4 	mov.w	r1, #328	; 0x148
  threads[1] = chThdCreateFromHeap(&heap1,
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-2, thread, "B");
  /* Allocating the whole heap in order to make the thread creation fail.*/
  (void)chHeapStatus(&heap1, &n);
  p1 = chHeapAlloc(&heap1, n);
 8004db2:	4606      	mov	r6, r0
  threads[2] = chThdCreateFromHeap(&heap1,
 8004db4:	1eea      	subs	r2, r5, #3
 8004db6:	9300      	str	r3, [sp, #0]
 8004db8:	481f      	ldr	r0, [pc, #124]	; (8004e38 <dyn1_execute.lto_priv.149+0xd8>)
 8004dba:	4b21      	ldr	r3, [pc, #132]	; (8004e40 <dyn1_execute.lto_priv.149+0xe0>)
 8004dbc:	f7fc fbb0 	bl	8001520 <chThdCreateFromHeap>
 8004dc0:	60a0      	str	r0, [r4, #8]
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-3, thread, "C");
  chHeapFree(p1);
 8004dc2:	4630      	mov	r0, r6
 8004dc4:	f7fe fcac 	bl	8003720 <chHeapFree>

  test_assert(1, (threads[0] != NULL) &&
 8004dc8:	6821      	ldr	r1, [r4, #0]
 8004dca:	b121      	cbz	r1, 8004dd6 <dyn1_execute.lto_priv.149+0x76>
 8004dcc:	6861      	ldr	r1, [r4, #4]
 8004dce:	b111      	cbz	r1, 8004dd6 <dyn1_execute.lto_priv.149+0x76>
 8004dd0:	68a1      	ldr	r1, [r4, #8]
 8004dd2:	b331      	cbz	r1, 8004e22 <dyn1_execute.lto_priv.149+0xc2>
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	2001      	movs	r0, #1
 8004dd8:	f7fe f9f2 	bl	80031c0 <_test_assert>
 8004ddc:	b108      	cbz	r0, 8004de2 <dyn1_execute.lto_priv.149+0x82>
  test_assert_sequence(2, "AB");

  /* Heap status checked again.*/
  test_assert(3, chHeapStatus(&heap1, &n) == 1, "heap fragmented");
  test_assert(4, n == sz, "heap size changed");
}
 8004dde:	b004      	add	sp, #16
 8004de0:	bd70      	pop	{r4, r5, r6, pc}
                 (threads[3] == NULL) &&
                 (threads[4] == NULL),
                 "thread creation failed");

  /* Claiming the memory from terminated threads. */
  test_wait_threads();
 8004de2:	f7fe f96d 	bl	80030c0 <test_wait_threads>
  test_assert_sequence(2, "AB");
 8004de6:	2002      	movs	r0, #2
 8004de8:	4919      	ldr	r1, [pc, #100]	; (8004e50 <dyn1_execute.lto_priv.149+0xf0>)
 8004dea:	f7fe f9c1 	bl	8003170 <_test_assert_sequence>
 8004dee:	2800      	cmp	r0, #0
 8004df0:	d1f5      	bne.n	8004dde <dyn1_execute.lto_priv.149+0x7e>

  /* Heap status checked again.*/
  test_assert(3, chHeapStatus(&heap1, &n) == 1, "heap fragmented");
 8004df2:	a902      	add	r1, sp, #8
 8004df4:	4810      	ldr	r0, [pc, #64]	; (8004e38 <dyn1_execute.lto_priv.149+0xd8>)
 8004df6:	f7fe fc6b 	bl	80036d0 <chHeapStatus>
 8004dfa:	f1a0 0101 	sub.w	r1, r0, #1
 8004dfe:	fab1 f181 	clz	r1, r1
 8004e02:	2003      	movs	r0, #3
 8004e04:	0949      	lsrs	r1, r1, #5
 8004e06:	f7fe f9db 	bl	80031c0 <_test_assert>
 8004e0a:	2800      	cmp	r0, #0
 8004e0c:	d1e7      	bne.n	8004dde <dyn1_execute.lto_priv.149+0x7e>
  test_assert(4, n == sz, "heap size changed");
 8004e0e:	9902      	ldr	r1, [sp, #8]
 8004e10:	9b03      	ldr	r3, [sp, #12]
 8004e12:	2004      	movs	r0, #4
 8004e14:	1ac9      	subs	r1, r1, r3
 8004e16:	fab1 f181 	clz	r1, r1
 8004e1a:	0949      	lsrs	r1, r1, #5
 8004e1c:	f7fe f9d0 	bl	80031c0 <_test_assert>
 8004e20:	e7dd      	b.n	8004dde <dyn1_execute.lto_priv.149+0x7e>
  threads[2] = chThdCreateFromHeap(&heap1,
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-3, thread, "C");
  chHeapFree(p1);

  test_assert(1, (threads[0] != NULL) &&
 8004e22:	68e3      	ldr	r3, [r4, #12]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1d6      	bne.n	8004dd6 <dyn1_execute.lto_priv.149+0x76>
 8004e28:	6921      	ldr	r1, [r4, #16]
 8004e2a:	fab1 f181 	clz	r1, r1
 8004e2e:	0949      	lsrs	r1, r1, #5
 8004e30:	e7d1      	b.n	8004dd6 <dyn1_execute.lto_priv.149+0x76>
 8004e32:	bf00      	nop
 8004e34:	20001098 	.word	0x20001098
 8004e38:	20000998 	.word	0x20000998
 8004e3c:	08006934 	.word	0x08006934
 8004e40:	080047a1 	.word	0x080047a1
 8004e44:	20000a04 	.word	0x20000a04
 8004e48:	08006930 	.word	0x08006930
 8004e4c:	08006938 	.word	0x08006938
 8004e50:	08007778 	.word	0x08007778
	...

08004e60 <heap1_execute.lto_priv.145>:

static void heap1_execute(void) {
 8004e60:	b570      	push	{r4, r5, r6, lr}
 8004e62:	b082      	sub	sp, #8

  /*
   * Test on the default heap in order to cover the core allocator at
   * least one time.
   */
  (void)chHeapStatus(NULL, &sz);
 8004e64:	a901      	add	r1, sp, #4
 8004e66:	2000      	movs	r0, #0
 8004e68:	f7fe fc32 	bl	80036d0 <chHeapStatus>
  p1 = chHeapAlloc(NULL, SIZE);
 8004e6c:	2110      	movs	r1, #16
 8004e6e:	2000      	movs	r0, #0
 8004e70:	f7fe fc9e 	bl	80037b0 <chHeapAlloc>
  test_assert(1, p1 != NULL, "allocation failed");
 8004e74:	1c01      	adds	r1, r0, #0
 8004e76:	4605      	mov	r5, r0
 8004e78:	bf18      	it	ne
 8004e7a:	2101      	movne	r1, #1
 8004e7c:	2001      	movs	r0, #1
 8004e7e:	f7fe f99f 	bl	80031c0 <_test_assert>
 8004e82:	4604      	mov	r4, r0
 8004e84:	b108      	cbz	r0, 8004e8a <heap1_execute.lto_priv.145+0x2a>
  test_assert(10, chHeapStatus(&test_heap, &n) == 0, "not empty");
  chHeapFree(p1);

  test_assert(11, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
  test_assert(12, n == sz, "size changed");
}
 8004e86:	b002      	add	sp, #8
 8004e88:	bd70      	pop	{r4, r5, r6, pc}
   * least one time.
   */
  (void)chHeapStatus(NULL, &sz);
  p1 = chHeapAlloc(NULL, SIZE);
  test_assert(1, p1 != NULL, "allocation failed");
  chHeapFree(p1);
 8004e8a:	4628      	mov	r0, r5
 8004e8c:	f7fe fc48 	bl	8003720 <chHeapFree>
  p1 = chHeapAlloc(NULL, (size_t)-256);
 8004e90:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 8004e94:	4620      	mov	r0, r4
 8004e96:	f7fe fc8b 	bl	80037b0 <chHeapAlloc>
  test_assert(2, p1 == NULL, "allocation not failed");
 8004e9a:	fab0 f180 	clz	r1, r0
 8004e9e:	2002      	movs	r0, #2
 8004ea0:	0949      	lsrs	r1, r1, #5
 8004ea2:	f7fe f98d 	bl	80031c0 <_test_assert>
 8004ea6:	2800      	cmp	r0, #0
 8004ea8:	d1ed      	bne.n	8004e86 <heap1_execute.lto_priv.145+0x26>

  /* Initial local heap state.*/
  (void)chHeapStatus(&test_heap, &sz);
 8004eaa:	a901      	add	r1, sp, #4
 8004eac:	487b      	ldr	r0, [pc, #492]	; (800509c <heap1_execute.lto_priv.145+0x23c>)
 8004eae:	f7fe fc0f 	bl	80036d0 <chHeapStatus>

  /* Same order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8004eb2:	2110      	movs	r1, #16
 8004eb4:	4879      	ldr	r0, [pc, #484]	; (800509c <heap1_execute.lto_priv.145+0x23c>)
 8004eb6:	f7fe fc7b 	bl	80037b0 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 8004eba:	2110      	movs	r1, #16

  /* Initial local heap state.*/
  (void)chHeapStatus(&test_heap, &sz);

  /* Same order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8004ebc:	4606      	mov	r6, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 8004ebe:	4877      	ldr	r0, [pc, #476]	; (800509c <heap1_execute.lto_priv.145+0x23c>)
 8004ec0:	f7fe fc76 	bl	80037b0 <chHeapAlloc>
  p3 = chHeapAlloc(&test_heap, SIZE);
 8004ec4:	2110      	movs	r1, #16
  /* Initial local heap state.*/
  (void)chHeapStatus(&test_heap, &sz);

  /* Same order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
  p2 = chHeapAlloc(&test_heap, SIZE);
 8004ec6:	4605      	mov	r5, r0
  p3 = chHeapAlloc(&test_heap, SIZE);
 8004ec8:	4874      	ldr	r0, [pc, #464]	; (800509c <heap1_execute.lto_priv.145+0x23c>)
 8004eca:	f7fe fc71 	bl	80037b0 <chHeapAlloc>
 8004ece:	4604      	mov	r4, r0
  chHeapFree(p1);                               /* Does not merge.*/
 8004ed0:	4630      	mov	r0, r6
 8004ed2:	f7fe fc25 	bl	8003720 <chHeapFree>
  chHeapFree(p2);                               /* Merges backward.*/
 8004ed6:	4628      	mov	r0, r5
 8004ed8:	f7fe fc22 	bl	8003720 <chHeapFree>
  chHeapFree(p3);                               /* Merges both sides.*/
 8004edc:	4620      	mov	r0, r4
 8004ede:	f7fe fc1f 	bl	8003720 <chHeapFree>
  test_assert(3, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 8004ee2:	4669      	mov	r1, sp
 8004ee4:	486d      	ldr	r0, [pc, #436]	; (800509c <heap1_execute.lto_priv.145+0x23c>)
 8004ee6:	f7fe fbf3 	bl	80036d0 <chHeapStatus>
 8004eea:	f1a0 0101 	sub.w	r1, r0, #1
 8004eee:	fab1 f181 	clz	r1, r1
 8004ef2:	2003      	movs	r0, #3
 8004ef4:	0949      	lsrs	r1, r1, #5
 8004ef6:	f7fe f963 	bl	80031c0 <_test_assert>
 8004efa:	2800      	cmp	r0, #0
 8004efc:	d1c3      	bne.n	8004e86 <heap1_execute.lto_priv.145+0x26>

  /* Reverse order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8004efe:	2110      	movs	r1, #16
 8004f00:	4866      	ldr	r0, [pc, #408]	; (800509c <heap1_execute.lto_priv.145+0x23c>)
 8004f02:	f7fe fc55 	bl	80037b0 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 8004f06:	2110      	movs	r1, #16
  chHeapFree(p2);                               /* Merges backward.*/
  chHeapFree(p3);                               /* Merges both sides.*/
  test_assert(3, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Reverse order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8004f08:	4604      	mov	r4, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 8004f0a:	4864      	ldr	r0, [pc, #400]	; (800509c <heap1_execute.lto_priv.145+0x23c>)
 8004f0c:	f7fe fc50 	bl	80037b0 <chHeapAlloc>
 8004f10:	4605      	mov	r5, r0
  p3 = chHeapAlloc(&test_heap, SIZE);
 8004f12:	2110      	movs	r1, #16
 8004f14:	4861      	ldr	r0, [pc, #388]	; (800509c <heap1_execute.lto_priv.145+0x23c>)
 8004f16:	f7fe fc4b 	bl	80037b0 <chHeapAlloc>
  chHeapFree(p3);                               /* Merges forward.*/
 8004f1a:	f7fe fc01 	bl	8003720 <chHeapFree>
  chHeapFree(p2);                               /* Merges forward.*/
 8004f1e:	4628      	mov	r0, r5
 8004f20:	f7fe fbfe 	bl	8003720 <chHeapFree>
  chHeapFree(p1);                               /* Merges forward.*/
 8004f24:	4620      	mov	r0, r4
 8004f26:	f7fe fbfb 	bl	8003720 <chHeapFree>
  test_assert(4, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 8004f2a:	4669      	mov	r1, sp
 8004f2c:	485b      	ldr	r0, [pc, #364]	; (800509c <heap1_execute.lto_priv.145+0x23c>)
 8004f2e:	f7fe fbcf 	bl	80036d0 <chHeapStatus>
 8004f32:	f1a0 0101 	sub.w	r1, r0, #1
 8004f36:	fab1 f181 	clz	r1, r1
 8004f3a:	2004      	movs	r0, #4
 8004f3c:	0949      	lsrs	r1, r1, #5
 8004f3e:	f7fe f93f 	bl	80031c0 <_test_assert>
 8004f42:	2800      	cmp	r0, #0
 8004f44:	d19f      	bne.n	8004e86 <heap1_execute.lto_priv.145+0x26>

  /* Small fragments handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE + 1);
 8004f46:	2111      	movs	r1, #17
 8004f48:	4854      	ldr	r0, [pc, #336]	; (800509c <heap1_execute.lto_priv.145+0x23c>)
 8004f4a:	f7fe fc31 	bl	80037b0 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 8004f4e:	2110      	movs	r1, #16
  chHeapFree(p2);                               /* Merges forward.*/
  chHeapFree(p1);                               /* Merges forward.*/
  test_assert(4, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Small fragments handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE + 1);
 8004f50:	4604      	mov	r4, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 8004f52:	4852      	ldr	r0, [pc, #328]	; (800509c <heap1_execute.lto_priv.145+0x23c>)
 8004f54:	f7fe fc2c 	bl	80037b0 <chHeapAlloc>
 8004f58:	4605      	mov	r5, r0
  chHeapFree(p1);
 8004f5a:	4620      	mov	r0, r4
 8004f5c:	f7fe fbe0 	bl	8003720 <chHeapFree>
  test_assert(5, chHeapStatus(&test_heap, &n) == 2, "invalid state");
 8004f60:	4669      	mov	r1, sp
 8004f62:	484e      	ldr	r0, [pc, #312]	; (800509c <heap1_execute.lto_priv.145+0x23c>)
 8004f64:	f7fe fbb4 	bl	80036d0 <chHeapStatus>
 8004f68:	f1a0 0102 	sub.w	r1, r0, #2
 8004f6c:	fab1 f181 	clz	r1, r1
 8004f70:	2005      	movs	r0, #5
 8004f72:	0949      	lsrs	r1, r1, #5
 8004f74:	f7fe f924 	bl	80031c0 <_test_assert>
 8004f78:	2800      	cmp	r0, #0
 8004f7a:	d184      	bne.n	8004e86 <heap1_execute.lto_priv.145+0x26>
  p1 = chHeapAlloc(&test_heap, SIZE);
 8004f7c:	2110      	movs	r1, #16
 8004f7e:	4847      	ldr	r0, [pc, #284]	; (800509c <heap1_execute.lto_priv.145+0x23c>)
 8004f80:	f7fe fc16 	bl	80037b0 <chHeapAlloc>
  /* Note, the first situation happens when the alignment size is smaller
     than the header size, the second in the other cases.*/
  test_assert(6, (chHeapStatus(&test_heap, &n) == 1) ||
 8004f84:	4669      	mov	r1, sp
  /* Small fragments handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE + 1);
  p2 = chHeapAlloc(&test_heap, SIZE);
  chHeapFree(p1);
  test_assert(5, chHeapStatus(&test_heap, &n) == 2, "invalid state");
  p1 = chHeapAlloc(&test_heap, SIZE);
 8004f86:	4604      	mov	r4, r0
  /* Note, the first situation happens when the alignment size is smaller
     than the header size, the second in the other cases.*/
  test_assert(6, (chHeapStatus(&test_heap, &n) == 1) ||
 8004f88:	4844      	ldr	r0, [pc, #272]	; (800509c <heap1_execute.lto_priv.145+0x23c>)
 8004f8a:	f7fe fba1 	bl	80036d0 <chHeapStatus>
 8004f8e:	2801      	cmp	r0, #1
 8004f90:	f000 8081 	beq.w	8005096 <heap1_execute.lto_priv.145+0x236>
 8004f94:	4669      	mov	r1, sp
 8004f96:	4841      	ldr	r0, [pc, #260]	; (800509c <heap1_execute.lto_priv.145+0x23c>)
 8004f98:	f7fe fb9a 	bl	80036d0 <chHeapStatus>
 8004f9c:	f1a0 0102 	sub.w	r1, r0, #2
 8004fa0:	fab1 f181 	clz	r1, r1
 8004fa4:	0949      	lsrs	r1, r1, #5
 8004fa6:	2006      	movs	r0, #6
 8004fa8:	f7fe f90a 	bl	80031c0 <_test_assert>
 8004fac:	2800      	cmp	r0, #0
 8004fae:	f47f af6a 	bne.w	8004e86 <heap1_execute.lto_priv.145+0x26>
                 (chHeapStatus(&test_heap, &n) == 2), "heap fragmented");
  chHeapFree(p2);
 8004fb2:	4628      	mov	r0, r5
 8004fb4:	f7fe fbb4 	bl	8003720 <chHeapFree>
  chHeapFree(p1);
 8004fb8:	4620      	mov	r0, r4
 8004fba:	f7fe fbb1 	bl	8003720 <chHeapFree>
  test_assert(7, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 8004fbe:	4669      	mov	r1, sp
 8004fc0:	4836      	ldr	r0, [pc, #216]	; (800509c <heap1_execute.lto_priv.145+0x23c>)
 8004fc2:	f7fe fb85 	bl	80036d0 <chHeapStatus>
 8004fc6:	1e46      	subs	r6, r0, #1
 8004fc8:	4271      	negs	r1, r6
 8004fca:	4171      	adcs	r1, r6
 8004fcc:	2007      	movs	r0, #7
 8004fce:	f7fe f8f7 	bl	80031c0 <_test_assert>
 8004fd2:	2800      	cmp	r0, #0
 8004fd4:	f47f af57 	bne.w	8004e86 <heap1_execute.lto_priv.145+0x26>

  /* Skip fragment handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8004fd8:	2110      	movs	r1, #16
 8004fda:	4830      	ldr	r0, [pc, #192]	; (800509c <heap1_execute.lto_priv.145+0x23c>)
 8004fdc:	f7fe fbe8 	bl	80037b0 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 8004fe0:	2110      	movs	r1, #16
  chHeapFree(p2);
  chHeapFree(p1);
  test_assert(7, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Skip fragment handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8004fe2:	4605      	mov	r5, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 8004fe4:	482d      	ldr	r0, [pc, #180]	; (800509c <heap1_execute.lto_priv.145+0x23c>)
 8004fe6:	f7fe fbe3 	bl	80037b0 <chHeapAlloc>
 8004fea:	4604      	mov	r4, r0
  chHeapFree(p1);
 8004fec:	4628      	mov	r0, r5
 8004fee:	f7fe fb97 	bl	8003720 <chHeapFree>
  test_assert(8, chHeapStatus(&test_heap, &n) == 2, "invalid state");
 8004ff2:	4669      	mov	r1, sp
 8004ff4:	4829      	ldr	r0, [pc, #164]	; (800509c <heap1_execute.lto_priv.145+0x23c>)
 8004ff6:	f7fe fb6b 	bl	80036d0 <chHeapStatus>
 8004ffa:	1e85      	subs	r5, r0, #2
 8004ffc:	4269      	negs	r1, r5
 8004ffe:	4169      	adcs	r1, r5
 8005000:	2008      	movs	r0, #8
 8005002:	f7fe f8dd 	bl	80031c0 <_test_assert>
 8005006:	2800      	cmp	r0, #0
 8005008:	f47f af3d 	bne.w	8004e86 <heap1_execute.lto_priv.145+0x26>
  p1 = chHeapAlloc(&test_heap, SIZE * 2);       /* Skips first fragment.*/
 800500c:	2120      	movs	r1, #32
 800500e:	4823      	ldr	r0, [pc, #140]	; (800509c <heap1_execute.lto_priv.145+0x23c>)
 8005010:	f7fe fbce 	bl	80037b0 <chHeapAlloc>
  chHeapFree(p1);
 8005014:	f7fe fb84 	bl	8003720 <chHeapFree>
  chHeapFree(p2);
 8005018:	4620      	mov	r0, r4
 800501a:	f7fe fb81 	bl	8003720 <chHeapFree>
  test_assert(9, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 800501e:	4669      	mov	r1, sp
 8005020:	481e      	ldr	r0, [pc, #120]	; (800509c <heap1_execute.lto_priv.145+0x23c>)
 8005022:	f7fe fb55 	bl	80036d0 <chHeapStatus>
 8005026:	3801      	subs	r0, #1
 8005028:	4241      	negs	r1, r0
 800502a:	4141      	adcs	r1, r0
 800502c:	2009      	movs	r0, #9
 800502e:	f7fe f8c7 	bl	80031c0 <_test_assert>
 8005032:	2800      	cmp	r0, #0
 8005034:	f47f af27 	bne.w	8004e86 <heap1_execute.lto_priv.145+0x26>

  /* Allocate all handling.*/
  (void)chHeapStatus(&test_heap, &n);
 8005038:	4669      	mov	r1, sp
 800503a:	4818      	ldr	r0, [pc, #96]	; (800509c <heap1_execute.lto_priv.145+0x23c>)
 800503c:	f7fe fb48 	bl	80036d0 <chHeapStatus>
  p1 = chHeapAlloc(&test_heap, n);
 8005040:	9900      	ldr	r1, [sp, #0]
 8005042:	4816      	ldr	r0, [pc, #88]	; (800509c <heap1_execute.lto_priv.145+0x23c>)
 8005044:	f7fe fbb4 	bl	80037b0 <chHeapAlloc>
  test_assert(10, chHeapStatus(&test_heap, &n) == 0, "not empty");
 8005048:	4669      	mov	r1, sp
  chHeapFree(p2);
  test_assert(9, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Allocate all handling.*/
  (void)chHeapStatus(&test_heap, &n);
  p1 = chHeapAlloc(&test_heap, n);
 800504a:	4604      	mov	r4, r0
  test_assert(10, chHeapStatus(&test_heap, &n) == 0, "not empty");
 800504c:	4813      	ldr	r0, [pc, #76]	; (800509c <heap1_execute.lto_priv.145+0x23c>)
 800504e:	f7fe fb3f 	bl	80036d0 <chHeapStatus>
 8005052:	fab0 f180 	clz	r1, r0
 8005056:	200a      	movs	r0, #10
 8005058:	0949      	lsrs	r1, r1, #5
 800505a:	f7fe f8b1 	bl	80031c0 <_test_assert>
 800505e:	2800      	cmp	r0, #0
 8005060:	f47f af11 	bne.w	8004e86 <heap1_execute.lto_priv.145+0x26>
  chHeapFree(p1);
 8005064:	4620      	mov	r0, r4
 8005066:	f7fe fb5b 	bl	8003720 <chHeapFree>

  test_assert(11, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 800506a:	4669      	mov	r1, sp
 800506c:	480b      	ldr	r0, [pc, #44]	; (800509c <heap1_execute.lto_priv.145+0x23c>)
 800506e:	f7fe fb2f 	bl	80036d0 <chHeapStatus>
 8005072:	1e42      	subs	r2, r0, #1
 8005074:	4251      	negs	r1, r2
 8005076:	4151      	adcs	r1, r2
 8005078:	200b      	movs	r0, #11
 800507a:	f7fe f8a1 	bl	80031c0 <_test_assert>
 800507e:	2800      	cmp	r0, #0
 8005080:	f47f af01 	bne.w	8004e86 <heap1_execute.lto_priv.145+0x26>
  test_assert(12, n == sz, "size changed");
 8005084:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8005088:	1acb      	subs	r3, r1, r3
 800508a:	4259      	negs	r1, r3
 800508c:	4159      	adcs	r1, r3
 800508e:	200c      	movs	r0, #12
 8005090:	f7fe f896 	bl	80031c0 <_test_assert>
 8005094:	e6f7      	b.n	8004e86 <heap1_execute.lto_priv.145+0x26>
  chHeapFree(p1);
  test_assert(5, chHeapStatus(&test_heap, &n) == 2, "invalid state");
  p1 = chHeapAlloc(&test_heap, SIZE);
  /* Note, the first situation happens when the alignment size is smaller
     than the header size, the second in the other cases.*/
  test_assert(6, (chHeapStatus(&test_heap, &n) == 1) ||
 8005096:	4601      	mov	r1, r0
 8005098:	e785      	b.n	8004fa6 <heap1_execute.lto_priv.145+0x146>
 800509a:	bf00      	nop
 800509c:	20000978 	.word	0x20000978

080050a0 <bmk11_setup.lto_priv.169>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80050a0:	4b02      	ldr	r3, [pc, #8]	; (80050ac <bmk11_setup.lto_priv.169+0xc>)
 80050a2:	2201      	movs	r2, #1
 80050a4:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80050a6:	605b      	str	r3, [r3, #4]
 80050a8:	609a      	str	r2, [r3, #8]
 80050aa:	4770      	bx	lr
 80050ac:	20000948 	.word	0x20000948

080050b0 <tmo>:
 * A virtual timer is set and immediately reset into a continuous loop.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void tmo(void *param) {(void)param;}
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
	...

080050c0 <bmk7_setup.lto_priv.164>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80050c0:	4b02      	ldr	r3, [pc, #8]	; (80050cc <bmk7_setup.lto_priv.164+0xc>)
 80050c2:	2200      	movs	r2, #0
 80050c4:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80050c6:	605b      	str	r3, [r3, #4]
 80050c8:	609a      	str	r2, [r3, #8]
 80050ca:	4770      	bx	lr
 80050cc:	20000948 	.word	0x20000948

080050d0 <sys2_execute.lto_priv.110>:
 80050d0:	2320      	movs	r3, #32
 80050d2:	f383 8811 	msr	BASEPRI, r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80050d6:	b662      	cpsie	i
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80050d8:	b672      	cpsid	i

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80050da:	f383 8811 	msr	BASEPRI, r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80050de:	b662      	cpsie	i

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80050e0:	2300      	movs	r3, #0
 80050e2:	f383 8811 	msr	BASEPRI, r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80050e6:	b662      	cpsie	i
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	0000      	movs	r0, r0
	...

080050f0 <bmk10_execute.lto_priv.168>:

static void bmk10_execute(void) {
 80050f0:	b538      	push	{r3, r4, r5, lr}
  static virtual_timer_t vt1, vt2;
  uint32_t n = 0;

  test_wait_tick();
 80050f2:	f7fd ffd5 	bl	80030a0 <test_wait_tick>
  test_start_timer(1000);
 80050f6:	f001 fb6b 	bl	80067d0 <test_start_timer.constprop.6>
 80050fa:	4d15      	ldr	r5, [pc, #84]	; (8005150 <bmk10_execute.lto_priv.168+0x60>)

static void tmo(void *param) {(void)param;}

static void bmk10_execute(void) {
  static virtual_timer_t vt1, vt2;
  uint32_t n = 0;
 80050fc:	2400      	movs	r4, #0

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80050fe:	2320      	movs	r3, #32
 8005100:	f383 8811 	msr	BASEPRI, r3

  test_wait_tick();
  test_start_timer(1000);
  do {
    chSysLock();
    chVTDoSetI(&vt1, 1, tmo, NULL);
 8005104:	4813      	ldr	r0, [pc, #76]	; (8005154 <bmk10_execute.lto_priv.168+0x64>)
 8005106:	2101      	movs	r1, #1
 8005108:	4a13      	ldr	r2, [pc, #76]	; (8005158 <bmk10_execute.lto_priv.168+0x68>)
 800510a:	2300      	movs	r3, #0
 800510c:	f7fc fd60 	bl	8001bd0 <chVTDoSetI>
    chVTDoSetI(&vt2, 10000, tmo, NULL);
 8005110:	f242 7110 	movw	r1, #10000	; 0x2710
 8005114:	4a10      	ldr	r2, [pc, #64]	; (8005158 <bmk10_execute.lto_priv.168+0x68>)
 8005116:	2300      	movs	r3, #0
 8005118:	4810      	ldr	r0, [pc, #64]	; (800515c <bmk10_execute.lto_priv.168+0x6c>)
 800511a:	f7fc fd59 	bl	8001bd0 <chVTDoSetI>
    chVTDoResetI(&vt1);
 800511e:	480d      	ldr	r0, [pc, #52]	; (8005154 <bmk10_execute.lto_priv.168+0x64>)
 8005120:	f7fc fd16 	bl	8001b50 <chVTDoResetI>
    chVTDoResetI(&vt2);
 8005124:	480d      	ldr	r0, [pc, #52]	; (800515c <bmk10_execute.lto_priv.168+0x6c>)
 8005126:	f7fc fd13 	bl	8001b50 <chVTDoResetI>
 800512a:	2300      	movs	r3, #0
 800512c:	f383 8811 	msr	BASEPRI, r3
    chSysUnlock();
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8005130:	782b      	ldrb	r3, [r5, #0]
    chVTDoSetI(&vt1, 1, tmo, NULL);
    chVTDoSetI(&vt2, 10000, tmo, NULL);
    chVTDoResetI(&vt1);
    chVTDoResetI(&vt2);
    chSysUnlock();
    n++;
 8005132:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8005134:	2b00      	cmp	r3, #0
 8005136:	d0e2      	beq.n	80050fe <bmk10_execute.lto_priv.168+0xe>
  test_print("--- Score : ");
 8005138:	4809      	ldr	r0, [pc, #36]	; (8005160 <bmk10_execute.lto_priv.168+0x70>)
 800513a:	f7fe f899 	bl	8003270 <test_print>
  test_printn(n * 2);
 800513e:	0060      	lsls	r0, r4, #1
 8005140:	f7fe f8a6 	bl	8003290 <test_printn>
  test_println(" timers/S");
}
 8005144:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 2);
  test_println(" timers/S");
 8005148:	4806      	ldr	r0, [pc, #24]	; (8005164 <bmk10_execute.lto_priv.168+0x74>)
 800514a:	f7fe b871 	b.w	8003230 <test_println>
 800514e:	bf00      	nop
 8005150:	200011e8 	.word	0x200011e8
 8005154:	200009cc 	.word	0x200009cc
 8005158:	080050b1 	.word	0x080050b1
 800515c:	200009b8 	.word	0x200009b8
 8005160:	08006aa8 	.word	0x08006aa8
 8005164:	080077a0 	.word	0x080077a0
	...

08005170 <bmk9_execute.lto_priv.167>:
 * loop.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk9_execute(void) {
 8005170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 8005172:	4926      	ldr	r1, [pc, #152]	; (800520c <bmk9_execute.lto_priv.167+0x9c>)
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8005174:	4b26      	ldr	r3, [pc, #152]	; (8005210 <bmk9_execute.lto_priv.167+0xa0>)
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8005176:	2200      	movs	r2, #0
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 8005178:	f101 0010 	add.w	r0, r1, #16
 800517c:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 800517e:	605b      	str	r3, [r3, #4]
  uint32_t n;
  static uint8_t ib[16];
  static input_queue_t iq;

  chIQObjectInit(&iq, ib, sizeof(ib), NULL, NULL);
  n = 0;
 8005180:	4614      	mov	r4, r2
 8005182:	6118      	str	r0, [r3, #16]
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 8005184:	60d9      	str	r1, [r3, #12]
  iqp->q_rdptr   = bp;
 8005186:	6199      	str	r1, [r3, #24]
  iqp->q_wrptr   = bp;
 8005188:	6159      	str	r1, [r3, #20]
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 800518a:	609a      	str	r2, [r3, #8]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 800518c:	61da      	str	r2, [r3, #28]
  iqp->q_link    = link;
 800518e:	621a      	str	r2, [r3, #32]
  test_wait_tick();
  test_start_timer(1000);
  do {
    chSysLock();
    chIQPutI(&iq, 0);
 8005190:	4617      	mov	r7, r2
  static uint8_t ib[16];
  static input_queue_t iq;

  chIQObjectInit(&iq, ib, sizeof(ib), NULL, NULL);
  n = 0;
  test_wait_tick();
 8005192:	f7fd ff85 	bl	80030a0 <test_wait_tick>
  test_start_timer(1000);
 8005196:	f001 fb1b 	bl	80067d0 <test_start_timer.constprop.6>
 800519a:	4e1e      	ldr	r6, [pc, #120]	; (8005214 <bmk9_execute.lto_priv.167+0xa4>)
 800519c:	2520      	movs	r5, #32
 800519e:	f385 8811 	msr	BASEPRI, r5
  do {
    chSysLock();
    chIQPutI(&iq, 0);
 80051a2:	2100      	movs	r1, #0
 80051a4:	481a      	ldr	r0, [pc, #104]	; (8005210 <bmk9_execute.lto_priv.167+0xa0>)
 80051a6:	f7fc fadb 	bl	8001760 <chIQPutI>
    chIQPutI(&iq, 1);
 80051aa:	2101      	movs	r1, #1
 80051ac:	4818      	ldr	r0, [pc, #96]	; (8005210 <bmk9_execute.lto_priv.167+0xa0>)
 80051ae:	f7fc fad7 	bl	8001760 <chIQPutI>
    chIQPutI(&iq, 2);
 80051b2:	2102      	movs	r1, #2
 80051b4:	4816      	ldr	r0, [pc, #88]	; (8005210 <bmk9_execute.lto_priv.167+0xa0>)
 80051b6:	f7fc fad3 	bl	8001760 <chIQPutI>
    chIQPutI(&iq, 3);
 80051ba:	2103      	movs	r1, #3
 80051bc:	4814      	ldr	r0, [pc, #80]	; (8005210 <bmk9_execute.lto_priv.167+0xa0>)
 80051be:	f7fc facf 	bl	8001760 <chIQPutI>
 80051c2:	f387 8811 	msr	BASEPRI, r7
 *
 * @api
 */
static inline msg_t chIQGet(input_queue_t *iqp) {

  return chIQGetTimeout(iqp, TIME_INFINITE);
 80051c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80051ca:	4811      	ldr	r0, [pc, #68]	; (8005210 <bmk9_execute.lto_priv.167+0xa0>)
 80051cc:	f7fc fe10 	bl	8001df0 <chIQGetTimeout>
 80051d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80051d4:	480e      	ldr	r0, [pc, #56]	; (8005210 <bmk9_execute.lto_priv.167+0xa0>)
 80051d6:	f7fc fe0b 	bl	8001df0 <chIQGetTimeout>
 80051da:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80051de:	480c      	ldr	r0, [pc, #48]	; (8005210 <bmk9_execute.lto_priv.167+0xa0>)
 80051e0:	f7fc fe06 	bl	8001df0 <chIQGetTimeout>
 80051e4:	480a      	ldr	r0, [pc, #40]	; (8005210 <bmk9_execute.lto_priv.167+0xa0>)
 80051e6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80051ea:	f7fc fe01 	bl	8001df0 <chIQGetTimeout>
    (void)chIQGet(&iq);
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80051ee:	7833      	ldrb	r3, [r6, #0]
    chSysUnlock();
    (void)chIQGet(&iq);
    (void)chIQGet(&iq);
    (void)chIQGet(&iq);
    (void)chIQGet(&iq);
    n++;
 80051f0:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d0d3      	beq.n	800519e <bmk9_execute.lto_priv.167+0x2e>
  test_print("--- Score : ");
 80051f6:	4808      	ldr	r0, [pc, #32]	; (8005218 <bmk9_execute.lto_priv.167+0xa8>)
 80051f8:	f7fe f83a 	bl	8003270 <test_print>
  test_printn(n * 4);
 80051fc:	00a0      	lsls	r0, r4, #2
 80051fe:	f7fe f847 	bl	8003290 <test_printn>
  test_println(" bytes/S");
}
 8005202:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 4);
  test_println(" bytes/S");
 8005206:	4805      	ldr	r0, [pc, #20]	; (800521c <bmk9_execute.lto_priv.167+0xac>)
 8005208:	f7fe b812 	b.w	8003230 <test_println>
 800520c:	20000a18 	.word	0x20000a18
 8005210:	200009e0 	.word	0x200009e0
 8005214:	200011e8 	.word	0x200011e8
 8005218:	08006aa8 	.word	0x08006aa8
 800521c:	080077ac 	.word	0x080077ac

08005220 <bmk8_execute.lto_priv.166>:
    _sim_check_for_interrupts();
#endif
  } while(!chThdShouldTerminateX());
}

static void bmk8_execute(void) {
 8005220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005224:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80052f8 <bmk8_execute.lto_priv.166+0xd8>
 8005228:	b084      	sub	sp, #16
  uint32_t n;

  n = 0;
 800522a:	ac04      	add	r4, sp, #16
 800522c:	2300      	movs	r3, #0
 800522e:	f844 3d04 	str.w	r3, [r4, #-4]!
  test_wait_tick();
 8005232:	f7fd ff35 	bl	80030a0 <test_wait_tick>
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005236:	f8d8 3018 	ldr.w	r3, [r8, #24]

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 800523a:	4f2a      	ldr	r7, [pc, #168]	; (80052e4 <bmk8_execute.lto_priv.166+0xc4>)
 800523c:	4e2a      	ldr	r6, [pc, #168]	; (80052e8 <bmk8_execute.lto_priv.166+0xc8>)
 800523e:	689a      	ldr	r2, [r3, #8]
 8005240:	4638      	mov	r0, r7
 8005242:	4633      	mov	r3, r6
 8005244:	3a01      	subs	r2, #1
 8005246:	9400      	str	r4, [sp, #0]
 8005248:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800524c:	f7fc f9b0 	bl	80015b0 <chThdCreateStatic>
 8005250:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8005254:	4d25      	ldr	r5, [pc, #148]	; (80052ec <bmk8_execute.lto_priv.166+0xcc>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8005256:	689a      	ldr	r2, [r3, #8]
 8005258:	f44f 71a4 	mov.w	r1, #328	; 0x148
  uint32_t n;

  n = 0;
  test_wait_tick();

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 800525c:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 800525e:	4633      	mov	r3, r6
 8005260:	3a01      	subs	r2, #1
 8005262:	9400      	str	r4, [sp, #0]
 8005264:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8005268:	f7fc f9a2 	bl	80015b0 <chThdCreateStatic>
 800526c:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8005270:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8005272:	689a      	ldr	r2, [r3, #8]
 8005274:	f507 7024 	add.w	r0, r7, #656	; 0x290
 8005278:	4633      	mov	r3, r6
 800527a:	3a01      	subs	r2, #1
 800527c:	9400      	str	r4, [sp, #0]
 800527e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005282:	f7fc f995 	bl	80015b0 <chThdCreateStatic>
 8005286:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800528a:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 800528c:	689a      	ldr	r2, [r3, #8]
 800528e:	f507 7076 	add.w	r0, r7, #984	; 0x3d8
 8005292:	4633      	mov	r3, r6
 8005294:	3a01      	subs	r2, #1
 8005296:	9400      	str	r4, [sp, #0]
 8005298:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800529c:	f7fc f988 	bl	80015b0 <chThdCreateStatic>
 80052a0:	f8d8 3018 	ldr.w	r3, [r8, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 80052a4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80052a8:	689a      	ldr	r2, [r3, #8]
  test_wait_tick();

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 80052aa:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 80052ac:	3a01      	subs	r2, #1
 80052ae:	4633      	mov	r3, r6
 80052b0:	f507 60a4 	add.w	r0, r7, #1312	; 0x520
 80052b4:	9400      	str	r4, [sp, #0]
 80052b6:	f7fc f97b 	bl	80015b0 <chThdCreateStatic>
 80052ba:	6128      	str	r0, [r5, #16]

  chThdSleepSeconds(1);
 80052bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80052c0:	f7fc fdbe 	bl	8001e40 <chThdSleep>
  test_terminate_threads();
 80052c4:	f7fd ff14 	bl	80030f0 <test_terminate_threads>
  test_wait_threads();
 80052c8:	f7fd fefa 	bl	80030c0 <test_wait_threads>

  test_print("--- Score : ");
 80052cc:	4808      	ldr	r0, [pc, #32]	; (80052f0 <bmk8_execute.lto_priv.166+0xd0>)
 80052ce:	f7fd ffcf 	bl	8003270 <test_print>
  test_printn(n);
 80052d2:	9803      	ldr	r0, [sp, #12]
 80052d4:	f7fd ffdc 	bl	8003290 <test_printn>
  test_println(" ctxswc/S");
 80052d8:	4806      	ldr	r0, [pc, #24]	; (80052f4 <bmk8_execute.lto_priv.166+0xd4>)
 80052da:	f7fd ffa9 	bl	8003230 <test_println>
}
 80052de:	b004      	add	sp, #16
 80052e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052e4:	20000a30 	.word	0x20000a30
 80052e8:	08005371 	.word	0x08005371
 80052ec:	20000a04 	.word	0x20000a04
 80052f0:	08006aa8 	.word	0x08006aa8
 80052f4:	080077b8 	.word	0x080077b8
 80052f8:	20001098 	.word	0x20001098
 80052fc:	00000000 	.word	0x00000000

08005300 <bmk6_execute.lto_priv.163>:
 * terminate.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk6_execute(void) {
 8005300:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005302:	4b12      	ldr	r3, [pc, #72]	; (800534c <bmk6_execute.lto_priv.163+0x4c>)
 8005304:	b083      	sub	sp, #12
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005306:	699b      	ldr	r3, [r3, #24]

  uint32_t n = 0;
 8005308:	2400      	movs	r4, #0
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() + 1;
 800530a:	689d      	ldr	r5, [r3, #8]
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL);
 800530c:	4627      	mov	r7, r4
 800530e:	4e10      	ldr	r6, [pc, #64]	; (8005350 <bmk6_execute.lto_priv.163+0x50>)

static void bmk6_execute(void) {

  uint32_t n = 0;
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() + 1;
 8005310:	3501      	adds	r5, #1
  test_wait_tick();
 8005312:	f7fd fec5 	bl	80030a0 <test_wait_tick>
  test_start_timer(1000);
 8005316:	f001 fa5b 	bl	80067d0 <test_start_timer.constprop.6>
  do {
    chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL);
 800531a:	4b0e      	ldr	r3, [pc, #56]	; (8005354 <bmk6_execute.lto_priv.163+0x54>)
 800531c:	9700      	str	r7, [sp, #0]
 800531e:	480e      	ldr	r0, [pc, #56]	; (8005358 <bmk6_execute.lto_priv.163+0x58>)
 8005320:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005324:	462a      	mov	r2, r5
 8005326:	f7fc f943 	bl	80015b0 <chThdCreateStatic>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800532a:	7833      	ldrb	r3, [r6, #0]
  tprio_t prio = chThdGetPriorityX() + 1;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL);
    n++;
 800532c:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800532e:	2b00      	cmp	r3, #0
 8005330:	d0f3      	beq.n	800531a <bmk6_execute.lto_priv.163+0x1a>
  test_print("--- Score : ");
 8005332:	480a      	ldr	r0, [pc, #40]	; (800535c <bmk6_execute.lto_priv.163+0x5c>)
 8005334:	f7fd ff9c 	bl	8003270 <test_print>
  test_printn(n);
 8005338:	4620      	mov	r0, r4
 800533a:	f7fd ffa9 	bl	8003290 <test_printn>
  test_println(" threads/S");
 800533e:	4808      	ldr	r0, [pc, #32]	; (8005360 <bmk6_execute.lto_priv.163+0x60>)
}
 8005340:	b003      	add	sp, #12
 8005342:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n);
  test_println(" threads/S");
 8005346:	f7fd bf73 	b.w	8003230 <test_println>
 800534a:	bf00      	nop
 800534c:	20001098 	.word	0x20001098
 8005350:	200011e8 	.word	0x200011e8
 8005354:	08005c51 	.word	0x08005c51
 8005358:	20000a30 	.word	0x20000a30
 800535c:	08006aa8 	.word	0x08006aa8
 8005360:	080077c4 	.word	0x080077c4
	...

08005370 <thread8>:
 * variable and yields.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static THD_FUNCTION(thread8, p) {
 8005370:	b538      	push	{r3, r4, r5, lr}
 8005372:	4604      	mov	r4, r0
 8005374:	4d08      	ldr	r5, [pc, #32]	; (8005398 <thread8+0x28>)

  do {
    chThdYield();
 8005376:	f7fc f823 	bl	80013c0 <chThdYield>
    chThdYield();
 800537a:	f7fc f821 	bl	80013c0 <chThdYield>
    chThdYield();
 800537e:	f7fc f81f 	bl	80013c0 <chThdYield>
    chThdYield();
 8005382:	f7fc f81d 	bl	80013c0 <chThdYield>
    (*(uint32_t *)p) += 4;
 8005386:	6823      	ldr	r3, [r4, #0]
 *
 * @xclass
 */
static inline bool chThdShouldTerminateX(void) {

  return (bool)((chThdGetSelfX()->p_flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8005388:	69aa      	ldr	r2, [r5, #24]
 800538a:	3304      	adds	r3, #4
 800538c:	6023      	str	r3, [r4, #0]
 800538e:	7f53      	ldrb	r3, [r2, #29]
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while(!chThdShouldTerminateX());
 8005390:	075b      	lsls	r3, r3, #29
 8005392:	d5f0      	bpl.n	8005376 <thread8+0x6>
}
 8005394:	bd38      	pop	{r3, r4, r5, pc}
 8005396:	bf00      	nop
 8005398:	20001098 	.word	0x20001098
 800539c:	00000000 	.word	0x00000000

080053a0 <thread3>:
 * continuous loop.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static THD_FUNCTION(thread3, p) {
 80053a0:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80053a2:	4c06      	ldr	r4, [pc, #24]	; (80053bc <thread3+0x1c>)
 *
 * @xclass
 */
static inline bool chThdShouldTerminateX(void) {

  return (bool)((chThdGetSelfX()->p_flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 80053a4:	69a3      	ldr	r3, [r4, #24]
 80053a6:	7f5b      	ldrb	r3, [r3, #29]

  (void)p;
  while (!chThdShouldTerminateX())
 80053a8:	075a      	lsls	r2, r3, #29
 80053aa:	d406      	bmi.n	80053ba <thread3+0x1a>
    chSemWait(&sem1);
 80053ac:	4804      	ldr	r0, [pc, #16]	; (80053c0 <thread3+0x20>)
 80053ae:	f7fc f977 	bl	80016a0 <chSemWait>
 80053b2:	69a3      	ldr	r3, [r4, #24]
 80053b4:	7f5b      	ldrb	r3, [r3, #29]
 */

static THD_FUNCTION(thread3, p) {

  (void)p;
  while (!chThdShouldTerminateX())
 80053b6:	075b      	lsls	r3, r3, #29
 80053b8:	d5f8      	bpl.n	80053ac <thread3+0xc>
 80053ba:	bd10      	pop	{r4, pc}
 80053bc:	20001098 	.word	0x20001098
 80053c0:	20000948 	.word	0x20000948
	...

080053d0 <bmk7_execute.lto_priv.165>:
static void bmk7_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static void bmk7_execute(void) {
 80053d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80053d4:	4e3a      	ldr	r6, [pc, #232]	; (80054c0 <bmk7_execute.lto_priv.165+0xf0>)
 80053d6:	b083      	sub	sp, #12
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80053d8:	69b3      	ldr	r3, [r6, #24]
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread3, NULL);
 80053da:	2400      	movs	r4, #0
 80053dc:	689a      	ldr	r2, [r3, #8]
 80053de:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80053e2:	3205      	adds	r2, #5
 80053e4:	4b37      	ldr	r3, [pc, #220]	; (80054c4 <bmk7_execute.lto_priv.165+0xf4>)
 80053e6:	4838      	ldr	r0, [pc, #224]	; (80054c8 <bmk7_execute.lto_priv.165+0xf8>)
 80053e8:	9400      	str	r4, [sp, #0]
 80053ea:	f7fc f8e1 	bl	80015b0 <chThdCreateStatic>
 80053ee:	69b3      	ldr	r3, [r6, #24]
 80053f0:	4d36      	ldr	r5, [pc, #216]	; (80054cc <bmk7_execute.lto_priv.165+0xfc>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, thread3, NULL);
 80053f2:	689a      	ldr	r2, [r3, #8]
 80053f4:	f44f 71a4 	mov.w	r1, #328	; 0x148
}

static void bmk7_execute(void) {
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread3, NULL);
 80053f8:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, thread3, NULL);
 80053fa:	3204      	adds	r2, #4
 80053fc:	4b31      	ldr	r3, [pc, #196]	; (80054c4 <bmk7_execute.lto_priv.165+0xf4>)
 80053fe:	9400      	str	r4, [sp, #0]
 8005400:	4833      	ldr	r0, [pc, #204]	; (80054d0 <bmk7_execute.lto_priv.165+0x100>)
 8005402:	f7fc f8d5 	bl	80015b0 <chThdCreateStatic>
 8005406:	69b3      	ldr	r3, [r6, #24]
 8005408:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread3, NULL);
 800540a:	689a      	ldr	r2, [r3, #8]
 800540c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005410:	3203      	adds	r2, #3
 8005412:	4b2c      	ldr	r3, [pc, #176]	; (80054c4 <bmk7_execute.lto_priv.165+0xf4>)
 8005414:	482f      	ldr	r0, [pc, #188]	; (80054d4 <bmk7_execute.lto_priv.165+0x104>)
 8005416:	9400      	str	r4, [sp, #0]
 8005418:	f7fc f8ca 	bl	80015b0 <chThdCreateStatic>
 800541c:	69b3      	ldr	r3, [r6, #24]
 800541e:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, thread3, NULL);
 8005420:	689a      	ldr	r2, [r3, #8]
 8005422:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005426:	3202      	adds	r2, #2
 8005428:	4b26      	ldr	r3, [pc, #152]	; (80054c4 <bmk7_execute.lto_priv.165+0xf4>)
 800542a:	482b      	ldr	r0, [pc, #172]	; (80054d8 <bmk7_execute.lto_priv.165+0x108>)
 800542c:	9400      	str	r4, [sp, #0]
 800542e:	f7fc f8bf 	bl	80015b0 <chThdCreateStatic>
 8005432:	69b3      	ldr	r3, [r6, #24]
 8005434:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, thread3, NULL);
 8005436:	689a      	ldr	r2, [r3, #8]
 8005438:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800543c:	3201      	adds	r2, #1
 800543e:	4b21      	ldr	r3, [pc, #132]	; (80054c4 <bmk7_execute.lto_priv.165+0xf4>)
 8005440:	4826      	ldr	r0, [pc, #152]	; (80054dc <bmk7_execute.lto_priv.165+0x10c>)
 8005442:	9400      	str	r4, [sp, #0]
 8005444:	f7fc f8b4 	bl	80015b0 <chThdCreateStatic>
 * @api
 */
void chSemReset(semaphore_t *sp, cnt_t n) {

  chSysLock();
  chSemResetI(sp, n);
 8005448:	46a1      	mov	r9, r4
 800544a:	6128      	str	r0, [r5, #16]

  n = 0;
  test_wait_tick();
 800544c:	f7fd fe28 	bl	80030a0 <test_wait_tick>
  test_start_timer(1000);
 8005450:	f001 f9be 	bl	80067d0 <test_start_timer.constprop.6>
 8005454:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80054f0 <bmk7_execute.lto_priv.165+0x120>
 8005458:	2720      	movs	r7, #32
 800545a:	2620      	movs	r6, #32
 800545c:	f387 8811 	msr	BASEPRI, r7
 8005460:	481f      	ldr	r0, [pc, #124]	; (80054e0 <bmk7_execute.lto_priv.165+0x110>)
 8005462:	2100      	movs	r1, #0
 8005464:	f7fc fb1c 	bl	8001aa0 <chSemResetI>
 8005468:	2500      	movs	r5, #0
  chSchRescheduleS();
 800546a:	f7fb ffe1 	bl	8001430 <chSchRescheduleS>
 800546e:	f389 8811 	msr	BASEPRI, r9
    chSemReset(&sem1, 0);
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8005472:	f898 3000 	ldrb.w	r3, [r8]
  n = 0;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chSemReset(&sem1, 0);
    n++;
 8005476:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8005478:	2b00      	cmp	r3, #0
 800547a:	d0ee      	beq.n	800545a <bmk7_execute.lto_priv.165+0x8a>
  test_terminate_threads();
 800547c:	f7fd fe38 	bl	80030f0 <test_terminate_threads>
 8005480:	f386 8811 	msr	BASEPRI, r6
 * @api
 */
void chSemReset(semaphore_t *sp, cnt_t n) {

  chSysLock();
  chSemResetI(sp, n);
 8005484:	4816      	ldr	r0, [pc, #88]	; (80054e0 <bmk7_execute.lto_priv.165+0x110>)
 8005486:	4629      	mov	r1, r5
 8005488:	f7fc fb0a 	bl	8001aa0 <chSemResetI>
  chSchRescheduleS();
 800548c:	f7fb ffd0 	bl	8001430 <chSchRescheduleS>
 8005490:	f385 8811 	msr	BASEPRI, r5
  chSemReset(&sem1, 0);
  test_wait_threads();
 8005494:	f7fd fe14 	bl	80030c0 <test_wait_threads>

  test_print("--- Score : ");
 8005498:	4812      	ldr	r0, [pc, #72]	; (80054e4 <bmk7_execute.lto_priv.165+0x114>)
 800549a:	f7fd fee9 	bl	8003270 <test_print>
  test_printn(n);
 800549e:	4620      	mov	r0, r4
 80054a0:	f7fd fef6 	bl	8003290 <test_printn>
  test_print(" reschedules/S, ");
 80054a4:	4810      	ldr	r0, [pc, #64]	; (80054e8 <bmk7_execute.lto_priv.165+0x118>)
 80054a6:	f7fd fee3 	bl	8003270 <test_print>
  test_printn(n * 6);
 80054aa:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 80054ae:	0040      	lsls	r0, r0, #1
 80054b0:	f7fd feee 	bl	8003290 <test_printn>
  test_println(" ctxswc/S");
 80054b4:	480d      	ldr	r0, [pc, #52]	; (80054ec <bmk7_execute.lto_priv.165+0x11c>)
}
 80054b6:	b003      	add	sp, #12
 80054b8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}

  test_print("--- Score : ");
  test_printn(n);
  test_print(" reschedules/S, ");
  test_printn(n * 6);
  test_println(" ctxswc/S");
 80054bc:	f7fd beb8 	b.w	8003230 <test_println>
 80054c0:	20001098 	.word	0x20001098
 80054c4:	080053a1 	.word	0x080053a1
 80054c8:	20000a30 	.word	0x20000a30
 80054cc:	20000a04 	.word	0x20000a04
 80054d0:	20000b78 	.word	0x20000b78
 80054d4:	20000cc0 	.word	0x20000cc0
 80054d8:	20000e08 	.word	0x20000e08
 80054dc:	20000f50 	.word	0x20000f50
 80054e0:	20000948 	.word	0x20000948
 80054e4:	08006aa8 	.word	0x08006aa8
 80054e8:	080077d0 	.word	0x080077d0
 80054ec:	080077b8 	.word	0x080077b8
 80054f0:	200011e8 	.word	0x200011e8
	...

08005500 <bmk5_execute.lto_priv.162>:
 * in each iteration.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk5_execute(void) {
 8005500:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005502:	4b13      	ldr	r3, [pc, #76]	; (8005550 <bmk5_execute.lto_priv.162+0x50>)
 8005504:	b083      	sub	sp, #12
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005506:	699b      	ldr	r3, [r3, #24]

  uint32_t n = 0;
 8005508:	2400      	movs	r4, #0
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() - 1;
 800550a:	689d      	ldr	r5, [r3, #8]
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdWait(chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL));
 800550c:	4627      	mov	r7, r4
 800550e:	4e11      	ldr	r6, [pc, #68]	; (8005554 <bmk5_execute.lto_priv.162+0x54>)

static void bmk5_execute(void) {

  uint32_t n = 0;
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() - 1;
 8005510:	3d01      	subs	r5, #1
  test_wait_tick();
 8005512:	f7fd fdc5 	bl	80030a0 <test_wait_tick>
  test_start_timer(1000);
 8005516:	f001 f95b 	bl	80067d0 <test_start_timer.constprop.6>
  do {
    chThdWait(chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL));
 800551a:	4b0f      	ldr	r3, [pc, #60]	; (8005558 <bmk5_execute.lto_priv.162+0x58>)
 800551c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005520:	462a      	mov	r2, r5
 8005522:	9700      	str	r7, [sp, #0]
 8005524:	480d      	ldr	r0, [pc, #52]	; (800555c <bmk5_execute.lto_priv.162+0x5c>)
 8005526:	f7fc f843 	bl	80015b0 <chThdCreateStatic>
 800552a:	f7fc f8e1 	bl	80016f0 <chThdWait>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800552e:	7833      	ldrb	r3, [r6, #0]
  tprio_t prio = chThdGetPriorityX() - 1;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdWait(chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL));
    n++;
 8005530:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8005532:	2b00      	cmp	r3, #0
 8005534:	d0f1      	beq.n	800551a <bmk5_execute.lto_priv.162+0x1a>
  test_print("--- Score : ");
 8005536:	480a      	ldr	r0, [pc, #40]	; (8005560 <bmk5_execute.lto_priv.162+0x60>)
 8005538:	f7fd fe9a 	bl	8003270 <test_print>
  test_printn(n);
 800553c:	4620      	mov	r0, r4
 800553e:	f7fd fea7 	bl	8003290 <test_printn>
  test_println(" threads/S");
 8005542:	4808      	ldr	r0, [pc, #32]	; (8005564 <bmk5_execute.lto_priv.162+0x64>)
}
 8005544:	b003      	add	sp, #12
 8005546:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n);
  test_println(" threads/S");
 800554a:	f7fd be71 	b.w	8003230 <test_println>
 800554e:	bf00      	nop
 8005550:	20001098 	.word	0x20001098
 8005554:	200011e8 	.word	0x200011e8
 8005558:	08005c51 	.word	0x08005c51
 800555c:	20000a30 	.word	0x20000a30
 8005560:	08006aa8 	.word	0x08006aa8
 8005564:	080077c4 	.word	0x080077c4
	...

08005570 <bmk4_execute.lto_priv.161>:
    msg = self->p_u.rdymsg;
  } while (msg == MSG_OK);
  chSysUnlock();
}

static void bmk4_execute(void) {
 8005570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005574:	4b25      	ldr	r3, [pc, #148]	; (800560c <bmk4_execute.lto_priv.161+0x9c>)
 8005576:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005578:	699b      	ldr	r3, [r3, #24]
  thread_t *tp;
  uint32_t n;

  tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 800557a:	2500      	movs	r5, #0
 800557c:	689a      	ldr	r2, [r3, #8]
 800557e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005582:	3201      	adds	r2, #1
 8005584:	4b22      	ldr	r3, [pc, #136]	; (8005610 <bmk4_execute.lto_priv.161+0xa0>)
 8005586:	4823      	ldr	r0, [pc, #140]	; (8005614 <bmk4_execute.lto_priv.161+0xa4>)
 8005588:	9500      	str	r5, [sp, #0]
 800558a:	f7fc f811 	bl	80015b0 <chThdCreateStatic>
 800558e:	4b22      	ldr	r3, [pc, #136]	; (8005618 <bmk4_execute.lto_priv.161+0xa8>)
 8005590:	4604      	mov	r4, r0
 8005592:	6018      	str	r0, [r3, #0]
  n = 0;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chSysLock();
    chSchWakeupS(tp, MSG_OK);
 8005594:	46aa      	mov	sl, r5
  uint32_t n;

  tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
                                      thread4, NULL);
  n = 0;
  test_wait_tick();
 8005596:	f7fd fd83 	bl	80030a0 <test_wait_tick>
  test_start_timer(1000);
 800559a:	f001 f919 	bl	80067d0 <test_start_timer.constprop.6>
 800559e:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8005624 <bmk4_execute.lto_priv.161+0xb4>
 80055a2:	f04f 0820 	mov.w	r8, #32
 80055a6:	2720      	movs	r7, #32
 80055a8:	f388 8811 	msr	BASEPRI, r8
  do {
    chSysLock();
    chSchWakeupS(tp, MSG_OK);
 80055ac:	2100      	movs	r1, #0
 80055ae:	4620      	mov	r0, r4
 80055b0:	f7fb ff66 	bl	8001480 <chSchWakeupS>
    chSchWakeupS(tp, MSG_OK);
 80055b4:	4620      	mov	r0, r4
 80055b6:	2100      	movs	r1, #0
 80055b8:	f7fb ff62 	bl	8001480 <chSchWakeupS>
    chSchWakeupS(tp, MSG_OK);
 80055bc:	4620      	mov	r0, r4
 80055be:	2100      	movs	r1, #0
 80055c0:	f7fb ff5e 	bl	8001480 <chSchWakeupS>
    chSchWakeupS(tp, MSG_OK);
 80055c4:	4620      	mov	r0, r4
 80055c6:	2100      	movs	r1, #0
 80055c8:	f7fb ff5a 	bl	8001480 <chSchWakeupS>
 80055cc:	2600      	movs	r6, #0
 80055ce:	f38a 8811 	msr	BASEPRI, sl
    chSysUnlock();
    n += 4;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80055d2:	f899 3000 	ldrb.w	r3, [r9]
    chSchWakeupS(tp, MSG_OK);
    chSchWakeupS(tp, MSG_OK);
    chSchWakeupS(tp, MSG_OK);
    chSchWakeupS(tp, MSG_OK);
    chSysUnlock();
    n += 4;
 80055d6:	3504      	adds	r5, #4
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d0e4      	beq.n	80055a6 <bmk4_execute.lto_priv.161+0x36>
 80055dc:	f387 8811 	msr	BASEPRI, r7
  chSysLock();
  chSchWakeupS(tp, MSG_TIMEOUT);
 80055e0:	f04f 31ff 	mov.w	r1, #4294967295
 80055e4:	4620      	mov	r0, r4
 80055e6:	f7fb ff4b 	bl	8001480 <chSchWakeupS>
 80055ea:	f386 8811 	msr	BASEPRI, r6
  chSysUnlock();

  test_wait_threads();
 80055ee:	f7fd fd67 	bl	80030c0 <test_wait_threads>
  test_print("--- Score : ");
 80055f2:	480a      	ldr	r0, [pc, #40]	; (800561c <bmk4_execute.lto_priv.161+0xac>)
 80055f4:	f7fd fe3c 	bl	8003270 <test_print>
  test_printn(n * 2);
 80055f8:	0068      	lsls	r0, r5, #1
 80055fa:	f7fd fe49 	bl	8003290 <test_printn>
  test_println(" ctxswc/S");
 80055fe:	4808      	ldr	r0, [pc, #32]	; (8005620 <bmk4_execute.lto_priv.161+0xb0>)
}
 8005600:	b002      	add	sp, #8
 8005602:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  chSysUnlock();

  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n * 2);
  test_println(" ctxswc/S");
 8005606:	f7fd be13 	b.w	8003230 <test_println>
 800560a:	bf00      	nop
 800560c:	20001098 	.word	0x20001098
 8005610:	08005631 	.word	0x08005631
 8005614:	20000a30 	.word	0x20000a30
 8005618:	20000a04 	.word	0x20000a04
 800561c:	08006aa8 	.word	0x08006aa8
 8005620:	080077b8 	.word	0x080077b8
 8005624:	200011e8 	.word	0x200011e8
	...

08005630 <thread4>:
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005630:	4a07      	ldr	r2, [pc, #28]	; (8005650 <thread4+0x20>)
 * the thread is awakened as fast is possible by the tester thread.<br>
 * The Context Switch performance is calculated by measuring the number of
 * iterations after a second of continuous operations.
 */

static THD_FUNCTION(thread4, p) {
 8005632:	b510      	push	{r4, lr}
 8005634:	2320      	movs	r3, #32
 8005636:	6994      	ldr	r4, [r2, #24]
 8005638:	f383 8811 	msr	BASEPRI, r3
  thread_t *self = chThdGetSelfX();

  (void)p;
  chSysLock();
  do {
    chSchGoSleepS(CH_STATE_SUSPENDED);
 800563c:	2003      	movs	r0, #3
 800563e:	f7fb fff7 	bl	8001630 <chSchGoSleepS>
    msg = self->p_u.rdymsg;
  } while (msg == MSG_OK);
 8005642:	6a23      	ldr	r3, [r4, #32]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d0f9      	beq.n	800563c <thread4+0xc>
 8005648:	2300      	movs	r3, #0
 800564a:	f383 8811 	msr	BASEPRI, r3
 800564e:	bd10      	pop	{r4, pc}
 8005650:	20001098 	.word	0x20001098
	...

08005660 <thread2.lto_priv.92>:

  chThdExit((msg_t)p);
}

#if CH_CFG_USE_MESSAGES || defined(__DOXYGEN__)
static THD_FUNCTION(thread2, p) {
 8005660:	b570      	push	{r4, r5, r6, lr}
 8005662:	2620      	movs	r6, #32
 8005664:	2500      	movs	r5, #0
  thread_t *tp;
  msg_t msg;

  (void)p;
  do {
    tp = chMsgWait();
 8005666:	f7fb fffb 	bl	8001660 <chMsgWait>
 800566a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800566c:	f386 8811 	msr	BASEPRI, r6
 8005670:	4621      	mov	r1, r4
 8005672:	f7fb ff05 	bl	8001480 <chSchWakeupS>
 8005676:	f385 8811 	msr	BASEPRI, r5
    msg = chMsgGet(tp);
    chMsgRelease(tp, msg);
  } while (msg);
 800567a:	2c00      	cmp	r4, #0
 800567c:	d1f3      	bne.n	8005666 <thread2.lto_priv.92+0x6>
}
 800567e:	bd70      	pop	{r4, r5, r6, pc}

08005680 <msg_loop_test>:

#ifdef __GNUC__
__attribute__((noinline))
#endif
static unsigned int msg_loop_test(thread_t *tp) {
 8005680:	b570      	push	{r4, r5, r6, lr}
 8005682:	4605      	mov	r5, r0

  uint32_t n = 0;
  test_wait_tick();
 8005684:	f7fd fd0c 	bl	80030a0 <test_wait_tick>
  test_start_timer(1000);
 8005688:	f001 f8a2 	bl	80067d0 <test_start_timer.constprop.6>
 800568c:	4e07      	ldr	r6, [pc, #28]	; (80056ac <msg_loop_test+0x2c>)
#ifdef __GNUC__
__attribute__((noinline))
#endif
static unsigned int msg_loop_test(thread_t *tp) {

  uint32_t n = 0;
 800568e:	2400      	movs	r4, #0
  test_wait_tick();
  test_start_timer(1000);
  do {
    (void)chMsgSend(tp, 1);
 8005690:	4628      	mov	r0, r5
 8005692:	2101      	movs	r1, #1
 8005694:	f7fc f894 	bl	80017c0 <chMsgSend>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8005698:	7833      	ldrb	r3, [r6, #0]
  uint32_t n = 0;
  test_wait_tick();
  test_start_timer(1000);
  do {
    (void)chMsgSend(tp, 1);
    n++;
 800569a:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800569c:	2b00      	cmp	r3, #0
 800569e:	d0f7      	beq.n	8005690 <msg_loop_test+0x10>
  (void)chMsgSend(tp, 0);
 80056a0:	4628      	mov	r0, r5
 80056a2:	2100      	movs	r1, #0
 80056a4:	f7fc f88c 	bl	80017c0 <chMsgSend>
  return n;
}
 80056a8:	4620      	mov	r0, r4
 80056aa:	bd70      	pop	{r4, r5, r6, pc}
 80056ac:	200011e8 	.word	0x200011e8

080056b0 <bmk3_execute.lto_priv.160>:
 * thread, four lower priority threads crowd the ready list, the messages
 * throughput per second is measured while the ready list and the result
 * printed in the output log.
 */

static void bmk3_execute(void) {
 80056b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056b4:	4f2c      	ldr	r7, [pc, #176]	; (8005768 <bmk3_execute.lto_priv.160+0xb8>)
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 80056b6:	4e2d      	ldr	r6, [pc, #180]	; (800576c <bmk3_execute.lto_priv.160+0xbc>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80056b8:	69bb      	ldr	r3, [r7, #24]
 * thread, four lower priority threads crowd the ready list, the messages
 * throughput per second is measured while the ready list and the result
 * printed in the output log.
 */

static void bmk3_execute(void) {
 80056ba:	b082      	sub	sp, #8
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 80056bc:	689a      	ldr	r2, [r3, #8]
 80056be:	2500      	movs	r5, #0
 80056c0:	4630      	mov	r0, r6
 80056c2:	3201      	adds	r2, #1
 80056c4:	9500      	str	r5, [sp, #0]
 80056c6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80056ca:	4b29      	ldr	r3, [pc, #164]	; (8005770 <bmk3_execute.lto_priv.160+0xc0>)
 80056cc:	f7fb ff70 	bl	80015b0 <chThdCreateStatic>
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	4c28      	ldr	r4, [pc, #160]	; (8005774 <bmk3_execute.lto_priv.160+0xc4>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
 80056d4:	689a      	ldr	r2, [r3, #8]
 80056d6:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8005784 <bmk3_execute.lto_priv.160+0xd4>
 */

static void bmk3_execute(void) {
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 80056da:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
 80056dc:	4643      	mov	r3, r8
 80056de:	3a02      	subs	r2, #2
 80056e0:	9500      	str	r5, [sp, #0]
 80056e2:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 80056e6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80056ea:	f7fb ff61 	bl	80015b0 <chThdCreateStatic>
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread1, NULL);
 80056f2:	689a      	ldr	r2, [r3, #8]
 80056f4:	f506 7024 	add.w	r0, r6, #656	; 0x290
 80056f8:	4643      	mov	r3, r8
 80056fa:	3a03      	subs	r2, #3
 80056fc:	9500      	str	r5, [sp, #0]
 80056fe:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005702:	f7fb ff55 	bl	80015b0 <chThdCreateStatic>
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, thread1, NULL);
 800570a:	689a      	ldr	r2, [r3, #8]
 800570c:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 8005710:	4643      	mov	r3, r8
 8005712:	3a04      	subs	r2, #4
 8005714:	9500      	str	r5, [sp, #0]
 8005716:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800571a:	f7fb ff49 	bl	80015b0 <chThdCreateStatic>
 800571e:	69bb      	ldr	r3, [r7, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, thread1, NULL);
 8005720:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005724:	689a      	ldr	r2, [r3, #8]
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread1, NULL);
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, thread1, NULL);
 8005726:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, thread1, NULL);
 8005728:	3a05      	subs	r2, #5
 800572a:	4643      	mov	r3, r8
 800572c:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 8005730:	9500      	str	r5, [sp, #0]
 8005732:	f7fb ff3d 	bl	80015b0 <chThdCreateStatic>
 8005736:	6120      	str	r0, [r4, #16]
  n = msg_loop_test(threads[0]);
 8005738:	6820      	ldr	r0, [r4, #0]
 800573a:	f7ff ffa1 	bl	8005680 <msg_loop_test>
 800573e:	4604      	mov	r4, r0
  test_wait_threads();
 8005740:	f7fd fcbe 	bl	80030c0 <test_wait_threads>
  test_print("--- Score : ");
 8005744:	480c      	ldr	r0, [pc, #48]	; (8005778 <bmk3_execute.lto_priv.160+0xc8>)
 8005746:	f7fd fd93 	bl	8003270 <test_print>
  test_printn(n);
 800574a:	4620      	mov	r0, r4
 800574c:	f7fd fda0 	bl	8003290 <test_printn>
  test_print(" msgs/S, ");
 8005750:	480a      	ldr	r0, [pc, #40]	; (800577c <bmk3_execute.lto_priv.160+0xcc>)
 8005752:	f7fd fd8d 	bl	8003270 <test_print>
  test_printn(n << 1);
 8005756:	0060      	lsls	r0, r4, #1
 8005758:	f7fd fd9a 	bl	8003290 <test_printn>
  test_println(" ctxswc/S");
 800575c:	4808      	ldr	r0, [pc, #32]	; (8005780 <bmk3_execute.lto_priv.160+0xd0>)
}
 800575e:	b002      	add	sp, #8
 8005760:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n);
  test_print(" msgs/S, ");
  test_printn(n << 1);
  test_println(" ctxswc/S");
 8005764:	f7fd bd64 	b.w	8003230 <test_println>
 8005768:	20001098 	.word	0x20001098
 800576c:	20000a30 	.word	0x20000a30
 8005770:	08005661 	.word	0x08005661
 8005774:	20000a04 	.word	0x20000a04
 8005778:	08006aa8 	.word	0x08006aa8
 800577c:	080077e4 	.word	0x080077e4
 8005780:	080077b8 	.word	0x080077b8
 8005784:	08005c51 	.word	0x08005c51
	...

08005790 <bmk2_execute.lto_priv.159>:
 * A message server thread is created with an higher priority than the client
 * thread, the messages throughput per second is measured and the result
 * printed in the output log.
 */

static void bmk2_execute(void) {
 8005790:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005792:	4a13      	ldr	r2, [pc, #76]	; (80057e0 <bmk2_execute.lto_priv.159+0x50>)
 8005794:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005796:	6992      	ldr	r2, [r2, #24]
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8005798:	2300      	movs	r3, #0
 800579a:	6892      	ldr	r2, [r2, #8]
 800579c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80057a0:	3201      	adds	r2, #1
 80057a2:	9300      	str	r3, [sp, #0]
 80057a4:	480f      	ldr	r0, [pc, #60]	; (80057e4 <bmk2_execute.lto_priv.159+0x54>)
 80057a6:	4b10      	ldr	r3, [pc, #64]	; (80057e8 <bmk2_execute.lto_priv.159+0x58>)
 80057a8:	f7fb ff02 	bl	80015b0 <chThdCreateStatic>
 80057ac:	4b0f      	ldr	r3, [pc, #60]	; (80057ec <bmk2_execute.lto_priv.159+0x5c>)
 80057ae:	6018      	str	r0, [r3, #0]
  n = msg_loop_test(threads[0]);
 80057b0:	f7ff ff66 	bl	8005680 <msg_loop_test>
 80057b4:	4604      	mov	r4, r0
  test_wait_threads();
 80057b6:	f7fd fc83 	bl	80030c0 <test_wait_threads>
  test_print("--- Score : ");
 80057ba:	480d      	ldr	r0, [pc, #52]	; (80057f0 <bmk2_execute.lto_priv.159+0x60>)
 80057bc:	f7fd fd58 	bl	8003270 <test_print>
  test_printn(n);
 80057c0:	4620      	mov	r0, r4
 80057c2:	f7fd fd65 	bl	8003290 <test_printn>
  test_print(" msgs/S, ");
 80057c6:	480b      	ldr	r0, [pc, #44]	; (80057f4 <bmk2_execute.lto_priv.159+0x64>)
 80057c8:	f7fd fd52 	bl	8003270 <test_print>
  test_printn(n << 1);
 80057cc:	0060      	lsls	r0, r4, #1
 80057ce:	f7fd fd5f 	bl	8003290 <test_printn>
  test_println(" ctxswc/S");
 80057d2:	4809      	ldr	r0, [pc, #36]	; (80057f8 <bmk2_execute.lto_priv.159+0x68>)
}
 80057d4:	b002      	add	sp, #8
 80057d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n);
  test_print(" msgs/S, ");
  test_printn(n << 1);
  test_println(" ctxswc/S");
 80057da:	f7fd bd29 	b.w	8003230 <test_println>
 80057de:	bf00      	nop
 80057e0:	20001098 	.word	0x20001098
 80057e4:	20000a30 	.word	0x20000a30
 80057e8:	08005661 	.word	0x08005661
 80057ec:	20000a04 	.word	0x20000a04
 80057f0:	08006aa8 	.word	0x08006aa8
 80057f4:	080077e4 	.word	0x080077e4
 80057f8:	080077b8 	.word	0x080077b8
 80057fc:	00000000 	.word	0x00000000

08005800 <bmk1_execute.lto_priv.158>:
 * A message server thread is created with a lower priority than the client
 * thread, the messages throughput per second is measured and the result
 * printed in the output log.
 */

static void bmk1_execute(void) {
 8005800:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005802:	4a13      	ldr	r2, [pc, #76]	; (8005850 <bmk1_execute.lto_priv.158+0x50>)
 8005804:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005806:	6992      	ldr	r2, [r2, #24]
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread2, NULL);
 8005808:	2300      	movs	r3, #0
 800580a:	6892      	ldr	r2, [r2, #8]
 800580c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005810:	3a01      	subs	r2, #1
 8005812:	9300      	str	r3, [sp, #0]
 8005814:	480f      	ldr	r0, [pc, #60]	; (8005854 <bmk1_execute.lto_priv.158+0x54>)
 8005816:	4b10      	ldr	r3, [pc, #64]	; (8005858 <bmk1_execute.lto_priv.158+0x58>)
 8005818:	f7fb feca 	bl	80015b0 <chThdCreateStatic>
 800581c:	4b0f      	ldr	r3, [pc, #60]	; (800585c <bmk1_execute.lto_priv.158+0x5c>)
 800581e:	6018      	str	r0, [r3, #0]
  n = msg_loop_test(threads[0]);
 8005820:	f7ff ff2e 	bl	8005680 <msg_loop_test>
 8005824:	4604      	mov	r4, r0
  test_wait_threads();
 8005826:	f7fd fc4b 	bl	80030c0 <test_wait_threads>
  test_print("--- Score : ");
 800582a:	480d      	ldr	r0, [pc, #52]	; (8005860 <bmk1_execute.lto_priv.158+0x60>)
 800582c:	f7fd fd20 	bl	8003270 <test_print>
  test_printn(n);
 8005830:	4620      	mov	r0, r4
 8005832:	f7fd fd2d 	bl	8003290 <test_printn>
  test_print(" msgs/S, ");
 8005836:	480b      	ldr	r0, [pc, #44]	; (8005864 <bmk1_execute.lto_priv.158+0x64>)
 8005838:	f7fd fd1a 	bl	8003270 <test_print>
  test_printn(n << 1);
 800583c:	0060      	lsls	r0, r4, #1
 800583e:	f7fd fd27 	bl	8003290 <test_printn>
  test_println(" ctxswc/S");
 8005842:	4809      	ldr	r0, [pc, #36]	; (8005868 <bmk1_execute.lto_priv.158+0x68>)
}
 8005844:	b002      	add	sp, #8
 8005846:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n);
  test_print(" msgs/S, ");
  test_printn(n << 1);
  test_println(" ctxswc/S");
 800584a:	f7fd bcf1 	b.w	8003230 <test_println>
 800584e:	bf00      	nop
 8005850:	20001098 	.word	0x20001098
 8005854:	20000a30 	.word	0x20000a30
 8005858:	08005661 	.word	0x08005661
 800585c:	20000a04 	.word	0x20000a04
 8005860:	08006aa8 	.word	0x08006aa8
 8005864:	080077e4 	.word	0x080077e4
 8005868:	080077b8 	.word	0x080077b8
 800586c:	00000000 	.word	0x00000000

08005870 <sys3_execute.lto_priv.111>:
 * <h2>Description</h2>
 * The chSysIntegrityCheckI() API is invoked in order to asses the state of the
 * system data structures.
 */

static void sys3_execute(void) {
 8005870:	b538      	push	{r3, r4, r5, lr}
 8005872:	2420      	movs	r4, #32
 8005874:	f384 8811 	msr	BASEPRI, r4
  bool result;

  chSysLock();
  result = chSysIntegrityCheckI(CH_INTEGRITY_RLIST);
 8005878:	2001      	movs	r0, #1
 800587a:	f7fc fb11 	bl	8001ea0 <chSysIntegrityCheckI>
 800587e:	2300      	movs	r3, #0
 8005880:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  test_assert(1, result == false, "ready list check failed");
 8005884:	f080 0101 	eor.w	r1, r0, #1
 8005888:	b2c9      	uxtb	r1, r1
 800588a:	2001      	movs	r0, #1
 800588c:	f7fd fc98 	bl	80031c0 <_test_assert>
 8005890:	4605      	mov	r5, r0
 8005892:	b100      	cbz	r0, 8005896 <sys3_execute.lto_priv.111+0x26>
 8005894:	bd38      	pop	{r3, r4, r5, pc}
 8005896:	f384 8811 	msr	BASEPRI, r4

  chSysLock();
  result = chSysIntegrityCheckI(CH_INTEGRITY_VTLIST);
 800589a:	2002      	movs	r0, #2
 800589c:	f7fc fb00 	bl	8001ea0 <chSysIntegrityCheckI>
 80058a0:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_assert(2, result == false, "virtual timers list check failed");
 80058a4:	f080 0101 	eor.w	r1, r0, #1
 80058a8:	b2c9      	uxtb	r1, r1
 80058aa:	2002      	movs	r0, #2
 80058ac:	f7fd fc88 	bl	80031c0 <_test_assert>
 80058b0:	4605      	mov	r5, r0
 80058b2:	2800      	cmp	r0, #0
 80058b4:	d1ee      	bne.n	8005894 <sys3_execute.lto_priv.111+0x24>
 80058b6:	f384 8811 	msr	BASEPRI, r4

  chSysLock();
  result = chSysIntegrityCheckI(CH_INTEGRITY_REGISTRY);
 80058ba:	2004      	movs	r0, #4
 80058bc:	f7fc faf0 	bl	8001ea0 <chSysIntegrityCheckI>
 80058c0:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_assert(3, result == false, "registry list check failed");
 80058c4:	f080 0101 	eor.w	r1, r0, #1
 80058c8:	b2c9      	uxtb	r1, r1
 80058ca:	2003      	movs	r0, #3
 80058cc:	f7fd fc78 	bl	80031c0 <_test_assert>
 80058d0:	4605      	mov	r5, r0
 80058d2:	2800      	cmp	r0, #0
 80058d4:	d1de      	bne.n	8005894 <sys3_execute.lto_priv.111+0x24>
 80058d6:	f384 8811 	msr	BASEPRI, r4

  chSysLock();
  result = chSysIntegrityCheckI(CH_INTEGRITY_PORT);
 80058da:	2008      	movs	r0, #8
 80058dc:	f7fc fae0 	bl	8001ea0 <chSysIntegrityCheckI>
 80058e0:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_assert(4, result == false, "port layer check failed");
}
 80058e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  test_assert(3, result == false, "registry list check failed");

  chSysLock();
  result = chSysIntegrityCheckI(CH_INTEGRITY_PORT);
  chSysUnlock();
  test_assert(4, result == false, "port layer check failed");
 80058e8:	f080 0101 	eor.w	r1, r0, #1
 80058ec:	b2c9      	uxtb	r1, r1
 80058ee:	2004      	movs	r0, #4
 80058f0:	f7fd bc66 	b.w	80031c0 <_test_assert>
	...

08005900 <sys1_execute.lto_priv.109>:
  sts = chSysGetStatusAndLockX();
  chSysRestoreStatusX(sts);
  chSysUnlockFromISR();
}

static void sys1_execute(void) {
 8005900:	b510      	push	{r4, lr}
 8005902:	b086      	sub	sp, #24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005904:	f3ef 8311 	mrs	r3, BASEPRI
 * @xclass
 */
syssts_t chSysGetStatusAndLockX(void) {

  syssts_t sts = port_get_irq_status();
  if (port_irq_enabled(sts)) {
 8005908:	b91b      	cbnz	r3, 8005912 <sys1_execute.lto_priv.109+0x12>
 800590a:	f7fc fab9 	bl	8001e80 <chSysGetStatusAndLockX.part.2.lto_priv.95>
 800590e:	f7fc faa7 	bl	8001e60 <chSysRestoreStatusX.part.3.lto_priv.94>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8005912:	2320      	movs	r3, #32
 8005914:	f383 8811 	msr	BASEPRI, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005918:	f3ef 8311 	mrs	r3, BASEPRI
 800591c:	b91b      	cbnz	r3, 8005926 <sys1_execute.lto_priv.109+0x26>
 800591e:	f7fc faaf 	bl	8001e80 <chSysGetStatusAndLockX.part.2.lto_priv.95>
 8005922:	f7fc fa9d 	bl	8001e60 <chSysRestoreStatusX.part.3.lto_priv.94>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8005926:	2300      	movs	r3, #0
 8005928:	f383 8811 	msr	BASEPRI, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800592c:	f3ef 8311 	mrs	r3, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalLock(void) {

  if (port_irq_enabled(port_get_irq_status())) {
 8005930:	b913      	cbnz	r3, 8005938 <sys1_execute.lto_priv.109+0x38>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8005932:	2320      	movs	r3, #32
 8005934:	f383 8811 	msr	BASEPRI, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005938:	f3ef 8311 	mrs	r3, BASEPRI
 800593c:	b913      	cbnz	r3, 8005944 <sys1_execute.lto_priv.109+0x44>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800593e:	2320      	movs	r3, #32
 8005940:	f383 8811 	msr	BASEPRI, r3
 8005944:	2300      	movs	r3, #0
 8005946:	f383 8811 	msr	BASEPRI, r3
 800594a:	2220      	movs	r2, #32
 800594c:	f382 8811 	msr	BASEPRI, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005950:	f3ef 8211 	mrs	r2, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalUnlock(void) {

  if (!port_irq_enabled(port_get_irq_status())) {
 8005954:	b10a      	cbz	r2, 800595a <sys1_execute.lto_priv.109+0x5a>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8005956:	f383 8811 	msr	BASEPRI, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800595a:	f3ef 8311 	mrs	r3, BASEPRI
 800595e:	b113      	cbz	r3, 8005966 <sys1_execute.lto_priv.109+0x66>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8005960:	2300      	movs	r3, #0
 8005962:	f383 8811 	msr	BASEPRI, r3
 *
 * @init
 */
static inline void chVTObjectInit(virtual_timer_t *vtp) {

  vtp->vt_func = NULL;
 8005966:	2300      	movs	r3, #0
 8005968:	9304      	str	r3, [sp, #16]
 800596a:	2320      	movs	r3, #32
 800596c:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 8005970:	9b04      	ldr	r3, [sp, #16]
    chVTDoResetI(vtp);
 8005972:	ac01      	add	r4, sp, #4
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 8005974:	b113      	cbz	r3, 800597c <sys1_execute.lto_priv.109+0x7c>
    chVTDoResetI(vtp);
 8005976:	4620      	mov	r0, r4
 8005978:	f7fc f8ea 	bl	8001b50 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, systime_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 800597c:	4620      	mov	r0, r4
 800597e:	2101      	movs	r1, #1
 8005980:	4a0b      	ldr	r2, [pc, #44]	; (80059b0 <sys1_execute.lto_priv.109+0xb0>)
 8005982:	2300      	movs	r3, #0
 8005984:	f7fc f924 	bl	8001bd0 <chVTDoSetI>
 8005988:	2400      	movs	r4, #0
 800598a:	f384 8811 	msr	BASEPRI, r4
  chSysUnconditionalUnlock();

  /*/Testing from ISR context using a virtual timer.*/
  chVTObjectInit(&vt);
  chVTSet(&vt, 1, vtcb, NULL);
  chThdSleep(10);
 800598e:	200a      	movs	r0, #10
 8005990:	f7fc fa56 	bl	8001e40 <chThdSleep>
 8005994:	2320      	movs	r3, #32
 8005996:	f383 8811 	msr	BASEPRI, r3
 800599a:	9904      	ldr	r1, [sp, #16]
 800599c:	f384 8811 	msr	BASEPRI, r4

  test_assert(1, chVTIsArmed(&vt) == false, "timer still armed");
 80059a0:	fab1 f181 	clz	r1, r1
 80059a4:	2001      	movs	r0, #1
 80059a6:	0949      	lsrs	r1, r1, #5
 80059a8:	f7fd fc0a 	bl	80031c0 <_test_assert>
}
 80059ac:	b006      	add	sp, #24
 80059ae:	bd10      	pop	{r4, pc}
 80059b0:	080059c1 	.word	0x080059c1
	...

080059c0 <vtcb>:
 *
 * <h2>Description</h2>
 * The critical zones API is invoked for coverage.
 */

static void vtcb(void *p) {
 80059c0:	b508      	push	{r3, lr}
 80059c2:	2320      	movs	r3, #32
 80059c4:	f383 8811 	msr	BASEPRI, r3
 80059c8:	2200      	movs	r2, #0
 80059ca:	f382 8811 	msr	BASEPRI, r2
 80059ce:	f383 8811 	msr	BASEPRI, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80059d2:	f3ef 8311 	mrs	r3, BASEPRI
 80059d6:	b91b      	cbnz	r3, 80059e0 <vtcb+0x20>
 80059d8:	f7fc fa52 	bl	8001e80 <chSysGetStatusAndLockX.part.2.lto_priv.95>
 80059dc:	f7fc fa40 	bl	8001e60 <chSysRestoreStatusX.part.3.lto_priv.94>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80059e0:	2300      	movs	r3, #0
 80059e2:	f383 8811 	msr	BASEPRI, r3
 80059e6:	bd08      	pop	{r3, pc}
	...

080059f0 <thread2.lto_priv.91>:
}

static THD_FUNCTION(thread2, p) {

  (void)p;
  chOQPutTimeout(&oq, 0, MS2ST(200));
 80059f0:	4802      	ldr	r0, [pc, #8]	; (80059fc <thread2.lto_priv.91+0xc>)
 80059f2:	2100      	movs	r1, #0
 80059f4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80059f8:	f7fc b98a 	b.w	8001d10 <chOQPutTimeout>
 80059fc:	20000874 	.word	0x20000874

08005a00 <queues2_execute.lto_priv.157>:
}

static void queues2_execute(void) {
 8005a00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005a04:	2320      	movs	r3, #32
 8005a06:	b083      	sub	sp, #12
 8005a08:	f383 8811 	msr	BASEPRI, r3
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 8005a0c:	4b86      	ldr	r3, [pc, #536]	; (8005c28 <queues2_execute.lto_priv.157+0x228>)
 8005a0e:	6959      	ldr	r1, [r3, #20]
 8005a10:	699a      	ldr	r2, [r3, #24]
 8005a12:	4291      	cmp	r1, r2
 8005a14:	d05d      	beq.n	8005ad2 <queues2_execute.lto_priv.157+0xd2>
 8005a16:	2100      	movs	r1, #0
  unsigned i;
  size_t n;

  /* Initial empty state */
  test_assert_lock(1, chOQIsEmptyI(&oq), "not empty");
 8005a18:	2001      	movs	r0, #1
 8005a1a:	f7fd fbd1 	bl	80031c0 <_test_assert>
 8005a1e:	bbb8      	cbnz	r0, 8005a90 <queues2_execute.lto_priv.157+0x90>
 8005a20:	f380 8811 	msr	BASEPRI, r0
 8005a24:	2441      	movs	r4, #65	; 0x41
 *
 * @api
 */
static inline msg_t chOQPut(output_queue_t *oqp, uint8_t b) {

  return chOQPutTimeout(oqp, b, TIME_INFINITE);
 8005a26:	4d80      	ldr	r5, [pc, #512]	; (8005c28 <queues2_execute.lto_priv.157+0x228>)
 8005a28:	4621      	mov	r1, r4
 8005a2a:	3401      	adds	r4, #1
 8005a2c:	4628      	mov	r0, r5
 8005a2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a32:	b2e4      	uxtb	r4, r4
 8005a34:	f7fc f96c 	bl	8001d10 <chOQPutTimeout>

  /* Queue filling */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 8005a38:	2c45      	cmp	r4, #69	; 0x45
 8005a3a:	d1f4      	bne.n	8005a26 <queues2_execute.lto_priv.157+0x26>
 8005a3c:	2620      	movs	r6, #32
 8005a3e:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 8005a42:	68a9      	ldr	r1, [r5, #8]
    chOQPut(&oq, 'A' + i);
  test_assert_lock(2, chOQIsFullI(&oq), "still has space");
 8005a44:	2002      	movs	r0, #2
 8005a46:	fab1 f181 	clz	r1, r1
 8005a4a:	0949      	lsrs	r1, r1, #5
 8005a4c:	f7fd fbb8 	bl	80031c0 <_test_assert>
 8005a50:	4607      	mov	r7, r0
 8005a52:	b9e8      	cbnz	r0, 8005a90 <queues2_execute.lto_priv.157+0x90>
 8005a54:	f380 8811 	msr	BASEPRI, r0
 8005a58:	4681      	mov	r9, r0
 8005a5a:	2404      	movs	r4, #4
 8005a5c:	f04f 0820 	mov.w	r8, #32
 8005a60:	f386 8811 	msr	BASEPRI, r6
  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++) {
    char c;

    chSysLock();
    c = chOQGetI(&oq);
 8005a64:	4d70      	ldr	r5, [pc, #448]	; (8005c28 <queues2_execute.lto_priv.157+0x228>)
 8005a66:	4628      	mov	r0, r5
 8005a68:	f7fd ff3a 	bl	80038e0 <chOQGetI>
 8005a6c:	f389 8811 	msr	BASEPRI, r9
    chSysUnlock();
    test_emit_token(c);
 8005a70:	b2c0      	uxtb	r0, r0
 8005a72:	f7fd fbbd 	bl	80031f0 <test_emit_token>
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chOQPut(&oq, 'A' + i);
  test_assert_lock(2, chOQIsFullI(&oq), "still has space");

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++) {
 8005a76:	3c01      	subs	r4, #1
 8005a78:	d1f0      	bne.n	8005a5c <queues2_execute.lto_priv.157+0x5c>
 8005a7a:	f388 8811 	msr	BASEPRI, r8
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 8005a7e:	696a      	ldr	r2, [r5, #20]
 8005a80:	69ab      	ldr	r3, [r5, #24]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d02a      	beq.n	8005adc <queues2_execute.lto_priv.157+0xdc>
    chSysLock();
    c = chOQGetI(&oq);
    chSysUnlock();
    test_emit_token(c);
  }
  test_assert_lock(3, chOQIsEmptyI(&oq), "still full");
 8005a86:	4639      	mov	r1, r7
 8005a88:	2003      	movs	r0, #3
 8005a8a:	f7fd fb99 	bl	80031c0 <_test_assert>
 8005a8e:	b128      	cbz	r0, 8005a9c <queues2_execute.lto_priv.157+0x9c>
 8005a90:	2300      	movs	r3, #0
 8005a92:	f383 8811 	msr	BASEPRI, r3
  test_assert(11, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
  test_assert_lock(12, chOQIsFullI(&oq), "not full");

  /* Timeout */
  test_assert(13, chOQPutTimeout(&oq, 0, 10) == Q_TIMEOUT, "wrong timeout return");
}
 8005a96:	b003      	add	sp, #12
 8005a98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a9c:	f380 8811 	msr	BASEPRI, r0
    c = chOQGetI(&oq);
    chSysUnlock();
    test_emit_token(c);
  }
  test_assert_lock(3, chOQIsEmptyI(&oq), "still full");
  test_assert_sequence(4, "ABCD");
 8005aa0:	2004      	movs	r0, #4
 8005aa2:	4962      	ldr	r1, [pc, #392]	; (8005c2c <queues2_execute.lto_priv.157+0x22c>)
 8005aa4:	f7fd fb64 	bl	8003170 <_test_assert_sequence>
 8005aa8:	4604      	mov	r4, r0
 8005aaa:	2800      	cmp	r0, #0
 8005aac:	d1f3      	bne.n	8005a96 <queues2_execute.lto_priv.157+0x96>
 8005aae:	2620      	movs	r6, #32
 8005ab0:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(5, chOQGetI(&oq) == Q_EMPTY, "failed to report Q_EMPTY");
 8005ab4:	4d5c      	ldr	r5, [pc, #368]	; (8005c28 <queues2_execute.lto_priv.157+0x228>)
 8005ab6:	4628      	mov	r0, r5
 8005ab8:	f7fd ff12 	bl	80038e0 <chOQGetI>
 8005abc:	3003      	adds	r0, #3
 8005abe:	bf14      	ite	ne
 8005ac0:	2100      	movne	r1, #0
 8005ac2:	2101      	moveq	r1, #1
 8005ac4:	2005      	movs	r0, #5
 8005ac6:	f7fd fb7b 	bl	80031c0 <_test_assert>
 8005aca:	b160      	cbz	r0, 8005ae6 <queues2_execute.lto_priv.157+0xe6>
 8005acc:	f384 8811 	msr	BASEPRI, r4
 8005ad0:	e7e1      	b.n	8005a96 <queues2_execute.lto_priv.157+0x96>
 8005ad2:	6899      	ldr	r1, [r3, #8]
 8005ad4:	3100      	adds	r1, #0
 8005ad6:	bf18      	it	ne
 8005ad8:	2101      	movne	r1, #1
 8005ada:	e79d      	b.n	8005a18 <queues2_execute.lto_priv.157+0x18>
 8005adc:	68af      	ldr	r7, [r5, #8]
 8005ade:	3700      	adds	r7, #0
 8005ae0:	bf18      	it	ne
 8005ae2:	2701      	movne	r7, #1
 8005ae4:	e7cf      	b.n	8005a86 <queues2_execute.lto_priv.157+0x86>
 8005ae6:	f380 8811 	msr	BASEPRI, r0

  /* Writing the whole thing */
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE * 2, TIME_IMMEDIATE);
 8005aea:	4951      	ldr	r1, [pc, #324]	; (8005c30 <queues2_execute.lto_priv.157+0x230>)
 8005aec:	4603      	mov	r3, r0
 8005aee:	2208      	movs	r2, #8
 8005af0:	4628      	mov	r0, r5
 8005af2:	f7fd fea5 	bl	8003840 <chOQWriteTimeout>
  test_assert(6, n == TEST_QUEUES_SIZE, "wrong returned size");
 8005af6:	f1a0 0104 	sub.w	r1, r0, #4
 8005afa:	fab1 f181 	clz	r1, r1
 8005afe:	2006      	movs	r0, #6
 8005b00:	0949      	lsrs	r1, r1, #5
 8005b02:	f7fd fb5d 	bl	80031c0 <_test_assert>
 8005b06:	4604      	mov	r4, r0
 8005b08:	2800      	cmp	r0, #0
 8005b0a:	d1c4      	bne.n	8005a96 <queues2_execute.lto_priv.157+0x96>
 8005b0c:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 8005b10:	68a9      	ldr	r1, [r5, #8]
  test_assert_lock(7, chOQIsFullI(&oq), "not full");
 8005b12:	2007      	movs	r0, #7
 8005b14:	fab1 f181 	clz	r1, r1
 8005b18:	0949      	lsrs	r1, r1, #5
 8005b1a:	f7fd fb51 	bl	80031c0 <_test_assert>
 8005b1e:	4607      	mov	r7, r0
 8005b20:	2800      	cmp	r0, #0
 8005b22:	d1d3      	bne.n	8005acc <queues2_execute.lto_priv.157+0xcc>
 8005b24:	f380 8811 	msr	BASEPRI, r0
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005b28:	4b42      	ldr	r3, [pc, #264]	; (8005c34 <queues2_execute.lto_priv.157+0x234>)
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8005b2a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	4841      	ldr	r0, [pc, #260]	; (8005c38 <queues2_execute.lto_priv.157+0x238>)
 8005b32:	689a      	ldr	r2, [r3, #8]
 8005b34:	4b41      	ldr	r3, [pc, #260]	; (8005c3c <queues2_execute.lto_priv.157+0x23c>)
 8005b36:	3201      	adds	r2, #1
 8005b38:	9700      	str	r7, [sp, #0]
 8005b3a:	f7fb fd39 	bl	80015b0 <chThdCreateStatic>
 8005b3e:	4b40      	ldr	r3, [pc, #256]	; (8005c40 <queues2_execute.lto_priv.157+0x240>)
 8005b40:	6018      	str	r0, [r3, #0]
 8005b42:	f386 8811 	msr	BASEPRI, r6
 */
static inline size_t chOQGetFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeX(oqp) - chQSpaceI(oqp));
 8005b46:	68e9      	ldr	r1, [r5, #12]
 8005b48:	692b      	ldr	r3, [r5, #16]
 8005b4a:	68aa      	ldr	r2, [r5, #8]
 8005b4c:	1a5b      	subs	r3, r3, r1
 8005b4e:	1a99      	subs	r1, r3, r2
  test_assert_lock(8, chOQGetFullI(&oq) == TEST_QUEUES_SIZE, "not empty");
 8005b50:	f1a1 0104 	sub.w	r1, r1, #4
 8005b54:	fab1 f181 	clz	r1, r1
 8005b58:	2008      	movs	r0, #8
 8005b5a:	0949      	lsrs	r1, r1, #5
 8005b5c:	f7fd fb30 	bl	80031c0 <_test_assert>
 8005b60:	4604      	mov	r4, r0
 8005b62:	b110      	cbz	r0, 8005b6a <queues2_execute.lto_priv.157+0x16a>
 8005b64:	f387 8811 	msr	BASEPRI, r7
 8005b68:	e795      	b.n	8005a96 <queues2_execute.lto_priv.157+0x96>
 8005b6a:	f380 8811 	msr	BASEPRI, r0
  test_wait_threads();
 8005b6e:	f7fd faa7 	bl	80030c0 <test_wait_threads>
 8005b72:	f386 8811 	msr	BASEPRI, r6
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
 8005b76:	68ea      	ldr	r2, [r5, #12]
  oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeX(oqp);
 8005b78:	692b      	ldr	r3, [r5, #16]
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 8005b7a:	4628      	mov	r0, r5

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
  oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeX(oqp);
 8005b7c:	1a9b      	subs	r3, r3, r2
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 8005b7e:	f06f 0101 	mvn.w	r1, #1
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
 8005b82:	61aa      	str	r2, [r5, #24]
  oqp->q_wrptr = oqp->q_buffer;
 8005b84:	616a      	str	r2, [r5, #20]
  oqp->q_counter = chQSizeX(oqp);
 8005b86:	60ab      	str	r3, [r5, #8]
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 8005b88:	f7fb ffa2 	bl	8001ad0 <chThdDequeueAllI>
 8005b8c:	f384 8811 	msr	BASEPRI, r4
 8005b90:	f386 8811 	msr	BASEPRI, r6
 8005b94:	692b      	ldr	r3, [r5, #16]
 8005b96:	68ea      	ldr	r2, [r5, #12]
 8005b98:	68a9      	ldr	r1, [r5, #8]
 8005b9a:	1a9b      	subs	r3, r3, r2

  /* Testing reset */
  chSysLock();
  chOQResetI(&oq);
  chSysUnlock();
  test_assert_lock(9, chOQGetFullI(&oq) == 0, "still full");
 8005b9c:	1a59      	subs	r1, r3, r1
 8005b9e:	fab1 f181 	clz	r1, r1
 8005ba2:	2009      	movs	r0, #9
 8005ba4:	0949      	lsrs	r1, r1, #5
 8005ba6:	f7fd fb0b 	bl	80031c0 <_test_assert>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2800      	cmp	r0, #0
 8005bae:	d18d      	bne.n	8005acc <queues2_execute.lto_priv.157+0xcc>
 8005bb0:	f380 8811 	msr	BASEPRI, r0

  /* Partial writes */
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8005bb4:	491e      	ldr	r1, [pc, #120]	; (8005c30 <queues2_execute.lto_priv.157+0x230>)
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	4628      	mov	r0, r5
 8005bba:	f7fd fe41 	bl	8003840 <chOQWriteTimeout>
  test_assert(10, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 8005bbe:	3802      	subs	r0, #2
 8005bc0:	4241      	negs	r1, r0
 8005bc2:	4141      	adcs	r1, r0
 8005bc4:	200a      	movs	r0, #10
 8005bc6:	f7fd fafb 	bl	80031c0 <_test_assert>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2800      	cmp	r0, #0
 8005bce:	f47f af62 	bne.w	8005a96 <queues2_execute.lto_priv.157+0x96>
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8005bd2:	4917      	ldr	r1, [pc, #92]	; (8005c30 <queues2_execute.lto_priv.157+0x230>)
 8005bd4:	2202      	movs	r2, #2
 8005bd6:	4628      	mov	r0, r5
 8005bd8:	f7fd fe32 	bl	8003840 <chOQWriteTimeout>
  test_assert(11, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 8005bdc:	1e82      	subs	r2, r0, #2
 8005bde:	4251      	negs	r1, r2
 8005be0:	4151      	adcs	r1, r2
 8005be2:	200b      	movs	r0, #11
 8005be4:	f7fd faec 	bl	80031c0 <_test_assert>
 8005be8:	2800      	cmp	r0, #0
 8005bea:	f47f af54 	bne.w	8005a96 <queues2_execute.lto_priv.157+0x96>
 8005bee:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 8005bf2:	68a9      	ldr	r1, [r5, #8]
  test_assert_lock(12, chOQIsFullI(&oq), "not full");
 8005bf4:	200c      	movs	r0, #12
 8005bf6:	fab1 f181 	clz	r1, r1
 8005bfa:	0949      	lsrs	r1, r1, #5
 8005bfc:	f7fd fae0 	bl	80031c0 <_test_assert>
 8005c00:	2800      	cmp	r0, #0
 8005c02:	f47f af45 	bne.w	8005a90 <queues2_execute.lto_priv.157+0x90>
 8005c06:	2100      	movs	r1, #0
 8005c08:	f381 8811 	msr	BASEPRI, r1

  /* Timeout */
  test_assert(13, chOQPutTimeout(&oq, 0, 10) == Q_TIMEOUT, "wrong timeout return");
 8005c0c:	220a      	movs	r2, #10
 8005c0e:	4806      	ldr	r0, [pc, #24]	; (8005c28 <queues2_execute.lto_priv.157+0x228>)
 8005c10:	f7fc f87e 	bl	8001d10 <chOQPutTimeout>
 8005c14:	1c43      	adds	r3, r0, #1
 8005c16:	4259      	negs	r1, r3
 8005c18:	4159      	adcs	r1, r3
 8005c1a:	200d      	movs	r0, #13
}
 8005c1c:	b003      	add	sp, #12
 8005c1e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
  test_assert(11, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
  test_assert_lock(12, chOQIsFullI(&oq), "not full");

  /* Timeout */
  test_assert(13, chOQPutTimeout(&oq, 0, 10) == Q_TIMEOUT, "wrong timeout return");
 8005c22:	f7fd bacd 	b.w	80031c0 <_test_assert>
 8005c26:	bf00      	nop
 8005c28:	20000874 	.word	0x20000874
 8005c2c:	08007770 	.word	0x08007770
 8005c30:	20000b78 	.word	0x20000b78
 8005c34:	20001098 	.word	0x20001098
 8005c38:	20000a30 	.word	0x20000a30
 8005c3c:	080059f1 	.word	0x080059f1
 8005c40:	20000a04 	.word	0x20000a04
	...

08005c50 <thread1>:
static mutex_t mtx1;
#endif

static THD_FUNCTION(thread1, p) {

  chThdExit((msg_t)p);
 8005c50:	f7fb bf76 	b.w	8001b40 <chThdExit>
	...

08005c60 <evt3_execute.lto_priv.143>:
static void evt3_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void evt3_execute(void) {
 8005c60:	b570      	push	{r4, r5, r6, lr}
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8005c62:	4c55      	ldr	r4, [pc, #340]	; (8005db8 <evt3_execute.lto_priv.143+0x158>)
 8005c64:	2320      	movs	r3, #32
 8005c66:	69a2      	ldr	r2, [r4, #24]
 8005c68:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 8005c6c:	6b53      	ldr	r3, [r2, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8005c6e:	b93b      	cbnz	r3, 8005c80 <evt3_execute.lto_priv.143+0x20>
 8005c70:	f383 8811 	msr	BASEPRI, r3
 8005c74:	2101      	movs	r1, #1

  /*
   * Tests various timeout situations.
   */
  m = chEvtWaitOneTimeout(ALL_EVENTS, TIME_IMMEDIATE);
  test_assert(1, m == 0, "spurious event");
 8005c76:	2001      	movs	r0, #1
 8005c78:	f7fd faa2 	bl	80031c0 <_test_assert>
 8005c7c:	b180      	cbz	r0, 8005ca0 <evt3_execute.lto_priv.143+0x40>
 8005c7e:	bd70      	pop	{r4, r5, r6, pc}
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
  }
  m ^= m & (m - (eventmask_t)1);
 8005c80:	4259      	negs	r1, r3
 8005c82:	4019      	ands	r1, r3
  ctp->p_epending &= ~m;
 8005c84:	ea23 0301 	bic.w	r3, r3, r1
 8005c88:	6353      	str	r3, [r2, #52]	; 0x34
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	f383 8811 	msr	BASEPRI, r3
 8005c90:	fab1 f181 	clz	r1, r1
 8005c94:	2001      	movs	r0, #1
 8005c96:	0949      	lsrs	r1, r1, #5
 8005c98:	f7fd fa92 	bl	80031c0 <_test_assert>
 8005c9c:	2800      	cmp	r0, #0
 8005c9e:	d1ee      	bne.n	8005c7e <evt3_execute.lto_priv.143+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8005ca0:	69a3      	ldr	r3, [r4, #24]
 8005ca2:	2220      	movs	r2, #32
 8005ca4:	f382 8811 	msr	BASEPRI, r2
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
  if (m == (eventmask_t)0) {
 8005ca8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005caa:	2a00      	cmp	r2, #0
 8005cac:	d06f      	beq.n	8005d8e <evt3_execute.lto_priv.143+0x12e>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
  }
  ctp->p_epending &= ~m;
 8005cae:	6358      	str	r0, [r3, #52]	; 0x34
 8005cb0:	f380 8811 	msr	BASEPRI, r0
  m = chEvtWaitAnyTimeout(ALL_EVENTS, TIME_IMMEDIATE);
  test_assert(2, m == 0, "spurious event");
 8005cb4:	4601      	mov	r1, r0
 8005cb6:	2002      	movs	r0, #2
 8005cb8:	f7fd fa82 	bl	80031c0 <_test_assert>
 8005cbc:	2800      	cmp	r0, #0
 8005cbe:	d1de      	bne.n	8005c7e <evt3_execute.lto_priv.143+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8005cc0:	69a3      	ldr	r3, [r4, #24]
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	f382 8811 	msr	BASEPRI, r2

  chSysLock();
  if ((ctp->p_epending & events) != events) {
 8005cc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cca:	3201      	adds	r2, #1
 8005ccc:	d063      	beq.n	8005d96 <evt3_execute.lto_priv.143+0x136>
 8005cce:	f380 8811 	msr	BASEPRI, r0
 8005cd2:	2001      	movs	r0, #1
  m = chEvtWaitAllTimeout(ALL_EVENTS, TIME_IMMEDIATE);
  test_assert(3, m == 0, "spurious event");
 8005cd4:	4601      	mov	r1, r0
 8005cd6:	2003      	movs	r0, #3
 8005cd8:	f7fd fa72 	bl	80031c0 <_test_assert>
 8005cdc:	2800      	cmp	r0, #0
 8005cde:	d1ce      	bne.n	8005c7e <evt3_execute.lto_priv.143+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8005ce0:	69a6      	ldr	r6, [r4, #24]
 8005ce2:	2320      	movs	r3, #32
 8005ce4:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 8005ce8:	6b75      	ldr	r5, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8005cea:	b94d      	cbnz	r5, 8005d00 <evt3_execute.lto_priv.143+0xa0>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 8005cec:	f04f 33ff 	mov.w	r3, #4294967295
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8005cf0:	200a      	movs	r0, #10
  if (m == (eventmask_t)0) {
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 8005cf2:	6233      	str	r3, [r6, #32]
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8005cf4:	4601      	mov	r1, r0
 8005cf6:	f7fb ffab 	bl	8001c50 <chSchGoSleepTimeoutS>
 8005cfa:	2800      	cmp	r0, #0
 8005cfc:	db4f      	blt.n	8005d9e <evt3_execute.lto_priv.143+0x13e>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
 8005cfe:	6b75      	ldr	r5, [r6, #52]	; 0x34
  }
  m ^= m & (m - (eventmask_t)1);
 8005d00:	4269      	negs	r1, r5
 8005d02:	4029      	ands	r1, r5
  ctp->p_epending &= ~m;
 8005d04:	ea25 0501 	bic.w	r5, r5, r1
 8005d08:	6375      	str	r5, [r6, #52]	; 0x34
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	f383 8811 	msr	BASEPRI, r3
 8005d10:	fab1 f181 	clz	r1, r1
 8005d14:	0949      	lsrs	r1, r1, #5
  m = chEvtWaitOneTimeout(ALL_EVENTS, 10);
  test_assert(4, m == 0, "spurious event");
 8005d16:	2004      	movs	r0, #4
 8005d18:	f7fd fa52 	bl	80031c0 <_test_assert>
 8005d1c:	2800      	cmp	r0, #0
 8005d1e:	d1ae      	bne.n	8005c7e <evt3_execute.lto_priv.143+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8005d20:	69a6      	ldr	r6, [r4, #24]
 8005d22:	2320      	movs	r3, #32
 8005d24:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 8005d28:	6b75      	ldr	r5, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8005d2a:	b94d      	cbnz	r5, 8005d40 <evt3_execute.lto_priv.143+0xe0>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 8005d2c:	f04f 33ff 	mov.w	r3, #4294967295
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8005d30:	200a      	movs	r0, #10
  if (m == (eventmask_t)0) {
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 8005d32:	6233      	str	r3, [r6, #32]
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8005d34:	4601      	mov	r1, r0
 8005d36:	f7fb ff8b 	bl	8001c50 <chSchGoSleepTimeoutS>
 8005d3a:	2800      	cmp	r0, #0
 8005d3c:	db33      	blt.n	8005da6 <evt3_execute.lto_priv.143+0x146>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
 8005d3e:	6b75      	ldr	r5, [r6, #52]	; 0x34
  }
  ctp->p_epending &= ~m;
 8005d40:	2300      	movs	r3, #0
 8005d42:	6373      	str	r3, [r6, #52]	; 0x34
 8005d44:	f383 8811 	msr	BASEPRI, r3
 8005d48:	fab5 f185 	clz	r1, r5
 8005d4c:	0949      	lsrs	r1, r1, #5
  m = chEvtWaitAnyTimeout(ALL_EVENTS, 10);
  test_assert(5, m == 0, "spurious event");
 8005d4e:	2005      	movs	r0, #5
 8005d50:	f7fd fa36 	bl	80031c0 <_test_assert>
 8005d54:	4605      	mov	r5, r0
 8005d56:	2800      	cmp	r0, #0
 8005d58:	d191      	bne.n	8005c7e <evt3_execute.lto_priv.143+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8005d5a:	69a4      	ldr	r4, [r4, #24]
 8005d5c:	2320      	movs	r3, #32
 8005d5e:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if ((ctp->p_epending & events) != events) {
 8005d62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d64:	3301      	adds	r3, #1
 8005d66:	d008      	beq.n	8005d7a <evt3_execute.lto_priv.143+0x11a>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 8005d68:	f04f 33ff 	mov.w	r3, #4294967295
 8005d6c:	6223      	str	r3, [r4, #32]
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, time) < MSG_OK) {
 8005d6e:	200b      	movs	r0, #11
 8005d70:	210a      	movs	r1, #10
 8005d72:	f7fb ff6d 	bl	8001c50 <chSchGoSleepTimeoutS>
 8005d76:	2800      	cmp	r0, #0
 8005d78:	db19      	blt.n	8005dae <evt3_execute.lto_priv.143+0x14e>
      chSysUnlock();
      return (eventmask_t)0;
    }
  }
  ctp->p_epending &= ~events;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	6363      	str	r3, [r4, #52]	; 0x34
 8005d7e:	f383 8811 	msr	BASEPRI, r3
  m = chEvtWaitAllTimeout(ALL_EVENTS, 10);
  test_assert(6, m == 0, "spurious event");
 8005d82:	4629      	mov	r1, r5
}
 8005d84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  m = chEvtWaitOneTimeout(ALL_EVENTS, 10);
  test_assert(4, m == 0, "spurious event");
  m = chEvtWaitAnyTimeout(ALL_EVENTS, 10);
  test_assert(5, m == 0, "spurious event");
  m = chEvtWaitAllTimeout(ALL_EVENTS, 10);
  test_assert(6, m == 0, "spurious event");
 8005d88:	2006      	movs	r0, #6
 8005d8a:	f7fd ba19 	b.w	80031c0 <_test_assert>
 8005d8e:	f380 8811 	msr	BASEPRI, r0
 8005d92:	2001      	movs	r0, #1
 8005d94:	e78e      	b.n	8005cb4 <evt3_execute.lto_priv.143+0x54>
 8005d96:	6358      	str	r0, [r3, #52]	; 0x34
 8005d98:	f380 8811 	msr	BASEPRI, r0
 8005d9c:	e79a      	b.n	8005cd4 <evt3_execute.lto_priv.143+0x74>
 8005d9e:	f385 8811 	msr	BASEPRI, r5
 8005da2:	2101      	movs	r1, #1
 8005da4:	e7b7      	b.n	8005d16 <evt3_execute.lto_priv.143+0xb6>
 8005da6:	f385 8811 	msr	BASEPRI, r5
 8005daa:	2101      	movs	r1, #1
 8005dac:	e7cf      	b.n	8005d4e <evt3_execute.lto_priv.143+0xee>
 8005dae:	f385 8811 	msr	BASEPRI, r5
 8005db2:	2501      	movs	r5, #1
 8005db4:	e7e5      	b.n	8005d82 <evt3_execute.lto_priv.143+0x122>
 8005db6:	bf00      	nop
 8005db8:	20001098 	.word	0x20001098
 8005dbc:	00000000 	.word	0x00000000

08005dc0 <evt3_setup.lto_priv.142>:
 * After each test phase the test verifies that there are no stuck event flags.
 */

static void evt3_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
 8005dc0:	f000 bba6 	b.w	8006510 <chEvtGetAndClearEvents.constprop.52>
	...

08005dd0 <evt2_setup.lto_priv.140>:
 * the expected time and that there are no stuck event flags.
 */

static void evt2_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
 8005dd0:	f000 bb9e 	b.w	8006510 <chEvtGetAndClearEvents.constprop.52>
	...

08005de0 <evt1_setup.lto_priv.138>:
 * the associated event handlers are invoked in LSb-first order.
 */

static void evt1_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
 8005de0:	f000 bb96 	b.w	8006510 <chEvtGetAndClearEvents.constprop.52>
	...

08005df0 <evt2_execute.lto_priv.141>:
  chEvtBroadcast(&es1);
  chThdSleepMilliseconds(50);
  chEvtBroadcast(&es2);
}

static void evt2_execute(void) {
 8005df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005df4:	2520      	movs	r5, #32
 8005df6:	b08d      	sub	sp, #52	; 0x34
 8005df8:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
eventmask_t chEvtAddEvents(eventmask_t events) {

  chSysLock();
  currp->p_epending |= events;
 8005dfc:	4cad      	ldr	r4, [pc, #692]	; (80060b4 <evt2_execute.lto_priv.141+0x2c4>)
 8005dfe:	2100      	movs	r1, #0
 8005e00:	69a2      	ldr	r2, [r4, #24]
 8005e02:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8005e04:	f043 0307 	orr.w	r3, r3, #7
 8005e08:	6353      	str	r3, [r2, #52]	; 0x34
 8005e0a:	f381 8811 	msr	BASEPRI, r1

  /*
   * Test on chEvtWaitOne() without wait.
   */
  chEvtAddEvents(7);
  m = chEvtWaitOne(ALL_EVENTS);
 8005e0e:	f000 fb8f 	bl	8006530 <chEvtWaitOne.constprop.48>
  test_assert(1, m == 1, "single event error");
 8005e12:	f1a0 0101 	sub.w	r1, r0, #1
 8005e16:	fab1 f181 	clz	r1, r1
 8005e1a:	2001      	movs	r0, #1
 8005e1c:	0949      	lsrs	r1, r1, #5
 8005e1e:	f7fd f9cf 	bl	80031c0 <_test_assert>
 8005e22:	b110      	cbz	r0, 8005e2a <evt2_execute.lto_priv.141+0x3a>
  test_wait_threads();
  chEvtUnregister(&es1, &el1);
  chEvtUnregister(&es2, &el2);
  test_assert(15, !chEvtIsListeningI(&es1), "stuck listener");
  test_assert(16, !chEvtIsListeningI(&es2), "stuck listener");
}
 8005e24:	b00d      	add	sp, #52	; 0x34
 8005e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   * Test on chEvtWaitOne() without wait.
   */
  chEvtAddEvents(7);
  m = chEvtWaitOne(ALL_EVENTS);
  test_assert(1, m == 1, "single event error");
  m = chEvtWaitOne(ALL_EVENTS);
 8005e2a:	f000 fb81 	bl	8006530 <chEvtWaitOne.constprop.48>
  test_assert(2, m == 2, "single event error");
 8005e2e:	f1a0 0102 	sub.w	r1, r0, #2
 8005e32:	fab1 f181 	clz	r1, r1
 8005e36:	2002      	movs	r0, #2
 8005e38:	0949      	lsrs	r1, r1, #5
 8005e3a:	f7fd f9c1 	bl	80031c0 <_test_assert>
 8005e3e:	2800      	cmp	r0, #0
 8005e40:	d1f0      	bne.n	8005e24 <evt2_execute.lto_priv.141+0x34>
  m = chEvtWaitOne(ALL_EVENTS);
 8005e42:	f000 fb75 	bl	8006530 <chEvtWaitOne.constprop.48>
  test_assert(3, m == 4, "single event error");
 8005e46:	f1a0 0104 	sub.w	r1, r0, #4
 8005e4a:	fab1 f181 	clz	r1, r1
 8005e4e:	2003      	movs	r0, #3
 8005e50:	0949      	lsrs	r1, r1, #5
 8005e52:	f7fd f9b5 	bl	80031c0 <_test_assert>
 8005e56:	2800      	cmp	r0, #0
 8005e58:	d1e4      	bne.n	8005e24 <evt2_execute.lto_priv.141+0x34>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 8005e5a:	f000 fb59 	bl	8006510 <chEvtGetAndClearEvents.constprop.52>
  test_assert(4, m == 0, "stuck event");
 8005e5e:	fab0 f180 	clz	r1, r0
 8005e62:	2004      	movs	r0, #4
 8005e64:	0949      	lsrs	r1, r1, #5
 8005e66:	f7fd f9ab 	bl	80031c0 <_test_assert>
 8005e6a:	4606      	mov	r6, r0
 8005e6c:	2800      	cmp	r0, #0
 8005e6e:	d1d9      	bne.n	8005e24 <evt2_execute.lto_priv.141+0x34>

  /*
   * Test on chEvtWaitOne() with wait.
   */
  test_wait_tick();
 8005e70:	f7fd f916 	bl	80030a0 <test_wait_tick>
 8005e74:	f385 8811 	msr	BASEPRI, r5
 8005e78:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 8005e7c:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
 8005e80:	b2bf      	uxth	r7, r7
 8005e82:	f386 8811 	msr	BASEPRI, r6
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005e86:	69a3      	ldr	r3, [r4, #24]
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8005e88:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005e8c:	689a      	ldr	r2, [r3, #8]
 8005e8e:	488a      	ldr	r0, [pc, #552]	; (80060b8 <evt2_execute.lto_priv.141+0x2c8>)
 8005e90:	3a01      	subs	r2, #1
 8005e92:	9300      	str	r3, [sp, #0]
 8005e94:	4b89      	ldr	r3, [pc, #548]	; (80060bc <evt2_execute.lto_priv.141+0x2cc>)
 8005e96:	f7fb fb8b 	bl	80015b0 <chThdCreateStatic>
 8005e9a:	4e89      	ldr	r6, [pc, #548]	; (80060c0 <evt2_execute.lto_priv.141+0x2d0>)
 8005e9c:	6030      	str	r0, [r6, #0]
                                 thread1, chThdGetSelfX());
  m = chEvtWaitOne(ALL_EVENTS);
 8005e9e:	f000 fb47 	bl	8006530 <chEvtWaitOne.constprop.48>

  /*
   * Test on chEvtWaitOne() with wait.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
 8005ea2:	f107 0164 	add.w	r1, r7, #100	; 0x64
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitOne(ALL_EVENTS);
  test_assert_time_window(5, target_time, target_time + ALLOWED_DELAY);
 8005ea6:	f107 026e 	add.w	r2, r7, #110	; 0x6e
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitOne(ALL_EVENTS);
 8005eaa:	4681      	mov	r9, r0
  test_assert_time_window(5, target_time, target_time + ALLOWED_DELAY);
 8005eac:	b289      	uxth	r1, r1
 8005eae:	b292      	uxth	r2, r2
 8005eb0:	2005      	movs	r0, #5
 8005eb2:	f7fd f935 	bl	8003120 <_test_assert_time_window>
 8005eb6:	2800      	cmp	r0, #0
 8005eb8:	d1b4      	bne.n	8005e24 <evt2_execute.lto_priv.141+0x34>
  test_assert(6, m == 1, "single event error");
 8005eba:	f1a9 0101 	sub.w	r1, r9, #1
 8005ebe:	fab1 f181 	clz	r1, r1
 8005ec2:	2006      	movs	r0, #6
 8005ec4:	0949      	lsrs	r1, r1, #5
 8005ec6:	f7fd f97b 	bl	80031c0 <_test_assert>
 8005eca:	2800      	cmp	r0, #0
 8005ecc:	d1aa      	bne.n	8005e24 <evt2_execute.lto_priv.141+0x34>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 8005ece:	f000 fb1f 	bl	8006510 <chEvtGetAndClearEvents.constprop.52>
  test_assert(7, m == 0, "stuck event");
 8005ed2:	fab0 f180 	clz	r1, r0
 8005ed6:	2007      	movs	r0, #7
 8005ed8:	0949      	lsrs	r1, r1, #5
 8005eda:	f7fd f971 	bl	80031c0 <_test_assert>
 8005ede:	4607      	mov	r7, r0
 8005ee0:	2800      	cmp	r0, #0
 8005ee2:	d19f      	bne.n	8005e24 <evt2_execute.lto_priv.141+0x34>
  test_wait_threads();
 8005ee4:	f7fd f8ec 	bl	80030c0 <test_wait_threads>
 8005ee8:	f385 8811 	msr	BASEPRI, r5
 8005eec:	69a2      	ldr	r2, [r4, #24]
 8005eee:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8005ef0:	f043 0305 	orr.w	r3, r3, #5
 8005ef4:	6353      	str	r3, [r2, #52]	; 0x34
 8005ef6:	f387 8811 	msr	BASEPRI, r7

  /*
   * Test on chEvtWaitAny() without wait.
   */
  chEvtAddEvents(5);
  m = chEvtWaitAny(ALL_EVENTS);
 8005efa:	f000 fb39 	bl	8006570 <chEvtWaitAny.constprop.47>
  test_assert(8, m == 5, "unexpected pending bit");
 8005efe:	1f47      	subs	r7, r0, #5
 8005f00:	4279      	negs	r1, r7
 8005f02:	4179      	adcs	r1, r7
 8005f04:	2008      	movs	r0, #8
 8005f06:	f7fd f95b 	bl	80031c0 <_test_assert>
 8005f0a:	2800      	cmp	r0, #0
 8005f0c:	d18a      	bne.n	8005e24 <evt2_execute.lto_priv.141+0x34>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 8005f0e:	f000 faff 	bl	8006510 <chEvtGetAndClearEvents.constprop.52>
  test_assert(9, m == 0, "stuck event");
 8005f12:	fab0 f180 	clz	r1, r0
 8005f16:	2009      	movs	r0, #9
 8005f18:	0949      	lsrs	r1, r1, #5
 8005f1a:	f7fd f951 	bl	80031c0 <_test_assert>
 8005f1e:	4607      	mov	r7, r0
 8005f20:	2800      	cmp	r0, #0
 8005f22:	f47f af7f 	bne.w	8005e24 <evt2_execute.lto_priv.141+0x34>

  /*
   * Test on chEvtWaitAny() with wait.
   */
  test_wait_tick();
 8005f26:	f7fd f8bb 	bl	80030a0 <test_wait_tick>
 8005f2a:	f385 8811 	msr	BASEPRI, r5
 8005f2e:	f8d8 5024 	ldr.w	r5, [r8, #36]	; 0x24
 8005f32:	b2ad      	uxth	r5, r5
 8005f34:	f387 8811 	msr	BASEPRI, r7
 8005f38:	69a3      	ldr	r3, [r4, #24]
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8005f3a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005f3e:	689a      	ldr	r2, [r3, #8]
 8005f40:	485d      	ldr	r0, [pc, #372]	; (80060b8 <evt2_execute.lto_priv.141+0x2c8>)
 8005f42:	3a01      	subs	r2, #1
 8005f44:	9300      	str	r3, [sp, #0]
 8005f46:	4b5d      	ldr	r3, [pc, #372]	; (80060bc <evt2_execute.lto_priv.141+0x2cc>)
 8005f48:	f7fb fb32 	bl	80015b0 <chThdCreateStatic>
 8005f4c:	6030      	str	r0, [r6, #0]
                                 thread1, chThdGetSelfX());
  m = chEvtWaitAny(ALL_EVENTS);
 8005f4e:	f000 fb0f 	bl	8006570 <chEvtWaitAny.constprop.47>

  /*
   * Test on chEvtWaitAny() with wait.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
 8005f52:	f105 0164 	add.w	r1, r5, #100	; 0x64
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitAny(ALL_EVENTS);
  test_assert_time_window(10, target_time, target_time + ALLOWED_DELAY);
 8005f56:	f105 026e 	add.w	r2, r5, #110	; 0x6e
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitAny(ALL_EVENTS);
 8005f5a:	4607      	mov	r7, r0
  test_assert_time_window(10, target_time, target_time + ALLOWED_DELAY);
 8005f5c:	b289      	uxth	r1, r1
 8005f5e:	b292      	uxth	r2, r2
 8005f60:	200a      	movs	r0, #10
 8005f62:	f7fd f8dd 	bl	8003120 <_test_assert_time_window>
 8005f66:	2800      	cmp	r0, #0
 8005f68:	f47f af5c 	bne.w	8005e24 <evt2_execute.lto_priv.141+0x34>
  test_assert(11, m == 1, "single event error");
 8005f6c:	1e78      	subs	r0, r7, #1
 8005f6e:	4241      	negs	r1, r0
 8005f70:	4141      	adcs	r1, r0
 8005f72:	200b      	movs	r0, #11
 8005f74:	f7fd f924 	bl	80031c0 <_test_assert>
 8005f78:	2800      	cmp	r0, #0
 8005f7a:	f47f af53 	bne.w	8005e24 <evt2_execute.lto_priv.141+0x34>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 8005f7e:	f000 fac7 	bl	8006510 <chEvtGetAndClearEvents.constprop.52>
  test_assert(12, m == 0, "stuck event");
 8005f82:	fab0 f180 	clz	r1, r0
 8005f86:	200c      	movs	r0, #12
 8005f88:	0949      	lsrs	r1, r1, #5
 8005f8a:	f7fd f919 	bl	80031c0 <_test_assert>
 8005f8e:	4680      	mov	r8, r0
 8005f90:	2800      	cmp	r0, #0
 8005f92:	f47f af47 	bne.w	8005e24 <evt2_execute.lto_priv.141+0x34>
  test_wait_threads();
 8005f96:	f7fd f893 	bl	80030c0 <test_wait_threads>
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 8005f9a:	4d4a      	ldr	r5, [pc, #296]	; (80060c4 <evt2_execute.lto_priv.141+0x2d4>)
 8005f9c:	4b4a      	ldr	r3, [pc, #296]	; (80060c8 <evt2_execute.lto_priv.141+0x2d8>)
 8005f9e:	602d      	str	r5, [r5, #0]
 8005fa0:	601b      	str	r3, [r3, #0]
 8005fa2:	f04f 0b20 	mov.w	fp, #32
 8005fa6:	f38b 8811 	msr	BASEPRI, fp
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8005faa:	6829      	ldr	r1, [r5, #0]
 8005fac:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
  esp->es_next     = elp;
  elp->el_listener = currp;
 8005fb0:	69a2      	ldr	r2, [r4, #24]
  elp->el_events   = events;
 8005fb2:	2701      	movs	r7, #1
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8005fb4:	f84a 1d28 	str.w	r1, [sl, #-40]!
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = (eventflags_t)0;
  elp->el_wflags   = wflags;
 8005fb8:	f04f 30ff 	mov.w	r0, #4294967295
  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = (eventflags_t)0;
 8005fbc:	f8cd 8014 	str.w	r8, [sp, #20]
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 8005fc0:	9203      	str	r2, [sp, #12]
  elp->el_events   = events;
 8005fc2:	9704      	str	r7, [sp, #16]

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 8005fc4:	f8c5 a000 	str.w	sl, [r5]
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = (eventflags_t)0;
  elp->el_wflags   = wflags;
 8005fc8:	9006      	str	r0, [sp, #24]
 8005fca:	f388 8811 	msr	BASEPRI, r8
 8005fce:	f38b 8811 	msr	BASEPRI, fp
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8005fd2:	6819      	ldr	r1, [r3, #0]
 8005fd4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
  esp->es_next     = elp;
  elp->el_listener = currp;
 8005fd8:	69a2      	ldr	r2, [r4, #24]
  elp->el_events   = events;
 8005fda:	2704      	movs	r7, #4
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8005fdc:	f849 1d14 	str.w	r1, [r9, #-20]!
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = (eventflags_t)0;
 8005fe0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  elp->el_wflags   = wflags;
 8005fe4:	900b      	str	r0, [sp, #44]	; 0x2c
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 8005fe6:	9208      	str	r2, [sp, #32]
  elp->el_events   = events;
 8005fe8:	9709      	str	r7, [sp, #36]	; 0x24

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 8005fea:	f8c3 9000 	str.w	r9, [r3]
 8005fee:	f388 8811 	msr	BASEPRI, r8
   */
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es2, &el2, 4);
  test_wait_tick();
 8005ff2:	f7fd f855 	bl	80030a0 <test_wait_tick>
 8005ff6:	f38b 8811 	msr	BASEPRI, fp
 8005ffa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005ffe:	6a5f      	ldr	r7, [r3, #36]	; 0x24
 8006000:	b2bf      	uxth	r7, r7
 8006002:	f388 8811 	msr	BASEPRI, r8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8006006:	69a2      	ldr	r2, [r4, #24]
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8006008:	4b30      	ldr	r3, [pc, #192]	; (80060cc <evt2_execute.lto_priv.141+0x2dc>)
 800600a:	6892      	ldr	r2, [r2, #8]
 800600c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006010:	9300      	str	r3, [sp, #0]
 8006012:	3a01      	subs	r2, #1
 8006014:	4b2e      	ldr	r3, [pc, #184]	; (80060d0 <evt2_execute.lto_priv.141+0x2e0>)
 8006016:	4828      	ldr	r0, [pc, #160]	; (80060b8 <evt2_execute.lto_priv.141+0x2c8>)
 8006018:	f7fb faca 	bl	80015b0 <chThdCreateStatic>
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es2, &el2, 4);
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
 800601c:	f107 0864 	add.w	r8, r7, #100	; 0x64
 8006020:	fa1f f888 	uxth.w	r8, r8
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAll(eventmask_t events) {
  thread_t *ctp = currp;
 8006024:	69a4      	ldr	r4, [r4, #24]
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8006026:	6030      	str	r0, [r6, #0]
 8006028:	f38b 8811 	msr	BASEPRI, fp

  chSysLock();
  if ((ctp->p_epending & events) != events) {
 800602c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800602e:	f003 0205 	and.w	r2, r3, #5
 8006032:	2a05      	cmp	r2, #5
 8006034:	d005      	beq.n	8006042 <evt2_execute.lto_priv.141+0x252>
    ctp->p_u.ewmask = events;
 8006036:	2305      	movs	r3, #5
 8006038:	6223      	str	r3, [r4, #32]
    chSchGoSleepS(CH_STATE_WTANDEVT);
 800603a:	200b      	movs	r0, #11
 800603c:	f7fb faf8 	bl	8001630 <chSchGoSleepS>
 8006040:	6b63      	ldr	r3, [r4, #52]	; 0x34
  }
  ctp->p_epending &= ~events;
 8006042:	f023 0305 	bic.w	r3, r3, #5
 8006046:	6363      	str	r3, [r4, #52]	; 0x34
 8006048:	2300      	movs	r3, #0
 800604a:	f383 8811 	msr	BASEPRI, r3
                                 thread2, "A");
  m = chEvtWaitAll(5);
  test_assert_time_window(13, target_time, target_time + ALLOWED_DELAY);
 800604e:	f107 026e 	add.w	r2, r7, #110	; 0x6e
 8006052:	b292      	uxth	r2, r2
 8006054:	4641      	mov	r1, r8
 8006056:	200d      	movs	r0, #13
 8006058:	f7fd f862 	bl	8003120 <_test_assert_time_window>
 800605c:	2800      	cmp	r0, #0
 800605e:	f47f aee1 	bne.w	8005e24 <evt2_execute.lto_priv.141+0x34>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 8006062:	f000 fa55 	bl	8006510 <chEvtGetAndClearEvents.constprop.52>
  test_assert(14, m == 0, "stuck event");
 8006066:	fab0 f180 	clz	r1, r0
 800606a:	200e      	movs	r0, #14
 800606c:	0949      	lsrs	r1, r1, #5
 800606e:	f7fd f8a7 	bl	80031c0 <_test_assert>
 8006072:	2800      	cmp	r0, #0
 8006074:	f47f aed6 	bne.w	8005e24 <evt2_execute.lto_priv.141+0x34>
  test_wait_threads();
  chEvtUnregister(&es1, &el1);
  chEvtUnregister(&es2, &el2);
 8006078:	4c13      	ldr	r4, [pc, #76]	; (80060c8 <evt2_execute.lto_priv.141+0x2d8>)
                                 thread2, "A");
  m = chEvtWaitAll(5);
  test_assert_time_window(13, target_time, target_time + ALLOWED_DELAY);
  m = chEvtGetAndClearEvents(ALL_EVENTS);
  test_assert(14, m == 0, "stuck event");
  test_wait_threads();
 800607a:	f7fd f821 	bl	80030c0 <test_wait_threads>
  chEvtUnregister(&es1, &el1);
 800607e:	4651      	mov	r1, sl
 8006080:	4810      	ldr	r0, [pc, #64]	; (80060c4 <evt2_execute.lto_priv.141+0x2d4>)
 8006082:	f7fb f905 	bl	8001290 <chEvtUnregister>
  chEvtUnregister(&es2, &el2);
 8006086:	4649      	mov	r1, r9
 8006088:	4620      	mov	r0, r4
 800608a:	f7fb f901 	bl	8001290 <chEvtUnregister>
  test_assert(15, !chEvtIsListeningI(&es1), "stuck listener");
 800608e:	6829      	ldr	r1, [r5, #0]
 8006090:	200f      	movs	r0, #15
 8006092:	1b4a      	subs	r2, r1, r5
 8006094:	4251      	negs	r1, r2
 8006096:	4151      	adcs	r1, r2
 8006098:	f7fd f892 	bl	80031c0 <_test_assert>
 800609c:	2800      	cmp	r0, #0
 800609e:	f47f aec1 	bne.w	8005e24 <evt2_execute.lto_priv.141+0x34>
  test_assert(16, !chEvtIsListeningI(&es2), "stuck listener");
 80060a2:	6821      	ldr	r1, [r4, #0]
 80060a4:	2010      	movs	r0, #16
 80060a6:	1b0b      	subs	r3, r1, r4
 80060a8:	4259      	negs	r1, r3
 80060aa:	4159      	adcs	r1, r3
 80060ac:	f7fd f888 	bl	80031c0 <_test_assert>
 80060b0:	e6b8      	b.n	8005e24 <evt2_execute.lto_priv.141+0x34>
 80060b2:	bf00      	nop
 80060b4:	20001098 	.word	0x20001098
 80060b8:	20000a30 	.word	0x20000a30
 80060bc:	08006121 	.word	0x08006121
 80060c0:	20000a04 	.word	0x20000a04
 80060c4:	20000898 	.word	0x20000898
 80060c8:	2000089c 	.word	0x2000089c
 80060cc:	08006934 	.word	0x08006934
 80060d0:	080060e1 	.word	0x080060e1
	...

080060e0 <thread2>:

  chThdSleepMilliseconds(50);
  chEvtSignal((thread_t *)p, 1);
}

static THD_FUNCTION(thread2, p) {
 80060e0:	b538      	push	{r3, r4, r5, lr}
 80060e2:	2520      	movs	r5, #32
 80060e4:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags) {

  chSysLock();
  chEvtBroadcastFlagsI(esp, flags);
 80060e8:	480b      	ldr	r0, [pc, #44]	; (8006118 <thread2+0x38>)
 80060ea:	2100      	movs	r1, #0
 80060ec:	f7fb fba0 	bl	8001830 <chEvtBroadcastFlagsI>
 80060f0:	2400      	movs	r4, #0
  chSchRescheduleS();
 80060f2:	f7fb f99d 	bl	8001430 <chSchRescheduleS>
 80060f6:	f384 8811 	msr	BASEPRI, r4

  (void)p;
  chEvtBroadcast(&es1);
  chThdSleepMilliseconds(50);
 80060fa:	2064      	movs	r0, #100	; 0x64
 80060fc:	f7fb fea0 	bl	8001e40 <chThdSleep>
 8006100:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags) {

  chSysLock();
  chEvtBroadcastFlagsI(esp, flags);
 8006104:	4805      	ldr	r0, [pc, #20]	; (800611c <thread2+0x3c>)
 8006106:	4621      	mov	r1, r4
 8006108:	f7fb fb92 	bl	8001830 <chEvtBroadcastFlagsI>
  chSchRescheduleS();
 800610c:	f7fb f990 	bl	8001430 <chSchRescheduleS>
 8006110:	f384 8811 	msr	BASEPRI, r4
 8006114:	bd38      	pop	{r3, r4, r5, pc}
 8006116:	bf00      	nop
 8006118:	20000898 	.word	0x20000898
 800611c:	2000089c 	.word	0x2000089c

08006120 <thread1>:
static void evt2_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static THD_FUNCTION(thread1, p) {
 8006120:	b510      	push	{r4, lr}
 8006122:	4604      	mov	r4, r0

  chThdSleepMilliseconds(50);
 8006124:	2064      	movs	r0, #100	; 0x64
 8006126:	f7fb fe8b 	bl	8001e40 <chThdSleep>
 800612a:	2320      	movs	r3, #32
 800612c:	f383 8811 	msr	BASEPRI, r3
void chEvtSignal(thread_t *tp, eventmask_t events) {

  chDbgCheck(tp != NULL);

  chSysLock();
  chEvtSignalI(tp, events);
 8006130:	2101      	movs	r1, #1
 8006132:	4620      	mov	r0, r4
 8006134:	f7fb fb64 	bl	8001800 <chEvtSignalI>
  chSchRescheduleS();
 8006138:	f7fb f97a 	bl	8001430 <chSchRescheduleS>
 800613c:	2300      	movs	r3, #0
 800613e:	f383 8811 	msr	BASEPRI, r3
 8006142:	bd10      	pop	{r4, pc}
	...

08006150 <evt1_execute.lto_priv.139>:
static void h1(eventid_t id) {(void)id;test_emit_token('A');}
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
static ROMCONST evhandler_t evhndl[] = {h1, h2, h3};

static void evt1_execute(void) {
 8006150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006154:	4c32      	ldr	r4, [pc, #200]	; (8006220 <evt1_execute.lto_priv.139+0xd0>)
 8006156:	b08a      	sub	sp, #40	; 0x28
 8006158:	2020      	movs	r0, #32
 800615a:	6024      	str	r4, [r4, #0]
 800615c:	f380 8811 	msr	BASEPRI, r0
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 8006160:	4930      	ldr	r1, [pc, #192]	; (8006224 <evt1_execute.lto_priv.139+0xd4>)
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8006162:	6823      	ldr	r3, [r4, #0]
 8006164:	ad0a      	add	r5, sp, #40	; 0x28
  esp->es_next     = elp;
  elp->el_listener = currp;
 8006166:	698e      	ldr	r6, [r1, #24]
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8006168:	f845 3d28 	str.w	r3, [r5, #-40]!
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
 800616c:	2701      	movs	r7, #1
  elp->el_flags    = (eventflags_t)0;
 800616e:	2300      	movs	r3, #0
  elp->el_wflags   = wflags;
 8006170:	f04f 32ff 	mov.w	r2, #4294967295
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 8006174:	9601      	str	r6, [sp, #4]

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 8006176:	6025      	str	r5, [r4, #0]
  elp->el_listener = currp;
  elp->el_events   = events;
 8006178:	9702      	str	r7, [sp, #8]
  elp->el_flags    = (eventflags_t)0;
 800617a:	9303      	str	r3, [sp, #12]
  elp->el_wflags   = wflags;
 800617c:	9204      	str	r2, [sp, #16]
 800617e:	f383 8811 	msr	BASEPRI, r3
 8006182:	f380 8811 	msr	BASEPRI, r0
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8006186:	6820      	ldr	r0, [r4, #0]
 8006188:	ae0a      	add	r6, sp, #40	; 0x28
  esp->es_next     = elp;
  elp->el_listener = currp;
 800618a:	6989      	ldr	r1, [r1, #24]
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 800618c:	f846 0d14 	str.w	r0, [r6, #-20]!
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
 8006190:	f04f 0802 	mov.w	r8, #2
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 8006194:	9106      	str	r1, [sp, #24]
  elp->el_events   = events;
  elp->el_flags    = (eventflags_t)0;
 8006196:	9308      	str	r3, [sp, #32]
  elp->el_wflags   = wflags;
 8006198:	9209      	str	r2, [sp, #36]	; 0x24

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 800619a:	6026      	str	r6, [r4, #0]
  elp->el_listener = currp;
  elp->el_events   = events;
 800619c:	f8cd 801c 	str.w	r8, [sp, #28]
 80061a0:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline bool chEvtIsListeningI(event_source_t *esp) {

  return (bool)(esp != (event_source_t *)esp->es_next);
 80061a4:	6821      	ldr	r1, [r4, #0]
   * Testing chEvtRegisterMask() and chEvtUnregister().
   */
  chEvtObjectInit(&es1);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es1, &el2, 2);
  test_assert(1, chEvtIsListeningI(&es1), "no listener");
 80061a6:	4638      	mov	r0, r7
 80061a8:	1b09      	subs	r1, r1, r4
 80061aa:	bf18      	it	ne
 80061ac:	2101      	movne	r1, #1
 80061ae:	f7fd f807 	bl	80031c0 <_test_assert>
 80061b2:	b110      	cbz	r0, 80061ba <evt1_execute.lto_priv.139+0x6a>
  /*
   * Testing chEvtDispatch().
   */
  chEvtDispatch(evhndl, 7);
  test_assert_sequence(4, "ABC");
}
 80061b4:	b00a      	add	sp, #40	; 0x28
 80061b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   */
  chEvtObjectInit(&es1);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es1, &el2, 2);
  test_assert(1, chEvtIsListeningI(&es1), "no listener");
  chEvtUnregister(&es1, &el1);
 80061ba:	4629      	mov	r1, r5
 80061bc:	4620      	mov	r0, r4
 80061be:	f7fb f867 	bl	8001290 <chEvtUnregister>
 80061c2:	6821      	ldr	r1, [r4, #0]
  test_assert(2, chEvtIsListeningI(&es1), "no listener");
 80061c4:	4640      	mov	r0, r8
 80061c6:	1b09      	subs	r1, r1, r4
 80061c8:	bf18      	it	ne
 80061ca:	2101      	movne	r1, #1
 80061cc:	f7fc fff8 	bl	80031c0 <_test_assert>
 80061d0:	2800      	cmp	r0, #0
 80061d2:	d1ef      	bne.n	80061b4 <evt1_execute.lto_priv.139+0x64>
  chEvtUnregister(&es1, &el2);
 80061d4:	4631      	mov	r1, r6
 80061d6:	4620      	mov	r0, r4
 80061d8:	f7fb f85a 	bl	8001290 <chEvtUnregister>
  test_assert(3, !chEvtIsListeningI(&es1), "stuck listener");
 80061dc:	6821      	ldr	r1, [r4, #0]
 80061de:	2003      	movs	r0, #3
 80061e0:	1b09      	subs	r1, r1, r4
 80061e2:	fab1 f181 	clz	r1, r1
 80061e6:	0949      	lsrs	r1, r1, #5
 80061e8:	f7fc ffea 	bl	80031c0 <_test_assert>
 80061ec:	2800      	cmp	r0, #0
 80061ee:	d1e1      	bne.n	80061b4 <evt1_execute.lto_priv.139+0x64>
 80061f0:	4604      	mov	r4, r0
  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
      handlers[eid](eid);
 80061f2:	4e0d      	ldr	r6, [pc, #52]	; (8006228 <evt1_execute.lto_priv.139+0xd8>)
 80061f4:	2507      	movs	r5, #7
 80061f6:	e001      	b.n	80061fc <evt1_execute.lto_priv.139+0xac>
    }
    eid++;
 80061f8:	3401      	adds	r4, #1
  eventid_t eid;

  chDbgCheck(handlers != NULL);

  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
 80061fa:	b165      	cbz	r5, 8006216 <evt1_execute.lto_priv.139+0xc6>
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 80061fc:	fa25 f304 	lsr.w	r3, r5, r4
 8006200:	07db      	lsls	r3, r3, #31
 8006202:	d5f9      	bpl.n	80061f8 <evt1_execute.lto_priv.139+0xa8>
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
 8006204:	fa07 f304 	lsl.w	r3, r7, r4
      handlers[eid](eid);
 8006208:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800620c:	4620      	mov	r0, r4

  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
 800620e:	ea25 0503 	bic.w	r5, r5, r3
      handlers[eid](eid);
 8006212:	4790      	blx	r2
 8006214:	e7f0      	b.n	80061f8 <evt1_execute.lto_priv.139+0xa8>

  /*
   * Testing chEvtDispatch().
   */
  chEvtDispatch(evhndl, 7);
  test_assert_sequence(4, "ABC");
 8006216:	4905      	ldr	r1, [pc, #20]	; (800622c <evt1_execute.lto_priv.139+0xdc>)
 8006218:	2004      	movs	r0, #4
 800621a:	f7fc ffa9 	bl	8003170 <_test_assert_sequence>
 800621e:	e7c9      	b.n	80061b4 <evt1_execute.lto_priv.139+0x64>
 8006220:	20000898 	.word	0x20000898
 8006224:	20001098 	.word	0x20001098
 8006228:	080077f0 	.word	0x080077f0
 800622c:	08007760 	.word	0x08007760

08006230 <h3>:
  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
 8006230:	2043      	movs	r0, #67	; 0x43
 8006232:	f7fc bfdd 	b.w	80031f0 <test_emit_token>
 8006236:	bf00      	nop
	...

08006240 <h2>:

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
 8006240:	2042      	movs	r0, #66	; 0x42
 8006242:	f7fc bfd5 	b.w	80031f0 <test_emit_token>
 8006246:	bf00      	nop
	...

08006250 <h1>:
static void evt1_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
 8006250:	2041      	movs	r0, #65	; 0x41
 8006252:	f7fc bfcd 	b.w	80031f0 <test_emit_token>
 8006256:	bf00      	nop
	...

08006260 <cmd_test.lto_priv.89>:
}

static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
  thread_t *tp;

  palSetPad(GPIOB, GPIOB_LED1);
 8006260:	4b10      	ldr	r3, [pc, #64]	; (80062a4 <cmd_test.lto_priv.89+0x44>)
 8006262:	2280      	movs	r2, #128	; 0x80
  (void)argv;
  if (argc > 0) {
 8006264:	2900      	cmp	r1, #0
}

static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
  thread_t *tp;

  palSetPad(GPIOB, GPIOB_LED1);
 8006266:	611a      	str	r2, [r3, #16]
  (void)argv;
  if (argc > 0) {
 8006268:	dd02      	ble.n	8006270 <cmd_test.lto_priv.89+0x10>
    chprintf(chp, "Usage: test\r\n");
 800626a:	490f      	ldr	r1, [pc, #60]	; (80062a8 <cmd_test.lto_priv.89+0x48>)
 800626c:	f7fc ba10 	b.w	8002690 <chprintf>
             states[tp->p_state]);
    tp = chRegNextThread(tp);
  } while (tp != NULL);
}

static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 8006270:	b510      	push	{r4, lr}
 8006272:	4604      	mov	r4, r0
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8006274:	4b0d      	ldr	r3, [pc, #52]	; (80062ac <cmd_test.lto_priv.89+0x4c>)
 8006276:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8006278:	699b      	ldr	r3, [r3, #24]
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: test\r\n");
    return;
  }
  tp = chThdCreateFromHeap(NULL, TEST_WA_SIZE, chThdGetPriorityX(),
 800627a:	2000      	movs	r0, #0
 800627c:	689a      	ldr	r2, [r3, #8]
 800627e:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 8006282:	4b0b      	ldr	r3, [pc, #44]	; (80062b0 <cmd_test.lto_priv.89+0x50>)
 8006284:	9400      	str	r4, [sp, #0]
 8006286:	f7fb f94b 	bl	8001520 <chThdCreateFromHeap>
                           TestThread, chp);
  if (tp == NULL) {
 800628a:	b120      	cbz	r0, 8006296 <cmd_test.lto_priv.89+0x36>
    chprintf(chp, "out of memory\r\n");
    return;
  }
  chThdWait(tp);
}
 800628c:	b002      	add	sp, #8
 800628e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                           TestThread, chp);
  if (tp == NULL) {
    chprintf(chp, "out of memory\r\n");
    return;
  }
  chThdWait(tp);
 8006292:	f7fb ba2d 	b.w	80016f0 <chThdWait>
    return;
  }
  tp = chThdCreateFromHeap(NULL, TEST_WA_SIZE, chThdGetPriorityX(),
                           TestThread, chp);
  if (tp == NULL) {
    chprintf(chp, "out of memory\r\n");
 8006296:	4620      	mov	r0, r4
 8006298:	4906      	ldr	r1, [pc, #24]	; (80062b4 <cmd_test.lto_priv.89+0x54>)
    return;
  }
  chThdWait(tp);
}
 800629a:	b002      	add	sp, #8
 800629c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return;
  }
  tp = chThdCreateFromHeap(NULL, TEST_WA_SIZE, chThdGetPriorityX(),
                           TestThread, chp);
  if (tp == NULL) {
    chprintf(chp, "out of memory\r\n");
 80062a0:	f7fc b9f6 	b.w	8002690 <chprintf>
 80062a4:	40010c00 	.word	0x40010c00
 80062a8:	08007840 	.word	0x08007840
 80062ac:	20001098 	.word	0x20001098
 80062b0:	080032f1 	.word	0x080032f1
 80062b4:	08007850 	.word	0x08007850
	...

080062c0 <cmd_threads.lto_priv.88>:
static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
  static const char *states[] = {CH_STATE_NAMES};
  thread_t *tp;

  (void)argv;
  if (argc > 0) {
 80062c0:	2900      	cmp	r1, #0
 80062c2:	dd02      	ble.n	80062ca <cmd_threads.lto_priv.88+0xa>
    chprintf(chp, "Usage: threads\r\n");
 80062c4:	4915      	ldr	r1, [pc, #84]	; (800631c <cmd_threads.lto_priv.88+0x5c>)
 80062c6:	f7fc b9e3 	b.w	8002690 <chprintf>
  chprintf(chp, "core free memory : %u bytes\r\n", chCoreGetStatusX());
  chprintf(chp, "heap fragments   : %u\r\n", n);
  chprintf(chp, "heap free total  : %u bytes\r\n", size);
}

static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 80062ca:	b570      	push	{r4, r5, r6, lr}
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: threads\r\n");
    return;
  }
  chprintf(chp, "    addr    stack prio refs     state\r\n");
 80062cc:	4914      	ldr	r1, [pc, #80]	; (8006320 <cmd_threads.lto_priv.88+0x60>)
  chprintf(chp, "core free memory : %u bytes\r\n", chCoreGetStatusX());
  chprintf(chp, "heap fragments   : %u\r\n", n);
  chprintf(chp, "heap free total  : %u bytes\r\n", size);
}

static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 80062ce:	b084      	sub	sp, #16
 80062d0:	4605      	mov	r5, r0
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: threads\r\n");
    return;
  }
  chprintf(chp, "    addr    stack prio refs     state\r\n");
 80062d2:	f7fc f9dd 	bl	8002690 <chprintf>
 80062d6:	2320      	movs	r3, #32
 80062d8:	f383 8811 	msr	BASEPRI, r3
 */
thread_t *chRegFirstThread(void) {
  thread_t *tp;

  chSysLock();
  tp = ch.rlist.r_newer;
 80062dc:	4b11      	ldr	r3, [pc, #68]	; (8006324 <cmd_threads.lto_priv.88+0x64>)
 80062de:	2200      	movs	r2, #0
 80062e0:	691c      	ldr	r4, [r3, #16]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs++;
 80062e2:	7fa3      	ldrb	r3, [r4, #30]
 80062e4:	3301      	adds	r3, #1
 80062e6:	77a3      	strb	r3, [r4, #30]
 80062e8:	f382 8811 	msr	BASEPRI, r2
 80062ec:	4e0e      	ldr	r6, [pc, #56]	; (8006328 <cmd_threads.lto_priv.88+0x68>)
  tp = chRegFirstThread();
  do {
    chprintf(chp, "%08lx %08lx %4lu %4lu %9s %lu\r\n",
 80062ee:	68a2      	ldr	r2, [r4, #8]
 80062f0:	68e3      	ldr	r3, [r4, #12]
 80062f2:	9200      	str	r2, [sp, #0]
             (uint32_t)tp, (uint32_t)tp->p_ctx.r13,
             (uint32_t)tp->p_prio, (uint32_t)(tp->p_refs - 1),
 80062f4:	7fa2      	ldrb	r2, [r4, #30]
    return;
  }
  chprintf(chp, "    addr    stack prio refs     state\r\n");
  tp = chRegFirstThread();
  do {
    chprintf(chp, "%08lx %08lx %4lu %4lu %9s %lu\r\n",
 80062f6:	490d      	ldr	r1, [pc, #52]	; (800632c <cmd_threads.lto_priv.88+0x6c>)
             (uint32_t)tp, (uint32_t)tp->p_ctx.r13,
             (uint32_t)tp->p_prio, (uint32_t)(tp->p_refs - 1),
 80062f8:	3a01      	subs	r2, #1
    return;
  }
  chprintf(chp, "    addr    stack prio refs     state\r\n");
  tp = chRegFirstThread();
  do {
    chprintf(chp, "%08lx %08lx %4lu %4lu %9s %lu\r\n",
 80062fa:	9201      	str	r2, [sp, #4]
 80062fc:	7f22      	ldrb	r2, [r4, #28]
 80062fe:	4628      	mov	r0, r5
 8006300:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8006304:	9202      	str	r2, [sp, #8]
 8006306:	4622      	mov	r2, r4
 8006308:	f7fc f9c2 	bl	8002690 <chprintf>
             (uint32_t)tp, (uint32_t)tp->p_ctx.r13,
             (uint32_t)tp->p_prio, (uint32_t)(tp->p_refs - 1),
             states[tp->p_state]);
    tp = chRegNextThread(tp);
 800630c:	4620      	mov	r0, r4
 800630e:	f7fb f817 	bl	8001340 <chRegNextThread>
  } while (tp != NULL);
 8006312:	4604      	mov	r4, r0
 8006314:	2800      	cmp	r0, #0
 8006316:	d1ea      	bne.n	80062ee <cmd_threads.lto_priv.88+0x2e>
}
 8006318:	b004      	add	sp, #16
 800631a:	bd70      	pop	{r4, r5, r6, pc}
 800631c:	08007860 	.word	0x08007860
 8006320:	08007874 	.word	0x08007874
 8006324:	20001098 	.word	0x20001098
 8006328:	08007800 	.word	0x08007800
 800632c:	0800789c 	.word	0x0800789c

08006330 <cmd_mem.lto_priv.87>:
/*===========================================================================*/

#define SHELL_WA_SIZE   THD_WORKING_AREA_SIZE(2048)
#define TEST_WA_SIZE    THD_WORKING_AREA_SIZE(256)

static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
 8006330:	b530      	push	{r4, r5, lr}
  size_t n, size;

  (void)argv;
  if (argc > 0) {
 8006332:	2900      	cmp	r1, #0
/*===========================================================================*/

#define SHELL_WA_SIZE   THD_WORKING_AREA_SIZE(2048)
#define TEST_WA_SIZE    THD_WORKING_AREA_SIZE(256)

static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
 8006334:	b083      	sub	sp, #12
  size_t n, size;

  (void)argv;
  if (argc > 0) {
 8006336:	dd04      	ble.n	8006342 <cmd_mem.lto_priv.87+0x12>
    chprintf(chp, "Usage: mem\r\n");
 8006338:	490f      	ldr	r1, [pc, #60]	; (8006378 <cmd_mem.lto_priv.87+0x48>)
 800633a:	f7fc f9a9 	bl	8002690 <chprintf>
  }
  n = chHeapStatus(NULL, &size);
  chprintf(chp, "core free memory : %u bytes\r\n", chCoreGetStatusX());
  chprintf(chp, "heap fragments   : %u\r\n", n);
  chprintf(chp, "heap free total  : %u bytes\r\n", size);
}
 800633e:	b003      	add	sp, #12
 8006340:	bd30      	pop	{r4, r5, pc}
 8006342:	4604      	mov	r4, r0
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: mem\r\n");
    return;
  }
  n = chHeapStatus(NULL, &size);
 8006344:	a901      	add	r1, sp, #4
 8006346:	2000      	movs	r0, #0
 8006348:	f7fd f9c2 	bl	80036d0 <chHeapStatus>
 800634c:	4605      	mov	r5, r0
 * @xclass
 */
size_t chCoreGetStatusX(void) {

  /*lint -save -e9033 [10.8] The cast is safe.*/
  return (size_t)(endmem - nextmem);
 800634e:	4a0b      	ldr	r2, [pc, #44]	; (800637c <cmd_mem.lto_priv.87+0x4c>)
 8006350:	4b0b      	ldr	r3, [pc, #44]	; (8006380 <cmd_mem.lto_priv.87+0x50>)
 8006352:	6812      	ldr	r2, [r2, #0]
 8006354:	681b      	ldr	r3, [r3, #0]
  chprintf(chp, "core free memory : %u bytes\r\n", chCoreGetStatusX());
 8006356:	4620      	mov	r0, r4
 8006358:	1ad2      	subs	r2, r2, r3
 800635a:	490a      	ldr	r1, [pc, #40]	; (8006384 <cmd_mem.lto_priv.87+0x54>)
 800635c:	f7fc f998 	bl	8002690 <chprintf>
  chprintf(chp, "heap fragments   : %u\r\n", n);
 8006360:	462a      	mov	r2, r5
 8006362:	4620      	mov	r0, r4
 8006364:	4908      	ldr	r1, [pc, #32]	; (8006388 <cmd_mem.lto_priv.87+0x58>)
 8006366:	f7fc f993 	bl	8002690 <chprintf>
  chprintf(chp, "heap free total  : %u bytes\r\n", size);
 800636a:	4620      	mov	r0, r4
 800636c:	4907      	ldr	r1, [pc, #28]	; (800638c <cmd_mem.lto_priv.87+0x5c>)
 800636e:	9a01      	ldr	r2, [sp, #4]
 8006370:	f7fc f98e 	bl	8002690 <chprintf>
}
 8006374:	b003      	add	sp, #12
 8006376:	bd30      	pop	{r4, r5, pc}
 8006378:	080078bc 	.word	0x080078bc
 800637c:	20000a2c 	.word	0x20000a2c
 8006380:	20000a28 	.word	0x20000a28
 8006384:	080078cc 	.word	0x080078cc
 8006388:	080078ec 	.word	0x080078ec
 800638c:	08007904 	.word	0x08007904

08006390 <chTMStartMeasurementX.constprop.71>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8006390:	4b01      	ldr	r3, [pc, #4]	; (8006398 <chTMStartMeasurementX.constprop.71+0x8>)
 8006392:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8006394:	6083      	str	r3, [r0, #8]
 8006396:	4770      	bx	lr
 8006398:	e0001000 	.word	0xe0001000
 800639c:	00000000 	.word	0x00000000

080063a0 <chThdCreateFromMemoryPool.constprop.69>:
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, tprio_t prio,
 80063a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  void *wsp;
  thread_t *tp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 80063a4:	4e21      	ldr	r6, [pc, #132]	; (800642c <chThdCreateFromMemoryPool.constprop.69+0x8c>)
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, tprio_t prio,
 80063a6:	4680      	mov	r8, r0
  void *wsp;
  thread_t *tp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 80063a8:	4630      	mov	r0, r6
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, tprio_t prio,
 80063aa:	4689      	mov	r9, r1
  void *wsp;
  thread_t *tp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 80063ac:	f7fd f978 	bl	80036a0 <chPoolAlloc>
  if (wsp == NULL) {
 80063b0:	4604      	mov	r4, r0
 80063b2:	2800      	cmp	r0, #0
 80063b4:	d037      	beq.n	8006426 <chThdCreateFromMemoryPool.constprop.69+0x86>
 80063b6:	2320      	movs	r3, #32
 80063b8:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80063bc:	6873      	ldr	r3, [r6, #4]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80063be:	4a1c      	ldr	r2, [pc, #112]	; (8006430 <chThdCreateFromMemoryPool.constprop.69+0x90>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80063c0:	3b24      	subs	r3, #36	; 0x24
 80063c2:	4d1c      	ldr	r5, [pc, #112]	; (8006434 <chThdCreateFromMemoryPool.constprop.69+0x94>)
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80063c4:	f8d2 a014 	ldr.w	sl, [r2, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80063c8:	eb00 0e03 	add.w	lr, r0, r3
 80063cc:	491a      	ldr	r1, [pc, #104]	; (8006438 <chThdCreateFromMemoryPool.constprop.69+0x98>)
 80063ce:	f8c0 e00c 	str.w	lr, [r0, #12]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80063d2:	f04f 0c02 	mov.w	ip, #2

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80063d6:	50c5      	str	r5, [r0, r3]
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 80063d8:	f100 0724 	add.w	r7, r0, #36	; 0x24
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 80063dc:	2500      	movs	r5, #0
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 80063de:	f100 0328 	add.w	r3, r0, #40	; 0x28
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80063e2:	f04f 0b01 	mov.w	fp, #1

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80063e6:	f8ce 9004 	str.w	r9, [lr, #4]
 80063ea:	f8ce 1020 	str.w	r1, [lr, #32]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 80063ee:	f8c0 8008 	str.w	r8, [r0, #8]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80063f2:	6102      	str	r2, [r0, #16]
 80063f4:	f8c0 a014 	str.w	sl, [r0, #20]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 80063f8:	f8c0 803c 	str.w	r8, [r0, #60]	; 0x3c
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80063fc:	f880 b01e 	strb.w	fp, [r0, #30]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8006400:	f880 c01c 	strb.w	ip, [r0, #28]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8006404:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8006406:	6345      	str	r5, [r0, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8006408:	6185      	str	r5, [r0, #24]

  chSysLock();
  tp = chThdCreateI(wsp, mp->mp_object_size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_MPOOL;
  tp->p_mpool = mp;
  chSchWakeupS(tp, MSG_OK);
 800640a:	4629      	mov	r1, r5
  REG_INSERT(tp);
 800640c:	f8ca 0010 	str.w	r0, [sl, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8006410:	6247      	str	r7, [r0, #36]	; 0x24
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, mp->mp_object_size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_MPOOL;
 8006412:	f880 c01d 	strb.w	ip, [r0, #29]
  tp->p_mpool = mp;
 8006416:	6406      	str	r6, [r0, #64]	; 0x40
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8006418:	6283      	str	r3, [r0, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 800641a:	62c3      	str	r3, [r0, #44]	; 0x2c
 800641c:	6150      	str	r0, [r2, #20]
  chSchWakeupS(tp, MSG_OK);
 800641e:	f7fb f82f 	bl	8001480 <chSchWakeupS>
 8006422:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  return tp;
}
 8006426:	4620      	mov	r0, r4
 8006428:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800642c:	200011ec 	.word	0x200011ec
 8006430:	20001098 	.word	0x20001098
 8006434:	080047a1 	.word	0x080047a1
 8006438:	08000241 	.word	0x08000241
 800643c:	00000000 	.word	0x00000000

08006440 <chSemSignalWait.constprop.65>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw) {
 8006440:	b510      	push	{r4, lr}
 8006442:	2320      	movs	r3, #32
 8006444:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert(((spw->s_cnt >= (cnt_t)0) && queue_isempty(&spw->s_queue)) ||
              ((spw->s_cnt < (cnt_t)0) && queue_notempty(&spw->s_queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sps->s_cnt <= (cnt_t)0) {
 8006448:	4c15      	ldr	r4, [pc, #84]	; (80064a0 <chSemSignalWait.constprop.65+0x60>)
 800644a:	68a3      	ldr	r3, [r4, #8]
 800644c:	3301      	adds	r3, #1
 800644e:	2b00      	cmp	r3, #0
 8006450:	60a3      	str	r3, [r4, #8]
 8006452:	dd1b      	ble.n	800648c <chSemSignalWait.constprop.65+0x4c>
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
  }
  if (--spw->s_cnt < (cnt_t)0) {
 8006454:	3b01      	subs	r3, #1
 8006456:	2b00      	cmp	r3, #0
 8006458:	60a3      	str	r3, [r4, #8]
 800645a:	4a11      	ldr	r2, [pc, #68]	; (80064a0 <chSemSignalWait.constprop.65+0x60>)
 800645c:	db06      	blt.n	800646c <chSemSignalWait.constprop.65+0x2c>
    ctp->p_u.wtsemp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
    msg = ctp->p_u.rdymsg;
  }
  else {
    chSchRescheduleS();
 800645e:	f7fa ffe7 	bl	8001430 <chSchRescheduleS>
    msg = MSG_OK;
 8006462:	2000      	movs	r0, #0
 8006464:	2300      	movs	r3, #0
 8006466:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return msg;
}
 800646a:	bd10      	pop	{r4, pc}
  chSysLock();
  if (++sps->s_cnt <= (cnt_t)0) {
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
  }
  if (--spw->s_cnt < (cnt_t)0) {
    thread_t *ctp = currp;
 800646c:	490d      	ldr	r1, [pc, #52]	; (80064a4 <chSemSignalWait.constprop.65+0x64>)
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 800646e:	6853      	ldr	r3, [r2, #4]
 8006470:	698c      	ldr	r4, [r1, #24]
    sem_insert(ctp, &spw->s_queue);
    ctp->p_u.wtsemp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
 8006472:	2005      	movs	r0, #5
 8006474:	e884 000c 	stmia.w	r4, {r2, r3}
  tp->p_prev->p_next = tp;
 8006478:	601c      	str	r4, [r3, #0]
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
  }
  if (--spw->s_cnt < (cnt_t)0) {
    thread_t *ctp = currp;
    sem_insert(ctp, &spw->s_queue);
    ctp->p_u.wtsemp = spw;
 800647a:	6222      	str	r2, [r4, #32]
  tqp->p_prev = tp;
 800647c:	6054      	str	r4, [r2, #4]
    chSchGoSleepS(CH_STATE_WTSEM);
 800647e:	f7fb f8d7 	bl	8001630 <chSchGoSleepS>
    msg = ctp->p_u.rdymsg;
 8006482:	6a20      	ldr	r0, [r4, #32]
 8006484:	2300      	movs	r3, #0
 8006486:	f383 8811 	msr	BASEPRI, r3
    msg = MSG_OK;
  }
  chSysUnlock();

  return msg;
}
 800648a:	bd10      	pop	{r4, pc}
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 800648c:	6820      	ldr	r0, [r4, #0]

  tqp->p_next = tp->p_next;
 800648e:	6803      	ldr	r3, [r0, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8006490:	605c      	str	r4, [r3, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8006492:	6023      	str	r3, [r4, #0]
              ((spw->s_cnt < (cnt_t)0) && queue_notempty(&spw->s_queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sps->s_cnt <= (cnt_t)0) {
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
 8006494:	f7fb f94c 	bl	8001730 <chSchReadyI>
 8006498:	2200      	movs	r2, #0
 800649a:	68a3      	ldr	r3, [r4, #8]
 800649c:	6202      	str	r2, [r0, #32]
 800649e:	e7d9      	b.n	8006454 <chSemSignalWait.constprop.65+0x14>
 80064a0:	200008a0 	.word	0x200008a0
 80064a4:	20001098 	.word	0x20001098
	...

080064b0 <chCondSignal.constprop.61>:
 *
 * @param[in] cp        pointer to the @p condition_variable_t structure
 *
 * @api
 */
void chCondSignal(condition_variable_t *cp) {
 80064b0:	b508      	push	{r3, lr}
 80064b2:	2320      	movs	r3, #32
 80064b4:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 80064b8:	4b06      	ldr	r3, [pc, #24]	; (80064d4 <chCondSignal.constprop.61+0x24>)
 80064ba:	6818      	ldr	r0, [r3, #0]

  chDbgCheck(cp != NULL);

  chSysLock();
  if (queue_notempty(&cp->c_queue)) {
 80064bc:	4298      	cmp	r0, r3
 80064be:	d005      	beq.n	80064cc <chCondSignal.constprop.61+0x1c>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80064c0:	6802      	ldr	r2, [r0, #0]
    chSchWakeupS(queue_fifo_remove(&cp->c_queue), MSG_OK);
 80064c2:	2100      	movs	r1, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 80064c4:	6053      	str	r3, [r2, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80064c6:	601a      	str	r2, [r3, #0]
 80064c8:	f7fa ffda 	bl	8001480 <chSchWakeupS>
 80064cc:	2300      	movs	r3, #0
 80064ce:	f383 8811 	msr	BASEPRI, r3
 80064d2:	bd08      	pop	{r3, pc}
 80064d4:	200008d4 	.word	0x200008d4
	...

080064e0 <chCondSignalI.constprop.60>:
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 80064e0:	4b07      	ldr	r3, [pc, #28]	; (8006500 <chCondSignalI.constprop.60+0x20>)
 80064e2:	681a      	ldr	r2, [r3, #0]
void chCondSignalI(condition_variable_t *cp) {

  chDbgCheckClassI();
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->c_queue)) {
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d00a      	beq.n	80064fe <chCondSignalI.constprop.60+0x1e>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80064e8:	6811      	ldr	r1, [r2, #0]
 *
 * @param[in] cp        pointer to the @p condition_variable_t structure
 *
 * @iclass
 */
void chCondSignalI(condition_variable_t *cp) {
 80064ea:	b410      	push	{r4}
  chDbgCheckClassI();
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->c_queue)) {
    thread_t *tp = queue_fifo_remove(&cp->c_queue);
    tp->p_u.rdymsg = MSG_OK;
 80064ec:	2400      	movs	r4, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 80064ee:	604b      	str	r3, [r1, #4]
 80064f0:	6214      	str	r4, [r2, #32]
    (void) chSchReadyI(tp);
 80064f2:	4610      	mov	r0, r2
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80064f4:	6019      	str	r1, [r3, #0]
  }
}
 80064f6:	f85d 4b04 	ldr.w	r4, [sp], #4
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->c_queue)) {
    thread_t *tp = queue_fifo_remove(&cp->c_queue);
    tp->p_u.rdymsg = MSG_OK;
    (void) chSchReadyI(tp);
 80064fa:	f7fb b919 	b.w	8001730 <chSchReadyI>
 80064fe:	4770      	bx	lr
 8006500:	200008d4 	.word	0x200008d4
	...

08006510 <chEvtGetAndClearEvents.constprop.52>:
 8006510:	2320      	movs	r3, #32
 8006512:	f383 8811 	msr	BASEPRI, r3
 */
eventmask_t chEvtGetAndClearEvents(eventmask_t events) {
  eventmask_t m;

  chSysLock();
  m = currp->p_epending & events;
 8006516:	4a04      	ldr	r2, [pc, #16]	; (8006528 <chEvtGetAndClearEvents.constprop.52+0x18>)
  currp->p_epending &= ~events;
 8006518:	2300      	movs	r3, #0
 */
eventmask_t chEvtGetAndClearEvents(eventmask_t events) {
  eventmask_t m;

  chSysLock();
  m = currp->p_epending & events;
 800651a:	6992      	ldr	r2, [r2, #24]
 800651c:	6b50      	ldr	r0, [r2, #52]	; 0x34
  currp->p_epending &= ~events;
 800651e:	6353      	str	r3, [r2, #52]	; 0x34
 8006520:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop
 8006528:	20001098 	.word	0x20001098
 800652c:	00000000 	.word	0x00000000

08006530 <chEvtWaitOne.constprop.48>:
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
  thread_t *ctp = currp;
 8006530:	4a0b      	ldr	r2, [pc, #44]	; (8006560 <chEvtWaitOne.constprop.48+0x30>)
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
 8006532:	b510      	push	{r4, lr}
 8006534:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8006536:	6994      	ldr	r4, [r2, #24]
 8006538:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 800653c:	6b63      	ldr	r3, [r4, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800653e:	b933      	cbnz	r3, 800654e <chEvtWaitOne.constprop.48+0x1e>
    ctp->p_u.ewmask = events;
 8006540:	f04f 33ff 	mov.w	r3, #4294967295
 8006544:	6223      	str	r3, [r4, #32]
    chSchGoSleepS(CH_STATE_WTOREVT);
 8006546:	200a      	movs	r0, #10
 8006548:	f7fb f872 	bl	8001630 <chSchGoSleepS>
    m = ctp->p_epending & events;
 800654c:	6b63      	ldr	r3, [r4, #52]	; 0x34
  }
  m ^= m & (m - (eventmask_t)1);
 800654e:	4258      	negs	r0, r3
 8006550:	4018      	ands	r0, r3
  ctp->p_epending &= ~m;
 8006552:	ea23 0300 	bic.w	r3, r3, r0
 8006556:	6363      	str	r3, [r4, #52]	; 0x34
 8006558:	2300      	movs	r3, #0
 800655a:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 800655e:	bd10      	pop	{r4, pc}
 8006560:	20001098 	.word	0x20001098
	...

08006570 <chEvtWaitAny.constprop.47>:
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
  thread_t *ctp = currp;
 8006570:	4a0b      	ldr	r2, [pc, #44]	; (80065a0 <chEvtWaitAny.constprop.47+0x30>)
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
 8006572:	b510      	push	{r4, lr}
 8006574:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8006576:	6994      	ldr	r4, [r2, #24]
 8006578:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 800657c:	6b60      	ldr	r0, [r4, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800657e:	b930      	cbnz	r0, 800658e <chEvtWaitAny.constprop.47+0x1e>
    ctp->p_u.ewmask = events;
 8006580:	f04f 33ff 	mov.w	r3, #4294967295
    chSchGoSleepS(CH_STATE_WTOREVT);
 8006584:	200a      	movs	r0, #10
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
  if (m == (eventmask_t)0) {
    ctp->p_u.ewmask = events;
 8006586:	6223      	str	r3, [r4, #32]
    chSchGoSleepS(CH_STATE_WTOREVT);
 8006588:	f7fb f852 	bl	8001630 <chSchGoSleepS>
    m = ctp->p_epending & events;
 800658c:	6b60      	ldr	r0, [r4, #52]	; 0x34
  }
  ctp->p_epending &= ~m;
 800658e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006590:	2200      	movs	r2, #0
 8006592:	ea23 0300 	bic.w	r3, r3, r0
 8006596:	6363      	str	r3, [r4, #52]	; 0x34
 8006598:	f382 8811 	msr	BASEPRI, r2
  chSysUnlock();

  return m;
}
 800659c:	bd10      	pop	{r4, pc}
 800659e:	bf00      	nop
 80065a0:	20001098 	.word	0x20001098
	...

080065b0 <chMBPost.constprop.33>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBPost(mailbox_t *mbp, msg_t msg, systime_t timeout) {
 80065b0:	b570      	push	{r4, r5, r6, lr}
 80065b2:	2320      	movs	r3, #32
 80065b4:	4606      	mov	r6, r0
 80065b6:	f383 8811 	msr	BASEPRI, r3
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
 80065ba:	4c0d      	ldr	r4, [pc, #52]	; (80065f0 <chMBPost.constprop.33+0x40>)
 80065bc:	f104 001c 	add.w	r0, r4, #28
 80065c0:	f7fb fb6e 	bl	8001ca0 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 80065c4:	4605      	mov	r5, r0
 80065c6:	b970      	cbnz	r0, 80065e6 <chMBPost.constprop.33+0x36>
    *mbp->mb_wrptr++ = msg;
 80065c8:	68a2      	ldr	r2, [r4, #8]
    if (mbp->mb_wrptr >= mbp->mb_top) {
 80065ca:	6861      	ldr	r1, [r4, #4]
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 80065cc:	1d13      	adds	r3, r2, #4
    if (mbp->mb_wrptr >= mbp->mb_top) {
 80065ce:	428b      	cmp	r3, r1
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 80065d0:	60a3      	str	r3, [r4, #8]
    if (mbp->mb_wrptr >= mbp->mb_top) {
      mbp->mb_wrptr = mbp->mb_buffer;
 80065d2:	bf28      	it	cs
 80065d4:	6823      	ldrcs	r3, [r4, #0]
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 80065d6:	6016      	str	r6, [r2, #0]
    if (mbp->mb_wrptr >= mbp->mb_top) {
      mbp->mb_wrptr = mbp->mb_buffer;
    }
    chSemSignalI(&mbp->mb_fullsem);
 80065d8:	4806      	ldr	r0, [pc, #24]	; (80065f4 <chMBPost.constprop.33+0x44>)

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
    if (mbp->mb_wrptr >= mbp->mb_top) {
      mbp->mb_wrptr = mbp->mb_buffer;
 80065da:	bf28      	it	cs
 80065dc:	60a3      	strcs	r3, [r4, #8]
    }
    chSemSignalI(&mbp->mb_fullsem);
 80065de:	f7fb fa47 	bl	8001a70 <chSemSignalI>
    chSchRescheduleS();
 80065e2:	f7fa ff25 	bl	8001430 <chSchRescheduleS>
 80065e6:	2300      	movs	r3, #0
 80065e8:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  rdymsg = chMBPostS(mbp, msg, timeout);
  chSysUnlock();

  return rdymsg;
}
 80065ec:	4628      	mov	r0, r5
 80065ee:	bd70      	pop	{r4, r5, r6, pc}
 80065f0:	200008ac 	.word	0x200008ac
 80065f4:	200008bc 	.word	0x200008bc
	...

08006600 <chMBPostI.constprop.32>:
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {
 8006600:	b538      	push	{r3, r4, r5, lr}
 8006602:	4b0c      	ldr	r3, [pc, #48]	; (8006634 <chMBPostI.constprop.32+0x34>)
 8006604:	6a5a      	ldr	r2, [r3, #36]	; 0x24

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
 8006606:	2a00      	cmp	r2, #0
 8006608:	dd10      	ble.n	800662c <chMBPostI.constprop.32+0x2c>
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 800660a:	689c      	ldr	r4, [r3, #8]
  if (mbp->mb_wrptr >= mbp->mb_top) {
 800660c:	685d      	ldr	r5, [r3, #4]
  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 800660e:	1d21      	adds	r1, r4, #4
 */
static inline void chSemFastWaitI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt--;
 8006610:	3a01      	subs	r2, #1
  if (mbp->mb_wrptr >= mbp->mb_top) {
 8006612:	42a9      	cmp	r1, r5
 8006614:	625a      	str	r2, [r3, #36]	; 0x24
     mbp->mb_wrptr = mbp->mb_buffer;
 8006616:	bf28      	it	cs
 8006618:	681a      	ldrcs	r2, [r3, #0]
  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 800661a:	6099      	str	r1, [r3, #8]
 800661c:	6020      	str	r0, [r4, #0]
  if (mbp->mb_wrptr >= mbp->mb_top) {
     mbp->mb_wrptr = mbp->mb_buffer;
  }
  chSemSignalI(&mbp->mb_fullsem);
 800661e:	4806      	ldr	r0, [pc, #24]	; (8006638 <chMBPostI.constprop.32+0x38>)
  }

  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
  if (mbp->mb_wrptr >= mbp->mb_top) {
     mbp->mb_wrptr = mbp->mb_buffer;
 8006620:	bf28      	it	cs
 8006622:	609a      	strcs	r2, [r3, #8]
  }
  chSemSignalI(&mbp->mb_fullsem);
 8006624:	f7fb fa24 	bl	8001a70 <chSemSignalI>

  return MSG_OK;
 8006628:	2000      	movs	r0, #0
 800662a:	bd38      	pop	{r3, r4, r5, pc}

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
 800662c:	f04f 30ff 	mov.w	r0, #4294967295
     mbp->mb_wrptr = mbp->mb_buffer;
  }
  chSemSignalI(&mbp->mb_fullsem);

  return MSG_OK;
}
 8006630:	bd38      	pop	{r3, r4, r5, pc}
 8006632:	bf00      	nop
 8006634:	200008ac 	.word	0x200008ac
 8006638:	200008bc 	.word	0x200008bc
 800663c:	00000000 	.word	0x00000000

08006640 <chMBPostAhead.constprop.31>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBPostAhead(mailbox_t *mbp, msg_t msg, systime_t timeout) {
 8006640:	b570      	push	{r4, r5, r6, lr}
 8006642:	2320      	movs	r3, #32
 8006644:	4606      	mov	r6, r0
 8006646:	f383 8811 	msr	BASEPRI, r3
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
 800664a:	4c0e      	ldr	r4, [pc, #56]	; (8006684 <chMBPostAhead.constprop.31+0x44>)
 800664c:	f104 001c 	add.w	r0, r4, #28
 8006650:	f7fb fb26 	bl	8001ca0 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8006654:	4605      	mov	r5, r0
 8006656:	b958      	cbnz	r0, 8006670 <chMBPostAhead.constprop.31+0x30>
    if (--mbp->mb_rdptr < mbp->mb_buffer) {
 8006658:	68e3      	ldr	r3, [r4, #12]
 800665a:	6822      	ldr	r2, [r4, #0]
 800665c:	3b04      	subs	r3, #4
 800665e:	4293      	cmp	r3, r2
 8006660:	60e3      	str	r3, [r4, #12]
 8006662:	d30a      	bcc.n	800667a <chMBPostAhead.constprop.31+0x3a>
      mbp->mb_rdptr = mbp->mb_top - 1;
    }
    *mbp->mb_rdptr = msg;
 8006664:	601e      	str	r6, [r3, #0]
    chSemSignalI(&mbp->mb_fullsem);
 8006666:	4808      	ldr	r0, [pc, #32]	; (8006688 <chMBPostAhead.constprop.31+0x48>)
 8006668:	f7fb fa02 	bl	8001a70 <chSemSignalI>
    chSchRescheduleS();
 800666c:	f7fa fee0 	bl	8001430 <chSchRescheduleS>
 8006670:	2300      	movs	r3, #0
 8006672:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  rdymsg = chMBPostAheadS(mbp, msg, timeout);
  chSysUnlock();

  return rdymsg;
}
 8006676:	4628      	mov	r0, r5
 8006678:	bd70      	pop	{r4, r5, r6, pc}
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
    if (--mbp->mb_rdptr < mbp->mb_buffer) {
      mbp->mb_rdptr = mbp->mb_top - 1;
 800667a:	6863      	ldr	r3, [r4, #4]
 800667c:	3b04      	subs	r3, #4
 800667e:	60e3      	str	r3, [r4, #12]
 8006680:	e7f0      	b.n	8006664 <chMBPostAhead.constprop.31+0x24>
 8006682:	bf00      	nop
 8006684:	200008ac 	.word	0x200008ac
 8006688:	200008bc 	.word	0x200008bc
 800668c:	00000000 	.word	0x00000000

08006690 <chMBPostAheadI.constprop.30>:
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 8006690:	4a0c      	ldr	r2, [pc, #48]	; (80066c4 <chMBPostAheadI.constprop.30+0x34>)
 8006692:	6a51      	ldr	r1, [r2, #36]	; 0x24

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
 8006694:	2900      	cmp	r1, #0
 8006696:	dd11      	ble.n	80066bc <chMBPostAheadI.constprop.30+0x2c>
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_emptysem);
  if (--mbp->mb_rdptr < mbp->mb_buffer) {
 8006698:	68d3      	ldr	r3, [r2, #12]
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 800669a:	b510      	push	{r4, lr}

  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_emptysem);
  if (--mbp->mb_rdptr < mbp->mb_buffer) {
 800669c:	6814      	ldr	r4, [r2, #0]
 800669e:	3b04      	subs	r3, #4
 80066a0:	3901      	subs	r1, #1
 80066a2:	42a3      	cmp	r3, r4
 80066a4:	6251      	str	r1, [r2, #36]	; 0x24
 80066a6:	60d3      	str	r3, [r2, #12]
 80066a8:	d202      	bcs.n	80066b0 <chMBPostAheadI.constprop.30+0x20>
    mbp->mb_rdptr = mbp->mb_top - 1;
 80066aa:	6853      	ldr	r3, [r2, #4]
 80066ac:	3b04      	subs	r3, #4
 80066ae:	60d3      	str	r3, [r2, #12]
  }
  *mbp->mb_rdptr = msg;
 80066b0:	6018      	str	r0, [r3, #0]
  chSemSignalI(&mbp->mb_fullsem);
 80066b2:	4805      	ldr	r0, [pc, #20]	; (80066c8 <chMBPostAheadI.constprop.30+0x38>)
 80066b4:	f7fb f9dc 	bl	8001a70 <chSemSignalI>

  return MSG_OK;
 80066b8:	2000      	movs	r0, #0
 80066ba:	bd10      	pop	{r4, pc}

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
 80066bc:	f04f 30ff 	mov.w	r0, #4294967295
 80066c0:	4770      	bx	lr
 80066c2:	bf00      	nop
 80066c4:	200008ac 	.word	0x200008ac
 80066c8:	200008bc 	.word	0x200008bc
 80066cc:	00000000 	.word	0x00000000

080066d0 <chMBFetch.constprop.29>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBFetch(mailbox_t *mbp, msg_t *msgp, systime_t timeout) {
 80066d0:	b570      	push	{r4, r5, r6, lr}
 80066d2:	2320      	movs	r3, #32
 80066d4:	4606      	mov	r6, r0
 80066d6:	f383 8811 	msr	BASEPRI, r3
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, timeout);
 80066da:	4c0e      	ldr	r4, [pc, #56]	; (8006714 <chMBFetch.constprop.29+0x44>)
 80066dc:	f104 0010 	add.w	r0, r4, #16
 80066e0:	f7fb fade 	bl	8001ca0 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 80066e4:	4605      	mov	r5, r0
 80066e6:	b978      	cbnz	r0, 8006708 <chMBFetch.constprop.29+0x38>
    *msgp = *mbp->mb_rdptr++;
 80066e8:	68e3      	ldr	r3, [r4, #12]
    if (mbp->mb_rdptr >= mbp->mb_top) {
 80066ea:	6862      	ldr	r2, [r4, #4]
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, timeout);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
 80066ec:	6819      	ldr	r1, [r3, #0]
 80066ee:	3304      	adds	r3, #4
    if (mbp->mb_rdptr >= mbp->mb_top) {
 80066f0:	4293      	cmp	r3, r2
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, timeout);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
 80066f2:	60e3      	str	r3, [r4, #12]
    if (mbp->mb_rdptr >= mbp->mb_top) {
      mbp->mb_rdptr = mbp->mb_buffer;
 80066f4:	bf28      	it	cs
 80066f6:	6823      	ldrcs	r3, [r4, #0]
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, timeout);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
 80066f8:	6031      	str	r1, [r6, #0]
    if (mbp->mb_rdptr >= mbp->mb_top) {
      mbp->mb_rdptr = mbp->mb_buffer;
    }
    chSemSignalI(&mbp->mb_emptysem);
 80066fa:	4807      	ldr	r0, [pc, #28]	; (8006718 <chMBFetch.constprop.29+0x48>)

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, timeout);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
    if (mbp->mb_rdptr >= mbp->mb_top) {
      mbp->mb_rdptr = mbp->mb_buffer;
 80066fc:	bf28      	it	cs
 80066fe:	60e3      	strcs	r3, [r4, #12]
    }
    chSemSignalI(&mbp->mb_emptysem);
 8006700:	f7fb f9b6 	bl	8001a70 <chSemSignalI>
    chSchRescheduleS();
 8006704:	f7fa fe94 	bl	8001430 <chSchRescheduleS>
 8006708:	2300      	movs	r3, #0
 800670a:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  rdymsg = chMBFetchS(mbp, msgp, timeout);
  chSysUnlock();

  return rdymsg;
}
 800670e:	4628      	mov	r0, r5
 8006710:	bd70      	pop	{r4, r5, r6, pc}
 8006712:	bf00      	nop
 8006714:	200008ac 	.word	0x200008ac
 8006718:	200008c8 	.word	0x200008c8
 800671c:	00000000 	.word	0x00000000

08006720 <chMBFetchI.constprop.28>:
 * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 *                      fetched.
 *
 * @iclass
 */
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 8006720:	4b0c      	ldr	r3, [pc, #48]	; (8006754 <chMBFetchI.constprop.28+0x34>)
 8006722:	699a      	ldr	r2, [r3, #24]

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
 8006724:	2a00      	cmp	r2, #0
 8006726:	dd12      	ble.n	800674e <chMBFetchI.constprop.28+0x2e>
 8006728:	1e51      	subs	r1, r2, #1
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 800672a:	68da      	ldr	r2, [r3, #12]
 * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 *                      fetched.
 *
 * @iclass
 */
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 800672c:	b510      	push	{r4, lr}
 800672e:	6199      	str	r1, [r3, #24]
  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
  if (mbp->mb_rdptr >= mbp->mb_top) {
 8006730:	6859      	ldr	r1, [r3, #4]

  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 8006732:	6814      	ldr	r4, [r2, #0]
 8006734:	3204      	adds	r2, #4
  if (mbp->mb_rdptr >= mbp->mb_top) {
 8006736:	428a      	cmp	r2, r1

  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 8006738:	60da      	str	r2, [r3, #12]
  if (mbp->mb_rdptr >= mbp->mb_top) {
    mbp->mb_rdptr = mbp->mb_buffer;
 800673a:	bf28      	it	cs
 800673c:	681a      	ldrcs	r2, [r3, #0]

  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 800673e:	6004      	str	r4, [r0, #0]
  if (mbp->mb_rdptr >= mbp->mb_top) {
    mbp->mb_rdptr = mbp->mb_buffer;
  }
  chSemSignalI(&mbp->mb_emptysem);
 8006740:	4805      	ldr	r0, [pc, #20]	; (8006758 <chMBFetchI.constprop.28+0x38>)
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
  if (mbp->mb_rdptr >= mbp->mb_top) {
    mbp->mb_rdptr = mbp->mb_buffer;
 8006742:	bf28      	it	cs
 8006744:	60da      	strcs	r2, [r3, #12]
  }
  chSemSignalI(&mbp->mb_emptysem);
 8006746:	f7fb f993 	bl	8001a70 <chSemSignalI>

  return MSG_OK;
 800674a:	2000      	movs	r0, #0
 800674c:	bd10      	pop	{r4, pc}

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
 800674e:	f04f 30ff 	mov.w	r0, #4294967295
 8006752:	4770      	bx	lr
 8006754:	200008ac 	.word	0x200008ac
 8006758:	200008c8 	.word	0x200008c8
 800675c:	00000000 	.word	0x00000000

08006760 <sdObjectInit.constprop.23>:
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
 8006760:	4b17      	ldr	r3, [pc, #92]	; (80067c0 <sdObjectInit.constprop.23+0x60>)
 *                      some data is written in the Queue. The value can be
 *                      @p NULL.
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8006762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  sdp->vmt = &vmt;
 8006766:	4618      	mov	r0, r3
 8006768:	4a16      	ldr	r2, [pc, #88]	; (80067c4 <sdObjectInit.constprop.23+0x64>)
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 800676a:	4f17      	ldr	r7, [pc, #92]	; (80067c8 <sdObjectInit.constprop.23+0x68>)
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 800676c:	f103 0154 	add.w	r1, r3, #84	; 0x54
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8006770:	2600      	movs	r6, #0
 8006772:	f840 2b04 	str.w	r2, [r0], #4
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8006776:	f103 050c 	add.w	r5, r3, #12
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 800677a:	f503 72c0 	add.w	r2, r3, #384	; 0x180
 800677e:	f103 0430 	add.w	r4, r3, #48	; 0x30
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 8006782:	f04f 0801 	mov.w	r8, #1
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8006786:	f44f 7c96 	mov.w	ip, #300	; 0x12c
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 800678a:	f503 7e2b 	add.w	lr, r3, #684	; 0x2ac
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 800678e:	615e      	str	r6, [r3, #20]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
  iqp->q_link    = link;
 8006790:	62db      	str	r3, [r3, #44]	; 0x2c
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
 8006792:	651b      	str	r3, [r3, #80]	; 0x50
 8006794:	f883 8008 	strb.w	r8, [r3, #8]
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 8006798:	629e      	str	r6, [r3, #40]	; 0x28
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 800679a:	f8c3 c038 	str.w	ip, [r3, #56]	; 0x38
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 800679e:	f8c3 e040 	str.w	lr, [r3, #64]	; 0x40
  oqp->q_notify  = onfy;
 80067a2:	64df      	str	r7, [r3, #76]	; 0x4c
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 80067a4:	6058      	str	r0, [r3, #4]
 80067a6:	60dd      	str	r5, [r3, #12]
  tqp->p_prev = (thread_t *)tqp;
 80067a8:	611d      	str	r5, [r3, #16]
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 80067aa:	6199      	str	r1, [r3, #24]
  iqp->q_rdptr   = bp;
 80067ac:	6259      	str	r1, [r3, #36]	; 0x24
  iqp->q_wrptr   = bp;
 80067ae:	6219      	str	r1, [r3, #32]
  iqp->q_top     = bp + size;
 80067b0:	61da      	str	r2, [r3, #28]
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
 80067b2:	63da      	str	r2, [r3, #60]	; 0x3c
  oqp->q_rdptr   = bp;
 80067b4:	649a      	str	r2, [r3, #72]	; 0x48
  oqp->q_wrptr   = bp;
 80067b6:	645a      	str	r2, [r3, #68]	; 0x44
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80067b8:	631c      	str	r4, [r3, #48]	; 0x30
  tqp->p_prev = (thread_t *)tqp;
 80067ba:	635c      	str	r4, [r3, #52]	; 0x34
 80067bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067c0:	2000120c 	.word	0x2000120c
 80067c4:	080079c0 	.word	0x080079c0
 80067c8:	08002d21 	.word	0x08002d21
 80067cc:	00000000 	.word	0x00000000

080067d0 <test_start_timer.constprop.6>:
/**
 * @brief   Starts the test timer.
 *
 * @param[in] ms        time in milliseconds
 */
void test_start_timer(unsigned ms) {
 80067d0:	b508      	push	{r3, lr}

  systime_t duration = MS2ST(ms);
  test_timer_done = FALSE;
 80067d2:	4b0b      	ldr	r3, [pc, #44]	; (8006800 <test_start_timer.constprop.6+0x30>)
 80067d4:	2200      	movs	r2, #0
 80067d6:	701a      	strb	r2, [r3, #0]
 80067d8:	2320      	movs	r3, #32
 80067da:	f383 8811 	msr	BASEPRI, r3
 80067de:	4809      	ldr	r0, [pc, #36]	; (8006804 <test_start_timer.constprop.6+0x34>)
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 80067e0:	68c3      	ldr	r3, [r0, #12]
 80067e2:	b10b      	cbz	r3, 80067e8 <test_start_timer.constprop.6+0x18>
    chVTDoResetI(vtp);
 80067e4:	f7fb f9b4 	bl	8001b50 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, systime_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 80067e8:	4806      	ldr	r0, [pc, #24]	; (8006804 <test_start_timer.constprop.6+0x34>)
 80067ea:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80067ee:	4a06      	ldr	r2, [pc, #24]	; (8006808 <test_start_timer.constprop.6+0x38>)
 80067f0:	2300      	movs	r3, #0
 80067f2:	f7fb f9ed 	bl	8001bd0 <chVTDoSetI>
 80067f6:	2300      	movs	r3, #0
 80067f8:	f383 8811 	msr	BASEPRI, r3
 80067fc:	bd08      	pop	{r3, pc}
 80067fe:	bf00      	nop
 8006800:	200011e8 	.word	0x200011e8
 8006804:	200011f8 	.word	0x200011f8
 8006808:	08002d11 	.word	0x08002d11
 800680c:	00000000 	.word	0x00000000

08006810 <long_to_string_with_divisor.constprop.4>:
#include "memstreams.h"

#define MAX_FILLER 11
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
 8006810:	b4f0      	push	{r4, r5, r6, r7}
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 8006812:	f100 070b 	add.w	r7, r0, #11
 8006816:	463c      	mov	r4, r7
 8006818:	460d      	mov	r5, r1
  do {
    i = (int)(l % radix);
 800681a:	fbb1 f6f2 	udiv	r6, r1, r2
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    l /= radix;
  } while ((ll /= radix) != 0);
 800681e:	fbb5 f5f2 	udiv	r5, r5, r2
    ll = divisor;
  }

  q = p + MAX_FILLER;
  do {
    i = (int)(l % radix);
 8006822:	fb02 1116 	mls	r1, r2, r6, r1
    i += '0';
 8006826:	f101 0330 	add.w	r3, r1, #48	; 0x30
    if (i > '9')
 800682a:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
 800682c:	bfc8      	it	gt
 800682e:	f101 0337 	addgt.w	r3, r1, #55	; 0x37
    *--q = i;
 8006832:	b2db      	uxtb	r3, r3
 8006834:	f804 3d01 	strb.w	r3, [r4, #-1]!
    l /= radix;
 8006838:	4631      	mov	r1, r6
  } while ((ll /= radix) != 0);
 800683a:	2d00      	cmp	r5, #0
 800683c:	d1ed      	bne.n	800681a <long_to_string_with_divisor.constprop.4+0xa>

  i = (int)(p + MAX_FILLER - q);
 800683e:	1b3a      	subs	r2, r7, r4
 8006840:	4402      	add	r2, r0
 8006842:	e001      	b.n	8006848 <long_to_string_with_divisor.constprop.4+0x38>
 8006844:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  do
    *p++ = *q++;
 8006848:	f800 3b01 	strb.w	r3, [r0], #1
  while (--i);
 800684c:	4290      	cmp	r0, r2
 800684e:	d1f9      	bne.n	8006844 <long_to_string_with_divisor.constprop.4+0x34>

  return p;
}
 8006850:	bcf0      	pop	{r4, r5, r6, r7}
 8006852:	4770      	bx	lr
	...

08006860 <_strtok.constprop.3>:
/**
 * @brief   Shell termination event source.
 */
event_source_t shell_terminated;

static char *_strtok(char *str, const char *delim, char **saveptr) {
 8006860:	b538      	push	{r3, r4, r5, lr}
 8006862:	460d      	mov	r5, r1
  char *token;
  if (str)
 8006864:	4604      	mov	r4, r0
 8006866:	b190      	cbz	r0, 800688e <_strtok.constprop.3+0x2e>
    *saveptr = str;
 8006868:	6028      	str	r0, [r5, #0]
  token = *saveptr;

  if (!token)
    return NULL;

  token += strspn(token, delim);
 800686a:	4620      	mov	r0, r4
 800686c:	490b      	ldr	r1, [pc, #44]	; (800689c <_strtok.constprop.3+0x3c>)
 800686e:	f000 f83f 	bl	80068f0 <strspn>
 8006872:	4404      	add	r4, r0
  *saveptr = strpbrk(token, delim);
 8006874:	4620      	mov	r0, r4
 8006876:	4909      	ldr	r1, [pc, #36]	; (800689c <_strtok.constprop.3+0x3c>)
 8006878:	f000 f812 	bl	80068a0 <strpbrk>
  if (*saveptr)
 800687c:	b160      	cbz	r0, 8006898 <_strtok.constprop.3+0x38>
    *(*saveptr)++ = '\0';
 800687e:	1c42      	adds	r2, r0, #1
 8006880:	2300      	movs	r3, #0
 8006882:	602a      	str	r2, [r5, #0]
 8006884:	7003      	strb	r3, [r0, #0]

  return *token ? token : NULL;
 8006886:	7823      	ldrb	r3, [r4, #0]
 8006888:	b123      	cbz	r3, 8006894 <_strtok.constprop.3+0x34>
 800688a:	4620      	mov	r0, r4
}
 800688c:	bd38      	pop	{r3, r4, r5, pc}

static char *_strtok(char *str, const char *delim, char **saveptr) {
  char *token;
  if (str)
    *saveptr = str;
  token = *saveptr;
 800688e:	680c      	ldr	r4, [r1, #0]

  if (!token)
 8006890:	2c00      	cmp	r4, #0
 8006892:	d1ea      	bne.n	800686a <_strtok.constprop.3+0xa>
    return NULL;
 8006894:	2000      	movs	r0, #0
 8006896:	bd38      	pop	{r3, r4, r5, pc}

  token += strspn(token, delim);
  *saveptr = strpbrk(token, delim);
 8006898:	6028      	str	r0, [r5, #0]
 800689a:	e7f4      	b.n	8006886 <_strtok.constprop.3+0x26>
 800689c:	08007924 	.word	0x08007924

080068a0 <strpbrk>:
 80068a0:	b430      	push	{r4, r5}
 80068a2:	7804      	ldrb	r4, [r0, #0]
 80068a4:	b1ec      	cbz	r4, 80068e2 <strpbrk+0x42>
 80068a6:	780d      	ldrb	r5, [r1, #0]
 80068a8:	b1ad      	cbz	r5, 80068d6 <strpbrk+0x36>
 80068aa:	42ac      	cmp	r4, r5
 80068ac:	d00e      	beq.n	80068cc <strpbrk+0x2c>
 80068ae:	460a      	mov	r2, r1
 80068b0:	e001      	b.n	80068b6 <strpbrk+0x16>
 80068b2:	429c      	cmp	r4, r3
 80068b4:	d009      	beq.n	80068ca <strpbrk+0x2a>
 80068b6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1f9      	bne.n	80068b2 <strpbrk+0x12>
 80068be:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 80068c2:	2c00      	cmp	r4, #0
 80068c4:	d1f0      	bne.n	80068a8 <strpbrk+0x8>
 80068c6:	7815      	ldrb	r5, [r2, #0]
 80068c8:	e000      	b.n	80068cc <strpbrk+0x2c>
 80068ca:	4625      	mov	r5, r4
 80068cc:	2d00      	cmp	r5, #0
 80068ce:	bf08      	it	eq
 80068d0:	2000      	moveq	r0, #0
 80068d2:	bc30      	pop	{r4, r5}
 80068d4:	4770      	bx	lr
 80068d6:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 80068da:	460a      	mov	r2, r1
 80068dc:	2c00      	cmp	r4, #0
 80068de:	d1e3      	bne.n	80068a8 <strpbrk+0x8>
 80068e0:	e7f1      	b.n	80068c6 <strpbrk+0x26>
 80068e2:	4620      	mov	r0, r4
 80068e4:	bc30      	pop	{r4, r5}
 80068e6:	4770      	bx	lr
	...

080068f0 <strspn>:
 80068f0:	b470      	push	{r4, r5, r6}
 80068f2:	7804      	ldrb	r4, [r0, #0]
 80068f4:	b1a4      	cbz	r4, 8006920 <strspn+0x30>
 80068f6:	4605      	mov	r5, r0
 80068f8:	780e      	ldrb	r6, [r1, #0]
 80068fa:	b14e      	cbz	r6, 8006910 <strspn+0x20>
 80068fc:	42b4      	cmp	r4, r6
 80068fe:	d00a      	beq.n	8006916 <strspn+0x26>
 8006900:	460a      	mov	r2, r1
 8006902:	e001      	b.n	8006908 <strspn+0x18>
 8006904:	429c      	cmp	r4, r3
 8006906:	d006      	beq.n	8006916 <strspn+0x26>
 8006908:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800690c:	2b00      	cmp	r3, #0
 800690e:	d1f9      	bne.n	8006904 <strspn+0x14>
 8006910:	1a28      	subs	r0, r5, r0
 8006912:	bc70      	pop	{r4, r5, r6}
 8006914:	4770      	bx	lr
 8006916:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 800691a:	2c00      	cmp	r4, #0
 800691c:	d1ed      	bne.n	80068fa <strspn+0xa>
 800691e:	e7f7      	b.n	8006910 <strspn+0x20>
 8006920:	4620      	mov	r0, r4
 8006922:	e7f6      	b.n	8006912 <strspn+0x22>
	...
 8006930:	00000042 	.word	0x00000042
 8006934:	00000041 	.word	0x00000041
 8006938:	00000043 	.word	0x00000043
 800693c:	44434241 	.word	0x44434241
 8006940:	00000045 	.word	0x00000045
	...

08006950 <ram_areas>:
 8006950:	08007abc 200014bc 200014bc 200014bc     .z..... ... ... 
 8006960:	08007abc 00000000 00000000 00000000     .z..............
 8006970:	08007abc 00000000 00000000 00000000     .z..............
 8006980:	08007abc 00000000 00000000 00000000     .z..............
 8006990:	08007abc 00000000 00000000 00000000     .z..............
 80069a0:	08007abc 00000000 00000000 00000000     .z..............
 80069b0:	08007abc 00000000 00000000 00000000     .z..............
 80069c0:	08007abc 00000000 00000000 00000000     .z..............

080069d0 <cancfg>:
 80069d0:	00000040 0018000b 00000000 00000000     @...............

080069e0 <commands>:
 80069e0:	08006d14 08006331 08006d18 080062c1     .m..1c...m...b..
 80069f0:	08007614 08006261 00000000 00000000     .v..ab..........
 8006a00:	202d2d2d 74737953 203a6d65 00000000     --- System: ....
 8006a10:	74796220 00007365 202d2d2d 65726854      bytes..--- Thre
 8006a20:	203a6461 00000000 202d2d2d 656d6954     ad: ....--- Time
 8006a30:	203a2072 00000000 202d2d2d 616d6553     r : ....--- Sema
 8006a40:	203a6870 00000000 202d2d2d 6e657645     ph: ....--- Even
 8006a50:	203a5374 00000000 202d2d2d 6e657645     tS: ....--- Even
 8006a60:	203a4c74 00000000 202d2d2d 6574754d     tL: ....--- Mute
 8006a70:	203a2078 00000000 202d2d2d 646e6f43     x : ....--- Cond
 8006a80:	203a2e56 00000000 202d2d2d 75657551     V.: ....--- Queu
 8006a90:	203a2065 00000000 202d2d2d 6c69614d     e : ....--- Mail
 8006aa0:	203a2e42 00000000 202d2d2d 726f6353     B.: ....--- Scor
 8006ab0:	203a2065 00000000 636f6c20 6e752b6b     e : .... lock+un
 8006ac0:	6b636f6c 0000532f 69617720 69732b74     lock/S.. wait+si
 8006ad0:	6c616e67 0000532f 656c6469 00000000     gnal/S..idle....
 8006ae0:	6c756e28 0000296c 6c656873 0000006c     (null)..shell...
 8006af0:	68430a0d 4f696269 54522f53 65685320     ..ChibiOS/RT She
 8006b00:	0a0d6c6c 00000000 203e6863 00000000     ll......ch> ....
 8006b10:	0000445e 206f6f74 796e616d 67726120     ^D..too many arg
 8006b20:	6e656d75 0a0d7374 00000000 74697865     uments......exit
 8006b30:	00000000 67617355 25203a65 000a0d73     ....Usage: %s...
 8006b40:	706c6568 00000000 6d6d6f43 73646e61     help....Commands
 8006b50:	6568203a 6520706c 20746978 00000000     : help exit ....
 8006b60:	00207325 00007325 0a0d3f20 00000000     %s .%s.. ?......
 8006b70:	6f6c0a0d 74756f67 00000000 74737973     ..logout....syst
 8006b80:	00656d69 0d756c25 0000000a 6f666e69     ime.%lu.....info
 8006b90:	00000000 6e72654b 203a6c65 20202020     ....Kernel:     
 8006ba0:	73252020 00000a0d 2e312e33 00000033       %s....3.1.3...
 8006bb0:	706d6f43 72656c69 2020203a 73252020     Compiler:     %s
 8006bc0:	00000a0d 20434347 2e392e34 30322033     ....GCC 4.9.3 20
 8006bd0:	35303531 28203932 656c6572 29657361     150529 (release)
 8006be0:	52415b20 6d652f4d 64646562 342d6465      [ARM/embedded-4
 8006bf0:	622d395f 636e6172 65722068 69736976     _9-branch revisi
 8006c00:	32206e6f 37393732 00005d37 68637241     on 227977]..Arch
 8006c10:	63657469 65727574 7325203a 00000a0d     itecture: %s....
 8006c20:	764d5241 004d2d37 65726f43 72615620     ARMv7-M.Core Var
 8006c30:	746e6169 7325203a 00000a0d 74726f43     iant: %s....Cort
 8006c40:	4d2d7865 00000033 74726f50 666e4920     ex-M3...Port Inf
 8006c50:	20203a6f 73252020 00000a0d 61766441     o:    %s....Adva
 8006c60:	6465636e 72656b20 206c656e 65646f6d     nced kernel mode
 8006c70:	00000000 74616c50 6d726f66 2020203a     ....Platform:   
 8006c80:	73252020 00000a0d 334d5453 30314632       %s....STM32F10
 8006c90:	65502078 726f6672 636e616d 694c2065     x Performance Li
 8006ca0:	4d20656e 75696465 6544206d 7469736e     ne Medium Densit
 8006cb0:	00000079 72616f42 20203a64 20202020     y...Board:      
 8006cc0:	73252020 00000a0d 72616843 6f436567       %s....ChargeCo
 8006cd0:	6f72746e 72656c6c 75646f4d 0000656c     ntrollerModule..
 8006ce0:	6c697542 69742064 203a656d 73252020     Build time:   %s
 8006cf0:	73257325 00000a0d 206c754a 32203220     %s%s....Jul  2 2
 8006d00:	00363130 00202d20 333a3331 37313a38     016. - .13:38:17
 8006d10:	00000000 006d656d 65726874 00736461     ....mem.threads.

08006d20 <ch_debug>:
 8006d20:	6e69616d 18431600 08440204 1814100c     main..C...D.....
 8006d30:	1e1d1c00 00000000 00000000 00000000     ................

08006d40 <shCfg>:
 8006d40:	2000120c 080069e0 00000000 00000000     ... .i..........

08006d50 <testmtx4>:
 8006d50:	080075dc 08000431 00000000 08000491     .u..1...........

08006d60 <testmtx5>:
 8006d60:	080075cc 08000421 00000000 08004541     .u..!.......AE..

08006d70 <testmtx6>:
 8006d70:	080075b4 08003b11 00000000 08004461     .u...;......aD..

08006d80 <testmtx7>:
 8006d80:	0800759c 08003af1 00000000 08004371     .u...:......qC..

08006d90 <testmtx8>:
 8006d90:	08007588 08003ac1 00000000 080041c1     .u...:.......A..

08006da0 <patternmsg>:
 8006da0:	08007000 00000000 00000000 00000000     .p..............

08006db0 <testbmk11>:
 8006db0:	080072a8 080050a1 00000000 08002161     .r...P......a!..

08006dc0 <testbmk13>:
 8006dc0:	0800726c 00000000 00000000 08002001     lr........... ..

08006dd0 <testevt2>:
 8006dd0:	08007518 08005dd1 00000000 08005df1     .u...].......]..

08006de0 <patterndyn>:
 8006de0:	08006fb0 08006fc0 08006fd0 00000000     .o...o...o......

08006df0 <testsys1>:
 8006df0:	08007720 00000000 00000000 08005901      w...........Y..

08006e00 <testsem1>:
 8006e00:	08007674 08000481 00000000 08000d11     tv..............

08006e10 <testsem2>:
 8006e10:	08007660 08000471 00000000 08000b91     `v..q...........

08006e20 <testsem3>:
 8006e20:	08007640 08000461 00000000 08000ae1     @v..a...........

08006e30 <testsem4>:
 8006e30:	0800761c 00000000 00000000 08000981     .v..............

08006e40 <testsys2>:
 8006e40:	08007704 00000000 00000000 080050d1     .w...........P..

08006e50 <testsys3>:
 8006e50:	080076f0 00000000 00000000 08005871     .v..........qX..

08006e60 <testbmk10>:
 8006e60:	080072cc 00000000 00000000 080050f1     .r...........P..

08006e70 <testbmk7>:
 8006e70:	08007340 080050c1 00000000 080053d1     @s...P.......S..

08006e80 <testbmk12>:
 8006e80:	08007288 08001ff1 00000000 080020f1     .r........... ..

08006e90 <testbmk8>:
 8006e90:	08007314 00000000 00000000 08005221     .s..........!R..

08006ea0 <testbmk1>:
 8006ea0:	080073f4 00000000 00000000 08005801     .s...........X..

08006eb0 <testbmk2>:
 8006eb0:	080073dc 00000000 00000000 08005791     .s...........W..

08006ec0 <testbmk3>:
 8006ec0:	080073c4 00000000 00000000 080056b1     .s...........V..

08006ed0 <testbmk4>:
 8006ed0:	080073a8 00000000 00000000 08005571     .s..........qU..

08006ee0 <testbmk5>:
 8006ee0:	08007388 00000000 00000000 08005501     .s...........U..

08006ef0 <testbmk6>:
 8006ef0:	08007368 00000000 00000000 08005301     hs...........S..

08006f00 <patternsys>:
 8006f00:	08006df0 08006e40 08006e50 00000000     .m..@n..Pn......

08006f10 <testpools1>:
 8006f10:	080074c0 08004741 00000000 08004ba1     .t..AG.......K..

08006f20 <testbmk9>:
 8006f20:	080072f0 00000000 00000000 08005171     .r..........qQ..

08006f30 <patternbmk>:
 8006f30:	08006ea0 08006eb0 08006ec0 08006ed0     .n...n...n...n..
 8006f40:	08006ee0 08006ef0 08006e70 08006e90     .n...n..pn...n..
 8006f50:	08006f20 08006e60 08006db0 08006e80      o..`n...m...n..
 8006f60:	08006dc0 00000000 00000000 00000000     .m..............

08006f70 <patterns>:
 8006f70:	08006f00 08007010 080070a0 08007110     .o...p...p...q..
 8006f80:	08006da0 08007050 080070d0 08006ff0     .m..Pp...p...o..
 8006f90:	08007750 08006de0 080070c0 08006f30     Pw...m...p..0o..
	...

08006fb0 <testdyn1>:
 8006fb0:	08007494 08004701 00000000 08004d61     .t...G......aM..

08006fc0 <testdyn2>:
 8006fc0:	08007464 080046e1 00000000 08004c71     dt...F......qL..

08006fd0 <testdyn3>:
 8006fd0:	0800743c 080046b1 00000000 08004a61     <t...F......aJ..

08006fe0 <testmbox1>:
 8006fe0:	08007558 08003a81 00000000 08003b31     Xu...:......1;..

08006ff0 <patternheap>:
 8006ff0:	080070f0 00000000 00000000 00000000     .p..............

08007000 <testmsg1>:
 8007000:	08007578 00000000 00000000 08004121     xu..........!A..

08007010 <patternthd>:
 8007010:	08007060 08007070 08007080 08007090     `p..pp...p...p..
	...

08007030 <testqueues1>:
 8007030:	08007424 08004681 00000000 080047b1     $t...F.......G..

08007040 <testqueues2>:
 8007040:	0800740c 08004651 00000000 08005a01     .t..QF.......Z..

08007050 <patternmbox>:
 8007050:	08006fe0 00000000 00000000 00000000     .o..............

08007060 <testthd1>:
 8007060:	080076d4 00000000 00000000 08000811     .v..............

08007070 <testthd2>:
 8007070:	080076b8 00000000 00000000 08000e81     .v..............

08007080 <testthd3>:
 8007080:	0800769c 00000000 00000000 080010a1     .v..............

08007090 <testthd4>:
 8007090:	0800768c 00000000 00000000 08000fd1     .v..............

080070a0 <patternsem>:
 80070a0:	08006e00 08006e10 08006e20 08006e30     .n...n.. n..0n..
	...

080070c0 <patternqueues>:
 80070c0:	08007030 08007040 00000000 00000000     0p..@p..........

080070d0 <patternevt>:
 80070d0:	080070e0 08006dd0 08007100 00000000     .p...m...q......

080070e0 <testevt1>:
 80070e0:	08007534 08005de1 00000000 08006151     4u...]......Qa..

080070f0 <testheap1>:
 80070f0:	080074dc 08004761 00000000 08004e61     .t..aG......aN..

08007100 <testevt3>:
 8007100:	08007504 08005dc1 00000000 08005c61     .u...]......a\..

08007110 <patternmtx>:
 8007110:	08007740 08006d50 08006d60 08006d70     @w..Pm..`m..pm..
 8007120:	08006d80 08006d90 00000000 00000000     .m...m..........
 8007130:	202a2a2a 6e72654b 203a6c65 20202020     *** Kernel:     
 8007140:	00002020 202a2a2a 706d6f43 64656c69       ..*** Compiled
 8007150:	2020203a 00002020 202a2a2a 706d6f43     :     ..*** Comp
 8007160:	72656c69 2020203a 00002020 202a2a2a     iler:     ..*** 
 8007170:	68637241 63657469 65727574 0000203a     Architecture: ..
 8007180:	202a2a2a 65726f43 72615620 746e6169     *** Core Variant
 8007190:	0000203a 202a2a2a 74726f50 666e4920     : ..*** Port Inf
 80071a0:	20203a6f 00002020 202a2a2a 74616c50     o:    ..*** Plat
 80071b0:	6d726f66 2020203a 00002020 202a2a2a     form:     ..*** 
 80071c0:	74736554 616f4220 203a6472 00002020     Test Board:   ..
 80071d0:	202d2d2d 74736554 73614320 00002065     --- Test Case ..
 80071e0:	00002820 202d2d2d 75736552 203a746c      (..--- Result: 
 80071f0:	4c494146 20455255 00002328 00005b20     FAILURE (#.. [..
 8007200:	616e6946 6572206c 746c7573 0000203a     Final result: ..
 8007210:	202a2a2a 62696843 2f534f69 74205452     *** ChibiOS/RT t
 8007220:	20747365 74697573 00000065 002a2a2a     est suite...***.
 8007230:	00000029 0000295d 202d2d2d 75736552     )...])..--- Resu
 8007240:	203a746c 43435553 00535345 4c494146     lt: SUCCESS.FAIL
 8007250:	00455255 206c754a 32203220 20363130     URE.Jul  2 2016 
 8007260:	3331202d 3a38333a 00003531 636e6542     - 13:38:15..Benc
 8007270:	72616d68 52202c6b 66204d41 70746f6f     hmark, RAM footp
 8007280:	746e6972 00000000 636e6542 72616d68     rint....Benchmar
 8007290:	6d202c6b 78657475 6c207365 2f6b636f     k, mutexes lock/
 80072a0:	6f6c6e75 00006b63 636e6542 72616d68     unlock..Benchmar
 80072b0:	73202c6b 70616d65 65726f68 61772073     k, semaphores wa
 80072c0:	732f7469 616e6769 0000006c 636e6542     it/signal...Benc
 80072d0:	72616d68 76202c6b 75747269 74206c61     hmark, virtual t
 80072e0:	72656d69 65732073 65722f74 00746573     imers set/reset.
 80072f0:	636e6542 72616d68 49202c6b 51204f2f     Benchmark, I/O Q
 8007300:	65756575 68742073 67756f72 74757068     ueues throughput
 8007310:	00000000 636e6542 72616d68 72202c6b     ....Benchmark, r
 8007320:	646e756f 626f7220 63206e69 65746e6f     ound robin conte
 8007330:	73207478 63746977 676e6968 00000000     xt switching....
 8007340:	636e6542 72616d68 6d202c6b 20737361     Benchmark, mass 
 8007350:	63736572 75646568 202c656c 68742035     reschedule, 5 th
 8007360:	64616572 00000073 636e6542 72616d68     reads...Benchmar
 8007370:	74202c6b 61657268 202c7364 61657263     k, threads, crea
 8007380:	6f206574 00796c6e 636e6542 72616d68     te only.Benchmar
 8007390:	74202c6b 61657268 202c7364 6c6c7566     k, threads, full
 80073a0:	63796320 0000656c 636e6542 72616d68      cycle..Benchmar
 80073b0:	63202c6b 65746e6f 73207478 63746977     k, context switc
 80073c0:	00000068 636e6542 72616d68 6d202c6b     h...Benchmark, m
 80073d0:	61737365 20736567 00003323 636e6542     essages #3..Benc
 80073e0:	72616d68 6d202c6b 61737365 20736567     hmark, messages 
 80073f0:	00003223 636e6542 72616d68 6d202c6b     #2..Benchmark, m
 8007400:	61737365 20736567 00003123 75657551     essages #1..Queu
 8007410:	202c7365 7074756f 71207475 65756575     es, output queue
 8007420:	00000073 75657551 202c7365 75706e69     s...Queues, inpu
 8007430:	75712074 73657565 00000000 616e7944     t queues....Dyna
 8007440:	2063696d 73495041 6572202c 74736967     mic APIs, regist
 8007450:	61207972 7220646e 72656665 65636e65     ry and reference
 8007460:	00000073 616e7944 2063696d 73495041     s...Dynamic APIs
 8007470:	6874202c 64616572 72632073 69746165     , threads creati
 8007480:	66206e6f 206d6f72 6f6d656d 70207972     on from memory p
 8007490:	006c6f6f 616e7944 2063696d 73495041     ool.Dynamic APIs
 80074a0:	6874202c 64616572 72632073 69746165     , threads creati
 80074b0:	66206e6f 206d6f72 70616568 00000000     on from heap....
 80074c0:	6f6d654d 50207972 736c6f6f 7571202c     Memory Pools, qu
 80074d0:	2f657565 75716564 00657565 70616548     eue/dequeue.Heap
 80074e0:	6c61202c 61636f6c 6e6f6974 646e6120     , allocation and
 80074f0:	61726620 6e656d67 69746174 74206e6f      fragmentation t
 8007500:	00747365 6e657645 202c7374 656d6974     est.Events, time
 8007510:	7374756f 00000000 6e657645 202c7374     outs....Events, 
 8007520:	74696177 646e6120 6f726220 61636461     wait and broadca
 8007530:	00007473 6e657645 202c7374 69676572     st..Events, regi
 8007540:	61727473 6e6f6974 646e6120 73696420     stration and dis
 8007550:	63746170 00000068 6c69614d 65786f62     patch...Mailboxe
 8007560:	71202c73 69756575 6120676e 7420646e     s, queuing and t
 8007570:	6f656d69 00737475 7373654d 73656761     imeouts.Messages
 8007580:	6f6c202c 0000706f 646e6f43 2c726156     , loop..CondVar,
 8007590:	6f6f6220 74207473 00747365 646e6f43      boost test.Cond
 80075a0:	2c726156 6f726220 61636461 74207473     Var, broadcast t
 80075b0:	00747365 646e6f43 2c726156 67697320     est.CondVar, sig
 80075c0:	206c616e 74736574 00000000 6574754d     nal test....Mute
 80075d0:	2c736578 61747320 00737574 6574754d     xes, status.Mute
 80075e0:	2c736578 69727020 7469726f 65722079     xes, priority re
 80075f0:	6e727574 00000000 6574754d 2c736578     turn....Mutexes,
 8007600:	69727020 7469726f 6e652079 75657571      priority enqueu
 8007610:	20676e69 74736574 00000000 616e6942     ing test....Bina
 8007620:	53207972 70616d65 65726f68 66202c73     ry Semaphores, f
 8007630:	74636e75 616e6f69 7974696c 00000000     unctionality....
 8007640:	616d6553 726f6870 202c7365 6d6f7461     Semaphores, atom
 8007650:	73206369 616e6769 61772d6c 00007469     ic signal-wait..
 8007660:	616d6553 726f6870 202c7365 656d6974     Semaphores, time
 8007670:	0074756f 616d6553 726f6870 202c7365     out.Semaphores, 
 8007680:	75716e65 6e697565 00000067 65726854     enqueuing...Thre
 8007690:	2c736461 6c656420 00737961 65726854     ads, delays.Thre
 80076a0:	2c736461 69727020 7469726f 68632079     ads, priority ch
 80076b0:	65676e61 00000000 65726854 2c736461     ange....Threads,
 80076c0:	716e6520 69756575 7420676e 20747365      enqueuing test 
 80076d0:	00003223 65726854 2c736461 716e6520     #2..Threads, enq
 80076e0:	69756575 7420676e 20747365 00003123     ueuing test #1..
 80076f0:	74737953 202c6d65 65746e69 74697267     System, integrit
 8007700:	00000079 74737953 202c6d65 65746e69     y...System, inte
 8007710:	70757272 68207374 6c646e61 00676e69     rrupts handling.
 8007720:	74737953 202c6d65 74697263 6c616369     System, critical
 8007730:	6e6f7a20 00007365 00000000 00000000      zones..........

08007740 <testmtx1>:
 8007740:	080075f8 08000451 00000000 08000721     .u..Q.......!...

08007750 <patternpools>:
 8007750:	08006f10 00000000 00000000 00000000     .o..............
 8007760:	00434241 00000000 00000000 00000000     ABC.............
 8007770:	44434241 00000000 00004241 00000000     ABCD....AB......

08007780 <wa>:
 8007780:	20000a30 20000b78 20000cc0 20000e08     0.. x.. ... ... 
 8007790:	20000f50 00000000 00000000 00000000     P.. ............
 80077a0:	6d697420 2f737265 00000053 74796220      timers/S... byt
 80077b0:	532f7365 00000000 78746320 2f637773     es/S.... ctxswc/
 80077c0:	00000053 72687420 73646165 0000532f     S... threads/S..
 80077d0:	73657220 64656863 73656c75 202c532f      reschedules/S, 
 80077e0:	00000000 67736d20 2c532f73 00000020     .... msgs/S, ...

080077f0 <evhndl>:
 80077f0:	08006251 08006241 08006231 00000000     Qb..Ab..1b......

08007800 <states.7552>:
 8007800:	08007928 08007930 08007938 08007940     (y..0y..8y..@y..
 8007810:	0800794c 08007954 0800795c 08007964     Ly..Ty..\y..dy..
 8007820:	0800796c 08007978 08007980 08007988     ly..xy...y...y..
 8007830:	08007994 0800799c 080079a4 080079ac     .y...y...y...y..
 8007840:	67617355 74203a65 0d747365 0000000a     Usage: test.....
 8007850:	2074756f 6d20666f 726f6d65 000a0d79     out of memory...
 8007860:	67617355 74203a65 61657268 0a0d7364     Usage: threads..
 8007870:	00000000 20202020 72646461 20202020     ....    addr    
 8007880:	63617473 7270206b 72206f69 20736665     stack prio refs 
 8007890:	20202020 74617473 000a0d65 6c383025         state...%08l
 80078a0:	30252078 20786c38 756c3425 6c342520     x %08lx %4lu %4l
 80078b0:	39252075 6c252073 000a0d75 67617355     u %9s %lu...Usag
 80078c0:	6d203a65 0a0d6d65 00000000 65726f63     e: mem......core
 80078d0:	65726620 656d2065 79726f6d 25203a20      free memory : %
 80078e0:	79622075 0d736574 0000000a 70616568     u bytes.....heap
 80078f0:	61726620 6e656d67 20207374 25203a20      fragments   : %
 8007900:	000a0d75 70616568 65726620 6f742065     u...heap free to
 8007910:	206c6174 25203a20 79622075 0d736574     tal  : %u bytes.
 8007920:	0000000a 00000920 44414552 00000059     .... ...READY...
 8007930:	52525543 00544e45 54535457 00545241     CURRENT.WTSTART.
 8007940:	50535553 45444e45 00000044 55455551     SUSPENDED...QUEU
 8007950:	00004445 45535457 0000004d 544d5457     ED..WTSEM...WTMT
 8007960:	00000058 4f435457 0000444e 45454c53     X...WTCOND..SLEE
 8007970:	474e4950 00000000 58455457 00005449     PING....WTEXIT..
 8007980:	524f5457 00545645 4e415457 54564544     WTOREVT.WTANDEVT
 8007990:	00000000 4d444e53 00514753 4d444e53     ....SNDMSGQ.SNDM
 80079a0:	00004753 534d5457 00000047 414e4946     SG..WTMSG...FINA
 80079b0:	0000004c 00000000 00000000 00000000     L...............

080079c0 <vmt>:
 80079c0:	080038d1 08003051 08003091 08003071     .8..Q0...0..q0..
 80079d0:	08003081 08003061 080038c1 08003041     .0..a0...8..A0..
